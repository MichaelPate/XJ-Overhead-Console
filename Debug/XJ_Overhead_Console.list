
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005780  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059b0  080059b0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059b0  080059b0  000069b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059b4  080059b4  000069b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  20000068  08005a20  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08005a20  00007430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001105c  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edb  00000000  00000000  000180f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  0001bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f19  00000000  00000000  0001cace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016212  00000000  00000000  000369e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf1e  00000000  00000000  0004cbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9b17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000455c  00000000  00000000  000e9b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ee0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005908 	.word	0x08005908

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005908 	.word	0x08005908

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 feb5 	bl	8001340 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa88 	bl	8000af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fee9 	bl	80013c8 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa78 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 fdc5 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 fdb9 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f001 f95d 	bl	80019ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f001 f976 	bl	80019f2 <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a51      	ldr	r2, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b4f      	ldr	r3, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x164>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x164>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a4a      	ldr	r2, [pc, #296]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <MX_GPIO_Init+0x164>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a3c      	ldr	r2, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a35      	ldr	r2, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80007bc:	482f      	ldr	r0, [pc, #188]	@ (800087c <MX_GPIO_Init+0x168>)
 80007be:	f001 feb9 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2110      	movs	r1, #16
 80007c6:	482e      	ldr	r0, [pc, #184]	@ (8000880 <MX_GPIO_Init+0x16c>)
 80007c8:	f001 feb4 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x170>)
 80007e4:	f001 fd22 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007e8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	481e      	ldr	r0, [pc, #120]	@ (800087c <MX_GPIO_Init+0x168>)
 8000802:	f001 fd13 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <MX_GPIO_Init+0x168>)
 800081c:	f001 fd06 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000820:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4813      	ldr	r0, [pc, #76]	@ (8000884 <MX_GPIO_Init+0x170>)
 8000836:	f001 fcf9 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_GPIO_Init+0x174>)
 800084e:	f001 fced 	bl	800222c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_GPIO_Init+0x16c>)
 800086a:	f001 fcdf 	bl	800222c <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_I2C1_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000898:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x58>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008ca:	f001 fe4d 	bl	8002568 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 f90c 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40005400 	.word	0x40005400
 80008e4:	000186a0 	.word	0x000186a0

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	@ (800096c <HAL_I2C_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23c0      	movs	r3, #192	@ 0xc0
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000936:	2304      	movs	r3, #4
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_I2C_MspInit+0x8c>)
 8000942:	f001 fc73 	bl	800222c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40005400 	.word	0x40005400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000980:	1d39      	adds	r1, r7, #4
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	2201      	movs	r2, #1
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <__io_putchar+0x20>)
 800098a:	f002 fe96 	bl	80036ba <HAL_UART_Transmit>
  return ch;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001f0 	.word	0x200001f0

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	@ 0x38
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fc5b 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f823 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff feb3 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ae:	f7ff fe91 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009b2:	f000 fae7 	bl	8000f84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009b6:	f7ff fddb 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009ba:	f7ff ff67 	bl	800088c <MX_I2C1_Init>
  MX_RTC_Init();
 80009be:	f000 f8a3 	bl	8000b08 <MX_RTC_Init>
  MX_SPI2_Init();
 80009c2:	f000 f8f3 	bl	8000bac <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009c6:	f000 fab3 	bl	8000f30 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ca:	f000 fb05 	bl	8000fd8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Here is we will test RX through DMA and just cut off the rest of the code for now

  printf("Put something in the terminal.\r\n");
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <main+0x48>)
 80009d0:	f004 f936 	bl	8004c40 <puts>

  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
 80009d4:	220c      	movs	r2, #12
 80009d6:	4904      	ldr	r1, [pc, #16]	@ (80009e8 <main+0x4c>)
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <main+0x50>)
 80009da:	f002 fef9 	bl	80037d0 <HAL_UART_Receive_DMA>

  while (1);
 80009de:	bf00      	nop
 80009e0:	e7fd      	b.n	80009de <main+0x42>
 80009e2:	bf00      	nop
 80009e4:	08005920 	.word	0x08005920
 80009e8:	20000120 	.word	0x20000120
 80009ec:	200001f0 	.word	0x200001f0

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	@ 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f004 f9fe 	bl	8004e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <SystemClock_Config+0xd4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a29      	ldr	r2, [pc, #164]	@ (8000ac4 <SystemClock_Config+0xd4>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <SystemClock_Config+0xd4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <SystemClock_Config+0xd8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a3c:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <SystemClock_Config+0xd8>)
 8000a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <SystemClock_Config+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a50:	230a      	movs	r3, #10
 8000a52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2310      	movs	r3, #16
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a60:	2302      	movs	r3, #2
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a76:	2307      	movs	r3, #7
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 feb6 	bl	80027f0 <HAL_RCC_OscConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a8a:	f000 f831 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 f918 	bl	8002ce0 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ab6:	f000 f81b 	bl	8000af0 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3750      	adds	r7, #80	@ 0x50
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	// this function from https://deepbluembedded.com/how-to-receive-uart-serial-data-with-stm32-dma-interrupt-polling/
	//printf("Im calling back.\r\n");
	// this is where the incoming data could be moved instead of just echoing
	// TODO: an experiment would be to, in main(), print out the contents of rxbuffer every second, remove this transmit, and see what happens to that buffer as data is added.
    HAL_UART_Transmit(&huart2, UART2_rxBuffer, RXBUFSIZE, 100);
 8000ad4:	2364      	movs	r3, #100	@ 0x64
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	4903      	ldr	r1, [pc, #12]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x1c>)
 8000ada:	4804      	ldr	r0, [pc, #16]	@ (8000aec <HAL_UART_RxCpltCallback+0x20>)
 8000adc:	f002 fded 	bl	80036ba <HAL_UART_Transmit>

    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000120 	.word	0x20000120
 8000aec:	200001f0 	.word	0x200001f0

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <Error_Handler+0x14>)
 8000afa:	f004 f839 	bl	8004b70 <iprintf>
	  while (1);
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <Error_Handler+0xe>
 8000b02:	bf00      	nop
 8000b04:	08005940 	.word	0x08005940

08000b08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <MX_RTC_Init+0x48>)
 8000b10:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b1a:	227f      	movs	r2, #127	@ 0x7f
 8000b1c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b20:	22ff      	movs	r2, #255	@ 0xff
 8000b22:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_RTC_Init+0x44>)
 8000b38:	f002 fbe0 	bl	80032fc <HAL_RTC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b42:	f7ff ffd5 	bl	8000af0 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000012c 	.word	0x2000012c
 8000b50:	40002800 	.word	0x40002800

08000b54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba4 <HAL_RTC_MspInit+0x50>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d111      	bne.n	8000b9a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b76:	2302      	movs	r3, #2
 8000b78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b7e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 facb 	bl	8003120 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b90:	f7ff ffae 	bl	8000af0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <HAL_RTC_MspInit+0x54>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40002800 	.word	0x40002800
 8000ba8:	42470e3c 	.word	0x42470e3c

08000bac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bb2:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <MX_SPI2_Init+0x6c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bc0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bc4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_SPI2_Init+0x68>)
 8000c00:	f002 fc82 	bl	8003508 <HAL_SPI_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000c0a:	f7ff ff71 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000014c 	.word	0x2000014c
 8000c18:	40003800 	.word	0x40003800

08000c1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a28      	ldr	r2, [pc, #160]	@ (8000cdc <HAL_SPI_MspInit+0xc0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d14a      	bne.n	8000cd4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a26      	ldr	r2, [pc, #152]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_SPI_MspInit+0xc4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c92:	2308      	movs	r3, #8
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <HAL_SPI_MspInit+0xc8>)
 8000cae:	f001 fabd 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc4:	2305      	movs	r3, #5
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	@ (8000ce8 <HAL_SPI_MspInit+0xcc>)
 8000cd0:	f001 faac 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	@ 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40003800 	.word	0x40003800
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020400 	.word	0x40020400

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f000 fe3a 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 fab5 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <DMA1_Stream5_IRQHandler+0x10>)
 8000da2:	f000 ffd9 	bl	8001d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000280 	.word	0x20000280

08000db0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <USART2_IRQHandler+0x10>)
 8000db6:	f002 fd31 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001f0 	.word	0x200001f0

08000dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	60f8      	str	r0, [r7, #12]
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e009      	b.n	8000e24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fdad 	bl	8000978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dbf1      	blt.n	8000e10 <_write+0x12>
  }
  return len;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_close>:

int _close(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
 8000e56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <_isatty>:

int _isatty(int file)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f003 ffe4 	bl	8004e9c <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20018000 	.word	0x20018000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	200001a4 	.word	0x200001a4
 8000f08:	20000430 	.word	0x20000430

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_USART1_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f68:	f002 fb57 	bl	800361a <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f7ff fdbd 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001a8 	.word	0x200001a8
 8000f80:	40011000 	.word	0x40011000

08000f84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <MX_USART2_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	f002 fb2d 	bl	800361a <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f7ff fd93 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200001f0 	.word	0x200001f0
 8000fd4:	40004400 	.word	0x40004400

08000fd8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	@ (8001028 <MX_USART6_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_USART6_UART_Init+0x4c>)
 8001010:	f002 fb03 	bl	800361a <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f7ff fd69 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000238 	.word	0x20000238
 8001028:	40011400 	.word	0x40011400

0800102c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	@ 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a67      	ldr	r2, [pc, #412]	@ (80011e8 <HAL_UART_MspInit+0x1bc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12d      	bne.n	80010aa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
 8001052:	4b66      	ldr	r3, [pc, #408]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a65      	ldr	r2, [pc, #404]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001058:	f043 0310 	orr.w	r3, r3, #16
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b63      	ldr	r3, [pc, #396]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f003 0310 	and.w	r3, r3, #16
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
 800106e:	4b5f      	ldr	r3, [pc, #380]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a5e      	ldr	r2, [pc, #376]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b5c      	ldr	r3, [pc, #368]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001086:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001098:	2307      	movs	r3, #7
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4853      	ldr	r0, [pc, #332]	@ (80011f0 <HAL_UART_MspInit+0x1c4>)
 80010a4:	f001 f8c2 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010a8:	e099      	b.n	80011de <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a51      	ldr	r2, [pc, #324]	@ (80011f4 <HAL_UART_MspInit+0x1c8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d163      	bne.n	800117c <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	4b4c      	ldr	r3, [pc, #304]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c4:	4b49      	ldr	r3, [pc, #292]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	4b45      	ldr	r3, [pc, #276]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d8:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e0:	4b42      	ldr	r3, [pc, #264]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010ec:	230c      	movs	r3, #12
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fc:	2307      	movs	r3, #7
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	483a      	ldr	r0, [pc, #232]	@ (80011f0 <HAL_UART_MspInit+0x1c4>)
 8001108:	f001 f890 	bl	800222c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800110c:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 800110e:	4a3b      	ldr	r2, [pc, #236]	@ (80011fc <HAL_UART_MspInit+0x1d0>)
 8001110:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001112:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001114:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001118:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111a:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001120:	4b35      	ldr	r3, [pc, #212]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001128:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112e:	4b32      	ldr	r3, [pc, #200]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800113a:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 800113c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001140:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800114e:	482a      	ldr	r0, [pc, #168]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001150:	f000 fc6a 	bl	8001a28 <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800115a:	f7ff fcc9 	bl	8000af0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001162:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001164:	4a24      	ldr	r2, [pc, #144]	@ (80011f8 <HAL_UART_MspInit+0x1cc>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2026      	movs	r0, #38	@ 0x26
 8001170:	f000 fc23 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001174:	2026      	movs	r0, #38	@ 0x26
 8001176:	f000 fc3c 	bl	80019f2 <HAL_NVIC_EnableIRQ>
}
 800117a:	e030      	b.n	80011de <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a1f      	ldr	r2, [pc, #124]	@ (8001200 <HAL_UART_MspInit+0x1d4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d12b      	bne.n	80011de <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	6453      	str	r3, [r2, #68]	@ 0x44
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f003 0320 	and.w	r3, r3, #32
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_UART_MspInit+0x1c0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011be:	23c0      	movs	r3, #192	@ 0xc0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011ce:	2308      	movs	r3, #8
 80011d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	480a      	ldr	r0, [pc, #40]	@ (8001204 <HAL_UART_MspInit+0x1d8>)
 80011da:	f001 f827 	bl	800222c <HAL_GPIO_Init>
}
 80011de:	bf00      	nop
 80011e0:	3738      	adds	r7, #56	@ 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40011000 	.word	0x40011000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40004400 	.word	0x40004400
 80011f8:	20000280 	.word	0x20000280
 80011fc:	40026088 	.word	0x40026088
 8001200:	40011400 	.word	0x40011400
 8001204:	40020800 	.word	0x40020800

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800120c:	f7ff fe7e 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 fe37 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fbaf 	bl	800099c <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800124c:	080059b8 	.word	0x080059b8
  ldr r2, =_sbss
 8001250:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001254:	20000430 	.word	0x20000430

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	@ (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fb8d 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fd2c 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fba5 	bl	8001a0e <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 fb6d 	bl	80019ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200002e0 	.word	0x200002e0

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200002e0 	.word	0x200002e0

08001340 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e033      	b.n	80013be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f958 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d118      	bne.n	80013b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001386:	f023 0302 	bic.w	r3, r3, #2
 800138a:	f043 0202 	orr.w	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f93a 	bl	800160c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f023 0303 	bic.w	r3, r3, #3
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ae:	e001      	b.n	80013b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1c>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e105      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x228>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b09      	cmp	r3, #9
 80013f2:	d925      	bls.n	8001440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68d9      	ldr	r1, [r3, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	3b1e      	subs	r3, #30
 800140a:	2207      	movs	r2, #7
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43da      	mvns	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	400a      	ands	r2, r1
 8001418:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68d9      	ldr	r1, [r3, #12]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4618      	mov	r0, r3
 800142c:	4603      	mov	r3, r0
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4403      	add	r3, r0
 8001432:	3b1e      	subs	r3, #30
 8001434:	409a      	lsls	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	e022      	b.n	8001486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	2207      	movs	r2, #7
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6919      	ldr	r1, [r3, #16]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4403      	add	r3, r0
 800147c:	409a      	lsls	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d824      	bhi.n	80014d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b05      	subs	r3, #5
 80014a0:	221f      	movs	r2, #31
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	400a      	ands	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	3b05      	subs	r3, #5
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d6:	e04c      	b.n	8001572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d824      	bhi.n	800152a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	3b23      	subs	r3, #35	@ 0x23
 80014f2:	221f      	movs	r2, #31
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43da      	mvns	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	400a      	ands	r2, r1
 8001500:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b23      	subs	r3, #35	@ 0x23
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	631a      	str	r2, [r3, #48]	@ 0x30
 8001528:	e023      	b.n	8001572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b41      	subs	r3, #65	@ 0x41
 800153c:	221f      	movs	r2, #31
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43da      	mvns	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	400a      	ands	r2, r1
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	3b41      	subs	r3, #65	@ 0x41
 8001566:	fa00 f203 	lsl.w	r2, r0, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001572:	4b22      	ldr	r3, [pc, #136]	@ (80015fc <HAL_ADC_ConfigChannel+0x234>)
 8001574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <HAL_ADC_ConfigChannel+0x238>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d109      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1cc>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b12      	cmp	r3, #18
 8001586:	d105      	bne.n	8001594 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <HAL_ADC_ConfigChannel+0x238>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d123      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x1e6>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d11b      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d111      	bne.n	80015e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_ADC_ConfigChannel+0x23c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a10      	ldr	r2, [pc, #64]	@ (8001608 <HAL_ADC_ConfigChannel+0x240>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	0c9a      	lsrs	r2, r3, #18
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d8:	e002      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f9      	bne.n	80015da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40012300 	.word	0x40012300
 8001600:	40012000 	.word	0x40012000
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001614:	4b79      	ldr	r3, [pc, #484]	@ (80017fc <ADC_Init+0x1f0>)
 8001616:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	431a      	orrs	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	021a      	lsls	r2, r3, #8
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6899      	ldr	r1, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	4a58      	ldr	r2, [pc, #352]	@ (8001800 <ADC_Init+0x1f4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d022      	beq.n	80016ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	e00f      	b.n	800170a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0202 	bic.w	r2, r2, #2
 8001718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6899      	ldr	r1, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e1b      	ldrb	r3, [r3, #24]
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d01b      	beq.n	8001770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001746:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6859      	ldr	r1, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	3b01      	subs	r3, #1
 8001764:	035a      	lsls	r2, r3, #13
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	e007      	b.n	8001780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800177e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800178e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	3b01      	subs	r3, #1
 800179c:	051a      	lsls	r2, r3, #20
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6899      	ldr	r1, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017c2:	025a      	lsls	r2, r3, #9
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6899      	ldr	r1, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012300 	.word	0x40012300
 8001800:	0f000001 	.word	0x0f000001

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	@ (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	@ (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	@ 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	@ 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019cc:	f7ff ff3e 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff ff8e 	bl	80018f8 <NVIC_EncodePriority>
 80019dc:	4602      	mov	r2, r0
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff5d 	bl	80018a4 <__NVIC_SetPriority>
}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff31 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffa2 	bl	8001960 <SysTick_Config>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff fc78 	bl	8001328 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e099      	b.n	8001b78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a64:	e00f      	b.n	8001a86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a66:	f7ff fc5f 	bl	8001328 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d908      	bls.n	8001a86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2220      	movs	r2, #32
 8001a78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e078      	b.n	8001b78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e8      	bne.n	8001a66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_DMA_Init+0x158>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d117      	bne.n	8001b4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00e      	beq.n	8001b4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fb01 	bl	8002134 <DMA_CheckFifoParam>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2240      	movs	r2, #64	@ 0x40
 8001b3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b46:	2301      	movs	r3, #1
 8001b48:	e016      	b.n	8001b78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fab8 	bl	80020c8 <DMA_CalcBaseAndBitshift>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b60:	223f      	movs	r2, #63	@ 0x3f
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	f010803f 	.word	0xf010803f

08001b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Start_IT+0x26>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e040      	b.n	8001c2c <HAL_DMA_Start_IT+0xa8>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d12f      	bne.n	8001c1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f000 fa4a 	bl	800206c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bdc:	223f      	movs	r2, #63	@ 0x3f
 8001bde:	409a      	lsls	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0216 	orr.w	r2, r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0208 	orr.w	r2, r2, #8
 8001c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f042 0201 	orr.w	r2, r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	e005      	b.n	8001c2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c42:	f7ff fb71 	bl	8001328 <HAL_GetTick>
 8001c46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e052      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0216 	bic.w	r2, r2, #22
 8001c74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d103      	bne.n	8001c96 <HAL_DMA_Abort+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0208 	bic.w	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb6:	e013      	b.n	8001ce0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb8:	f7ff fb36 	bl	8001328 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d90c      	bls.n	8001ce0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e015      	b.n	8001d0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e4      	bne.n	8001cb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	223f      	movs	r2, #63	@ 0x3f
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00c      	b.n	8001d4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2205      	movs	r2, #5
 8001d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d64:	4b8e      	ldr	r3, [pc, #568]	@ (8001fa0 <HAL_DMA_IRQHandler+0x248>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a8e      	ldr	r2, [pc, #568]	@ (8001fa4 <HAL_DMA_IRQHandler+0x24c>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	2208      	movs	r2, #8
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 0204 	bic.w	r2, r2, #4
 8001daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db0:	2208      	movs	r2, #8
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00b      	beq.n	8001dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de6:	2201      	movs	r2, #1
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df2:	f043 0202 	orr.w	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfe:	2204      	movs	r2, #4
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00b      	beq.n	8001e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f043 0204 	orr.w	r2, r3, #4
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	2210      	movs	r2, #16
 8001e36:	409a      	lsls	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d043      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d03c      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e52:	2210      	movs	r2, #16
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d108      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d024      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	4798      	blx	r3
 8001e86:	e01f      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
 8001e98:	e016      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0208 	bic.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ecc:	2220      	movs	r2, #32
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 808f 	beq.w	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f000 8087 	beq.w	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	2220      	movs	r2, #32
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b05      	cmp	r3, #5
 8001f00:	d136      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0216 	bic.w	r2, r2, #22
 8001f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d103      	bne.n	8001f32 <HAL_DMA_IRQHandler+0x1da>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f46:	223f      	movs	r2, #63	@ 0x3f
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d07e      	beq.n	8002064 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
        }
        return;
 8001f6e:	e079      	b.n	8002064 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01d      	beq.n	8001fba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d031      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
 8001f9c:	e02c      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
 8001fb8:	e01e      	b.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0210 	bic.w	r2, r2, #16
 8001fd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d032      	beq.n	8002066 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d022      	beq.n	8002052 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3301      	adds	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	d307      	bcc.n	8002040 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f2      	bne.n	8002024 <HAL_DMA_IRQHandler+0x2cc>
 800203e:	e000      	b.n	8002042 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002040:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
 8002062:	e000      	b.n	8002066 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002064:	bf00      	nop
    }
  }
}
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b40      	cmp	r3, #64	@ 0x40
 8002098:	d108      	bne.n	80020ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020aa:	e007      	b.n	80020bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	60da      	str	r2, [r3, #12]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	3b10      	subs	r3, #16
 80020d8:	4a14      	ldr	r2, [pc, #80]	@ (800212c <DMA_CalcBaseAndBitshift+0x64>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020e2:	4a13      	ldr	r2, [pc, #76]	@ (8002130 <DMA_CalcBaseAndBitshift+0x68>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d909      	bls.n	800210a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	@ 0x58
 8002108:	e007      	b.n	800211a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002112:	f023 0303 	bic.w	r3, r3, #3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	aaaaaaab 	.word	0xaaaaaaab
 8002130:	0800596c 	.word	0x0800596c

08002134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11f      	bne.n	800218e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d856      	bhi.n	8002202 <DMA_CheckFifoParam+0xce>
 8002154:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <DMA_CheckFifoParam+0x28>)
 8002156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215a:	bf00      	nop
 800215c:	0800216d 	.word	0x0800216d
 8002160:	0800217f 	.word	0x0800217f
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002203 	.word	0x08002203
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d046      	beq.n	8002206 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217c:	e043      	b.n	8002206 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002186:	d140      	bne.n	800220a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218c:	e03d      	b.n	800220a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002196:	d121      	bne.n	80021dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b03      	cmp	r3, #3
 800219c:	d837      	bhi.n	800220e <DMA_CheckFifoParam+0xda>
 800219e:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <DMA_CheckFifoParam+0x70>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b5 	.word	0x080021b5
 80021a8:	080021bb 	.word	0x080021bb
 80021ac:	080021b5 	.word	0x080021b5
 80021b0:	080021cd 	.word	0x080021cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e030      	b.n	800221c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d025      	beq.n	8002212 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021ca:	e022      	b.n	8002212 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80021d4:	d11f      	bne.n	8002216 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021da:	e01c      	b.n	8002216 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d903      	bls.n	80021ea <DMA_CheckFifoParam+0xb6>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d003      	beq.n	80021f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021e8:	e018      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	73fb      	strb	r3, [r7, #15]
      break;
 80021ee:	e015      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00e      	beq.n	800221a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002200:	e00b      	b.n	800221a <DMA_CheckFifoParam+0xe6>
      break;
 8002202:	bf00      	nop
 8002204:	e00a      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 8002206:	bf00      	nop
 8002208:	e008      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800220a:	bf00      	nop
 800220c:	e006      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800220e:	bf00      	nop
 8002210:	e004      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 8002212:	bf00      	nop
 8002214:	e002      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;   
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <DMA_CheckFifoParam+0xe8>
      break;
 800221a:	bf00      	nop
    }
  } 
  
  return status; 
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e159      	b.n	80024fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8148 	bne.w	80024f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a2 	beq.w	80024f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ba:	4a56      	ldr	r2, [pc, #344]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023c2:	4b54      	ldr	r3, [pc, #336]	@ (8002514 <HAL_GPIO_Init+0x2e8>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ce:	4a52      	ldr	r2, [pc, #328]	@ (8002518 <HAL_GPIO_Init+0x2ec>)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	3302      	adds	r3, #2
 80023d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a49      	ldr	r2, [pc, #292]	@ (800251c <HAL_GPIO_Init+0x2f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x202>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a48      	ldr	r2, [pc, #288]	@ (8002520 <HAL_GPIO_Init+0x2f4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x1fe>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <HAL_GPIO_Init+0x2f8>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x1fa>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a46      	ldr	r2, [pc, #280]	@ (8002528 <HAL_GPIO_Init+0x2fc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x1f6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a45      	ldr	r2, [pc, #276]	@ (800252c <HAL_GPIO_Init+0x300>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x1f2>
 800241a:	2304      	movs	r3, #4
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800241e:	2307      	movs	r3, #7
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x204>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x204>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x2ec>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b38      	ldr	r3, [pc, #224]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a2f      	ldr	r2, [pc, #188]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a24      	ldr	r2, [pc, #144]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b23      	ldr	r3, [pc, #140]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002530 <HAL_GPIO_Init+0x304>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f aea2 	bls.w	8002248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e12b      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe f9aa 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2224      	movs	r2, #36	@ 0x24
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025cc:	f000 fd80 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 80025d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a81      	ldr	r2, [pc, #516]	@ (80027dc <HAL_I2C_Init+0x274>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d807      	bhi.n	80025ec <HAL_I2C_Init+0x84>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a80      	ldr	r2, [pc, #512]	@ (80027e0 <HAL_I2C_Init+0x278>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	bf94      	ite	ls
 80025e4:	2301      	movls	r3, #1
 80025e6:	2300      	movhi	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	e006      	b.n	80025fa <HAL_I2C_Init+0x92>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a7d      	ldr	r2, [pc, #500]	@ (80027e4 <HAL_I2C_Init+0x27c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0e7      	b.n	80027d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4a78      	ldr	r2, [pc, #480]	@ (80027e8 <HAL_I2C_Init+0x280>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a6a      	ldr	r2, [pc, #424]	@ (80027dc <HAL_I2C_Init+0x274>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d802      	bhi.n	800263c <HAL_I2C_Init+0xd4>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3301      	adds	r3, #1
 800263a:	e009      	b.n	8002650 <HAL_I2C_Init+0xe8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002642:	fb02 f303 	mul.w	r3, r2, r3
 8002646:	4a69      	ldr	r2, [pc, #420]	@ (80027ec <HAL_I2C_Init+0x284>)
 8002648:	fba2 2303 	umull	r2, r3, r2, r3
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	3301      	adds	r3, #1
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	430b      	orrs	r3, r1
 8002656:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002662:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	495c      	ldr	r1, [pc, #368]	@ (80027dc <HAL_I2C_Init+0x274>)
 800266c:	428b      	cmp	r3, r1
 800266e:	d819      	bhi.n	80026a4 <HAL_I2C_Init+0x13c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e59      	subs	r1, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fbb1 f3f3 	udiv	r3, r1, r3
 800267e:	1c59      	adds	r1, r3, #1
 8002680:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002684:	400b      	ands	r3, r1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_I2C_Init+0x138>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e59      	subs	r1, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fbb1 f3f3 	udiv	r3, r1, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	e051      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a0:	2304      	movs	r3, #4
 80026a2:	e04f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d111      	bne.n	80026d0 <HAL_I2C_Init+0x168>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e012      	b.n	80026f6 <HAL_I2C_Init+0x18e>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Init+0x196>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e022      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10e      	bne.n	8002724 <HAL_I2C_Init+0x1bc>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e58      	subs	r0, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	440b      	add	r3, r1
 8002714:	fbb0 f3f3 	udiv	r3, r0, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Init+0x1dc>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	0099      	lsls	r1, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	fbb0 f3f3 	udiv	r3, r0, r3
 800273a:	3301      	adds	r3, #1
 800273c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002740:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	6809      	ldr	r1, [r1, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002772:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6911      	ldr	r1, [r2, #16]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	4311      	orrs	r1, r2
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	430b      	orrs	r3, r1
 8002786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	000186a0 	.word	0x000186a0
 80027e0:	001e847f 	.word	0x001e847f
 80027e4:	003d08ff 	.word	0x003d08ff
 80027e8:	431bde83 	.word	0x431bde83
 80027ec:	10624dd3 	.word	0x10624dd3

080027f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e267      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d075      	beq.n	80028fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280e:	4b88      	ldr	r3, [pc, #544]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d00c      	beq.n	8002834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b85      	ldr	r3, [pc, #532]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002822:	2b08      	cmp	r3, #8
 8002824:	d112      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002826:	4b82      	ldr	r3, [pc, #520]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d10b      	bne.n	800284c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	4b7e      	ldr	r3, [pc, #504]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d05b      	beq.n	80028f8 <HAL_RCC_OscConfig+0x108>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d157      	bne.n	80028f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e242      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002854:	d106      	bne.n	8002864 <HAL_RCC_OscConfig+0x74>
 8002856:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a75      	ldr	r2, [pc, #468]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x98>
 800286e:	4b70      	ldr	r3, [pc, #448]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6f      	ldr	r2, [pc, #444]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6c      	ldr	r2, [pc, #432]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xb0>
 8002888:	4b69      	ldr	r3, [pc, #420]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a68      	ldr	r2, [pc, #416]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a65      	ldr	r2, [pc, #404]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7fe fd3e 	bl	8001328 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7fe fd3a 	bl	8001328 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	@ 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e207      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xc0>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe fd2a 	bl	8001328 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d8:	f7fe fd26 	bl	8001328 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1f3      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b51      	ldr	r3, [pc, #324]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0xe8>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002906:	4b4a      	ldr	r3, [pc, #296]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291e:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c7      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b3b      	ldr	r3, [pc, #236]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4937      	ldr	r1, [pc, #220]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b34      	ldr	r3, [pc, #208]	@ (8002a34 <HAL_RCC_OscConfig+0x244>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fcdf 	bl	8001328 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fcdb 	bl	8001328 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1a8      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b28      	ldr	r3, [pc, #160]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4925      	ldr	r1, [pc, #148]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b24      	ldr	r3, [pc, #144]	@ (8002a34 <HAL_RCC_OscConfig+0x244>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fcbe 	bl	8001328 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029b0:	f7fe fcba 	bl	8001328 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e187      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d036      	beq.n	8002a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b15      	ldr	r3, [pc, #84]	@ (8002a38 <HAL_RCC_OscConfig+0x248>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7fe fc9e 	bl	8001328 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe fc9a 	bl	8001328 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e167      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <HAL_RCC_OscConfig+0x240>)
 8002a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x200>
 8002a0e:	e01b      	b.n	8002a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a10:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_OscConfig+0x248>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fc87 	bl	8001328 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	e00e      	b.n	8002a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fc83 	bl	8001328 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d907      	bls.n	8002a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e150      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470000 	.word	0x42470000
 8002a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3c:	4b88      	ldr	r3, [pc, #544]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ea      	bne.n	8002a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8097 	beq.w	8002b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5a:	4b81      	ldr	r3, [pc, #516]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a76:	4b7a      	ldr	r3, [pc, #488]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b74      	ldr	r3, [pc, #464]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a73      	ldr	r2, [pc, #460]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fc43 	bl	8001328 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe fc3f 	bl	8001328 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e10c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab8:	4b6a      	ldr	r3, [pc, #424]	@ (8002c64 <HAL_RCC_OscConfig+0x474>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x2ea>
 8002acc:	4b64      	ldr	r3, [pc, #400]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	4a63      	ldr	r2, [pc, #396]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x30c>
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aee:	4b5c      	ldr	r3, [pc, #368]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	4a5b      	ldr	r2, [pc, #364]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0x324>
 8002afc:	4b58      	ldr	r3, [pc, #352]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a57      	ldr	r2, [pc, #348]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0301 	bic.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b08:	4b55      	ldr	r3, [pc, #340]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0c:	4a54      	ldr	r2, [pc, #336]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	f023 0304 	bic.w	r3, r3, #4
 8002b12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fc04 	bl	8001328 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fc00 	bl	8001328 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0cb      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	4b49      	ldr	r3, [pc, #292]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0ee      	beq.n	8002b24 <HAL_RCC_OscConfig+0x334>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b48:	f7fe fbee 	bl	8001328 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b50:	f7fe fbea 	bl	8001328 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e0b5      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	4b3e      	ldr	r3, [pc, #248]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ee      	bne.n	8002b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b39      	ldr	r3, [pc, #228]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	4a38      	ldr	r2, [pc, #224]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a1 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d05c      	beq.n	8002c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d141      	bne.n	8002c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fbbe 	bl	8001328 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fbba 	bl	8001328 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e087      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	019b      	lsls	r3, r3, #6
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	491b      	ldr	r1, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fb93 	bl	8001328 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fb8f 	bl	8001328 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e05c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0f0      	beq.n	8002c06 <HAL_RCC_OscConfig+0x416>
 8002c24:	e054      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCC_OscConfig+0x478>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fb7c 	bl	8001328 <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c34:	f7fe fb78 	bl	8001328 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e045      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_RCC_OscConfig+0x470>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x444>
 8002c52:	e03d      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e038      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cdc <HAL_RCC_OscConfig+0x4ec>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d028      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d121      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11a      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d111      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800

08002ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cc      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b68      	ldr	r3, [pc, #416]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d90c      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b65      	ldr	r3, [pc, #404]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0b8      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d020      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d34:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a58      	ldr	r2, [pc, #352]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d4c:	4b53      	ldr	r3, [pc, #332]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a52      	ldr	r2, [pc, #328]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d58:	4b50      	ldr	r3, [pc, #320]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	494d      	ldr	r1, [pc, #308]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d044      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d119      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e07f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d107      	bne.n	8002dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dae:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e067      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dbe:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4934      	ldr	r1, [pc, #208]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe faaa 	bl	8001328 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd8:	f7fe faa6 	bl	8001328 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e04f      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 020c 	and.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1eb      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e00:	4b25      	ldr	r3, [pc, #148]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20c      	bcs.n	8002e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e16:	4b20      	ldr	r3, [pc, #128]	@ (8002e98 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d001      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e032      	b.n	8002e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4916      	ldr	r1, [pc, #88]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e52:	4b12      	ldr	r3, [pc, #72]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e66:	f000 f821 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	091b      	lsrs	r3, r3, #4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	490a      	ldr	r1, [pc, #40]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	5ccb      	ldrb	r3, [r1, r3]
 8002e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fa0a 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08005954 	.word	0x08005954
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b094      	sub	sp, #80	@ 0x50
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec4:	4b79      	ldr	r3, [pc, #484]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d00d      	beq.n	8002eec <HAL_RCC_GetSysClockFreq+0x40>
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	f200 80e1 	bhi.w	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ede:	e0db      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b73      	ldr	r3, [pc, #460]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002ee4:	e0db      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee6:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eea:	e0d8      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eec:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ef4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d063      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	2200      	movs	r2, #0
 8002f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f1e:	4622      	mov	r2, r4
 8002f20:	462b      	mov	r3, r5
 8002f22:	f04f 0000 	mov.w	r0, #0
 8002f26:	f04f 0100 	mov.w	r1, #0
 8002f2a:	0159      	lsls	r1, r3, #5
 8002f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f30:	0150      	lsls	r0, r2, #5
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4621      	mov	r1, r4
 8002f38:	1a51      	subs	r1, r2, r1
 8002f3a:	6139      	str	r1, [r7, #16]
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f50:	4659      	mov	r1, fp
 8002f52:	018b      	lsls	r3, r1, #6
 8002f54:	4651      	mov	r1, sl
 8002f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	018a      	lsls	r2, r1, #6
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ebb2 0801 	subs.w	r8, r2, r1
 8002f64:	4659      	mov	r1, fp
 8002f66:	eb63 0901 	sbc.w	r9, r3, r1
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7e:	4690      	mov	r8, r2
 8002f80:	4699      	mov	r9, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	eb18 0303 	adds.w	r3, r8, r3
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	462b      	mov	r3, r5
 8002f8c:	eb49 0303 	adc.w	r3, r9, r3
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	024b      	lsls	r3, r1, #9
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa8:	4621      	mov	r1, r4
 8002faa:	024a      	lsls	r2, r1, #9
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002fbc:	f7fd f960 	bl	8000280 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc8:	e058      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fca:	4b38      	ldr	r3, [pc, #224]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f04f 0000 	mov.w	r0, #0
 8002fec:	f04f 0100 	mov.w	r1, #0
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff6:	0150      	lsls	r0, r2, #5
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4641      	mov	r1, r8
 8002ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003002:	4649      	mov	r1, r9
 8003004:	eb63 0b01 	sbc.w	fp, r3, r1
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800301c:	ebb2 040a 	subs.w	r4, r2, sl
 8003020:	eb63 050b 	sbc.w	r5, r3, fp
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	00eb      	lsls	r3, r5, #3
 800302e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003032:	00e2      	lsls	r2, r4, #3
 8003034:	4614      	mov	r4, r2
 8003036:	461d      	mov	r5, r3
 8003038:	4643      	mov	r3, r8
 800303a:	18e3      	adds	r3, r4, r3
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	464b      	mov	r3, r9
 8003040:	eb45 0303 	adc.w	r3, r5, r3
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003052:	4629      	mov	r1, r5
 8003054:	028b      	lsls	r3, r1, #10
 8003056:	4621      	mov	r1, r4
 8003058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800305c:	4621      	mov	r1, r4
 800305e:	028a      	lsls	r2, r1, #10
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	61bb      	str	r3, [r7, #24]
 800306a:	61fa      	str	r2, [r7, #28]
 800306c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003070:	f7fd f906 	bl	8000280 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800307c:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_RCC_GetSysClockFreq+0x200>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800308c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800308e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003090:	fbb2 f3f3 	udiv	r3, r2, r3
 8003094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003096:	e002      	b.n	800309e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800309a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800309c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3750      	adds	r7, #80	@ 0x50
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	00f42400 	.word	0x00f42400
 80030b4:	007a1200 	.word	0x007a1200

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <HAL_RCC_GetHCLKFreq+0x14>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	20000000 	.word	0x20000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d4:	f7ff fff0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0a9b      	lsrs	r3, r3, #10
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4903      	ldr	r1, [pc, #12]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	08005964 	.word	0x08005964

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030fc:	f7ff ffdc 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0b5b      	lsrs	r3, r3, #13
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4903      	ldr	r1, [pc, #12]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	08005964 	.word	0x08005964

08003120 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003144:	2b00      	cmp	r3, #0
 8003146:	d035      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003148:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800314e:	f7fe f8eb 	bl	8001328 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003156:	f7fe f8e7 	bl	8001328 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e0ba      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003168:	4b60      	ldr	r3, [pc, #384]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f0      	bne.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	019a      	lsls	r2, r3, #6
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	071b      	lsls	r3, r3, #28
 8003180:	495a      	ldr	r1, [pc, #360]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003188:	4b57      	ldr	r3, [pc, #348]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800318e:	f7fe f8cb 	bl	8001328 <HAL_GetTick>
 8003192:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003196:	f7fe f8c7 	bl	8001328 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e09a      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031a8:	4b50      	ldr	r3, [pc, #320]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0f0      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8083 	beq.w	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	4a48      	ldr	r2, [pc, #288]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d2:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80031de:	4b44      	ldr	r3, [pc, #272]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a43      	ldr	r2, [pc, #268]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ea:	f7fe f89d 	bl	8001328 <HAL_GetTick>
 80031ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe f899 	bl	8001328 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e06c      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003204:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003210:	4b36      	ldr	r3, [pc, #216]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003218:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	429a      	cmp	r2, r3
 800322c:	d028      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800322e:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003236:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003238:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800323e:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003244:	4a29      	ldr	r2, [pc, #164]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800324a:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b01      	cmp	r3, #1
 8003254:	d114      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003256:	f7fe f867 	bl	8001328 <HAL_GetTick>
 800325a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe f863 	bl	8001328 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e034      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ee      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800328c:	d10d      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800328e:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800329e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a2:	4912      	ldr	r1, [pc, #72]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]
 80032a8:	e005      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4a0f      	ldr	r2, [pc, #60]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80032b4:	6093      	str	r3, [r2, #8]
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	490a      	ldr	r1, [pc, #40]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7c1a      	ldrb	r2, [r3, #16]
 80032d8:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032da:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	42470068 	.word	0x42470068
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470e40 	.word	0x42470e40
 80032f8:	424711e0 	.word	0x424711e0

080032fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e073      	b.n	80033fa <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7f5b      	ldrb	r3, [r3, #29]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd fc16 	bl	8000b54 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b10      	cmp	r3, #16
 800333a:	d055      	beq.n	80033e8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	22ca      	movs	r2, #202	@ 0xca
 8003342:	625a      	str	r2, [r3, #36]	@ 0x24
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2253      	movs	r2, #83	@ 0x53
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f87f 	bl	8003450 <RTC_EnterInitMode>
 8003352:	4603      	mov	r3, r0
 8003354:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d12c      	bne.n	80033b6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800336a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	041a      	lsls	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f886 	bl	80034be <RTC_ExitInitMode>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d110      	bne.n	80033de <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ff      	movs	r2, #255	@ 0xff
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80033e6:	e001      	b.n	80033ec <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <HAL_RTC_WaitForSynchro+0x48>)
 8003416:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fd ff86 	bl	8001328 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800341e:	e009      	b.n	8003434 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003420:	f7fd ff82 	bl	8001328 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e007      	b.n	8003444 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0ee      	beq.n	8003420 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	00013f5f 	.word	0x00013f5f

08003450 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d122      	bne.n	80034b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800347c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800347e:	f7fd ff53 	bl	8001328 <HAL_GetTick>
 8003482:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003484:	e00c      	b.n	80034a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003486:	f7fd ff4f 	bl	8001328 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003494:	d904      	bls.n	80034a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2204      	movs	r2, #4
 800349a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <RTC_EnterInitMode+0x64>
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d1e8      	bne.n	8003486 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff8b 	bl	8003404 <HAL_RTC_WaitForSynchro>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2204      	movs	r2, #4
 80034f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e07b      	b.n	8003612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800352a:	d009      	beq.n	8003540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	61da      	str	r2, [r3, #28]
 8003532:	e005      	b.n	8003540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd fb5e 	bl	8000c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	ea42 0103 	orr.w	r1, r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0104 	and.w	r1, r3, #4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	f003 0210 	and.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69da      	ldr	r2, [r3, #28]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e042      	b.n	80036b2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fd fcf3 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2224      	movs	r2, #36	@ 0x24
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff50 	bl	8004504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003672:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003682:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003692:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d175      	bne.n	80037c6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_UART_Transmit+0x2c>
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06e      	b.n	80037c8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2221      	movs	r2, #33	@ 0x21
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036f8:	f7fd fe16 	bl	8001328 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	88fa      	ldrh	r2, [r7, #6]
 8003708:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003712:	d108      	bne.n	8003726 <HAL_UART_Transmit+0x6c>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	e003      	b.n	800372e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800372e:	e02e      	b.n	800378e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2200      	movs	r2, #0
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fc28 	bl	8003f90 <UART_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e03a      	b.n	80037c8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003766:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	3302      	adds	r3, #2
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e007      	b.n	8003780 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3301      	adds	r3, #1
 800377e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1cb      	bne.n	8003730 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2200      	movs	r2, #0
 80037a0:	2140      	movs	r1, #64	@ 0x40
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fbf4 	bl	8003f90 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e006      	b.n	80037c8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b20      	cmp	r3, #32
 80037e8:	d112      	bne.n	8003810 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_Receive_DMA+0x26>
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00b      	b.n	8003812 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	461a      	mov	r2, r3
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fc1c 	bl	8004044 <UART_Start_Receive_DMA>
 800380c:	4603      	mov	r3, r0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ba      	sub	sp, #232	@ 0xe8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800385a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fd83 	bl	8004386 <UART_Receive_IT>
      return;
 8003880:	e25b      	b.n	8003d3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80de 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
 800388c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80d1 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
 80038d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f043 0202 	orr.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
 80038fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f043 0208 	orr.w	r2, r3, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81f2 	beq.w	8003d30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fd0e 	bl	8004386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_UART_IRQHandler+0x17a>
 800398e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fc16 	bl	80041c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a6:	2b40      	cmp	r3, #64	@ 0x40
 80039a8:	d141      	bne.n	8003a2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80039c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80039d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_UART_IRQHandler+0x3e0>)
 8003a04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f982 	bl	8001d14 <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00e      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f99e 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00a      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f99a 	bl	8003d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e006      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f996 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a42:	e175      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	bf00      	nop
    return;
 8003a46:	e173      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 814f 	bne.w	8003cf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8148 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8141 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a8e:	2b40      	cmp	r3, #64	@ 0x40
 8003a90:	f040 80b6 	bne.w	8003c00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8145 	beq.w	8003d34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f080 813e 	bcs.w	8003d34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003abe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aca:	f000 8088 	beq.w	8003bde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1d9      	bne.n	8003ace <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e1      	bne.n	8003b1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003bc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003bc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe f82b 	bl	8001c34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2202      	movs	r2, #2
 8003be2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f8c1 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bfa:	e09b      	b.n	8003d34 <HAL_UART_IRQHandler+0x518>
 8003bfc:	0800428f 	.word	0x0800428f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 808e 	beq.w	8003d38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 8089 	beq.w	8003d38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e3      	bne.n	8003c26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	e853 3f00 	ldrex	r3, [r3]
 8003c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e3      	bne.n	8003c5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0310 	bic.w	r3, r3, #16
 8003cba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cc8:	61fa      	str	r2, [r7, #28]
 8003cca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e3      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ce2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f847 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cee:	e023      	b.n	8003d38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_UART_IRQHandler+0x4f4>
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fad4 	bl	80042b6 <UART_Transmit_IT>
    return;
 8003d0e:	e014      	b.n	8003d3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00e      	beq.n	8003d3a <HAL_UART_IRQHandler+0x51e>
 8003d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fb14 	bl	8004356 <UART_EndTransmit_IT>
    return;
 8003d2e:	e004      	b.n	8003d3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003d38:	bf00      	nop
  }
}
 8003d3a:	37e8      	adds	r7, #232	@ 0xe8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b09c      	sub	sp, #112	@ 0x70
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d172      	bne.n	8003e96 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db2:	2200      	movs	r2, #0
 8003db4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003dd6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003dd8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ddc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003de4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003e0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3314      	adds	r3, #20
 8003e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1e5      	bne.n	8003e1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d119      	bne.n	8003e96 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003e82:	61fa      	str	r2, [r7, #28]
 8003e84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69b9      	ldr	r1, [r7, #24]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	617b      	str	r3, [r7, #20]
   return(result);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003eac:	f7ff ff66 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eb0:	e002      	b.n	8003eb8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003eb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003eb4:	f7fc fe0a 	bl	8000acc <HAL_UART_RxCpltCallback>
}
 8003eb8:	bf00      	nop
 8003eba:	3770      	adds	r7, #112	@ 0x70
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d108      	bne.n	8003eee <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff ff48 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eec:	e002      	b.n	8003ef4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff30 	bl	8003d54 <HAL_UART_RxHalfCpltCallback>
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f18:	2b80      	cmp	r3, #128	@ 0x80
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b21      	cmp	r3, #33	@ 0x21
 8003f2e:	d108      	bne.n	8003f42 <UART_DMAError+0x46>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003f3c:	68b8      	ldr	r0, [r7, #8]
 8003f3e:	f000 f91b 	bl	8004178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b40      	cmp	r3, #64	@ 0x40
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b22      	cmp	r3, #34	@ 0x22
 8003f62:	d108      	bne.n	8003f76 <UART_DMAError+0x7a>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003f70:	68b8      	ldr	r0, [r7, #8]
 8003f72:	f000 f929 	bl	80041c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0210 	orr.w	r2, r3, #16
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f82:	68b8      	ldr	r0, [r7, #8]
 8003f84:	f7ff fef0 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	603b      	str	r3, [r7, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa0:	e03b      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d037      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fd f9bd 	bl	8001328 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e03a      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d023      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b80      	cmp	r3, #128	@ 0x80
 8003fd6:	d020      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b40      	cmp	r3, #64	@ 0x40
 8003fdc:	d01d      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d116      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8e0 	bl	80041c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2208      	movs	r2, #8
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e00f      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	429a      	cmp	r2, r3
 8004036:	d0b4      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b098      	sub	sp, #96	@ 0x60
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2222      	movs	r2, #34	@ 0x22
 8004068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004070:	4a3e      	ldr	r2, [pc, #248]	@ (800416c <UART_Start_Receive_DMA+0x128>)
 8004072:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <UART_Start_Receive_DMA+0x12c>)
 800407a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	4a3c      	ldr	r2, [pc, #240]	@ (8004174 <UART_Start_Receive_DMA+0x130>)
 8004082:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	f7fd fd6e 	bl	8001b84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040e6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80040ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80040f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e5      	bne.n	80040c6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	657b      	str	r3, [r7, #84]	@ 0x54
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800411a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800411c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004120:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e5      	bne.n	80040fa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3314      	adds	r3, #20
 8004134:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	617b      	str	r3, [r7, #20]
   return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004144:	653b      	str	r3, [r7, #80]	@ 0x50
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800414e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004150:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	61fb      	str	r3, [r7, #28]
   return(result);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e5      	bne.n	800412e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3760      	adds	r7, #96	@ 0x60
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	08003d95 	.word	0x08003d95
 8004170:	08003ec1 	.word	0x08003ec1
 8004174:	08003efd 	.word	0x08003efd

08004178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b089      	sub	sp, #36	@ 0x24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	330c      	adds	r3, #12
 8004186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	61ba      	str	r2, [r7, #24]
 80041a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6979      	ldr	r1, [r7, #20]
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80041bc:	bf00      	nop
 80041be:	3724      	adds	r7, #36	@ 0x24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b095      	sub	sp, #84	@ 0x54
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80041f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	61fb      	str	r3, [r7, #28]
   return(result);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	647b      	str	r3, [r7, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004260:	61ba      	str	r2, [r7, #24]
 8004262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004282:	bf00      	nop
 8004284:	3754      	adds	r7, #84	@ 0x54
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fd5d 	bl	8003d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b21      	cmp	r3, #33	@ 0x21
 80042c8:	d13e      	bne.n	8004348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d2:	d114      	bne.n	80042fe <UART_Transmit_IT+0x48>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d110      	bne.n	80042fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	621a      	str	r2, [r3, #32]
 80042fc:	e008      	b.n	8004310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	1c59      	adds	r1, r3, #1
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6211      	str	r1, [r2, #32]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4619      	mov	r1, r3
 800431e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10f      	bne.n	8004344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800436c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fce2 	bl	8003d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b08c      	sub	sp, #48	@ 0x30
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b22      	cmp	r3, #34	@ 0x22
 8004398:	f040 80ae 	bne.w	80044f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a4:	d117      	bne.n	80043d6 <UART_Receive_IT+0x50>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d113      	bne.n	80043d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80043d4:	e026      	b.n	8004424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e8:	d007      	beq.n	80043fa <UART_Receive_IT+0x74>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <UART_Receive_IT+0x82>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e008      	b.n	800441a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004414:	b2da      	uxtb	r2, r3
 8004416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29b      	uxth	r3, r3
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4619      	mov	r1, r3
 8004432:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004434:	2b00      	cmp	r3, #0
 8004436:	d15d      	bne.n	80044f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0220 	bic.w	r2, r2, #32
 8004446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447a:	2b01      	cmp	r3, #1
 800447c:	d135      	bne.n	80044ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	613b      	str	r3, [r7, #16]
   return(result);
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f023 0310 	bic.w	r3, r3, #16
 800449a:	627b      	str	r3, [r7, #36]	@ 0x24
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a4:	623a      	str	r2, [r7, #32]
 80044a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	69f9      	ldr	r1, [r7, #28]
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d10a      	bne.n	80044dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044e0:	4619      	mov	r1, r3
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fc4a 	bl	8003d7c <HAL_UARTEx_RxEventCallback>
 80044e8:	e002      	b.n	80044f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc faee 	bl	8000acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	e002      	b.n	80044fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3730      	adds	r7, #48	@ 0x30
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004508:	b0c0      	sub	sp, #256	@ 0x100
 800450a:	af00      	add	r7, sp, #0
 800450c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	68d9      	ldr	r1, [r3, #12]
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	ea40 0301 	orr.w	r3, r0, r1
 800452c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	431a      	orrs	r2, r3
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800455c:	f021 010c 	bic.w	r1, r1, #12
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800456a:	430b      	orrs	r3, r1
 800456c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457e:	6999      	ldr	r1, [r3, #24]
 8004580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	ea40 0301 	orr.w	r3, r0, r1
 800458a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b8f      	ldr	r3, [pc, #572]	@ (80047d0 <UART_SetConfig+0x2cc>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d005      	beq.n	80045a4 <UART_SetConfig+0xa0>
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b8d      	ldr	r3, [pc, #564]	@ (80047d4 <UART_SetConfig+0x2d0>)
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d104      	bne.n	80045ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045a4:	f7fe fda8 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80045a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045ac:	e003      	b.n	80045b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7fe fd8f 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 80045b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045c0:	f040 810c 	bne.w	80047dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	1891      	adds	r1, r2, r2
 80045dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045de:	415b      	adcs	r3, r3
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045e6:	4621      	mov	r1, r4
 80045e8:	eb12 0801 	adds.w	r8, r2, r1
 80045ec:	4629      	mov	r1, r5
 80045ee:	eb43 0901 	adc.w	r9, r3, r1
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004606:	4690      	mov	r8, r2
 8004608:	4699      	mov	r9, r3
 800460a:	4623      	mov	r3, r4
 800460c:	eb18 0303 	adds.w	r3, r8, r3
 8004610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004614:	462b      	mov	r3, r5
 8004616:	eb49 0303 	adc.w	r3, r9, r3
 800461a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800462a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800462e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004632:	460b      	mov	r3, r1
 8004634:	18db      	adds	r3, r3, r3
 8004636:	653b      	str	r3, [r7, #80]	@ 0x50
 8004638:	4613      	mov	r3, r2
 800463a:	eb42 0303 	adc.w	r3, r2, r3
 800463e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004648:	f7fb fe1a 	bl	8000280 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4b61      	ldr	r3, [pc, #388]	@ (80047d8 <UART_SetConfig+0x2d4>)
 8004652:	fba3 2302 	umull	r2, r3, r3, r2
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	011c      	lsls	r4, r3, #4
 800465a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800465e:	2200      	movs	r2, #0
 8004660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800466c:	4642      	mov	r2, r8
 800466e:	464b      	mov	r3, r9
 8004670:	1891      	adds	r1, r2, r2
 8004672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004674:	415b      	adcs	r3, r3
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800467c:	4641      	mov	r1, r8
 800467e:	eb12 0a01 	adds.w	sl, r2, r1
 8004682:	4649      	mov	r1, r9
 8004684:	eb43 0b01 	adc.w	fp, r3, r1
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800469c:	4692      	mov	sl, r2
 800469e:	469b      	mov	fp, r3
 80046a0:	4643      	mov	r3, r8
 80046a2:	eb1a 0303 	adds.w	r3, sl, r3
 80046a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046aa:	464b      	mov	r3, r9
 80046ac:	eb4b 0303 	adc.w	r3, fp, r3
 80046b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046c8:	460b      	mov	r3, r1
 80046ca:	18db      	adds	r3, r3, r3
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046ce:	4613      	mov	r3, r2
 80046d0:	eb42 0303 	adc.w	r3, r2, r3
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046de:	f7fb fdcf 	bl	8000280 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4611      	mov	r1, r2
 80046e8:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2301 	umull	r2, r3, r3, r1
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2264      	movs	r2, #100	@ 0x64
 80046f2:	fb02 f303 	mul.w	r3, r2, r3
 80046f6:	1acb      	subs	r3, r1, r3
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046fe:	4b36      	ldr	r3, [pc, #216]	@ (80047d8 <UART_SetConfig+0x2d4>)
 8004700:	fba3 2302 	umull	r2, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800470c:	441c      	add	r4, r3
 800470e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800471c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004720:	4642      	mov	r2, r8
 8004722:	464b      	mov	r3, r9
 8004724:	1891      	adds	r1, r2, r2
 8004726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004728:	415b      	adcs	r3, r3
 800472a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800472c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004730:	4641      	mov	r1, r8
 8004732:	1851      	adds	r1, r2, r1
 8004734:	6339      	str	r1, [r7, #48]	@ 0x30
 8004736:	4649      	mov	r1, r9
 8004738:	414b      	adcs	r3, r1
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004748:	4659      	mov	r1, fp
 800474a:	00cb      	lsls	r3, r1, #3
 800474c:	4651      	mov	r1, sl
 800474e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004752:	4651      	mov	r1, sl
 8004754:	00ca      	lsls	r2, r1, #3
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	4603      	mov	r3, r0
 800475c:	4642      	mov	r2, r8
 800475e:	189b      	adds	r3, r3, r2
 8004760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004764:	464b      	mov	r3, r9
 8004766:	460a      	mov	r2, r1
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800477c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004784:	460b      	mov	r3, r1
 8004786:	18db      	adds	r3, r3, r3
 8004788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800478a:	4613      	mov	r3, r2
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800479a:	f7fb fd71 	bl	8000280 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <UART_SetConfig+0x2d4>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	@ 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	3332      	adds	r3, #50	@ 0x32
 80047b6:	4a08      	ldr	r2, [pc, #32]	@ (80047d8 <UART_SetConfig+0x2d4>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 0207 	and.w	r2, r3, #7
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4422      	add	r2, r4
 80047ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047cc:	e106      	b.n	80049dc <UART_SetConfig+0x4d8>
 80047ce:	bf00      	nop
 80047d0:	40011000 	.word	0x40011000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047ee:	4642      	mov	r2, r8
 80047f0:	464b      	mov	r3, r9
 80047f2:	1891      	adds	r1, r2, r2
 80047f4:	6239      	str	r1, [r7, #32]
 80047f6:	415b      	adcs	r3, r3
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047fe:	4641      	mov	r1, r8
 8004800:	1854      	adds	r4, r2, r1
 8004802:	4649      	mov	r1, r9
 8004804:	eb43 0501 	adc.w	r5, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	00eb      	lsls	r3, r5, #3
 8004812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004816:	00e2      	lsls	r2, r4, #3
 8004818:	4614      	mov	r4, r2
 800481a:	461d      	mov	r5, r3
 800481c:	4643      	mov	r3, r8
 800481e:	18e3      	adds	r3, r4, r3
 8004820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004824:	464b      	mov	r3, r9
 8004826:	eb45 0303 	adc.w	r3, r5, r3
 800482a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800482e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800483a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800484a:	4629      	mov	r1, r5
 800484c:	008b      	lsls	r3, r1, #2
 800484e:	4621      	mov	r1, r4
 8004850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004854:	4621      	mov	r1, r4
 8004856:	008a      	lsls	r2, r1, #2
 8004858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800485c:	f7fb fd10 	bl	8000280 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4b60      	ldr	r3, [pc, #384]	@ (80049e8 <UART_SetConfig+0x4e4>)
 8004866:	fba3 2302 	umull	r2, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	011c      	lsls	r4, r3, #4
 800486e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004872:	2200      	movs	r2, #0
 8004874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800487c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004880:	4642      	mov	r2, r8
 8004882:	464b      	mov	r3, r9
 8004884:	1891      	adds	r1, r2, r2
 8004886:	61b9      	str	r1, [r7, #24]
 8004888:	415b      	adcs	r3, r3
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004890:	4641      	mov	r1, r8
 8004892:	1851      	adds	r1, r2, r1
 8004894:	6139      	str	r1, [r7, #16]
 8004896:	4649      	mov	r1, r9
 8004898:	414b      	adcs	r3, r1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048a8:	4659      	mov	r1, fp
 80048aa:	00cb      	lsls	r3, r1, #3
 80048ac:	4651      	mov	r1, sl
 80048ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048b2:	4651      	mov	r1, sl
 80048b4:	00ca      	lsls	r2, r1, #3
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	4603      	mov	r3, r0
 80048bc:	4642      	mov	r2, r8
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048c4:	464b      	mov	r3, r9
 80048c6:	460a      	mov	r2, r1
 80048c8:	eb42 0303 	adc.w	r3, r2, r3
 80048cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048e8:	4649      	mov	r1, r9
 80048ea:	008b      	lsls	r3, r1, #2
 80048ec:	4641      	mov	r1, r8
 80048ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048f2:	4641      	mov	r1, r8
 80048f4:	008a      	lsls	r2, r1, #2
 80048f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048fa:	f7fb fcc1 	bl	8000280 <__aeabi_uldivmod>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4611      	mov	r1, r2
 8004904:	4b38      	ldr	r3, [pc, #224]	@ (80049e8 <UART_SetConfig+0x4e4>)
 8004906:	fba3 2301 	umull	r2, r3, r3, r1
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	2264      	movs	r2, #100	@ 0x64
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	1acb      	subs	r3, r1, r3
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	3332      	adds	r3, #50	@ 0x32
 8004918:	4a33      	ldr	r2, [pc, #204]	@ (80049e8 <UART_SetConfig+0x4e4>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004924:	441c      	add	r4, r3
 8004926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492a:	2200      	movs	r2, #0
 800492c:	673b      	str	r3, [r7, #112]	@ 0x70
 800492e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004930:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004934:	4642      	mov	r2, r8
 8004936:	464b      	mov	r3, r9
 8004938:	1891      	adds	r1, r2, r2
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	415b      	adcs	r3, r3
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004944:	4641      	mov	r1, r8
 8004946:	1851      	adds	r1, r2, r1
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	4649      	mov	r1, r9
 800494c:	414b      	adcs	r3, r1
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800495c:	4659      	mov	r1, fp
 800495e:	00cb      	lsls	r3, r1, #3
 8004960:	4651      	mov	r1, sl
 8004962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004966:	4651      	mov	r1, sl
 8004968:	00ca      	lsls	r2, r1, #3
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	4603      	mov	r3, r0
 8004970:	4642      	mov	r2, r8
 8004972:	189b      	adds	r3, r3, r2
 8004974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004976:	464b      	mov	r3, r9
 8004978:	460a      	mov	r2, r1
 800497a:	eb42 0303 	adc.w	r3, r2, r3
 800497e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	663b      	str	r3, [r7, #96]	@ 0x60
 800498a:	667a      	str	r2, [r7, #100]	@ 0x64
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004998:	4649      	mov	r1, r9
 800499a:	008b      	lsls	r3, r1, #2
 800499c:	4641      	mov	r1, r8
 800499e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a2:	4641      	mov	r1, r8
 80049a4:	008a      	lsls	r2, r1, #2
 80049a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049aa:	f7fb fc69 	bl	8000280 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <UART_SetConfig+0x4e4>)
 80049b4:	fba3 1302 	umull	r1, r3, r3, r2
 80049b8:	095b      	lsrs	r3, r3, #5
 80049ba:	2164      	movs	r1, #100	@ 0x64
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	3332      	adds	r3, #50	@ 0x32
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <UART_SetConfig+0x4e4>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	f003 020f 	and.w	r2, r3, #15
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4422      	add	r2, r4
 80049da:	609a      	str	r2, [r3, #8]
}
 80049dc:	bf00      	nop
 80049de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049e2:	46bd      	mov	sp, r7
 80049e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e8:	51eb851f 	.word	0x51eb851f

080049ec <std>:
 80049ec:	2300      	movs	r3, #0
 80049ee:	b510      	push	{r4, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	e9c0 3300 	strd	r3, r3, [r0]
 80049f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049fa:	6083      	str	r3, [r0, #8]
 80049fc:	8181      	strh	r1, [r0, #12]
 80049fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a00:	81c2      	strh	r2, [r0, #14]
 8004a02:	6183      	str	r3, [r0, #24]
 8004a04:	4619      	mov	r1, r3
 8004a06:	2208      	movs	r2, #8
 8004a08:	305c      	adds	r0, #92	@ 0x5c
 8004a0a:	f000 f9f9 	bl	8004e00 <memset>
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <std+0x58>)
 8004a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a12:	4b0d      	ldr	r3, [pc, #52]	@ (8004a48 <std+0x5c>)
 8004a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a16:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <std+0x60>)
 8004a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <std+0x64>)
 8004a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <std+0x68>)
 8004a20:	6224      	str	r4, [r4, #32]
 8004a22:	429c      	cmp	r4, r3
 8004a24:	d006      	beq.n	8004a34 <std+0x48>
 8004a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a2a:	4294      	cmp	r4, r2
 8004a2c:	d002      	beq.n	8004a34 <std+0x48>
 8004a2e:	33d0      	adds	r3, #208	@ 0xd0
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d105      	bne.n	8004a40 <std+0x54>
 8004a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3c:	f000 ba58 	b.w	8004ef0 <__retarget_lock_init_recursive>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	bf00      	nop
 8004a44:	08004c51 	.word	0x08004c51
 8004a48:	08004c73 	.word	0x08004c73
 8004a4c:	08004cab 	.word	0x08004cab
 8004a50:	08004ccf 	.word	0x08004ccf
 8004a54:	200002e4 	.word	0x200002e4

08004a58 <stdio_exit_handler>:
 8004a58:	4a02      	ldr	r2, [pc, #8]	@ (8004a64 <stdio_exit_handler+0xc>)
 8004a5a:	4903      	ldr	r1, [pc, #12]	@ (8004a68 <stdio_exit_handler+0x10>)
 8004a5c:	4803      	ldr	r0, [pc, #12]	@ (8004a6c <stdio_exit_handler+0x14>)
 8004a5e:	f000 b869 	b.w	8004b34 <_fwalk_sglue>
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	08005791 	.word	0x08005791
 8004a6c:	2000001c 	.word	0x2000001c

08004a70 <cleanup_stdio>:
 8004a70:	6841      	ldr	r1, [r0, #4]
 8004a72:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <cleanup_stdio+0x34>)
 8004a74:	4299      	cmp	r1, r3
 8004a76:	b510      	push	{r4, lr}
 8004a78:	4604      	mov	r4, r0
 8004a7a:	d001      	beq.n	8004a80 <cleanup_stdio+0x10>
 8004a7c:	f000 fe88 	bl	8005790 <_fflush_r>
 8004a80:	68a1      	ldr	r1, [r4, #8]
 8004a82:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <cleanup_stdio+0x38>)
 8004a84:	4299      	cmp	r1, r3
 8004a86:	d002      	beq.n	8004a8e <cleanup_stdio+0x1e>
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f000 fe81 	bl	8005790 <_fflush_r>
 8004a8e:	68e1      	ldr	r1, [r4, #12]
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <cleanup_stdio+0x3c>)
 8004a92:	4299      	cmp	r1, r3
 8004a94:	d004      	beq.n	8004aa0 <cleanup_stdio+0x30>
 8004a96:	4620      	mov	r0, r4
 8004a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a9c:	f000 be78 	b.w	8005790 <_fflush_r>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200002e4 	.word	0x200002e4
 8004aa8:	2000034c 	.word	0x2000034c
 8004aac:	200003b4 	.word	0x200003b4

08004ab0 <global_stdio_init.part.0>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <global_stdio_init.part.0+0x30>)
 8004ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8004ae4 <global_stdio_init.part.0+0x34>)
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <global_stdio_init.part.0+0x38>)
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	4620      	mov	r0, r4
 8004abc:	2200      	movs	r2, #0
 8004abe:	2104      	movs	r1, #4
 8004ac0:	f7ff ff94 	bl	80049ec <std>
 8004ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ac8:	2201      	movs	r2, #1
 8004aca:	2109      	movs	r1, #9
 8004acc:	f7ff ff8e 	bl	80049ec <std>
 8004ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ada:	2112      	movs	r1, #18
 8004adc:	f7ff bf86 	b.w	80049ec <std>
 8004ae0:	2000041c 	.word	0x2000041c
 8004ae4:	200002e4 	.word	0x200002e4
 8004ae8:	08004a59 	.word	0x08004a59

08004aec <__sfp_lock_acquire>:
 8004aec:	4801      	ldr	r0, [pc, #4]	@ (8004af4 <__sfp_lock_acquire+0x8>)
 8004aee:	f000 ba00 	b.w	8004ef2 <__retarget_lock_acquire_recursive>
 8004af2:	bf00      	nop
 8004af4:	20000425 	.word	0x20000425

08004af8 <__sfp_lock_release>:
 8004af8:	4801      	ldr	r0, [pc, #4]	@ (8004b00 <__sfp_lock_release+0x8>)
 8004afa:	f000 b9fb 	b.w	8004ef4 <__retarget_lock_release_recursive>
 8004afe:	bf00      	nop
 8004b00:	20000425 	.word	0x20000425

08004b04 <__sinit>:
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
 8004b08:	f7ff fff0 	bl	8004aec <__sfp_lock_acquire>
 8004b0c:	6a23      	ldr	r3, [r4, #32]
 8004b0e:	b11b      	cbz	r3, 8004b18 <__sinit+0x14>
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f7ff bff0 	b.w	8004af8 <__sfp_lock_release>
 8004b18:	4b04      	ldr	r3, [pc, #16]	@ (8004b2c <__sinit+0x28>)
 8004b1a:	6223      	str	r3, [r4, #32]
 8004b1c:	4b04      	ldr	r3, [pc, #16]	@ (8004b30 <__sinit+0x2c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f5      	bne.n	8004b10 <__sinit+0xc>
 8004b24:	f7ff ffc4 	bl	8004ab0 <global_stdio_init.part.0>
 8004b28:	e7f2      	b.n	8004b10 <__sinit+0xc>
 8004b2a:	bf00      	nop
 8004b2c:	08004a71 	.word	0x08004a71
 8004b30:	2000041c 	.word	0x2000041c

08004b34 <_fwalk_sglue>:
 8004b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b38:	4607      	mov	r7, r0
 8004b3a:	4688      	mov	r8, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	2600      	movs	r6, #0
 8004b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b44:	f1b9 0901 	subs.w	r9, r9, #1
 8004b48:	d505      	bpl.n	8004b56 <_fwalk_sglue+0x22>
 8004b4a:	6824      	ldr	r4, [r4, #0]
 8004b4c:	2c00      	cmp	r4, #0
 8004b4e:	d1f7      	bne.n	8004b40 <_fwalk_sglue+0xc>
 8004b50:	4630      	mov	r0, r6
 8004b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d907      	bls.n	8004b6c <_fwalk_sglue+0x38>
 8004b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d003      	beq.n	8004b6c <_fwalk_sglue+0x38>
 8004b64:	4629      	mov	r1, r5
 8004b66:	4638      	mov	r0, r7
 8004b68:	47c0      	blx	r8
 8004b6a:	4306      	orrs	r6, r0
 8004b6c:	3568      	adds	r5, #104	@ 0x68
 8004b6e:	e7e9      	b.n	8004b44 <_fwalk_sglue+0x10>

08004b70 <iprintf>:
 8004b70:	b40f      	push	{r0, r1, r2, r3}
 8004b72:	b507      	push	{r0, r1, r2, lr}
 8004b74:	4906      	ldr	r1, [pc, #24]	@ (8004b90 <iprintf+0x20>)
 8004b76:	ab04      	add	r3, sp, #16
 8004b78:	6808      	ldr	r0, [r1, #0]
 8004b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b7e:	6881      	ldr	r1, [r0, #8]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	f000 fadb 	bl	800513c <_vfiprintf_r>
 8004b86:	b003      	add	sp, #12
 8004b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b8c:	b004      	add	sp, #16
 8004b8e:	4770      	bx	lr
 8004b90:	20000018 	.word	0x20000018

08004b94 <_puts_r>:
 8004b94:	6a03      	ldr	r3, [r0, #32]
 8004b96:	b570      	push	{r4, r5, r6, lr}
 8004b98:	6884      	ldr	r4, [r0, #8]
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	460e      	mov	r6, r1
 8004b9e:	b90b      	cbnz	r3, 8004ba4 <_puts_r+0x10>
 8004ba0:	f7ff ffb0 	bl	8004b04 <__sinit>
 8004ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ba6:	07db      	lsls	r3, r3, #31
 8004ba8:	d405      	bmi.n	8004bb6 <_puts_r+0x22>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	0598      	lsls	r0, r3, #22
 8004bae:	d402      	bmi.n	8004bb6 <_puts_r+0x22>
 8004bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bb2:	f000 f99e 	bl	8004ef2 <__retarget_lock_acquire_recursive>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	0719      	lsls	r1, r3, #28
 8004bba:	d502      	bpl.n	8004bc2 <_puts_r+0x2e>
 8004bbc:	6923      	ldr	r3, [r4, #16]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d135      	bne.n	8004c2e <_puts_r+0x9a>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f8c5 	bl	8004d54 <__swsetup_r>
 8004bca:	b380      	cbz	r0, 8004c2e <_puts_r+0x9a>
 8004bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8004bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bd2:	07da      	lsls	r2, r3, #31
 8004bd4:	d405      	bmi.n	8004be2 <_puts_r+0x4e>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	059b      	lsls	r3, r3, #22
 8004bda:	d402      	bmi.n	8004be2 <_puts_r+0x4e>
 8004bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bde:	f000 f989 	bl	8004ef4 <__retarget_lock_release_recursive>
 8004be2:	4628      	mov	r0, r5
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da04      	bge.n	8004bf4 <_puts_r+0x60>
 8004bea:	69a2      	ldr	r2, [r4, #24]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dc17      	bgt.n	8004c20 <_puts_r+0x8c>
 8004bf0:	290a      	cmp	r1, #10
 8004bf2:	d015      	beq.n	8004c20 <_puts_r+0x8c>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	7019      	strb	r1, [r3, #0]
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c02:	3b01      	subs	r3, #1
 8004c04:	60a3      	str	r3, [r4, #8]
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d1ed      	bne.n	8004be6 <_puts_r+0x52>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da11      	bge.n	8004c32 <_puts_r+0x9e>
 8004c0e:	4622      	mov	r2, r4
 8004c10:	210a      	movs	r1, #10
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 f85f 	bl	8004cd6 <__swbuf_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d0d7      	beq.n	8004bcc <_puts_r+0x38>
 8004c1c:	250a      	movs	r5, #10
 8004c1e:	e7d7      	b.n	8004bd0 <_puts_r+0x3c>
 8004c20:	4622      	mov	r2, r4
 8004c22:	4628      	mov	r0, r5
 8004c24:	f000 f857 	bl	8004cd6 <__swbuf_r>
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d1e7      	bne.n	8004bfc <_puts_r+0x68>
 8004c2c:	e7ce      	b.n	8004bcc <_puts_r+0x38>
 8004c2e:	3e01      	subs	r6, #1
 8004c30:	e7e4      	b.n	8004bfc <_puts_r+0x68>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	220a      	movs	r2, #10
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	e7ee      	b.n	8004c1c <_puts_r+0x88>
	...

08004c40 <puts>:
 8004c40:	4b02      	ldr	r3, [pc, #8]	@ (8004c4c <puts+0xc>)
 8004c42:	4601      	mov	r1, r0
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f7ff bfa5 	b.w	8004b94 <_puts_r>
 8004c4a:	bf00      	nop
 8004c4c:	20000018 	.word	0x20000018

08004c50 <__sread>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	460c      	mov	r4, r1
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	f000 f8fc 	bl	8004e54 <_read_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	bfab      	itete	ge
 8004c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c62:	89a3      	ldrhlt	r3, [r4, #12]
 8004c64:	181b      	addge	r3, r3, r0
 8004c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004c6a:	bfac      	ite	ge
 8004c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004c6e:	81a3      	strhlt	r3, [r4, #12]
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <__swrite>:
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	461f      	mov	r7, r3
 8004c78:	898b      	ldrh	r3, [r1, #12]
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4616      	mov	r6, r2
 8004c82:	d505      	bpl.n	8004c90 <__swrite+0x1e>
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f000 f8d0 	bl	8004e30 <_lseek_r>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	f000 b8e7 	b.w	8004e78 <_write_r>

08004caa <__sseek>:
 8004caa:	b510      	push	{r4, lr}
 8004cac:	460c      	mov	r4, r1
 8004cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb2:	f000 f8bd 	bl	8004e30 <_lseek_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	bf15      	itete	ne
 8004cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cc6:	81a3      	strheq	r3, [r4, #12]
 8004cc8:	bf18      	it	ne
 8004cca:	81a3      	strhne	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__sclose>:
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 b89d 	b.w	8004e10 <_close_r>

08004cd6 <__swbuf_r>:
 8004cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd8:	460e      	mov	r6, r1
 8004cda:	4614      	mov	r4, r2
 8004cdc:	4605      	mov	r5, r0
 8004cde:	b118      	cbz	r0, 8004ce8 <__swbuf_r+0x12>
 8004ce0:	6a03      	ldr	r3, [r0, #32]
 8004ce2:	b90b      	cbnz	r3, 8004ce8 <__swbuf_r+0x12>
 8004ce4:	f7ff ff0e 	bl	8004b04 <__sinit>
 8004ce8:	69a3      	ldr	r3, [r4, #24]
 8004cea:	60a3      	str	r3, [r4, #8]
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	071a      	lsls	r2, r3, #28
 8004cf0:	d501      	bpl.n	8004cf6 <__swbuf_r+0x20>
 8004cf2:	6923      	ldr	r3, [r4, #16]
 8004cf4:	b943      	cbnz	r3, 8004d08 <__swbuf_r+0x32>
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 f82b 	bl	8004d54 <__swsetup_r>
 8004cfe:	b118      	cbz	r0, 8004d08 <__swbuf_r+0x32>
 8004d00:	f04f 37ff 	mov.w	r7, #4294967295
 8004d04:	4638      	mov	r0, r7
 8004d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	1a98      	subs	r0, r3, r2
 8004d0e:	6963      	ldr	r3, [r4, #20]
 8004d10:	b2f6      	uxtb	r6, r6
 8004d12:	4283      	cmp	r3, r0
 8004d14:	4637      	mov	r7, r6
 8004d16:	dc05      	bgt.n	8004d24 <__swbuf_r+0x4e>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fd38 	bl	8005790 <_fflush_r>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d1ed      	bne.n	8004d00 <__swbuf_r+0x2a>
 8004d24:	68a3      	ldr	r3, [r4, #8]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	60a3      	str	r3, [r4, #8]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	6022      	str	r2, [r4, #0]
 8004d30:	701e      	strb	r6, [r3, #0]
 8004d32:	6962      	ldr	r2, [r4, #20]
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d004      	beq.n	8004d44 <__swbuf_r+0x6e>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	07db      	lsls	r3, r3, #31
 8004d3e:	d5e1      	bpl.n	8004d04 <__swbuf_r+0x2e>
 8004d40:	2e0a      	cmp	r6, #10
 8004d42:	d1df      	bne.n	8004d04 <__swbuf_r+0x2e>
 8004d44:	4621      	mov	r1, r4
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fd22 	bl	8005790 <_fflush_r>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d0d9      	beq.n	8004d04 <__swbuf_r+0x2e>
 8004d50:	e7d6      	b.n	8004d00 <__swbuf_r+0x2a>
	...

08004d54 <__swsetup_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4b29      	ldr	r3, [pc, #164]	@ (8004dfc <__swsetup_r+0xa8>)
 8004d58:	4605      	mov	r5, r0
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	b118      	cbz	r0, 8004d68 <__swsetup_r+0x14>
 8004d60:	6a03      	ldr	r3, [r0, #32]
 8004d62:	b90b      	cbnz	r3, 8004d68 <__swsetup_r+0x14>
 8004d64:	f7ff fece 	bl	8004b04 <__sinit>
 8004d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d6c:	0719      	lsls	r1, r3, #28
 8004d6e:	d422      	bmi.n	8004db6 <__swsetup_r+0x62>
 8004d70:	06da      	lsls	r2, r3, #27
 8004d72:	d407      	bmi.n	8004d84 <__swsetup_r+0x30>
 8004d74:	2209      	movs	r2, #9
 8004d76:	602a      	str	r2, [r5, #0]
 8004d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d82:	e033      	b.n	8004dec <__swsetup_r+0x98>
 8004d84:	0758      	lsls	r0, r3, #29
 8004d86:	d512      	bpl.n	8004dae <__swsetup_r+0x5a>
 8004d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d8a:	b141      	cbz	r1, 8004d9e <__swsetup_r+0x4a>
 8004d8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d90:	4299      	cmp	r1, r3
 8004d92:	d002      	beq.n	8004d9a <__swsetup_r+0x46>
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f8af 	bl	8004ef8 <_free_r>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	2300      	movs	r3, #0
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	6923      	ldr	r3, [r4, #16]
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	6923      	ldr	r3, [r4, #16]
 8004db8:	b94b      	cbnz	r3, 8004dce <__swsetup_r+0x7a>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc4:	d003      	beq.n	8004dce <__swsetup_r+0x7a>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 fd2f 	bl	800582c <__smakebuf_r>
 8004dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dd2:	f013 0201 	ands.w	r2, r3, #1
 8004dd6:	d00a      	beq.n	8004dee <__swsetup_r+0x9a>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60a2      	str	r2, [r4, #8]
 8004ddc:	6962      	ldr	r2, [r4, #20]
 8004dde:	4252      	negs	r2, r2
 8004de0:	61a2      	str	r2, [r4, #24]
 8004de2:	6922      	ldr	r2, [r4, #16]
 8004de4:	b942      	cbnz	r2, 8004df8 <__swsetup_r+0xa4>
 8004de6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004dea:	d1c5      	bne.n	8004d78 <__swsetup_r+0x24>
 8004dec:	bd38      	pop	{r3, r4, r5, pc}
 8004dee:	0799      	lsls	r1, r3, #30
 8004df0:	bf58      	it	pl
 8004df2:	6962      	ldrpl	r2, [r4, #20]
 8004df4:	60a2      	str	r2, [r4, #8]
 8004df6:	e7f4      	b.n	8004de2 <__swsetup_r+0x8e>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e7f7      	b.n	8004dec <__swsetup_r+0x98>
 8004dfc:	20000018 	.word	0x20000018

08004e00 <memset>:
 8004e00:	4402      	add	r2, r0
 8004e02:	4603      	mov	r3, r0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d100      	bne.n	8004e0a <memset+0xa>
 8004e08:	4770      	bx	lr
 8004e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0e:	e7f9      	b.n	8004e04 <memset+0x4>

08004e10 <_close_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d06      	ldr	r5, [pc, #24]	@ (8004e2c <_close_r+0x1c>)
 8004e14:	2300      	movs	r3, #0
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fc f80b 	bl	8000e36 <_close>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_close_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_close_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000420 	.word	0x20000420

08004e30 <_lseek_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d07      	ldr	r5, [pc, #28]	@ (8004e50 <_lseek_r+0x20>)
 8004e34:	4604      	mov	r4, r0
 8004e36:	4608      	mov	r0, r1
 8004e38:	4611      	mov	r1, r2
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fc f820 	bl	8000e84 <_lseek>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_lseek_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_lseek_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	20000420 	.word	0x20000420

08004e54 <_read_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d07      	ldr	r5, [pc, #28]	@ (8004e74 <_read_r+0x20>)
 8004e58:	4604      	mov	r4, r0
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fb ffae 	bl	8000dc4 <_read>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_read_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_read_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	20000420 	.word	0x20000420

08004e78 <_write_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4d07      	ldr	r5, [pc, #28]	@ (8004e98 <_write_r+0x20>)
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4611      	mov	r1, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fb ffb9 	bl	8000dfe <_write>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_write_r+0x1e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_write_r+0x1e>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	20000420 	.word	0x20000420

08004e9c <__errno>:
 8004e9c:	4b01      	ldr	r3, [pc, #4]	@ (8004ea4 <__errno+0x8>)
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	20000018 	.word	0x20000018

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	@ (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	@ (8004eec <__libc_init_array+0x44>)
 8004ebc:	f000 fd24 	bl	8005908 <_init>
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	080059b0 	.word	0x080059b0
 8004ee4:	080059b0 	.word	0x080059b0
 8004ee8:	080059b0 	.word	0x080059b0
 8004eec:	080059b4 	.word	0x080059b4

08004ef0 <__retarget_lock_init_recursive>:
 8004ef0:	4770      	bx	lr

08004ef2 <__retarget_lock_acquire_recursive>:
 8004ef2:	4770      	bx	lr

08004ef4 <__retarget_lock_release_recursive>:
 8004ef4:	4770      	bx	lr
	...

08004ef8 <_free_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4605      	mov	r5, r0
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d041      	beq.n	8004f84 <_free_r+0x8c>
 8004f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f04:	1f0c      	subs	r4, r1, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfb8      	it	lt
 8004f0a:	18e4      	addlt	r4, r4, r3
 8004f0c:	f000 f8e0 	bl	80050d0 <__malloc_lock>
 8004f10:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <_free_r+0x90>)
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	b933      	cbnz	r3, 8004f24 <_free_r+0x2c>
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f20:	f000 b8dc 	b.w	80050dc <__malloc_unlock>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d908      	bls.n	8004f3a <_free_r+0x42>
 8004f28:	6820      	ldr	r0, [r4, #0]
 8004f2a:	1821      	adds	r1, r4, r0
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf01      	itttt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	1809      	addeq	r1, r1, r0
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	e7ed      	b.n	8004f16 <_free_r+0x1e>
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	b10b      	cbz	r3, 8004f44 <_free_r+0x4c>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d9fa      	bls.n	8004f3a <_free_r+0x42>
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	1850      	adds	r0, r2, r1
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d10b      	bne.n	8004f64 <_free_r+0x6c>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	4401      	add	r1, r0
 8004f50:	1850      	adds	r0, r2, r1
 8004f52:	4283      	cmp	r3, r0
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	d1e0      	bne.n	8004f1a <_free_r+0x22>
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	6053      	str	r3, [r2, #4]
 8004f5e:	4408      	add	r0, r1
 8004f60:	6010      	str	r0, [r2, #0]
 8004f62:	e7da      	b.n	8004f1a <_free_r+0x22>
 8004f64:	d902      	bls.n	8004f6c <_free_r+0x74>
 8004f66:	230c      	movs	r3, #12
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	e7d6      	b.n	8004f1a <_free_r+0x22>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	1821      	adds	r1, r4, r0
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf04      	itt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	bf04      	itt	eq
 8004f7c:	1809      	addeq	r1, r1, r0
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6054      	str	r4, [r2, #4]
 8004f82:	e7ca      	b.n	8004f1a <_free_r+0x22>
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	2000042c 	.word	0x2000042c

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fcc <sbrk_aligned+0x40>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fca6 	bl	80058e8 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fca1 	bl	80058e8 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d103      	bne.n	8004fb2 <sbrk_aligned+0x26>
 8004faa:	f04f 34ff 	mov.w	r4, #4294967295
 8004fae:	4620      	mov	r0, r4
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	1cc4      	adds	r4, r0, #3
 8004fb4:	f024 0403 	bic.w	r4, r4, #3
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d0f8      	beq.n	8004fae <sbrk_aligned+0x22>
 8004fbc:	1a21      	subs	r1, r4, r0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fc92 	bl	80058e8 <_sbrk_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d1f2      	bne.n	8004fae <sbrk_aligned+0x22>
 8004fc8:	e7ef      	b.n	8004faa <sbrk_aligned+0x1e>
 8004fca:	bf00      	nop
 8004fcc:	20000428 	.word	0x20000428

08004fd0 <_malloc_r>:
 8004fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd4:	1ccd      	adds	r5, r1, #3
 8004fd6:	f025 0503 	bic.w	r5, r5, #3
 8004fda:	3508      	adds	r5, #8
 8004fdc:	2d0c      	cmp	r5, #12
 8004fde:	bf38      	it	cc
 8004fe0:	250c      	movcc	r5, #12
 8004fe2:	2d00      	cmp	r5, #0
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	db01      	blt.n	8004fec <_malloc_r+0x1c>
 8004fe8:	42a9      	cmp	r1, r5
 8004fea:	d904      	bls.n	8004ff6 <_malloc_r+0x26>
 8004fec:	230c      	movs	r3, #12
 8004fee:	6033      	str	r3, [r6, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050cc <_malloc_r+0xfc>
 8004ffa:	f000 f869 	bl	80050d0 <__malloc_lock>
 8004ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8005002:	461c      	mov	r4, r3
 8005004:	bb44      	cbnz	r4, 8005058 <_malloc_r+0x88>
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff ffbf 	bl	8004f8c <sbrk_aligned>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	4604      	mov	r4, r0
 8005012:	d158      	bne.n	80050c6 <_malloc_r+0xf6>
 8005014:	f8d8 4000 	ldr.w	r4, [r8]
 8005018:	4627      	mov	r7, r4
 800501a:	2f00      	cmp	r7, #0
 800501c:	d143      	bne.n	80050a6 <_malloc_r+0xd6>
 800501e:	2c00      	cmp	r4, #0
 8005020:	d04b      	beq.n	80050ba <_malloc_r+0xea>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	4639      	mov	r1, r7
 8005026:	4630      	mov	r0, r6
 8005028:	eb04 0903 	add.w	r9, r4, r3
 800502c:	f000 fc5c 	bl	80058e8 <_sbrk_r>
 8005030:	4581      	cmp	r9, r0
 8005032:	d142      	bne.n	80050ba <_malloc_r+0xea>
 8005034:	6821      	ldr	r1, [r4, #0]
 8005036:	1a6d      	subs	r5, r5, r1
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffa6 	bl	8004f8c <sbrk_aligned>
 8005040:	3001      	adds	r0, #1
 8005042:	d03a      	beq.n	80050ba <_malloc_r+0xea>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	442b      	add	r3, r5
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	f8d8 3000 	ldr.w	r3, [r8]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	bb62      	cbnz	r2, 80050ac <_malloc_r+0xdc>
 8005052:	f8c8 7000 	str.w	r7, [r8]
 8005056:	e00f      	b.n	8005078 <_malloc_r+0xa8>
 8005058:	6822      	ldr	r2, [r4, #0]
 800505a:	1b52      	subs	r2, r2, r5
 800505c:	d420      	bmi.n	80050a0 <_malloc_r+0xd0>
 800505e:	2a0b      	cmp	r2, #11
 8005060:	d917      	bls.n	8005092 <_malloc_r+0xc2>
 8005062:	1961      	adds	r1, r4, r5
 8005064:	42a3      	cmp	r3, r4
 8005066:	6025      	str	r5, [r4, #0]
 8005068:	bf18      	it	ne
 800506a:	6059      	strne	r1, [r3, #4]
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	bf08      	it	eq
 8005070:	f8c8 1000 	streq.w	r1, [r8]
 8005074:	5162      	str	r2, [r4, r5]
 8005076:	604b      	str	r3, [r1, #4]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f82f 	bl	80050dc <__malloc_unlock>
 800507e:	f104 000b 	add.w	r0, r4, #11
 8005082:	1d23      	adds	r3, r4, #4
 8005084:	f020 0007 	bic.w	r0, r0, #7
 8005088:	1ac2      	subs	r2, r0, r3
 800508a:	bf1c      	itt	ne
 800508c:	1a1b      	subne	r3, r3, r0
 800508e:	50a3      	strne	r3, [r4, r2]
 8005090:	e7af      	b.n	8004ff2 <_malloc_r+0x22>
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	42a3      	cmp	r3, r4
 8005096:	bf0c      	ite	eq
 8005098:	f8c8 2000 	streq.w	r2, [r8]
 800509c:	605a      	strne	r2, [r3, #4]
 800509e:	e7eb      	b.n	8005078 <_malloc_r+0xa8>
 80050a0:	4623      	mov	r3, r4
 80050a2:	6864      	ldr	r4, [r4, #4]
 80050a4:	e7ae      	b.n	8005004 <_malloc_r+0x34>
 80050a6:	463c      	mov	r4, r7
 80050a8:	687f      	ldr	r7, [r7, #4]
 80050aa:	e7b6      	b.n	800501a <_malloc_r+0x4a>
 80050ac:	461a      	mov	r2, r3
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	42a3      	cmp	r3, r4
 80050b2:	d1fb      	bne.n	80050ac <_malloc_r+0xdc>
 80050b4:	2300      	movs	r3, #0
 80050b6:	6053      	str	r3, [r2, #4]
 80050b8:	e7de      	b.n	8005078 <_malloc_r+0xa8>
 80050ba:	230c      	movs	r3, #12
 80050bc:	6033      	str	r3, [r6, #0]
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f80c 	bl	80050dc <__malloc_unlock>
 80050c4:	e794      	b.n	8004ff0 <_malloc_r+0x20>
 80050c6:	6005      	str	r5, [r0, #0]
 80050c8:	e7d6      	b.n	8005078 <_malloc_r+0xa8>
 80050ca:	bf00      	nop
 80050cc:	2000042c 	.word	0x2000042c

080050d0 <__malloc_lock>:
 80050d0:	4801      	ldr	r0, [pc, #4]	@ (80050d8 <__malloc_lock+0x8>)
 80050d2:	f7ff bf0e 	b.w	8004ef2 <__retarget_lock_acquire_recursive>
 80050d6:	bf00      	nop
 80050d8:	20000424 	.word	0x20000424

080050dc <__malloc_unlock>:
 80050dc:	4801      	ldr	r0, [pc, #4]	@ (80050e4 <__malloc_unlock+0x8>)
 80050de:	f7ff bf09 	b.w	8004ef4 <__retarget_lock_release_recursive>
 80050e2:	bf00      	nop
 80050e4:	20000424 	.word	0x20000424

080050e8 <__sfputc_r>:
 80050e8:	6893      	ldr	r3, [r2, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	b410      	push	{r4}
 80050f0:	6093      	str	r3, [r2, #8]
 80050f2:	da08      	bge.n	8005106 <__sfputc_r+0x1e>
 80050f4:	6994      	ldr	r4, [r2, #24]
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	db01      	blt.n	80050fe <__sfputc_r+0x16>
 80050fa:	290a      	cmp	r1, #10
 80050fc:	d103      	bne.n	8005106 <__sfputc_r+0x1e>
 80050fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005102:	f7ff bde8 	b.w	8004cd6 <__swbuf_r>
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	1c58      	adds	r0, r3, #1
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	7019      	strb	r1, [r3, #0]
 800510e:	4608      	mov	r0, r1
 8005110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005114:	4770      	bx	lr

08005116 <__sfputs_r>:
 8005116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005118:	4606      	mov	r6, r0
 800511a:	460f      	mov	r7, r1
 800511c:	4614      	mov	r4, r2
 800511e:	18d5      	adds	r5, r2, r3
 8005120:	42ac      	cmp	r4, r5
 8005122:	d101      	bne.n	8005128 <__sfputs_r+0x12>
 8005124:	2000      	movs	r0, #0
 8005126:	e007      	b.n	8005138 <__sfputs_r+0x22>
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	463a      	mov	r2, r7
 800512e:	4630      	mov	r0, r6
 8005130:	f7ff ffda 	bl	80050e8 <__sfputc_r>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d1f3      	bne.n	8005120 <__sfputs_r+0xa>
 8005138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800513c <_vfiprintf_r>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	460d      	mov	r5, r1
 8005142:	b09d      	sub	sp, #116	@ 0x74
 8005144:	4614      	mov	r4, r2
 8005146:	4698      	mov	r8, r3
 8005148:	4606      	mov	r6, r0
 800514a:	b118      	cbz	r0, 8005154 <_vfiprintf_r+0x18>
 800514c:	6a03      	ldr	r3, [r0, #32]
 800514e:	b90b      	cbnz	r3, 8005154 <_vfiprintf_r+0x18>
 8005150:	f7ff fcd8 	bl	8004b04 <__sinit>
 8005154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005156:	07d9      	lsls	r1, r3, #31
 8005158:	d405      	bmi.n	8005166 <_vfiprintf_r+0x2a>
 800515a:	89ab      	ldrh	r3, [r5, #12]
 800515c:	059a      	lsls	r2, r3, #22
 800515e:	d402      	bmi.n	8005166 <_vfiprintf_r+0x2a>
 8005160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005162:	f7ff fec6 	bl	8004ef2 <__retarget_lock_acquire_recursive>
 8005166:	89ab      	ldrh	r3, [r5, #12]
 8005168:	071b      	lsls	r3, r3, #28
 800516a:	d501      	bpl.n	8005170 <_vfiprintf_r+0x34>
 800516c:	692b      	ldr	r3, [r5, #16]
 800516e:	b99b      	cbnz	r3, 8005198 <_vfiprintf_r+0x5c>
 8005170:	4629      	mov	r1, r5
 8005172:	4630      	mov	r0, r6
 8005174:	f7ff fdee 	bl	8004d54 <__swsetup_r>
 8005178:	b170      	cbz	r0, 8005198 <_vfiprintf_r+0x5c>
 800517a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800517c:	07dc      	lsls	r4, r3, #31
 800517e:	d504      	bpl.n	800518a <_vfiprintf_r+0x4e>
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
 8005184:	b01d      	add	sp, #116	@ 0x74
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	89ab      	ldrh	r3, [r5, #12]
 800518c:	0598      	lsls	r0, r3, #22
 800518e:	d4f7      	bmi.n	8005180 <_vfiprintf_r+0x44>
 8005190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005192:	f7ff feaf 	bl	8004ef4 <__retarget_lock_release_recursive>
 8005196:	e7f3      	b.n	8005180 <_vfiprintf_r+0x44>
 8005198:	2300      	movs	r3, #0
 800519a:	9309      	str	r3, [sp, #36]	@ 0x24
 800519c:	2320      	movs	r3, #32
 800519e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051a6:	2330      	movs	r3, #48	@ 0x30
 80051a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005358 <_vfiprintf_r+0x21c>
 80051ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051b0:	f04f 0901 	mov.w	r9, #1
 80051b4:	4623      	mov	r3, r4
 80051b6:	469a      	mov	sl, r3
 80051b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051bc:	b10a      	cbz	r2, 80051c2 <_vfiprintf_r+0x86>
 80051be:	2a25      	cmp	r2, #37	@ 0x25
 80051c0:	d1f9      	bne.n	80051b6 <_vfiprintf_r+0x7a>
 80051c2:	ebba 0b04 	subs.w	fp, sl, r4
 80051c6:	d00b      	beq.n	80051e0 <_vfiprintf_r+0xa4>
 80051c8:	465b      	mov	r3, fp
 80051ca:	4622      	mov	r2, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	4630      	mov	r0, r6
 80051d0:	f7ff ffa1 	bl	8005116 <__sfputs_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	f000 80a7 	beq.w	8005328 <_vfiprintf_r+0x1ec>
 80051da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051dc:	445a      	add	r2, fp
 80051de:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e0:	f89a 3000 	ldrb.w	r3, [sl]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 809f 	beq.w	8005328 <_vfiprintf_r+0x1ec>
 80051ea:	2300      	movs	r3, #0
 80051ec:	f04f 32ff 	mov.w	r2, #4294967295
 80051f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051f4:	f10a 0a01 	add.w	sl, sl, #1
 80051f8:	9304      	str	r3, [sp, #16]
 80051fa:	9307      	str	r3, [sp, #28]
 80051fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005200:	931a      	str	r3, [sp, #104]	@ 0x68
 8005202:	4654      	mov	r4, sl
 8005204:	2205      	movs	r2, #5
 8005206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520a:	4853      	ldr	r0, [pc, #332]	@ (8005358 <_vfiprintf_r+0x21c>)
 800520c:	f7fa ffe8 	bl	80001e0 <memchr>
 8005210:	9a04      	ldr	r2, [sp, #16]
 8005212:	b9d8      	cbnz	r0, 800524c <_vfiprintf_r+0x110>
 8005214:	06d1      	lsls	r1, r2, #27
 8005216:	bf44      	itt	mi
 8005218:	2320      	movmi	r3, #32
 800521a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800521e:	0713      	lsls	r3, r2, #28
 8005220:	bf44      	itt	mi
 8005222:	232b      	movmi	r3, #43	@ 0x2b
 8005224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005228:	f89a 3000 	ldrb.w	r3, [sl]
 800522c:	2b2a      	cmp	r3, #42	@ 0x2a
 800522e:	d015      	beq.n	800525c <_vfiprintf_r+0x120>
 8005230:	9a07      	ldr	r2, [sp, #28]
 8005232:	4654      	mov	r4, sl
 8005234:	2000      	movs	r0, #0
 8005236:	f04f 0c0a 	mov.w	ip, #10
 800523a:	4621      	mov	r1, r4
 800523c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005240:	3b30      	subs	r3, #48	@ 0x30
 8005242:	2b09      	cmp	r3, #9
 8005244:	d94b      	bls.n	80052de <_vfiprintf_r+0x1a2>
 8005246:	b1b0      	cbz	r0, 8005276 <_vfiprintf_r+0x13a>
 8005248:	9207      	str	r2, [sp, #28]
 800524a:	e014      	b.n	8005276 <_vfiprintf_r+0x13a>
 800524c:	eba0 0308 	sub.w	r3, r0, r8
 8005250:	fa09 f303 	lsl.w	r3, r9, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	9304      	str	r3, [sp, #16]
 8005258:	46a2      	mov	sl, r4
 800525a:	e7d2      	b.n	8005202 <_vfiprintf_r+0xc6>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	1d19      	adds	r1, r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	9103      	str	r1, [sp, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfbb      	ittet	lt
 8005268:	425b      	neglt	r3, r3
 800526a:	f042 0202 	orrlt.w	r2, r2, #2
 800526e:	9307      	strge	r3, [sp, #28]
 8005270:	9307      	strlt	r3, [sp, #28]
 8005272:	bfb8      	it	lt
 8005274:	9204      	strlt	r2, [sp, #16]
 8005276:	7823      	ldrb	r3, [r4, #0]
 8005278:	2b2e      	cmp	r3, #46	@ 0x2e
 800527a:	d10a      	bne.n	8005292 <_vfiprintf_r+0x156>
 800527c:	7863      	ldrb	r3, [r4, #1]
 800527e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005280:	d132      	bne.n	80052e8 <_vfiprintf_r+0x1ac>
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	1d1a      	adds	r2, r3, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	9203      	str	r2, [sp, #12]
 800528a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800528e:	3402      	adds	r4, #2
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005368 <_vfiprintf_r+0x22c>
 8005296:	7821      	ldrb	r1, [r4, #0]
 8005298:	2203      	movs	r2, #3
 800529a:	4650      	mov	r0, sl
 800529c:	f7fa ffa0 	bl	80001e0 <memchr>
 80052a0:	b138      	cbz	r0, 80052b2 <_vfiprintf_r+0x176>
 80052a2:	9b04      	ldr	r3, [sp, #16]
 80052a4:	eba0 000a 	sub.w	r0, r0, sl
 80052a8:	2240      	movs	r2, #64	@ 0x40
 80052aa:	4082      	lsls	r2, r0
 80052ac:	4313      	orrs	r3, r2
 80052ae:	3401      	adds	r4, #1
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b6:	4829      	ldr	r0, [pc, #164]	@ (800535c <_vfiprintf_r+0x220>)
 80052b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052bc:	2206      	movs	r2, #6
 80052be:	f7fa ff8f 	bl	80001e0 <memchr>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	d03f      	beq.n	8005346 <_vfiprintf_r+0x20a>
 80052c6:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <_vfiprintf_r+0x224>)
 80052c8:	bb1b      	cbnz	r3, 8005312 <_vfiprintf_r+0x1d6>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	3307      	adds	r3, #7
 80052ce:	f023 0307 	bic.w	r3, r3, #7
 80052d2:	3308      	adds	r3, #8
 80052d4:	9303      	str	r3, [sp, #12]
 80052d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d8:	443b      	add	r3, r7
 80052da:	9309      	str	r3, [sp, #36]	@ 0x24
 80052dc:	e76a      	b.n	80051b4 <_vfiprintf_r+0x78>
 80052de:	fb0c 3202 	mla	r2, ip, r2, r3
 80052e2:	460c      	mov	r4, r1
 80052e4:	2001      	movs	r0, #1
 80052e6:	e7a8      	b.n	800523a <_vfiprintf_r+0xfe>
 80052e8:	2300      	movs	r3, #0
 80052ea:	3401      	adds	r4, #1
 80052ec:	9305      	str	r3, [sp, #20]
 80052ee:	4619      	mov	r1, r3
 80052f0:	f04f 0c0a 	mov.w	ip, #10
 80052f4:	4620      	mov	r0, r4
 80052f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052fa:	3a30      	subs	r2, #48	@ 0x30
 80052fc:	2a09      	cmp	r2, #9
 80052fe:	d903      	bls.n	8005308 <_vfiprintf_r+0x1cc>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0c6      	beq.n	8005292 <_vfiprintf_r+0x156>
 8005304:	9105      	str	r1, [sp, #20]
 8005306:	e7c4      	b.n	8005292 <_vfiprintf_r+0x156>
 8005308:	fb0c 2101 	mla	r1, ip, r1, r2
 800530c:	4604      	mov	r4, r0
 800530e:	2301      	movs	r3, #1
 8005310:	e7f0      	b.n	80052f4 <_vfiprintf_r+0x1b8>
 8005312:	ab03      	add	r3, sp, #12
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	462a      	mov	r2, r5
 8005318:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <_vfiprintf_r+0x228>)
 800531a:	a904      	add	r1, sp, #16
 800531c:	4630      	mov	r0, r6
 800531e:	f3af 8000 	nop.w
 8005322:	4607      	mov	r7, r0
 8005324:	1c78      	adds	r0, r7, #1
 8005326:	d1d6      	bne.n	80052d6 <_vfiprintf_r+0x19a>
 8005328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d405      	bmi.n	800533a <_vfiprintf_r+0x1fe>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	059a      	lsls	r2, r3, #22
 8005332:	d402      	bmi.n	800533a <_vfiprintf_r+0x1fe>
 8005334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005336:	f7ff fddd 	bl	8004ef4 <__retarget_lock_release_recursive>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	065b      	lsls	r3, r3, #25
 800533e:	f53f af1f 	bmi.w	8005180 <_vfiprintf_r+0x44>
 8005342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005344:	e71e      	b.n	8005184 <_vfiprintf_r+0x48>
 8005346:	ab03      	add	r3, sp, #12
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	462a      	mov	r2, r5
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <_vfiprintf_r+0x228>)
 800534e:	a904      	add	r1, sp, #16
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f879 	bl	8005448 <_printf_i>
 8005356:	e7e4      	b.n	8005322 <_vfiprintf_r+0x1e6>
 8005358:	08005974 	.word	0x08005974
 800535c:	0800597e 	.word	0x0800597e
 8005360:	00000000 	.word	0x00000000
 8005364:	08005117 	.word	0x08005117
 8005368:	0800597a 	.word	0x0800597a

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4698      	mov	r8, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfb8      	it	lt
 8005380:	4613      	movlt	r3, r2
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005388:	4607      	mov	r7, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc26      	bgt.n	8005402 <_printf_common+0x96>
 80053b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	3b00      	subs	r3, #0
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42b      	bmi.n	800541c <_printf_common+0xb0>
 80053c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053c8:	4641      	mov	r1, r8
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c8      	blx	r9
 80053ce:	3001      	adds	r0, #1
 80053d0:	d01e      	beq.n	8005410 <_printf_common+0xa4>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	6922      	ldr	r2, [r4, #16]
 80053d6:	f003 0306 	and.w	r3, r3, #6
 80053da:	2b04      	cmp	r3, #4
 80053dc:	bf02      	ittt	eq
 80053de:	68e5      	ldreq	r5, [r4, #12]
 80053e0:	6833      	ldreq	r3, [r6, #0]
 80053e2:	1aed      	subeq	r5, r5, r3
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	2600      	movs	r6, #0
 80053f8:	341a      	adds	r4, #26
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d11a      	bne.n	8005434 <_printf_common+0xc8>
 80053fe:	2000      	movs	r0, #0
 8005400:	e008      	b.n	8005414 <_printf_common+0xa8>
 8005402:	2301      	movs	r3, #1
 8005404:	4652      	mov	r2, sl
 8005406:	4641      	mov	r1, r8
 8005408:	4638      	mov	r0, r7
 800540a:	47c8      	blx	r9
 800540c:	3001      	adds	r0, #1
 800540e:	d103      	bne.n	8005418 <_printf_common+0xac>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	3501      	adds	r5, #1
 800541a:	e7c6      	b.n	80053aa <_printf_common+0x3e>
 800541c:	18e1      	adds	r1, r4, r3
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	2030      	movs	r0, #48	@ 0x30
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005426:	4422      	add	r2, r4
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800542c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005430:	3302      	adds	r3, #2
 8005432:	e7c7      	b.n	80053c4 <_printf_common+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	4622      	mov	r2, r4
 8005438:	4641      	mov	r1, r8
 800543a:	4638      	mov	r0, r7
 800543c:	47c8      	blx	r9
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa4>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d9      	b.n	80053fa <_printf_common+0x8e>
	...

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	7e0f      	ldrb	r7, [r1, #24]
 800544e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005450:	2f78      	cmp	r7, #120	@ 0x78
 8005452:	4691      	mov	r9, r2
 8005454:	4680      	mov	r8, r0
 8005456:	460c      	mov	r4, r1
 8005458:	469a      	mov	sl, r3
 800545a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	@ 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d2 	beq.w	800560e <_printf_i+0x1c6>
 800546a:	2f58      	cmp	r7, #88	@ 0x58
 800546c:	f000 80b9 	beq.w	80055e2 <_printf_i+0x19a>
 8005470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a101      	add	r1, pc, #4	@ (adr r1, 8005488 <_printf_i+0x40>)
 8005484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	080055f5 	.word	0x080055f5
 80054b8:	0800551f 	.word	0x0800551f
 80054bc:	080055af 	.word	0x080055af
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	08005617 	.word	0x08005617
 80054cc:	08005471 	.word	0x08005471
 80054d0:	0800551f 	.word	0x0800551f
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055b7 	.word	0x080055b7
 80054e0:	6833      	ldr	r3, [r6, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6032      	str	r2, [r6, #0]
 80054e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e09d      	b.n	8005630 <_printf_i+0x1e8>
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	6031      	str	r1, [r6, #0]
 80054fc:	0606      	lsls	r6, r0, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xbc>
 8005500:	681d      	ldr	r5, [r3, #0]
 8005502:	e003      	b.n	800550c <_printf_i+0xc4>
 8005504:	0645      	lsls	r5, r0, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xb8>
 8005508:	f9b3 5000 	ldrsh.w	r5, [r3]
 800550c:	2d00      	cmp	r5, #0
 800550e:	da03      	bge.n	8005518 <_printf_i+0xd0>
 8005510:	232d      	movs	r3, #45	@ 0x2d
 8005512:	426d      	negs	r5, r5
 8005514:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005518:	4859      	ldr	r0, [pc, #356]	@ (8005680 <_printf_i+0x238>)
 800551a:	230a      	movs	r3, #10
 800551c:	e011      	b.n	8005542 <_printf_i+0xfa>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	0608      	lsls	r0, r1, #24
 8005524:	f853 5b04 	ldr.w	r5, [r3], #4
 8005528:	d402      	bmi.n	8005530 <_printf_i+0xe8>
 800552a:	0649      	lsls	r1, r1, #25
 800552c:	bf48      	it	mi
 800552e:	b2ad      	uxthmi	r5, r5
 8005530:	2f6f      	cmp	r7, #111	@ 0x6f
 8005532:	4853      	ldr	r0, [pc, #332]	@ (8005680 <_printf_i+0x238>)
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	bf14      	ite	ne
 8005538:	230a      	movne	r3, #10
 800553a:	2308      	moveq	r3, #8
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005542:	6866      	ldr	r6, [r4, #4]
 8005544:	60a6      	str	r6, [r4, #8]
 8005546:	2e00      	cmp	r6, #0
 8005548:	bfa2      	ittt	ge
 800554a:	6821      	ldrge	r1, [r4, #0]
 800554c:	f021 0104 	bicge.w	r1, r1, #4
 8005550:	6021      	strge	r1, [r4, #0]
 8005552:	b90d      	cbnz	r5, 8005558 <_printf_i+0x110>
 8005554:	2e00      	cmp	r6, #0
 8005556:	d04b      	beq.n	80055f0 <_printf_i+0x1a8>
 8005558:	4616      	mov	r6, r2
 800555a:	fbb5 f1f3 	udiv	r1, r5, r3
 800555e:	fb03 5711 	mls	r7, r3, r1, r5
 8005562:	5dc7      	ldrb	r7, [r0, r7]
 8005564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005568:	462f      	mov	r7, r5
 800556a:	42bb      	cmp	r3, r7
 800556c:	460d      	mov	r5, r1
 800556e:	d9f4      	bls.n	800555a <_printf_i+0x112>
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <_printf_i+0x144>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07df      	lsls	r7, r3, #31
 8005578:	d508      	bpl.n	800558c <_printf_i+0x144>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6861      	ldr	r1, [r4, #4]
 800557e:	4299      	cmp	r1, r3
 8005580:	bfde      	ittt	le
 8005582:	2330      	movle	r3, #48	@ 0x30
 8005584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800558c:	1b92      	subs	r2, r2, r6
 800558e:	6122      	str	r2, [r4, #16]
 8005590:	f8cd a000 	str.w	sl, [sp]
 8005594:	464b      	mov	r3, r9
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fee6 	bl	800536c <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14a      	bne.n	800563a <_printf_i+0x1f2>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b004      	add	sp, #16
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	4833      	ldr	r0, [pc, #204]	@ (8005684 <_printf_i+0x23c>)
 80055b8:	2778      	movs	r7, #120	@ 0x78
 80055ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	6831      	ldr	r1, [r6, #0]
 80055c2:	061f      	lsls	r7, r3, #24
 80055c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80055c8:	d402      	bmi.n	80055d0 <_printf_i+0x188>
 80055ca:	065f      	lsls	r7, r3, #25
 80055cc:	bf48      	it	mi
 80055ce:	b2ad      	uxthmi	r5, r5
 80055d0:	6031      	str	r1, [r6, #0]
 80055d2:	07d9      	lsls	r1, r3, #31
 80055d4:	bf44      	itt	mi
 80055d6:	f043 0320 	orrmi.w	r3, r3, #32
 80055da:	6023      	strmi	r3, [r4, #0]
 80055dc:	b11d      	cbz	r5, 80055e6 <_printf_i+0x19e>
 80055de:	2310      	movs	r3, #16
 80055e0:	e7ac      	b.n	800553c <_printf_i+0xf4>
 80055e2:	4827      	ldr	r0, [pc, #156]	@ (8005680 <_printf_i+0x238>)
 80055e4:	e7e9      	b.n	80055ba <_printf_i+0x172>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	f023 0320 	bic.w	r3, r3, #32
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	e7f6      	b.n	80055de <_printf_i+0x196>
 80055f0:	4616      	mov	r6, r2
 80055f2:	e7bd      	b.n	8005570 <_printf_i+0x128>
 80055f4:	6833      	ldr	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	6961      	ldr	r1, [r4, #20]
 80055fa:	1d18      	adds	r0, r3, #4
 80055fc:	6030      	str	r0, [r6, #0]
 80055fe:	062e      	lsls	r6, r5, #24
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	d501      	bpl.n	8005608 <_printf_i+0x1c0>
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	e002      	b.n	800560e <_printf_i+0x1c6>
 8005608:	0668      	lsls	r0, r5, #25
 800560a:	d5fb      	bpl.n	8005604 <_printf_i+0x1bc>
 800560c:	8019      	strh	r1, [r3, #0]
 800560e:	2300      	movs	r3, #0
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	4616      	mov	r6, r2
 8005614:	e7bc      	b.n	8005590 <_printf_i+0x148>
 8005616:	6833      	ldr	r3, [r6, #0]
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	6032      	str	r2, [r6, #0]
 800561c:	681e      	ldr	r6, [r3, #0]
 800561e:	6862      	ldr	r2, [r4, #4]
 8005620:	2100      	movs	r1, #0
 8005622:	4630      	mov	r0, r6
 8005624:	f7fa fddc 	bl	80001e0 <memchr>
 8005628:	b108      	cbz	r0, 800562e <_printf_i+0x1e6>
 800562a:	1b80      	subs	r0, r0, r6
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005638:	e7aa      	b.n	8005590 <_printf_i+0x148>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	4632      	mov	r2, r6
 800563e:	4649      	mov	r1, r9
 8005640:	4640      	mov	r0, r8
 8005642:	47d0      	blx	sl
 8005644:	3001      	adds	r0, #1
 8005646:	d0ad      	beq.n	80055a4 <_printf_i+0x15c>
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	079b      	lsls	r3, r3, #30
 800564c:	d413      	bmi.n	8005676 <_printf_i+0x22e>
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	9b03      	ldr	r3, [sp, #12]
 8005652:	4298      	cmp	r0, r3
 8005654:	bfb8      	it	lt
 8005656:	4618      	movlt	r0, r3
 8005658:	e7a6      	b.n	80055a8 <_printf_i+0x160>
 800565a:	2301      	movs	r3, #1
 800565c:	4632      	mov	r2, r6
 800565e:	4649      	mov	r1, r9
 8005660:	4640      	mov	r0, r8
 8005662:	47d0      	blx	sl
 8005664:	3001      	adds	r0, #1
 8005666:	d09d      	beq.n	80055a4 <_printf_i+0x15c>
 8005668:	3501      	adds	r5, #1
 800566a:	68e3      	ldr	r3, [r4, #12]
 800566c:	9903      	ldr	r1, [sp, #12]
 800566e:	1a5b      	subs	r3, r3, r1
 8005670:	42ab      	cmp	r3, r5
 8005672:	dcf2      	bgt.n	800565a <_printf_i+0x212>
 8005674:	e7eb      	b.n	800564e <_printf_i+0x206>
 8005676:	2500      	movs	r5, #0
 8005678:	f104 0619 	add.w	r6, r4, #25
 800567c:	e7f5      	b.n	800566a <_printf_i+0x222>
 800567e:	bf00      	nop
 8005680:	08005985 	.word	0x08005985
 8005684:	08005996 	.word	0x08005996

08005688 <__sflush_r>:
 8005688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	0716      	lsls	r6, r2, #28
 8005692:	4605      	mov	r5, r0
 8005694:	460c      	mov	r4, r1
 8005696:	d454      	bmi.n	8005742 <__sflush_r+0xba>
 8005698:	684b      	ldr	r3, [r1, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	dc02      	bgt.n	80056a4 <__sflush_r+0x1c>
 800569e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dd48      	ble.n	8005736 <__sflush_r+0xae>
 80056a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d045      	beq.n	8005736 <__sflush_r+0xae>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056b0:	682f      	ldr	r7, [r5, #0]
 80056b2:	6a21      	ldr	r1, [r4, #32]
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	d030      	beq.n	800571a <__sflush_r+0x92>
 80056b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	0759      	lsls	r1, r3, #29
 80056be:	d505      	bpl.n	80056cc <__sflush_r+0x44>
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	1ad2      	subs	r2, r2, r3
 80056c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056c6:	b10b      	cbz	r3, 80056cc <__sflush_r+0x44>
 80056c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056d0:	6a21      	ldr	r1, [r4, #32]
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b0      	blx	r6
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	d106      	bne.n	80056ea <__sflush_r+0x62>
 80056dc:	6829      	ldr	r1, [r5, #0]
 80056de:	291d      	cmp	r1, #29
 80056e0:	d82b      	bhi.n	800573a <__sflush_r+0xb2>
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <__sflush_r+0x104>)
 80056e4:	410a      	asrs	r2, r1
 80056e6:	07d6      	lsls	r6, r2, #31
 80056e8:	d427      	bmi.n	800573a <__sflush_r+0xb2>
 80056ea:	2200      	movs	r2, #0
 80056ec:	6062      	str	r2, [r4, #4]
 80056ee:	04d9      	lsls	r1, r3, #19
 80056f0:	6922      	ldr	r2, [r4, #16]
 80056f2:	6022      	str	r2, [r4, #0]
 80056f4:	d504      	bpl.n	8005700 <__sflush_r+0x78>
 80056f6:	1c42      	adds	r2, r0, #1
 80056f8:	d101      	bne.n	80056fe <__sflush_r+0x76>
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	b903      	cbnz	r3, 8005700 <__sflush_r+0x78>
 80056fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8005700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	b1b9      	cbz	r1, 8005736 <__sflush_r+0xae>
 8005706:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800570a:	4299      	cmp	r1, r3
 800570c:	d002      	beq.n	8005714 <__sflush_r+0x8c>
 800570e:	4628      	mov	r0, r5
 8005710:	f7ff fbf2 	bl	8004ef8 <_free_r>
 8005714:	2300      	movs	r3, #0
 8005716:	6363      	str	r3, [r4, #52]	@ 0x34
 8005718:	e00d      	b.n	8005736 <__sflush_r+0xae>
 800571a:	2301      	movs	r3, #1
 800571c:	4628      	mov	r0, r5
 800571e:	47b0      	blx	r6
 8005720:	4602      	mov	r2, r0
 8005722:	1c50      	adds	r0, r2, #1
 8005724:	d1c9      	bne.n	80056ba <__sflush_r+0x32>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0c6      	beq.n	80056ba <__sflush_r+0x32>
 800572c:	2b1d      	cmp	r3, #29
 800572e:	d001      	beq.n	8005734 <__sflush_r+0xac>
 8005730:	2b16      	cmp	r3, #22
 8005732:	d11e      	bne.n	8005772 <__sflush_r+0xea>
 8005734:	602f      	str	r7, [r5, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	e022      	b.n	8005780 <__sflush_r+0xf8>
 800573a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573e:	b21b      	sxth	r3, r3
 8005740:	e01b      	b.n	800577a <__sflush_r+0xf2>
 8005742:	690f      	ldr	r7, [r1, #16]
 8005744:	2f00      	cmp	r7, #0
 8005746:	d0f6      	beq.n	8005736 <__sflush_r+0xae>
 8005748:	0793      	lsls	r3, r2, #30
 800574a:	680e      	ldr	r6, [r1, #0]
 800574c:	bf08      	it	eq
 800574e:	694b      	ldreq	r3, [r1, #20]
 8005750:	600f      	str	r7, [r1, #0]
 8005752:	bf18      	it	ne
 8005754:	2300      	movne	r3, #0
 8005756:	eba6 0807 	sub.w	r8, r6, r7
 800575a:	608b      	str	r3, [r1, #8]
 800575c:	f1b8 0f00 	cmp.w	r8, #0
 8005760:	dde9      	ble.n	8005736 <__sflush_r+0xae>
 8005762:	6a21      	ldr	r1, [r4, #32]
 8005764:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005766:	4643      	mov	r3, r8
 8005768:	463a      	mov	r2, r7
 800576a:	4628      	mov	r0, r5
 800576c:	47b0      	blx	r6
 800576e:	2800      	cmp	r0, #0
 8005770:	dc08      	bgt.n	8005784 <__sflush_r+0xfc>
 8005772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577a:	81a3      	strh	r3, [r4, #12]
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005784:	4407      	add	r7, r0
 8005786:	eba8 0800 	sub.w	r8, r8, r0
 800578a:	e7e7      	b.n	800575c <__sflush_r+0xd4>
 800578c:	dfbffffe 	.word	0xdfbffffe

08005790 <_fflush_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	690b      	ldr	r3, [r1, #16]
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	b913      	cbnz	r3, 80057a0 <_fflush_r+0x10>
 800579a:	2500      	movs	r5, #0
 800579c:	4628      	mov	r0, r5
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	b118      	cbz	r0, 80057aa <_fflush_r+0x1a>
 80057a2:	6a03      	ldr	r3, [r0, #32]
 80057a4:	b90b      	cbnz	r3, 80057aa <_fflush_r+0x1a>
 80057a6:	f7ff f9ad 	bl	8004b04 <__sinit>
 80057aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f3      	beq.n	800579a <_fflush_r+0xa>
 80057b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057b4:	07d0      	lsls	r0, r2, #31
 80057b6:	d404      	bmi.n	80057c2 <_fflush_r+0x32>
 80057b8:	0599      	lsls	r1, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_fflush_r+0x32>
 80057bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057be:	f7ff fb98 	bl	8004ef2 <__retarget_lock_acquire_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	4621      	mov	r1, r4
 80057c6:	f7ff ff5f 	bl	8005688 <__sflush_r>
 80057ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057cc:	07da      	lsls	r2, r3, #31
 80057ce:	4605      	mov	r5, r0
 80057d0:	d4e4      	bmi.n	800579c <_fflush_r+0xc>
 80057d2:	89a3      	ldrh	r3, [r4, #12]
 80057d4:	059b      	lsls	r3, r3, #22
 80057d6:	d4e1      	bmi.n	800579c <_fflush_r+0xc>
 80057d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057da:	f7ff fb8b 	bl	8004ef4 <__retarget_lock_release_recursive>
 80057de:	e7dd      	b.n	800579c <_fflush_r+0xc>

080057e0 <__swhatbuf_r>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	2900      	cmp	r1, #0
 80057ea:	b096      	sub	sp, #88	@ 0x58
 80057ec:	4615      	mov	r5, r2
 80057ee:	461e      	mov	r6, r3
 80057f0:	da0d      	bge.n	800580e <__swhatbuf_r+0x2e>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80057f8:	f04f 0100 	mov.w	r1, #0
 80057fc:	bf14      	ite	ne
 80057fe:	2340      	movne	r3, #64	@ 0x40
 8005800:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005804:	2000      	movs	r0, #0
 8005806:	6031      	str	r1, [r6, #0]
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	b016      	add	sp, #88	@ 0x58
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	466a      	mov	r2, sp
 8005810:	f000 f848 	bl	80058a4 <_fstat_r>
 8005814:	2800      	cmp	r0, #0
 8005816:	dbec      	blt.n	80057f2 <__swhatbuf_r+0x12>
 8005818:	9901      	ldr	r1, [sp, #4]
 800581a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800581e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005822:	4259      	negs	r1, r3
 8005824:	4159      	adcs	r1, r3
 8005826:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800582a:	e7eb      	b.n	8005804 <__swhatbuf_r+0x24>

0800582c <__smakebuf_r>:
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005830:	079d      	lsls	r5, r3, #30
 8005832:	4606      	mov	r6, r0
 8005834:	460c      	mov	r4, r1
 8005836:	d507      	bpl.n	8005848 <__smakebuf_r+0x1c>
 8005838:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	6123      	str	r3, [r4, #16]
 8005840:	2301      	movs	r3, #1
 8005842:	6163      	str	r3, [r4, #20]
 8005844:	b003      	add	sp, #12
 8005846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005848:	ab01      	add	r3, sp, #4
 800584a:	466a      	mov	r2, sp
 800584c:	f7ff ffc8 	bl	80057e0 <__swhatbuf_r>
 8005850:	9f00      	ldr	r7, [sp, #0]
 8005852:	4605      	mov	r5, r0
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	f7ff fbba 	bl	8004fd0 <_malloc_r>
 800585c:	b948      	cbnz	r0, 8005872 <__smakebuf_r+0x46>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	059a      	lsls	r2, r3, #22
 8005864:	d4ee      	bmi.n	8005844 <__smakebuf_r+0x18>
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	f043 0302 	orr.w	r3, r3, #2
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	e7e2      	b.n	8005838 <__smakebuf_r+0xc>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	6020      	str	r0, [r4, #0]
 8005876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	9b01      	ldr	r3, [sp, #4]
 800587e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005882:	b15b      	cbz	r3, 800589c <__smakebuf_r+0x70>
 8005884:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005888:	4630      	mov	r0, r6
 800588a:	f000 f81d 	bl	80058c8 <_isatty_r>
 800588e:	b128      	cbz	r0, 800589c <__smakebuf_r+0x70>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	f023 0303 	bic.w	r3, r3, #3
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	81a3      	strh	r3, [r4, #12]
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	431d      	orrs	r5, r3
 80058a0:	81a5      	strh	r5, [r4, #12]
 80058a2:	e7cf      	b.n	8005844 <__smakebuf_r+0x18>

080058a4 <_fstat_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d07      	ldr	r5, [pc, #28]	@ (80058c4 <_fstat_r+0x20>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	4611      	mov	r1, r2
 80058b0:	602b      	str	r3, [r5, #0]
 80058b2:	f7fb facc 	bl	8000e4e <_fstat>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d102      	bne.n	80058c0 <_fstat_r+0x1c>
 80058ba:	682b      	ldr	r3, [r5, #0]
 80058bc:	b103      	cbz	r3, 80058c0 <_fstat_r+0x1c>
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
 80058c2:	bf00      	nop
 80058c4:	20000420 	.word	0x20000420

080058c8 <_isatty_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d06      	ldr	r5, [pc, #24]	@ (80058e4 <_isatty_r+0x1c>)
 80058cc:	2300      	movs	r3, #0
 80058ce:	4604      	mov	r4, r0
 80058d0:	4608      	mov	r0, r1
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fb facb 	bl	8000e6e <_isatty>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_isatty_r+0x1a>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_isatty_r+0x1a>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000420 	.word	0x20000420

080058e8 <_sbrk_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d06      	ldr	r5, [pc, #24]	@ (8005904 <_sbrk_r+0x1c>)
 80058ec:	2300      	movs	r3, #0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb fad4 	bl	8000ea0 <_sbrk>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_sbrk_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_sbrk_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000420 	.word	0x20000420

08005908 <_init>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	bf00      	nop
 800590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590e:	bc08      	pop	{r3}
 8005910:	469e      	mov	lr, r3
 8005912:	4770      	bx	lr

08005914 <_fini>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	bf00      	nop
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr
