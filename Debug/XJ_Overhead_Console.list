
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005138  08005138  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005138  08005138  00006138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005140  08005140  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00006140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005144  08005144  00006144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005148  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000068  080051b0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080051b0  00007490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bfa  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e75  00000000  00000000  00017c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbe  00000000  00000000  0001ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f19  00000000  00000000  0001c606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016239  00000000  00000000  0003651f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf33  00000000  00000000  0004c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e968b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000455c  00000000  00000000  000e96d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000edc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005098 	.word	0x08005098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005098 	.word	0x08005098

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fee7 	bl	80013a4 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa90 	bl	8000b00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 ff1b 	bl	800142c <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa80 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 fd65 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 fd59 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_DMA_Init+0x4c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <MX_DMA_Init+0x4c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_DMA_Init+0x4c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f001 f98f 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f001 f9a8 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2011      	movs	r0, #17
 800070c:	f001 f987 	bl	8001a1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000710:	2011      	movs	r0, #17
 8000712:	f001 f9a0 	bl	8001a56 <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b52      	ldr	r3, [pc, #328]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a51      	ldr	r2, [pc, #324]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b4f      	ldr	r3, [pc, #316]	@ (8000888 <MX_GPIO_Init+0x164>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b4b      	ldr	r3, [pc, #300]	@ (8000888 <MX_GPIO_Init+0x164>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a4a      	ldr	r2, [pc, #296]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b48      	ldr	r3, [pc, #288]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a43      	ldr	r2, [pc, #268]	@ (8000888 <MX_GPIO_Init+0x164>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b41      	ldr	r3, [pc, #260]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a3c      	ldr	r2, [pc, #240]	@ (8000888 <MX_GPIO_Init+0x164>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <MX_GPIO_Init+0x164>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <MX_GPIO_Init+0x164>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a35      	ldr	r2, [pc, #212]	@ (8000888 <MX_GPIO_Init+0x164>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b33      	ldr	r3, [pc, #204]	@ (8000888 <MX_GPIO_Init+0x164>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80007cc:	482f      	ldr	r0, [pc, #188]	@ (800088c <MX_GPIO_Init+0x168>)
 80007ce:	f001 fe51 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	482e      	ldr	r0, [pc, #184]	@ (8000890 <MX_GPIO_Init+0x16c>)
 80007d8:	f001 fe4c 	bl	8002474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4828      	ldr	r0, [pc, #160]	@ (8000894 <MX_GPIO_Init+0x170>)
 80007f4:	f001 fcba 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007f8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	481e      	ldr	r0, [pc, #120]	@ (800088c <MX_GPIO_Init+0x168>)
 8000812:	f001 fcab 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4818      	ldr	r0, [pc, #96]	@ (800088c <MX_GPIO_Init+0x168>)
 800082c:	f001 fc9e 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000830:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_GPIO_Init+0x170>)
 8000846:	f001 fc91 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800084a:	2304      	movs	r3, #4
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	@ (8000898 <MX_GPIO_Init+0x174>)
 800085e:	f001 fc85 	bl	800216c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000862:	2310      	movs	r3, #16
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_GPIO_Init+0x16c>)
 800087a:	f001 fc77 	bl	800216c <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020400 	.word	0x40020400
 8000894:	40020800 	.word	0x40020800
 8000898:	40020c00 	.word	0x40020c00

0800089c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f001 fde5 	bl	80024a8 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 f90c 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000cc 	.word	0x200000cc
 80008f0:	40005400 	.word	0x40005400
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	@ 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	@ (800097c <HAL_I2C_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12b      	bne.n	8000972 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a17      	ldr	r2, [pc, #92]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b15      	ldr	r3, [pc, #84]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000936:	23c0      	movs	r3, #192	@ 0xc0
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800093a:	2312      	movs	r3, #18
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000946:	2304      	movs	r3, #4
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480c      	ldr	r0, [pc, #48]	@ (8000984 <HAL_I2C_MspInit+0x8c>)
 8000952:	f001 fc0b 	bl	800216c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 8000960:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_I2C_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000972:	bf00      	nop
 8000974:	3728      	adds	r7, #40	@ 0x28
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40005400 	.word	0x40005400
 8000980:	40023800 	.word	0x40023800
 8000984:	40020400 	.word	0x40020400

08000988 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000990:	1d39      	adds	r1, r7, #4
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	2201      	movs	r2, #1
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <__io_putchar+0x20>)
 800099a:	f002 fe2e 	bl	80035fa <HAL_UART_Transmit>
  return ch;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200001f0 	.word	0x200001f0

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	@ 0x38
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fc85 	bl	80012c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f823 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff feb3 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 80009be:	f7ff fe89 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009c2:	f000 fae7 	bl	8000f94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009c6:	f7ff fdd3 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009ca:	f7ff ff67 	bl	800089c <MX_I2C1_Init>
  MX_RTC_Init();
 80009ce:	f000 f8a3 	bl	8000b18 <MX_RTC_Init>
  MX_SPI2_Init();
 80009d2:	f000 f8f3 	bl	8000bbc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009d6:	f000 fab3 	bl	8000f40 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009da:	f000 fb05 	bl	8000fe8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Here is we will test RX through DMA and just cut off the rest of the code for now
  printf("Put something in the terminal.\r\n");
 80009de:	4805      	ldr	r0, [pc, #20]	@ (80009f4 <main+0x48>)
 80009e0:	f003 fcf6 	bl	80043d0 <puts>

  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
 80009e4:	220c      	movs	r2, #12
 80009e6:	4904      	ldr	r1, [pc, #16]	@ (80009f8 <main+0x4c>)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <main+0x50>)
 80009ea:	f002 fe91 	bl	8003710 <HAL_UART_Receive_DMA>

  while (1);
 80009ee:	bf00      	nop
 80009f0:	e7fd      	b.n	80009ee <main+0x42>
 80009f2:	bf00      	nop
 80009f4:	080050b0 	.word	0x080050b0
 80009f8:	20000120 	.word	0x20000120
 80009fc:	200001f0 	.word	0x200001f0

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	@ 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fdbe 	bl	8004590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	4a29      	ldr	r2, [pc, #164]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <SystemClock_Config+0xd4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a4c:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <SystemClock_Config+0xd8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a60:	230a      	movs	r3, #10
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	2301      	movs	r3, #1
 8000a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a7c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a86:	2307      	movs	r3, #7
 8000a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0320 	add.w	r3, r7, #32
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fe4e 	bl	8002730 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a9a:	f000 f831 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2102      	movs	r1, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 f8b0 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ac6:	f000 f81b 	bl	8000b00 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	@ 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40007000 	.word	0x40007000

08000adc <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	// this function from https://deepbluembedded.com/how-to-receive-uart-serial-data-with-stm32-dma-interrupt-polling/
	//printf("Im calling back.\r\n");
	// this is where the incoming data could be moved instead of just echoing
	// TODO: an experiment would be to, in main(), print out the contents of rxbuffer every second, remove this transmit, and see what happens to that buffer as data is added.
    HAL_UART_Transmit(&huart2, UART2_rxBuffer, RXBUFSIZE, 100);
 8000ae4:	2364      	movs	r3, #100	@ 0x64
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	4903      	ldr	r1, [pc, #12]	@ (8000af8 <HAL_UART_RxCpltCallback+0x1c>)
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <HAL_UART_RxCpltCallback+0x20>)
 8000aec:	f002 fd85 	bl	80035fa <HAL_UART_Transmit>

    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000120 	.word	0x20000120
 8000afc:	200001f0 	.word	0x200001f0

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <Error_Handler+0x14>)
 8000b0a:	f003 fbf9 	bl	8004300 <iprintf>
	  while (1);
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <Error_Handler+0xe>
 8000b12:	bf00      	nop
 8000b14:	080050d0 	.word	0x080050d0

08000b18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b1e:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <MX_RTC_Init+0x48>)
 8000b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b2a:	227f      	movs	r2, #127	@ 0x7f
 8000b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_RTC_Init+0x44>)
 8000b48:	f002 fb78 	bl	800323c <HAL_RTC_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b52:	f7ff ffd5 	bl	8000b00 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000012c 	.word	0x2000012c
 8000b60:	40002800 	.word	0x40002800

08000b64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_RTC_MspInit+0x50>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d111      	bne.n	8000baa <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b86:	2302      	movs	r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b8e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 fa63 	bl	8003060 <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ba0:	f7ff ffae 	bl	8000b00 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <HAL_RTC_MspInit+0x54>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40002800 	.word	0x40002800
 8000bb8:	42470e3c 	.word	0x42470e3c

08000bbc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <MX_SPI2_Init+0x6c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bce:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bd4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000c0a:	220a      	movs	r2, #10
 8000c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_SPI2_Init+0x68>)
 8000c10:	f002 fc1a 	bl	8003448 <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000c1a:	f7ff ff71 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000014c 	.word	0x2000014c
 8000c28:	40003800 	.word	0x40003800

08000c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a28      	ldr	r2, [pc, #160]	@ (8000cec <HAL_SPI_MspInit+0xc0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d14a      	bne.n	8000ce4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b27      	ldr	r3, [pc, #156]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	4a26      	ldr	r2, [pc, #152]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5e:	4b24      	ldr	r3, [pc, #144]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a1f      	ldr	r2, [pc, #124]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a18      	ldr	r2, [pc, #96]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_SPI_MspInit+0xc4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480d      	ldr	r0, [pc, #52]	@ (8000cf4 <HAL_SPI_MspInit+0xc8>)
 8000cbe:	f001 fa55 	bl	800216c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <HAL_SPI_MspInit+0xcc>)
 8000ce0:	f001 fa44 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	@ 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40003800 	.word	0x40003800
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3a:	2007      	movs	r0, #7
 8000d3c:	f000 fe64 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40023800 	.word	0x40023800

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da2:	f000 fadf 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <DMA1_Stream5_IRQHandler+0x10>)
 8000db2:	f000 ff71 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000280 	.word	0x20000280

08000dc0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <DMA1_Stream6_IRQHandler+0x10>)
 8000dc6:	f000 ff67 	bl	8001c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200002e0 	.word	0x200002e0

08000dd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de6:	f3af 8000 	nop.w
 8000dea:	4601      	mov	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
  }

  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fdad 	bl	8000988 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
  }
  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f003 fba4 	bl	800462c <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20018000 	.word	0x20018000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	200001a4 	.word	0x200001a4
 8000f18:	20000490 	.word	0x20000490

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <MX_USART1_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART1_UART_Init+0x4c>)
 8000f78:	f002 faef 	bl	800355a <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f7ff fdbd 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001a8 	.word	0x200001a8
 8000f90:	40011000 	.word	0x40011000

08000f94 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f002 fac5 	bl	800355a <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f7ff fd93 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001f0 	.word	0x200001f0
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_USART6_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_USART6_UART_Init+0x4c>)
 8001020:	f002 fa9b 	bl	800355a <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800102a:	f7ff fd69 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000238 	.word	0x20000238
 8001038:	40011400 	.word	0x40011400

0800103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a7a      	ldr	r2, [pc, #488]	@ (8001244 <HAL_UART_MspInit+0x208>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12d      	bne.n	80010ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
 8001062:	4b79      	ldr	r3, [pc, #484]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	4a78      	ldr	r2, [pc, #480]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6453      	str	r3, [r2, #68]	@ 0x44
 800106e:	4b76      	ldr	r3, [pc, #472]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	4b72      	ldr	r3, [pc, #456]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a71      	ldr	r2, [pc, #452]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b6f      	ldr	r3, [pc, #444]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001096:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a8:	2307      	movs	r3, #7
 80010aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b0:	4619      	mov	r1, r3
 80010b2:	4866      	ldr	r0, [pc, #408]	@ (800124c <HAL_UART_MspInit+0x210>)
 80010b4:	f001 f85a 	bl	800216c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010b8:	e0c0      	b.n	800123c <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a64      	ldr	r2, [pc, #400]	@ (8001250 <HAL_UART_MspInit+0x214>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	f040 808a 	bne.w	80011da <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	4b58      	ldr	r3, [pc, #352]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a57      	ldr	r2, [pc, #348]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b55      	ldr	r3, [pc, #340]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010fe:	230c      	movs	r3, #12
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800110e:	2307      	movs	r3, #7
 8001110:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	484c      	ldr	r0, [pc, #304]	@ (800124c <HAL_UART_MspInit+0x210>)
 800111a:	f001 f827 	bl	800216c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800111e:	4b4d      	ldr	r3, [pc, #308]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001120:	4a4d      	ldr	r2, [pc, #308]	@ (8001258 <HAL_UART_MspInit+0x21c>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001124:	4b4b      	ldr	r3, [pc, #300]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001126:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800112a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112c:	4b49      	ldr	r3, [pc, #292]	@ (8001254 <HAL_UART_MspInit+0x218>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	4b48      	ldr	r3, [pc, #288]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001138:	4b46      	ldr	r3, [pc, #280]	@ (8001254 <HAL_UART_MspInit+0x218>)
 800113a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800113e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001140:	4b44      	ldr	r3, [pc, #272]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001146:	4b43      	ldr	r3, [pc, #268]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800114c:	4b41      	ldr	r3, [pc, #260]	@ (8001254 <HAL_UART_MspInit+0x218>)
 800114e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001152:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b3e      	ldr	r3, [pc, #248]	@ (8001254 <HAL_UART_MspInit+0x218>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001160:	483c      	ldr	r0, [pc, #240]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001162:	f000 fc93 	bl	8001a8c <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_UART_MspInit+0x134>
      Error_Handler();
 800116c:	f7ff fcc8 	bl	8000b00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a38      	ldr	r2, [pc, #224]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001174:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001176:	4a37      	ldr	r2, [pc, #220]	@ (8001254 <HAL_UART_MspInit+0x218>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800117c:	4b37      	ldr	r3, [pc, #220]	@ (800125c <HAL_UART_MspInit+0x220>)
 800117e:	4a38      	ldr	r2, [pc, #224]	@ (8001260 <HAL_UART_MspInit+0x224>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001182:	4b36      	ldr	r3, [pc, #216]	@ (800125c <HAL_UART_MspInit+0x220>)
 8001184:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001188:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <HAL_UART_MspInit+0x220>)
 800118c:	2240      	movs	r2, #64	@ 0x40
 800118e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <HAL_UART_MspInit+0x220>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <HAL_UART_MspInit+0x220>)
 8001198:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119e:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011aa:	4b2c      	ldr	r3, [pc, #176]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011bc:	4827      	ldr	r0, [pc, #156]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011be:	f000 fc65 	bl	8001a8c <HAL_DMA_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0x190>
      Error_Handler();
 80011c8:	f7ff fc9a 	bl	8000b00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80011d2:	4a22      	ldr	r2, [pc, #136]	@ (800125c <HAL_UART_MspInit+0x220>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011d8:	e030      	b.n	800123c <HAL_UART_MspInit+0x200>
  else if(uartHandle->Instance==USART6)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <HAL_UART_MspInit+0x228>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12b      	bne.n	800123c <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001210:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <HAL_UART_MspInit+0x20c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121c:	23c0      	movs	r3, #192	@ 0xc0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800122c:	2308      	movs	r3, #8
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <HAL_UART_MspInit+0x22c>)
 8001238:	f000 ff98 	bl	800216c <HAL_GPIO_Init>
}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	@ 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40011000 	.word	0x40011000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020000 	.word	0x40020000
 8001250:	40004400 	.word	0x40004400
 8001254:	20000280 	.word	0x20000280
 8001258:	40026088 	.word	0x40026088
 800125c:	200002e0 	.word	0x200002e0
 8001260:	400260a0 	.word	0x400260a0
 8001264:	40011400 	.word	0x40011400
 8001268:	40020800 	.word	0x40020800

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001270:	f7ff fe54 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	@ (80012ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	@ (80012b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800129a:	f003 f9cd 	bl	8004638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fb85 	bl	80009ac <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012b0:	08005148 	.word	0x08005148
  ldr r2, =_sbss
 80012b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012b8:	20000490 	.word	0x20000490

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <HAL_Init+0x40>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_Init+0x40>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	@ (8001300 <HAL_Init+0x40>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 fb8d 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fd02 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fba5 	bl	8001a72 <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 fb6d 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <HAL_IncTick+0x20>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x24>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_IncTick+0x24>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	20000340 	.word	0x20000340

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_GetTick+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000340 	.word	0x20000340

080013a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e033      	b.n	8001422 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff f926 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d118      	bne.n	8001414 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ea:	f023 0302 	bic.w	r3, r3, #2
 80013ee:	f043 0202 	orr.w	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f93a 	bl	8001670 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f023 0303 	bic.w	r3, r3, #3
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40
 8001412:	e001      	b.n	8001418 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c>
 8001444:	2302      	movs	r3, #2
 8001446:	e105      	b.n	8001654 <HAL_ADC_ConfigChannel+0x228>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d925      	bls.n	80014a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43da      	mvns	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	400a      	ands	r2, r1
 800147c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4403      	add	r3, r0
 8001496:	3b1e      	subs	r3, #30
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e022      	b.n	80014ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4403      	add	r3, r0
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d824      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
 800153a:	e04c      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d824      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	@ 0x23
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	@ 0x23
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
 800158c:	e023      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	@ 0x41
 80015a0:	221f      	movs	r2, #31
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	@ 0x41
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d6:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <HAL_ADC_ConfigChannel+0x234>)
 80015d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d109      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d105      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	@ (8001664 <HAL_ADC_ConfigChannel+0x238>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d123      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b10      	cmp	r3, #16
 8001608:	d003      	beq.n	8001612 <HAL_ADC_ConfigChannel+0x1e6>
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b11      	cmp	r3, #17
 8001610:	d11b      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b10      	cmp	r3, #16
 8001624:	d111      	bne.n	800164a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <HAL_ADC_ConfigChannel+0x23c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_ADC_ConfigChannel+0x240>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	0c9a      	lsrs	r2, r3, #18
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800163c:	e002      	b.n	8001644 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	3b01      	subs	r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40012300 	.word	0x40012300
 8001664:	40012000 	.word	0x40012000
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b79      	ldr	r3, [pc, #484]	@ (8001860 <ADC_Init+0x1f0>)
 800167a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <ADC_Init+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d022      	beq.n	800174e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e00f      	b.n	800176e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0202 	bic.w	r2, r2, #2
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	005a      	lsls	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	035a      	lsls	r2, r3, #13
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e007      	b.n	80017e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	051a      	lsls	r2, r3, #20
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001826:	025a      	lsls	r2, r3, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800183e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	029a      	lsls	r2, r3, #10
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	0f000001 	.word	0x0f000001

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff fc78 	bl	800138c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e099      	b.n	8001bdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac8:	e00f      	b.n	8001aea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aca:	f7ff fc5f 	bl	800138c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b05      	cmp	r3, #5
 8001ad6:	d908      	bls.n	8001aea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e078      	b.n	8001bdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e8      	bne.n	8001aca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4b38      	ldr	r3, [pc, #224]	@ (8001be4 <HAL_DMA_Init+0x158>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f023 0307 	bic.w	r3, r3, #7
 8001b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d117      	bne.n	8001bae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fa6f 	bl	8002074 <DMA_CheckFifoParam>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	@ 0x40
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001baa:	2301      	movs	r3, #1
 8001bac:	e016      	b.n	8001bdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa26 	bl	8002008 <DMA_CalcBaseAndBitshift>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc4:	223f      	movs	r2, #63	@ 0x3f
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	f010803f 	.word	0xf010803f

08001be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_DMA_Start_IT+0x26>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e040      	b.n	8001c90 <HAL_DMA_Start_IT+0xa8>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d12f      	bne.n	8001c82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f9b8 	bl	8001fac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c40:	223f      	movs	r2, #63	@ 0x3f
 8001c42:	409a      	lsls	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0216 	orr.w	r2, r2, #22
 8001c56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0208 	orr.w	r2, r2, #8
 8001c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e005      	b.n	8001c8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8001ee0 <HAL_DMA_IRQHandler+0x248>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8001ee4 <HAL_DMA_IRQHandler+0x24c>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01a      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0204 	bic.w	r2, r2, #4
 8001cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	2201      	movs	r2, #1
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d012      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3e:	2204      	movs	r2, #4
 8001d40:	409a      	lsls	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00b      	beq.n	8001d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	f043 0204 	orr.w	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	2210      	movs	r2, #16
 8001d76:	409a      	lsls	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d043      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d03c      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	2210      	movs	r2, #16
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d108      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d024      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
 8001dc6:	e01f      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01b      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	4798      	blx	r3
 8001dd8:	e016      	b.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d107      	bne.n	8001df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0208 	bic.w	r2, r2, #8
 8001df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 808f 	beq.w	8001f38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8087 	beq.w	8001f38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2220      	movs	r2, #32
 8001e30:	409a      	lsls	r2, r3
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d136      	bne.n	8001eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0216 	bic.w	r2, r2, #22
 8001e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <HAL_DMA_IRQHandler+0x1da>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e86:	223f      	movs	r2, #63	@ 0x3f
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d07e      	beq.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
        }
        return;
 8001eae:	e079      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01d      	beq.n	8001efa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d031      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
 8001edc:	e02c      	b.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
 8001ede:	bf00      	nop
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d023      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
 8001ef8:	e01e      	b.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10f      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0210 	bic.w	r2, r2, #16
 8001f16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d032      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d022      	beq.n	8001f92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2205      	movs	r2, #5
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d307      	bcc.n	8001f80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f2      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x2cc>
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
 8001fa2:	e000      	b.n	8001fa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fa4:	bf00      	nop
    }
  }
}
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b40      	cmp	r3, #64	@ 0x40
 8001fd8:	d108      	bne.n	8001fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fea:	e007      	b.n	8001ffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3b10      	subs	r3, #16
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <DMA_CalcBaseAndBitshift+0x64>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002022:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <DMA_CalcBaseAndBitshift+0x68>)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d909      	bls.n	800204a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800203e:	f023 0303 	bic.w	r3, r3, #3
 8002042:	1d1a      	adds	r2, r3, #4
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	659a      	str	r2, [r3, #88]	@ 0x58
 8002048:	e007      	b.n	800205a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002052:	f023 0303 	bic.w	r3, r3, #3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	aaaaaaab 	.word	0xaaaaaaab
 8002070:	080050fc 	.word	0x080050fc

08002074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d11f      	bne.n	80020ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d856      	bhi.n	8002142 <DMA_CheckFifoParam+0xce>
 8002094:	a201      	add	r2, pc, #4	@ (adr r2, 800209c <DMA_CheckFifoParam+0x28>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020bf 	.word	0x080020bf
 80020a4:	080020ad 	.word	0x080020ad
 80020a8:	08002143 	.word	0x08002143
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d046      	beq.n	8002146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020bc:	e043      	b.n	8002146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020c6:	d140      	bne.n	800214a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020cc:	e03d      	b.n	800214a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020d6:	d121      	bne.n	800211c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d837      	bhi.n	800214e <DMA_CheckFifoParam+0xda>
 80020de:	a201      	add	r2, pc, #4	@ (adr r2, 80020e4 <DMA_CheckFifoParam+0x70>)
 80020e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e4:	080020f5 	.word	0x080020f5
 80020e8:	080020fb 	.word	0x080020fb
 80020ec:	080020f5 	.word	0x080020f5
 80020f0:	0800210d 	.word	0x0800210d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
      break;
 80020f8:	e030      	b.n	800215c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d025      	beq.n	8002152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210a:	e022      	b.n	8002152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002114:	d11f      	bne.n	8002156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800211a:	e01c      	b.n	8002156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d903      	bls.n	800212a <DMA_CheckFifoParam+0xb6>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d003      	beq.n	8002130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002128:	e018      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
      break;
 800212e:	e015      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00e      	beq.n	800215a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
      break;
 8002140:	e00b      	b.n	800215a <DMA_CheckFifoParam+0xe6>
      break;
 8002142:	bf00      	nop
 8002144:	e00a      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e008      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e006      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e004      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e002      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;   
 8002156:	bf00      	nop
 8002158:	e000      	b.n	800215c <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
    }
  } 
  
  return status; 
 800215c:	7bfb      	ldrb	r3, [r7, #15]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
 8002186:	e159      	b.n	800243c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 8148 	bne.w	8002436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d130      	bne.n	8002220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a2 	beq.w	8002436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b57      	ldr	r3, [pc, #348]	@ (8002454 <HAL_GPIO_Init+0x2e8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	4a56      	ldr	r2, [pc, #344]	@ (8002454 <HAL_GPIO_Init+0x2e8>)
 80022fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002300:	6453      	str	r3, [r2, #68]	@ 0x44
 8002302:	4b54      	ldr	r3, [pc, #336]	@ (8002454 <HAL_GPIO_Init+0x2e8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800230e:	4a52      	ldr	r2, [pc, #328]	@ (8002458 <HAL_GPIO_Init+0x2ec>)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a49      	ldr	r2, [pc, #292]	@ (800245c <HAL_GPIO_Init+0x2f0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x202>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a48      	ldr	r2, [pc, #288]	@ (8002460 <HAL_GPIO_Init+0x2f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x1fe>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <HAL_GPIO_Init+0x2f8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x1fa>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <HAL_GPIO_Init+0x2fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x1f6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a45      	ldr	r2, [pc, #276]	@ (800246c <HAL_GPIO_Init+0x300>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x1f2>
 800235a:	2304      	movs	r3, #4
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800235e:	2307      	movs	r3, #7
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x204>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x204>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	@ (8002458 <HAL_GPIO_Init+0x2ec>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_GPIO_Init+0x304>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002470 <HAL_GPIO_Init+0x304>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <HAL_GPIO_Init+0x304>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <HAL_GPIO_Init+0x304>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_GPIO_Init+0x304>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002406:	4a1a      	ldr	r2, [pc, #104]	@ (8002470 <HAL_GPIO_Init+0x304>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240c:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <HAL_GPIO_Init+0x304>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002430:	4a0f      	ldr	r2, [pc, #60]	@ (8002470 <HAL_GPIO_Init+0x304>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f aea2 	bls.w	8002188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40013c00 	.word	0x40013c00

08002474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	807b      	strh	r3, [r7, #2]
 8002480:	4613      	mov	r3, r2
 8002482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002484:	787b      	ldrb	r3, [r7, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248a:	887a      	ldrh	r2, [r7, #2]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002490:	e003      	b.n	800249a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	041a      	lsls	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	619a      	str	r2, [r3, #24]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e12b      	b.n	8002712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fa12 	bl	80008f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	@ 0x24
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800250a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800250c:	f000 fd80 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8002510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a81      	ldr	r2, [pc, #516]	@ (800271c <HAL_I2C_Init+0x274>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d807      	bhi.n	800252c <HAL_I2C_Init+0x84>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a80      	ldr	r2, [pc, #512]	@ (8002720 <HAL_I2C_Init+0x278>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	e006      	b.n	800253a <HAL_I2C_Init+0x92>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a7d      	ldr	r2, [pc, #500]	@ (8002724 <HAL_I2C_Init+0x27c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0e7      	b.n	8002712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a78      	ldr	r2, [pc, #480]	@ (8002728 <HAL_I2C_Init+0x280>)
 8002546:	fba2 2303 	umull	r2, r3, r2, r3
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a6a      	ldr	r2, [pc, #424]	@ (800271c <HAL_I2C_Init+0x274>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d802      	bhi.n	800257c <HAL_I2C_Init+0xd4>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3301      	adds	r3, #1
 800257a:	e009      	b.n	8002590 <HAL_I2C_Init+0xe8>
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	4a69      	ldr	r2, [pc, #420]	@ (800272c <HAL_I2C_Init+0x284>)
 8002588:	fba2 2303 	umull	r2, r3, r2, r3
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	3301      	adds	r3, #1
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	430b      	orrs	r3, r1
 8002596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	495c      	ldr	r1, [pc, #368]	@ (800271c <HAL_I2C_Init+0x274>)
 80025ac:	428b      	cmp	r3, r1
 80025ae:	d819      	bhi.n	80025e4 <HAL_I2C_Init+0x13c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1e59      	subs	r1, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_I2C_Init+0x138>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e59      	subs	r1, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025de:	e051      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e04f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_I2C_Init+0x168>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1e58      	subs	r0, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6859      	ldr	r1, [r3, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e012      	b.n	8002636 <HAL_I2C_Init+0x18e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1e58      	subs	r0, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	0099      	lsls	r1, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	fbb0 f3f3 	udiv	r3, r0, r3
 8002626:	3301      	adds	r3, #1
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x196>
 800263a:	2301      	movs	r3, #1
 800263c:	e022      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10e      	bne.n	8002664 <HAL_I2C_Init+0x1bc>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1e58      	subs	r0, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6859      	ldr	r1, [r3, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	440b      	add	r3, r1
 8002654:	fbb0 f3f3 	udiv	r3, r0, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Init+0x1dc>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	0099      	lsls	r1, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	fbb0 f3f3 	udiv	r3, r0, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	6809      	ldr	r1, [r1, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6911      	ldr	r1, [r2, #16]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68d2      	ldr	r2, [r2, #12]
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	000186a0 	.word	0x000186a0
 8002720:	001e847f 	.word	0x001e847f
 8002724:	003d08ff 	.word	0x003d08ff
 8002728:	431bde83 	.word	0x431bde83
 800272c:	10624dd3 	.word	0x10624dd3

08002730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e267      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d075      	beq.n	800283a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800274e:	4b88      	ldr	r3, [pc, #544]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b04      	cmp	r3, #4
 8002758:	d00c      	beq.n	8002774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275a:	4b85      	ldr	r3, [pc, #532]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002762:	2b08      	cmp	r3, #8
 8002764:	d112      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002766:	4b82      	ldr	r3, [pc, #520]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002772:	d10b      	bne.n	800278c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	4b7e      	ldr	r3, [pc, #504]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d05b      	beq.n	8002838 <HAL_RCC_OscConfig+0x108>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d157      	bne.n	8002838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e242      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002794:	d106      	bne.n	80027a4 <HAL_RCC_OscConfig+0x74>
 8002796:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x98>
 80027ae:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6c      	ldr	r2, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xb0>
 80027c8:	4b69      	ldr	r3, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a68      	ldr	r2, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b66      	ldr	r3, [pc, #408]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fdd0 	bl	800138c <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fdcc 	bl	800138c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e207      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xc0>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fdbc 	bl	800138c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fdb8 	bl	800138c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1f3      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0xe8>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002846:	4b4a      	ldr	r3, [pc, #296]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c7      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3b      	ldr	r3, [pc, #236]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4937      	ldr	r1, [pc, #220]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b34      	ldr	r3, [pc, #208]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fd71 	bl	800138c <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fd6d 	bl	800138c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a8      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b28      	ldr	r3, [pc, #160]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4925      	ldr	r1, [pc, #148]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <HAL_RCC_OscConfig+0x244>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd50 	bl	800138c <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fd4c 	bl	800138c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e187      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fd30 	bl	800138c <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fd2c 	bl	800138c <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e167      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x240>)
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x200>
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_RCC_OscConfig+0x248>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002956:	f7fe fd19 	bl	800138c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295e:	f7fe fd15 	bl	800138c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e150      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ea      	bne.n	800295e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b77      	ldr	r3, [pc, #476]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b74      	ldr	r3, [pc, #464]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a73      	ldr	r2, [pc, #460]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7fe fcd5 	bl	800138c <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fe fcd1 	bl	800138c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e10c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba4 <HAL_RCC_OscConfig+0x474>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x2ea>
 8002a0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	4a63      	ldr	r2, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x30c>
 8002a22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x324>
 8002a3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a57      	ldr	r2, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fc96 	bl	800138c <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fe fc92 	bl	800138c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0cb      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RCC_OscConfig+0x334>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7fe fc80 	bl	800138c <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fc7c 	bl	800138c <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0b5      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4a38      	ldr	r2, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80a1 	beq.w	8002c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ace:	4b34      	ldr	r3, [pc, #208]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d05c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d141      	bne.n	8002b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fc50 	bl	800138c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fc4c 	bl	800138c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e087      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	491b      	ldr	r1, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fc25 	bl	800138c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe fc21 	bl	800138c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e05c      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x416>
 8002b64:	e054      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b66:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <HAL_RCC_OscConfig+0x478>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fc0e 	bl	800138c <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fc0a 	bl	800138c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e045      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x470>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x444>
 8002b92:	e03d      	b.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e038      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_RCC_OscConfig+0x4ec>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d028      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d121      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d11a      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cc      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c34:	4b68      	ldr	r3, [pc, #416]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d90c      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b65      	ldr	r3, [pc, #404]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b63      	ldr	r3, [pc, #396]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0b8      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c74:	4b59      	ldr	r3, [pc, #356]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d005      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c8c:	4b53      	ldr	r3, [pc, #332]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c98:	4b50      	ldr	r3, [pc, #320]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	494d      	ldr	r1, [pc, #308]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e07f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e067      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f023 0203 	bic.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4934      	ldr	r1, [pc, #208]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fb3c 	bl	800138c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d16:	e00a      	b.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d18:	f7fe fb38 	bl	800138c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e04f      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 020c 	and.w	r2, r3, #12
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d1eb      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d40:	4b25      	ldr	r3, [pc, #148]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d20c      	bcs.n	8002d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e032      	b.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	490e      	ldr	r1, [pc, #56]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002da6:	f000 f821 	bl	8002dec <HAL_RCC_GetSysClockFreq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_RCC_ClockConfig+0x1bc>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	490a      	ldr	r1, [pc, #40]	@ (8002de0 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	5ccb      	ldrb	r3, [r1, r3]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	4a09      	ldr	r2, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fa9c 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	080050e4 	.word	0x080050e4
 8002de4:	20000000 	.word	0x20000000
 8002de8:	20000004 	.word	0x20000004

08002dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b094      	sub	sp, #80	@ 0x50
 8002df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002df8:	2300      	movs	r3, #0
 8002dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e04:	4b79      	ldr	r3, [pc, #484]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d00d      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x40>
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	f200 80e1 	bhi.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x34>
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e1e:	e0db      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b73      	ldr	r3, [pc, #460]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e24:	e0db      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e26:	4b73      	ldr	r3, [pc, #460]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e2a:	e0d8      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e42:	4b6a      	ldr	r3, [pc, #424]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	099b      	lsrs	r3, r3, #6
 8002e48:	2200      	movs	r2, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e56:	2300      	movs	r3, #0
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e5e:	4622      	mov	r2, r4
 8002e60:	462b      	mov	r3, r5
 8002e62:	f04f 0000 	mov.w	r0, #0
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	0159      	lsls	r1, r3, #5
 8002e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e70:	0150      	lsls	r0, r2, #5
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4621      	mov	r1, r4
 8002e78:	1a51      	subs	r1, r2, r1
 8002e7a:	6139      	str	r1, [r7, #16]
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e90:	4659      	mov	r1, fp
 8002e92:	018b      	lsls	r3, r1, #6
 8002e94:	4651      	mov	r1, sl
 8002e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e9a:	4651      	mov	r1, sl
 8002e9c:	018a      	lsls	r2, r1, #6
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ebe:	4690      	mov	r8, r2
 8002ec0:	4699      	mov	r9, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	eb18 0303 	adds.w	r3, r8, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
 8002eca:	462b      	mov	r3, r5
 8002ecc:	eb49 0303 	adc.w	r3, r9, r3
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	024b      	lsls	r3, r1, #9
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ee8:	4621      	mov	r1, r4
 8002eea:	024a      	lsls	r2, r1, #9
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ef6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002efc:	f7fd f9c0 	bl	8000280 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f08:	e058      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	099b      	lsrs	r3, r3, #6
 8002f10:	2200      	movs	r2, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	4611      	mov	r1, r2
 8002f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f1a:	623b      	str	r3, [r7, #32]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f24:	4642      	mov	r2, r8
 8002f26:	464b      	mov	r3, r9
 8002f28:	f04f 0000 	mov.w	r0, #0
 8002f2c:	f04f 0100 	mov.w	r1, #0
 8002f30:	0159      	lsls	r1, r3, #5
 8002f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f36:	0150      	lsls	r0, r2, #5
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4641      	mov	r1, r8
 8002f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f42:	4649      	mov	r1, r9
 8002f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f60:	eb63 050b 	sbc.w	r5, r3, fp
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	00eb      	lsls	r3, r5, #3
 8002f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	18e3      	adds	r3, r4, r3
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	464b      	mov	r3, r9
 8002f80:	eb45 0303 	adc.w	r3, r5, r3
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f92:	4629      	mov	r1, r5
 8002f94:	028b      	lsls	r3, r1, #10
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	028a      	lsls	r2, r1, #10
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	61fa      	str	r2, [r7, #28]
 8002fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb0:	f7fd f966 	bl	8000280 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x200>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3750      	adds	r7, #80	@ 0x50
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	007a1200 	.word	0x007a1200

08002ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_RCC_GetHCLKFreq+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000000 	.word	0x20000000

08003010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003014:	f7ff fff0 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003018:	4602      	mov	r2, r0
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	0a9b      	lsrs	r3, r3, #10
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	4903      	ldr	r1, [pc, #12]	@ (8003034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003026:	5ccb      	ldrb	r3, [r1, r3]
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40023800 	.word	0x40023800
 8003034:	080050f4 	.word	0x080050f4

08003038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800303c:	f7ff ffdc 	bl	8002ff8 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0b5b      	lsrs	r3, r3, #13
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	@ (800305c <HAL_RCC_GetPCLK2Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	080050f4 	.word	0x080050f4

08003060 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d105      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003084:	2b00      	cmp	r3, #0
 8003086:	d035      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003088:	4b67      	ldr	r3, [pc, #412]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800308e:	f7fe f97d 	bl	800138c <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003096:	f7fe f979 	bl	800138c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0ba      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030a8:	4b60      	ldr	r3, [pc, #384]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	019a      	lsls	r2, r3, #6
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	071b      	lsls	r3, r3, #28
 80030c0:	495a      	ldr	r1, [pc, #360]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030c8:	4b57      	ldr	r3, [pc, #348]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030ce:	f7fe f95d 	bl	800138c <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030d6:	f7fe f959 	bl	800138c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e09a      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e8:	4b50      	ldr	r3, [pc, #320]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8083 	beq.w	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b49      	ldr	r3, [pc, #292]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4a48      	ldr	r2, [pc, #288]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003110:	6413      	str	r3, [r2, #64]	@ 0x40
 8003112:	4b46      	ldr	r3, [pc, #280]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800311e:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a43      	ldr	r2, [pc, #268]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800312a:	f7fe f92f 	bl	800138c <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f92b 	bl	800138c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e06c      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003144:	4b3a      	ldr	r3, [pc, #232]	@ (8003230 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003150:	4b36      	ldr	r3, [pc, #216]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003154:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003158:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	429a      	cmp	r2, r3
 800316c:	d028      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800316e:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003176:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003178:	4b2e      	ldr	r3, [pc, #184]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800317e:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003184:	4a29      	ldr	r2, [pc, #164]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800318a:	4b28      	ldr	r3, [pc, #160]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d114      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe f8f9 	bl	800138c <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe f8f5 	bl	800138c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e034      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b4:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ee      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031cc:	d10d      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80031ce:	4b17      	ldr	r3, [pc, #92]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80031de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031e2:	4912      	ldr	r1, [pc, #72]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]
 80031e8:	e005      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a0f      	ldr	r2, [pc, #60]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80031f4:	6093      	str	r3, [r2, #8]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	490a      	ldr	r1, [pc, #40]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7c1a      	ldrb	r2, [r3, #16]
 8003218:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800321a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	42470068 	.word	0x42470068
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
 8003234:	42470e40 	.word	0x42470e40
 8003238:	424711e0 	.word	0x424711e0

0800323c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e073      	b.n	800333a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7f5b      	ldrb	r3, [r3, #29]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d105      	bne.n	8003268 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fd fc7e 	bl	8000b64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	d055      	beq.n	8003328 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	22ca      	movs	r2, #202	@ 0xca
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2253      	movs	r2, #83	@ 0x53
 800328a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f87f 	bl	8003390 <RTC_EnterInitMode>
 8003292:	4603      	mov	r3, r0
 8003294:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12c      	bne.n	80032f6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80032aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68d2      	ldr	r2, [r2, #12]
 80032d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	041a      	lsls	r2, r3, #16
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f886 	bl	80033fe <RTC_ExitInitMode>
 80032f2:	4603      	mov	r3, r0
 80032f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d110      	bne.n	800331e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ff      	movs	r2, #255	@ 0xff
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24
 8003326:	e001      	b.n	800332c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0d      	ldr	r2, [pc, #52]	@ (800338c <HAL_RTC_WaitForSynchro+0x48>)
 8003356:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003358:	f7fe f818 	bl	800138c <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800335e:	e009      	b.n	8003374 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003360:	f7fe f814 	bl	800138c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800336e:	d901      	bls.n	8003374 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e007      	b.n	8003384 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ee      	beq.n	8003360 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00013f5f 	.word	0x00013f5f

08003390 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d122      	bne.n	80033f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033be:	f7fd ffe5 	bl	800138c <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033c4:	e00c      	b.n	80033e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033c6:	f7fd ffe1 	bl	800138c <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033d4:	d904      	bls.n	80033e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2204      	movs	r2, #4
 80033da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <RTC_EnterInitMode+0x64>
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d1e8      	bne.n	80033c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003418:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff8b 	bl	8003344 <HAL_RTC_WaitForSynchro>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d004      	beq.n	800343e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2204      	movs	r2, #4
 8003438:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e07b      	b.n	8003552 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346a:	d009      	beq.n	8003480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
 8003472:	e005      	b.n	8003480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fbc6 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	ea42 0103 	orr.w	r1, r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0104 	and.w	r1, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	f003 0210 	and.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003540:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e042      	b.n	80035f2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fd fd5b 	bl	800103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	@ 0x24
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800359c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fb78 	bl	8003c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691a      	ldr	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b08a      	sub	sp, #40	@ 0x28
 80035fe:	af02      	add	r7, sp, #8
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b20      	cmp	r3, #32
 8003618:	d175      	bne.n	8003706 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_UART_Transmit+0x2c>
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06e      	b.n	8003708 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2221      	movs	r2, #33	@ 0x21
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003638:	f7fd fea8 	bl	800138c <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	88fa      	ldrh	r2, [r7, #6]
 8003648:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003652:	d108      	bne.n	8003666 <HAL_UART_Transmit+0x6c>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d104      	bne.n	8003666 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	e003      	b.n	800366e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800366e:	e02e      	b.n	80036ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	2180      	movs	r1, #128	@ 0x80
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f98b 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e03a      	b.n	8003708 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	3302      	adds	r3, #2
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	e007      	b.n	80036c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1cb      	bne.n	8003670 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2140      	movs	r1, #64	@ 0x40
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f957 	bl	8003996 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e006      	b.n	8003708 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003706:	2302      	movs	r3, #2
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b20      	cmp	r3, #32
 8003728:	d112      	bne.n	8003750 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Receive_DMA+0x26>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e00b      	b.n	8003752 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	461a      	mov	r2, r3
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f97e 	bl	8003a48 <UART_Start_Receive_DMA>
 800374c:	4603      	mov	r3, r0
 800374e:	e000      	b.n	8003752 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	460b      	mov	r3, r1
 800378c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b09c      	sub	sp, #112	@ 0x70
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d172      	bne.n	800389c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b8:	2200      	movs	r2, #0
 80037ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e5      	bne.n	80037bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	667b      	str	r3, [r7, #100]	@ 0x64
 8003808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003810:	647a      	str	r2, [r7, #68]	@ 0x44
 8003812:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800381e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003824:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3314      	adds	r3, #20
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	623b      	str	r3, [r7, #32]
   return(result);
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800383a:	663b      	str	r3, [r7, #96]	@ 0x60
 800383c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003844:	633a      	str	r2, [r7, #48]	@ 0x30
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800384a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e5      	bne.n	8003824 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	2b01      	cmp	r3, #1
 8003866:	d119      	bne.n	800389c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	60fb      	str	r3, [r7, #12]
   return(result);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0310 	bic.w	r3, r3, #16
 800387e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003888:	61fa      	str	r2, [r7, #28]
 800388a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	69b9      	ldr	r1, [r7, #24]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	617b      	str	r3, [r7, #20]
   return(result);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800389c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800389e:	2200      	movs	r2, #0
 80038a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d106      	bne.n	80038b8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038ae:	4619      	mov	r1, r3
 80038b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038b2:	f7ff ff66 	bl	8003782 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038b6:	e002      	b.n	80038be <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80038b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80038ba:	f7fd f90f 	bl	8000adc <HAL_UART_RxCpltCallback>
}
 80038be:	bf00      	nop
 80038c0:	3770      	adds	r7, #112	@ 0x70
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d108      	bne.n	80038f4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff48 	bl	8003782 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038f2:	e002      	b.n	80038fa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7ff ff30 	bl	800375a <HAL_UART_RxHalfCpltCallback>
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003912:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391e:	2b80      	cmp	r3, #128	@ 0x80
 8003920:	bf0c      	ite	eq
 8003922:	2301      	moveq	r3, #1
 8003924:	2300      	movne	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b21      	cmp	r3, #33	@ 0x21
 8003934:	d108      	bne.n	8003948 <UART_DMAError+0x46>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2200      	movs	r2, #0
 8003940:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003942:	68b8      	ldr	r0, [r7, #8]
 8003944:	f000 f91a 	bl	8003b7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b22      	cmp	r3, #34	@ 0x22
 8003968:	d108      	bne.n	800397c <UART_DMAError+0x7a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003976:	68b8      	ldr	r0, [r7, #8]
 8003978:	f000 f928 	bl	8003bcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003980:	f043 0210 	orr.w	r2, r3, #16
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff fef0 	bl	800376e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a6:	e03b      	b.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d037      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fd fcec 	bl	800138c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e03a      	b.n	8003a40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d023      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d020      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b40      	cmp	r3, #64	@ 0x40
 80039e2:	d01d      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d116      	bne.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f8df 	bl	8003bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2208      	movs	r2, #8
 8003a12:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e00f      	b.n	8003a40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d0b4      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b098      	sub	sp, #96	@ 0x60
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2222      	movs	r2, #34	@ 0x22
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	4a3e      	ldr	r2, [pc, #248]	@ (8003b70 <UART_Start_Receive_DMA+0x128>)
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b74 <UART_Start_Receive_DMA+0x12c>)
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a84:	4a3c      	ldr	r2, [pc, #240]	@ (8003b78 <UART_Start_Receive_DMA+0x130>)
 8003a86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a90:	f107 0308 	add.w	r3, r7, #8
 8003a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	f7fe f89e 	bl	8001be8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003af0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e5      	bne.n	8003aca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003b24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3314      	adds	r3, #20
 8003b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	617b      	str	r3, [r7, #20]
   return(result);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b48:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3314      	adds	r3, #20
 8003b50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b52:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6a39      	ldr	r1, [r7, #32]
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e5      	bne.n	8003b32 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3760      	adds	r7, #96	@ 0x60
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	0800379b 	.word	0x0800379b
 8003b74:	080038c7 	.word	0x080038c7
 8003b78:	08003903 	.word	0x08003903

08003b7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	@ 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	61ba      	str	r2, [r7, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003bc0:	bf00      	nop
 8003bc2:	3724      	adds	r7, #36	@ 0x24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b095      	sub	sp, #84	@ 0x54
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bf4:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e5      	bne.n	8003bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	3314      	adds	r3, #20
 8003c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	e853 3f00 	ldrex	r3, [r3]
 8003c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3314      	adds	r3, #20
 8003c26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e5      	bne.n	8003c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d119      	bne.n	8003c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f023 0310 	bic.w	r3, r3, #16
 8003c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c64:	61ba      	str	r2, [r7, #24]
 8003c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6979      	ldr	r1, [r7, #20]
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	613b      	str	r3, [r7, #16]
   return(result);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c86:	bf00      	nop
 8003c88:	3754      	adds	r7, #84	@ 0x54
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c98:	b0c0      	sub	sp, #256	@ 0x100
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	68d9      	ldr	r1, [r3, #12]
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	ea40 0301 	orr.w	r3, r0, r1
 8003cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cec:	f021 010c 	bic.w	r1, r1, #12
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0e:	6999      	ldr	r1, [r3, #24]
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	ea40 0301 	orr.w	r3, r0, r1
 8003d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	4b8f      	ldr	r3, [pc, #572]	@ (8003f60 <UART_SetConfig+0x2cc>)
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d005      	beq.n	8003d34 <UART_SetConfig+0xa0>
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8003f64 <UART_SetConfig+0x2d0>)
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d104      	bne.n	8003d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d34:	f7ff f980 	bl	8003038 <HAL_RCC_GetPCLK2Freq>
 8003d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d3c:	e003      	b.n	8003d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d3e:	f7ff f967 	bl	8003010 <HAL_RCC_GetPCLK1Freq>
 8003d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d50:	f040 810c 	bne.w	8003f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d66:	4622      	mov	r2, r4
 8003d68:	462b      	mov	r3, r5
 8003d6a:	1891      	adds	r1, r2, r2
 8003d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d6e:	415b      	adcs	r3, r3
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d76:	4621      	mov	r1, r4
 8003d78:	eb12 0801 	adds.w	r8, r2, r1
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	eb43 0901 	adc.w	r9, r3, r1
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d96:	4690      	mov	r8, r2
 8003d98:	4699      	mov	r9, r3
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	eb18 0303 	adds.w	r3, r8, r3
 8003da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003da4:	462b      	mov	r3, r5
 8003da6:	eb49 0303 	adc.w	r3, r9, r3
 8003daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	18db      	adds	r3, r3, r3
 8003dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dc8:	4613      	mov	r3, r2
 8003dca:	eb42 0303 	adc.w	r3, r2, r3
 8003dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003dd8:	f7fc fa52 	bl	8000280 <__aeabi_uldivmod>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4b61      	ldr	r3, [pc, #388]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003de2:	fba3 2302 	umull	r2, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	011c      	lsls	r4, r3, #4
 8003dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	1891      	adds	r1, r2, r2
 8003e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e04:	415b      	adcs	r3, r3
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb43 0b01 	adc.w	fp, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2c:	4692      	mov	sl, r2
 8003e2e:	469b      	mov	fp, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	eb1a 0303 	adds.w	r3, sl, r3
 8003e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8003e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	18db      	adds	r3, r3, r3
 8003e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e5e:	4613      	mov	r3, r2
 8003e60:	eb42 0303 	adc.w	r3, r2, r3
 8003e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e6e:	f7fc fa07 	bl	8000280 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4611      	mov	r1, r2
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2264      	movs	r2, #100	@ 0x64
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	1acb      	subs	r3, r1, r3
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e8e:	4b36      	ldr	r3, [pc, #216]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003e90:	fba3 2302 	umull	r2, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e9c:	441c      	add	r4, r3
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	1851      	adds	r1, r2, r1
 8003ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	414b      	adcs	r3, r1
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ed8:	4659      	mov	r1, fp
 8003eda:	00cb      	lsls	r3, r1, #3
 8003edc:	4651      	mov	r1, sl
 8003ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee2:	4651      	mov	r1, sl
 8003ee4:	00ca      	lsls	r2, r1, #3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4603      	mov	r3, r0
 8003eec:	4642      	mov	r2, r8
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f14:	460b      	mov	r3, r1
 8003f16:	18db      	adds	r3, r3, r3
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	eb42 0303 	adc.w	r3, r2, r3
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f2a:	f7fc f9a9 	bl	8000280 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003f34:	fba3 1302 	umull	r1, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2164      	movs	r1, #100	@ 0x64
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	3332      	adds	r3, #50	@ 0x32
 8003f46:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <UART_SetConfig+0x2d4>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 0207 	and.w	r2, r3, #7
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4422      	add	r2, r4
 8003f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f5c:	e106      	b.n	800416c <UART_SetConfig+0x4d8>
 8003f5e:	bf00      	nop
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f7e:	4642      	mov	r2, r8
 8003f80:	464b      	mov	r3, r9
 8003f82:	1891      	adds	r1, r2, r2
 8003f84:	6239      	str	r1, [r7, #32]
 8003f86:	415b      	adcs	r3, r3
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f8e:	4641      	mov	r1, r8
 8003f90:	1854      	adds	r4, r2, r1
 8003f92:	4649      	mov	r1, r9
 8003f94:	eb43 0501 	adc.w	r5, r3, r1
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	00eb      	lsls	r3, r5, #3
 8003fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fa6:	00e2      	lsls	r2, r4, #3
 8003fa8:	4614      	mov	r4, r2
 8003faa:	461d      	mov	r5, r3
 8003fac:	4643      	mov	r3, r8
 8003fae:	18e3      	adds	r3, r4, r3
 8003fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fb4:	464b      	mov	r3, r9
 8003fb6:	eb45 0303 	adc.w	r3, r5, r3
 8003fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003fda:	4629      	mov	r1, r5
 8003fdc:	008b      	lsls	r3, r1, #2
 8003fde:	4621      	mov	r1, r4
 8003fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	008a      	lsls	r2, r1, #2
 8003fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fec:	f7fc f948 	bl	8000280 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b60      	ldr	r3, [pc, #384]	@ (8004178 <UART_SetConfig+0x4e4>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800400c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	1891      	adds	r1, r2, r2
 8004016:	61b9      	str	r1, [r7, #24]
 8004018:	415b      	adcs	r3, r3
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004020:	4641      	mov	r1, r8
 8004022:	1851      	adds	r1, r2, r1
 8004024:	6139      	str	r1, [r7, #16]
 8004026:	4649      	mov	r1, r9
 8004028:	414b      	adcs	r3, r1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004038:	4659      	mov	r1, fp
 800403a:	00cb      	lsls	r3, r1, #3
 800403c:	4651      	mov	r1, sl
 800403e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004042:	4651      	mov	r1, sl
 8004044:	00ca      	lsls	r2, r1, #3
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	4603      	mov	r3, r0
 800404c:	4642      	mov	r2, r8
 800404e:	189b      	adds	r3, r3, r2
 8004050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004054:	464b      	mov	r3, r9
 8004056:	460a      	mov	r2, r1
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800406a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004078:	4649      	mov	r1, r9
 800407a:	008b      	lsls	r3, r1, #2
 800407c:	4641      	mov	r1, r8
 800407e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004082:	4641      	mov	r1, r8
 8004084:	008a      	lsls	r2, r1, #2
 8004086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800408a:	f7fc f8f9 	bl	8000280 <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4611      	mov	r1, r2
 8004094:	4b38      	ldr	r3, [pc, #224]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004096:	fba3 2301 	umull	r2, r3, r3, r1
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2264      	movs	r2, #100	@ 0x64
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	1acb      	subs	r3, r1, r3
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	3332      	adds	r3, #50	@ 0x32
 80040a8:	4a33      	ldr	r2, [pc, #204]	@ (8004178 <UART_SetConfig+0x4e4>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040b4:	441c      	add	r4, r3
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040be:	677a      	str	r2, [r7, #116]	@ 0x74
 80040c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6039      	str	r1, [r7, #0]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004106:	464b      	mov	r3, r9
 8004108:	460a      	mov	r2, r1
 800410a:	eb42 0303 	adc.w	r3, r2, r3
 800410e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	663b      	str	r3, [r7, #96]	@ 0x60
 800411a:	667a      	str	r2, [r7, #100]	@ 0x64
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800413a:	f7fc f8a1 	bl	8000280 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004144:	fba3 1302 	umull	r1, r3, r3, r2
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	2164      	movs	r1, #100	@ 0x64
 800414c:	fb01 f303 	mul.w	r3, r1, r3
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	3332      	adds	r3, #50	@ 0x32
 8004156:	4a08      	ldr	r2, [pc, #32]	@ (8004178 <UART_SetConfig+0x4e4>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4422      	add	r2, r4
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004172:	46bd      	mov	sp, r7
 8004174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <std>:
 800417c:	2300      	movs	r3, #0
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
 8004182:	e9c0 3300 	strd	r3, r3, [r0]
 8004186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800418a:	6083      	str	r3, [r0, #8]
 800418c:	8181      	strh	r1, [r0, #12]
 800418e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004190:	81c2      	strh	r2, [r0, #14]
 8004192:	6183      	str	r3, [r0, #24]
 8004194:	4619      	mov	r1, r3
 8004196:	2208      	movs	r2, #8
 8004198:	305c      	adds	r0, #92	@ 0x5c
 800419a:	f000 f9f9 	bl	8004590 <memset>
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <std+0x58>)
 80041a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80041a2:	4b0d      	ldr	r3, [pc, #52]	@ (80041d8 <std+0x5c>)
 80041a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <std+0x60>)
 80041a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041aa:	4b0d      	ldr	r3, [pc, #52]	@ (80041e0 <std+0x64>)
 80041ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <std+0x68>)
 80041b0:	6224      	str	r4, [r4, #32]
 80041b2:	429c      	cmp	r4, r3
 80041b4:	d006      	beq.n	80041c4 <std+0x48>
 80041b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041ba:	4294      	cmp	r4, r2
 80041bc:	d002      	beq.n	80041c4 <std+0x48>
 80041be:	33d0      	adds	r3, #208	@ 0xd0
 80041c0:	429c      	cmp	r4, r3
 80041c2:	d105      	bne.n	80041d0 <std+0x54>
 80041c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80041c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041cc:	f000 ba58 	b.w	8004680 <__retarget_lock_init_recursive>
 80041d0:	bd10      	pop	{r4, pc}
 80041d2:	bf00      	nop
 80041d4:	080043e1 	.word	0x080043e1
 80041d8:	08004403 	.word	0x08004403
 80041dc:	0800443b 	.word	0x0800443b
 80041e0:	0800445f 	.word	0x0800445f
 80041e4:	20000344 	.word	0x20000344

080041e8 <stdio_exit_handler>:
 80041e8:	4a02      	ldr	r2, [pc, #8]	@ (80041f4 <stdio_exit_handler+0xc>)
 80041ea:	4903      	ldr	r1, [pc, #12]	@ (80041f8 <stdio_exit_handler+0x10>)
 80041ec:	4803      	ldr	r0, [pc, #12]	@ (80041fc <stdio_exit_handler+0x14>)
 80041ee:	f000 b869 	b.w	80042c4 <_fwalk_sglue>
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c
 80041f8:	08004f21 	.word	0x08004f21
 80041fc:	2000001c 	.word	0x2000001c

08004200 <cleanup_stdio>:
 8004200:	6841      	ldr	r1, [r0, #4]
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <cleanup_stdio+0x34>)
 8004204:	4299      	cmp	r1, r3
 8004206:	b510      	push	{r4, lr}
 8004208:	4604      	mov	r4, r0
 800420a:	d001      	beq.n	8004210 <cleanup_stdio+0x10>
 800420c:	f000 fe88 	bl	8004f20 <_fflush_r>
 8004210:	68a1      	ldr	r1, [r4, #8]
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <cleanup_stdio+0x38>)
 8004214:	4299      	cmp	r1, r3
 8004216:	d002      	beq.n	800421e <cleanup_stdio+0x1e>
 8004218:	4620      	mov	r0, r4
 800421a:	f000 fe81 	bl	8004f20 <_fflush_r>
 800421e:	68e1      	ldr	r1, [r4, #12]
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <cleanup_stdio+0x3c>)
 8004222:	4299      	cmp	r1, r3
 8004224:	d004      	beq.n	8004230 <cleanup_stdio+0x30>
 8004226:	4620      	mov	r0, r4
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	f000 be78 	b.w	8004f20 <_fflush_r>
 8004230:	bd10      	pop	{r4, pc}
 8004232:	bf00      	nop
 8004234:	20000344 	.word	0x20000344
 8004238:	200003ac 	.word	0x200003ac
 800423c:	20000414 	.word	0x20000414

08004240 <global_stdio_init.part.0>:
 8004240:	b510      	push	{r4, lr}
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <global_stdio_init.part.0+0x30>)
 8004244:	4c0b      	ldr	r4, [pc, #44]	@ (8004274 <global_stdio_init.part.0+0x34>)
 8004246:	4a0c      	ldr	r2, [pc, #48]	@ (8004278 <global_stdio_init.part.0+0x38>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	4620      	mov	r0, r4
 800424c:	2200      	movs	r2, #0
 800424e:	2104      	movs	r1, #4
 8004250:	f7ff ff94 	bl	800417c <std>
 8004254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004258:	2201      	movs	r2, #1
 800425a:	2109      	movs	r1, #9
 800425c:	f7ff ff8e 	bl	800417c <std>
 8004260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004264:	2202      	movs	r2, #2
 8004266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800426a:	2112      	movs	r1, #18
 800426c:	f7ff bf86 	b.w	800417c <std>
 8004270:	2000047c 	.word	0x2000047c
 8004274:	20000344 	.word	0x20000344
 8004278:	080041e9 	.word	0x080041e9

0800427c <__sfp_lock_acquire>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__sfp_lock_acquire+0x8>)
 800427e:	f000 ba00 	b.w	8004682 <__retarget_lock_acquire_recursive>
 8004282:	bf00      	nop
 8004284:	20000485 	.word	0x20000485

08004288 <__sfp_lock_release>:
 8004288:	4801      	ldr	r0, [pc, #4]	@ (8004290 <__sfp_lock_release+0x8>)
 800428a:	f000 b9fb 	b.w	8004684 <__retarget_lock_release_recursive>
 800428e:	bf00      	nop
 8004290:	20000485 	.word	0x20000485

08004294 <__sinit>:
 8004294:	b510      	push	{r4, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	f7ff fff0 	bl	800427c <__sfp_lock_acquire>
 800429c:	6a23      	ldr	r3, [r4, #32]
 800429e:	b11b      	cbz	r3, 80042a8 <__sinit+0x14>
 80042a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a4:	f7ff bff0 	b.w	8004288 <__sfp_lock_release>
 80042a8:	4b04      	ldr	r3, [pc, #16]	@ (80042bc <__sinit+0x28>)
 80042aa:	6223      	str	r3, [r4, #32]
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <__sinit+0x2c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1f5      	bne.n	80042a0 <__sinit+0xc>
 80042b4:	f7ff ffc4 	bl	8004240 <global_stdio_init.part.0>
 80042b8:	e7f2      	b.n	80042a0 <__sinit+0xc>
 80042ba:	bf00      	nop
 80042bc:	08004201 	.word	0x08004201
 80042c0:	2000047c 	.word	0x2000047c

080042c4 <_fwalk_sglue>:
 80042c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042c8:	4607      	mov	r7, r0
 80042ca:	4688      	mov	r8, r1
 80042cc:	4614      	mov	r4, r2
 80042ce:	2600      	movs	r6, #0
 80042d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042d4:	f1b9 0901 	subs.w	r9, r9, #1
 80042d8:	d505      	bpl.n	80042e6 <_fwalk_sglue+0x22>
 80042da:	6824      	ldr	r4, [r4, #0]
 80042dc:	2c00      	cmp	r4, #0
 80042de:	d1f7      	bne.n	80042d0 <_fwalk_sglue+0xc>
 80042e0:	4630      	mov	r0, r6
 80042e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042e6:	89ab      	ldrh	r3, [r5, #12]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d907      	bls.n	80042fc <_fwalk_sglue+0x38>
 80042ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042f0:	3301      	adds	r3, #1
 80042f2:	d003      	beq.n	80042fc <_fwalk_sglue+0x38>
 80042f4:	4629      	mov	r1, r5
 80042f6:	4638      	mov	r0, r7
 80042f8:	47c0      	blx	r8
 80042fa:	4306      	orrs	r6, r0
 80042fc:	3568      	adds	r5, #104	@ 0x68
 80042fe:	e7e9      	b.n	80042d4 <_fwalk_sglue+0x10>

08004300 <iprintf>:
 8004300:	b40f      	push	{r0, r1, r2, r3}
 8004302:	b507      	push	{r0, r1, r2, lr}
 8004304:	4906      	ldr	r1, [pc, #24]	@ (8004320 <iprintf+0x20>)
 8004306:	ab04      	add	r3, sp, #16
 8004308:	6808      	ldr	r0, [r1, #0]
 800430a:	f853 2b04 	ldr.w	r2, [r3], #4
 800430e:	6881      	ldr	r1, [r0, #8]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	f000 fadb 	bl	80048cc <_vfiprintf_r>
 8004316:	b003      	add	sp, #12
 8004318:	f85d eb04 	ldr.w	lr, [sp], #4
 800431c:	b004      	add	sp, #16
 800431e:	4770      	bx	lr
 8004320:	20000018 	.word	0x20000018

08004324 <_puts_r>:
 8004324:	6a03      	ldr	r3, [r0, #32]
 8004326:	b570      	push	{r4, r5, r6, lr}
 8004328:	6884      	ldr	r4, [r0, #8]
 800432a:	4605      	mov	r5, r0
 800432c:	460e      	mov	r6, r1
 800432e:	b90b      	cbnz	r3, 8004334 <_puts_r+0x10>
 8004330:	f7ff ffb0 	bl	8004294 <__sinit>
 8004334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d405      	bmi.n	8004346 <_puts_r+0x22>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	0598      	lsls	r0, r3, #22
 800433e:	d402      	bmi.n	8004346 <_puts_r+0x22>
 8004340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004342:	f000 f99e 	bl	8004682 <__retarget_lock_acquire_recursive>
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	0719      	lsls	r1, r3, #28
 800434a:	d502      	bpl.n	8004352 <_puts_r+0x2e>
 800434c:	6923      	ldr	r3, [r4, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d135      	bne.n	80043be <_puts_r+0x9a>
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f000 f8c5 	bl	80044e4 <__swsetup_r>
 800435a:	b380      	cbz	r0, 80043be <_puts_r+0x9a>
 800435c:	f04f 35ff 	mov.w	r5, #4294967295
 8004360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004362:	07da      	lsls	r2, r3, #31
 8004364:	d405      	bmi.n	8004372 <_puts_r+0x4e>
 8004366:	89a3      	ldrh	r3, [r4, #12]
 8004368:	059b      	lsls	r3, r3, #22
 800436a:	d402      	bmi.n	8004372 <_puts_r+0x4e>
 800436c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800436e:	f000 f989 	bl	8004684 <__retarget_lock_release_recursive>
 8004372:	4628      	mov	r0, r5
 8004374:	bd70      	pop	{r4, r5, r6, pc}
 8004376:	2b00      	cmp	r3, #0
 8004378:	da04      	bge.n	8004384 <_puts_r+0x60>
 800437a:	69a2      	ldr	r2, [r4, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	dc17      	bgt.n	80043b0 <_puts_r+0x8c>
 8004380:	290a      	cmp	r1, #10
 8004382:	d015      	beq.n	80043b0 <_puts_r+0x8c>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	6022      	str	r2, [r4, #0]
 800438a:	7019      	strb	r1, [r3, #0]
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004392:	3b01      	subs	r3, #1
 8004394:	60a3      	str	r3, [r4, #8]
 8004396:	2900      	cmp	r1, #0
 8004398:	d1ed      	bne.n	8004376 <_puts_r+0x52>
 800439a:	2b00      	cmp	r3, #0
 800439c:	da11      	bge.n	80043c2 <_puts_r+0x9e>
 800439e:	4622      	mov	r2, r4
 80043a0:	210a      	movs	r1, #10
 80043a2:	4628      	mov	r0, r5
 80043a4:	f000 f85f 	bl	8004466 <__swbuf_r>
 80043a8:	3001      	adds	r0, #1
 80043aa:	d0d7      	beq.n	800435c <_puts_r+0x38>
 80043ac:	250a      	movs	r5, #10
 80043ae:	e7d7      	b.n	8004360 <_puts_r+0x3c>
 80043b0:	4622      	mov	r2, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 f857 	bl	8004466 <__swbuf_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d1e7      	bne.n	800438c <_puts_r+0x68>
 80043bc:	e7ce      	b.n	800435c <_puts_r+0x38>
 80043be:	3e01      	subs	r6, #1
 80043c0:	e7e4      	b.n	800438c <_puts_r+0x68>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	6022      	str	r2, [r4, #0]
 80043c8:	220a      	movs	r2, #10
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e7ee      	b.n	80043ac <_puts_r+0x88>
	...

080043d0 <puts>:
 80043d0:	4b02      	ldr	r3, [pc, #8]	@ (80043dc <puts+0xc>)
 80043d2:	4601      	mov	r1, r0
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f7ff bfa5 	b.w	8004324 <_puts_r>
 80043da:	bf00      	nop
 80043dc:	20000018 	.word	0x20000018

080043e0 <__sread>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	460c      	mov	r4, r1
 80043e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e8:	f000 f8fc 	bl	80045e4 <_read_r>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	bfab      	itete	ge
 80043f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043f2:	89a3      	ldrhlt	r3, [r4, #12]
 80043f4:	181b      	addge	r3, r3, r0
 80043f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043fa:	bfac      	ite	ge
 80043fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043fe:	81a3      	strhlt	r3, [r4, #12]
 8004400:	bd10      	pop	{r4, pc}

08004402 <__swrite>:
 8004402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	461f      	mov	r7, r3
 8004408:	898b      	ldrh	r3, [r1, #12]
 800440a:	05db      	lsls	r3, r3, #23
 800440c:	4605      	mov	r5, r0
 800440e:	460c      	mov	r4, r1
 8004410:	4616      	mov	r6, r2
 8004412:	d505      	bpl.n	8004420 <__swrite+0x1e>
 8004414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004418:	2302      	movs	r3, #2
 800441a:	2200      	movs	r2, #0
 800441c:	f000 f8d0 	bl	80045c0 <_lseek_r>
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800442a:	81a3      	strh	r3, [r4, #12]
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	4628      	mov	r0, r5
 8004432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	f000 b8e7 	b.w	8004608 <_write_r>

0800443a <__sseek>:
 800443a:	b510      	push	{r4, lr}
 800443c:	460c      	mov	r4, r1
 800443e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004442:	f000 f8bd 	bl	80045c0 <_lseek_r>
 8004446:	1c43      	adds	r3, r0, #1
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	bf15      	itete	ne
 800444c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800444e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004456:	81a3      	strheq	r3, [r4, #12]
 8004458:	bf18      	it	ne
 800445a:	81a3      	strhne	r3, [r4, #12]
 800445c:	bd10      	pop	{r4, pc}

0800445e <__sclose>:
 800445e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004462:	f000 b89d 	b.w	80045a0 <_close_r>

08004466 <__swbuf_r>:
 8004466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004468:	460e      	mov	r6, r1
 800446a:	4614      	mov	r4, r2
 800446c:	4605      	mov	r5, r0
 800446e:	b118      	cbz	r0, 8004478 <__swbuf_r+0x12>
 8004470:	6a03      	ldr	r3, [r0, #32]
 8004472:	b90b      	cbnz	r3, 8004478 <__swbuf_r+0x12>
 8004474:	f7ff ff0e 	bl	8004294 <__sinit>
 8004478:	69a3      	ldr	r3, [r4, #24]
 800447a:	60a3      	str	r3, [r4, #8]
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	071a      	lsls	r2, r3, #28
 8004480:	d501      	bpl.n	8004486 <__swbuf_r+0x20>
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	b943      	cbnz	r3, 8004498 <__swbuf_r+0x32>
 8004486:	4621      	mov	r1, r4
 8004488:	4628      	mov	r0, r5
 800448a:	f000 f82b 	bl	80044e4 <__swsetup_r>
 800448e:	b118      	cbz	r0, 8004498 <__swbuf_r+0x32>
 8004490:	f04f 37ff 	mov.w	r7, #4294967295
 8004494:	4638      	mov	r0, r7
 8004496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	6922      	ldr	r2, [r4, #16]
 800449c:	1a98      	subs	r0, r3, r2
 800449e:	6963      	ldr	r3, [r4, #20]
 80044a0:	b2f6      	uxtb	r6, r6
 80044a2:	4283      	cmp	r3, r0
 80044a4:	4637      	mov	r7, r6
 80044a6:	dc05      	bgt.n	80044b4 <__swbuf_r+0x4e>
 80044a8:	4621      	mov	r1, r4
 80044aa:	4628      	mov	r0, r5
 80044ac:	f000 fd38 	bl	8004f20 <_fflush_r>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d1ed      	bne.n	8004490 <__swbuf_r+0x2a>
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	6022      	str	r2, [r4, #0]
 80044c0:	701e      	strb	r6, [r3, #0]
 80044c2:	6962      	ldr	r2, [r4, #20]
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d004      	beq.n	80044d4 <__swbuf_r+0x6e>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	07db      	lsls	r3, r3, #31
 80044ce:	d5e1      	bpl.n	8004494 <__swbuf_r+0x2e>
 80044d0:	2e0a      	cmp	r6, #10
 80044d2:	d1df      	bne.n	8004494 <__swbuf_r+0x2e>
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fd22 	bl	8004f20 <_fflush_r>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d0d9      	beq.n	8004494 <__swbuf_r+0x2e>
 80044e0:	e7d6      	b.n	8004490 <__swbuf_r+0x2a>
	...

080044e4 <__swsetup_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4b29      	ldr	r3, [pc, #164]	@ (800458c <__swsetup_r+0xa8>)
 80044e8:	4605      	mov	r5, r0
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	460c      	mov	r4, r1
 80044ee:	b118      	cbz	r0, 80044f8 <__swsetup_r+0x14>
 80044f0:	6a03      	ldr	r3, [r0, #32]
 80044f2:	b90b      	cbnz	r3, 80044f8 <__swsetup_r+0x14>
 80044f4:	f7ff fece 	bl	8004294 <__sinit>
 80044f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fc:	0719      	lsls	r1, r3, #28
 80044fe:	d422      	bmi.n	8004546 <__swsetup_r+0x62>
 8004500:	06da      	lsls	r2, r3, #27
 8004502:	d407      	bmi.n	8004514 <__swsetup_r+0x30>
 8004504:	2209      	movs	r2, #9
 8004506:	602a      	str	r2, [r5, #0]
 8004508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	f04f 30ff 	mov.w	r0, #4294967295
 8004512:	e033      	b.n	800457c <__swsetup_r+0x98>
 8004514:	0758      	lsls	r0, r3, #29
 8004516:	d512      	bpl.n	800453e <__swsetup_r+0x5a>
 8004518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800451a:	b141      	cbz	r1, 800452e <__swsetup_r+0x4a>
 800451c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004520:	4299      	cmp	r1, r3
 8004522:	d002      	beq.n	800452a <__swsetup_r+0x46>
 8004524:	4628      	mov	r0, r5
 8004526:	f000 f8af 	bl	8004688 <_free_r>
 800452a:	2300      	movs	r3, #0
 800452c:	6363      	str	r3, [r4, #52]	@ 0x34
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004534:	81a3      	strh	r3, [r4, #12]
 8004536:	2300      	movs	r3, #0
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f043 0308 	orr.w	r3, r3, #8
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	b94b      	cbnz	r3, 800455e <__swsetup_r+0x7a>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004554:	d003      	beq.n	800455e <__swsetup_r+0x7a>
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f000 fd2f 	bl	8004fbc <__smakebuf_r>
 800455e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004562:	f013 0201 	ands.w	r2, r3, #1
 8004566:	d00a      	beq.n	800457e <__swsetup_r+0x9a>
 8004568:	2200      	movs	r2, #0
 800456a:	60a2      	str	r2, [r4, #8]
 800456c:	6962      	ldr	r2, [r4, #20]
 800456e:	4252      	negs	r2, r2
 8004570:	61a2      	str	r2, [r4, #24]
 8004572:	6922      	ldr	r2, [r4, #16]
 8004574:	b942      	cbnz	r2, 8004588 <__swsetup_r+0xa4>
 8004576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800457a:	d1c5      	bne.n	8004508 <__swsetup_r+0x24>
 800457c:	bd38      	pop	{r3, r4, r5, pc}
 800457e:	0799      	lsls	r1, r3, #30
 8004580:	bf58      	it	pl
 8004582:	6962      	ldrpl	r2, [r4, #20]
 8004584:	60a2      	str	r2, [r4, #8]
 8004586:	e7f4      	b.n	8004572 <__swsetup_r+0x8e>
 8004588:	2000      	movs	r0, #0
 800458a:	e7f7      	b.n	800457c <__swsetup_r+0x98>
 800458c:	20000018 	.word	0x20000018

08004590 <memset>:
 8004590:	4402      	add	r2, r0
 8004592:	4603      	mov	r3, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	d100      	bne.n	800459a <memset+0xa>
 8004598:	4770      	bx	lr
 800459a:	f803 1b01 	strb.w	r1, [r3], #1
 800459e:	e7f9      	b.n	8004594 <memset+0x4>

080045a0 <_close_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4d06      	ldr	r5, [pc, #24]	@ (80045bc <_close_r+0x1c>)
 80045a4:	2300      	movs	r3, #0
 80045a6:	4604      	mov	r4, r0
 80045a8:	4608      	mov	r0, r1
 80045aa:	602b      	str	r3, [r5, #0]
 80045ac:	f7fc fc4b 	bl	8000e46 <_close>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_close_r+0x1a>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_close_r+0x1a>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000480 	.word	0x20000480

080045c0 <_lseek_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4d07      	ldr	r5, [pc, #28]	@ (80045e0 <_lseek_r+0x20>)
 80045c4:	4604      	mov	r4, r0
 80045c6:	4608      	mov	r0, r1
 80045c8:	4611      	mov	r1, r2
 80045ca:	2200      	movs	r2, #0
 80045cc:	602a      	str	r2, [r5, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f7fc fc60 	bl	8000e94 <_lseek>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_lseek_r+0x1e>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_lseek_r+0x1e>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	20000480 	.word	0x20000480

080045e4 <_read_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d07      	ldr	r5, [pc, #28]	@ (8004604 <_read_r+0x20>)
 80045e8:	4604      	mov	r4, r0
 80045ea:	4608      	mov	r0, r1
 80045ec:	4611      	mov	r1, r2
 80045ee:	2200      	movs	r2, #0
 80045f0:	602a      	str	r2, [r5, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f7fc fbee 	bl	8000dd4 <_read>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_read_r+0x1e>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_read_r+0x1e>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	20000480 	.word	0x20000480

08004608 <_write_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d07      	ldr	r5, [pc, #28]	@ (8004628 <_write_r+0x20>)
 800460c:	4604      	mov	r4, r0
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	2200      	movs	r2, #0
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f7fc fbf9 	bl	8000e0e <_write>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_write_r+0x1e>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_write_r+0x1e>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000480 	.word	0x20000480

0800462c <__errno>:
 800462c:	4b01      	ldr	r3, [pc, #4]	@ (8004634 <__errno+0x8>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000018 	.word	0x20000018

08004638 <__libc_init_array>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	4d0d      	ldr	r5, [pc, #52]	@ (8004670 <__libc_init_array+0x38>)
 800463c:	4c0d      	ldr	r4, [pc, #52]	@ (8004674 <__libc_init_array+0x3c>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	2600      	movs	r6, #0
 8004644:	42a6      	cmp	r6, r4
 8004646:	d109      	bne.n	800465c <__libc_init_array+0x24>
 8004648:	4d0b      	ldr	r5, [pc, #44]	@ (8004678 <__libc_init_array+0x40>)
 800464a:	4c0c      	ldr	r4, [pc, #48]	@ (800467c <__libc_init_array+0x44>)
 800464c:	f000 fd24 	bl	8005098 <_init>
 8004650:	1b64      	subs	r4, r4, r5
 8004652:	10a4      	asrs	r4, r4, #2
 8004654:	2600      	movs	r6, #0
 8004656:	42a6      	cmp	r6, r4
 8004658:	d105      	bne.n	8004666 <__libc_init_array+0x2e>
 800465a:	bd70      	pop	{r4, r5, r6, pc}
 800465c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004660:	4798      	blx	r3
 8004662:	3601      	adds	r6, #1
 8004664:	e7ee      	b.n	8004644 <__libc_init_array+0xc>
 8004666:	f855 3b04 	ldr.w	r3, [r5], #4
 800466a:	4798      	blx	r3
 800466c:	3601      	adds	r6, #1
 800466e:	e7f2      	b.n	8004656 <__libc_init_array+0x1e>
 8004670:	08005140 	.word	0x08005140
 8004674:	08005140 	.word	0x08005140
 8004678:	08005140 	.word	0x08005140
 800467c:	08005144 	.word	0x08005144

08004680 <__retarget_lock_init_recursive>:
 8004680:	4770      	bx	lr

08004682 <__retarget_lock_acquire_recursive>:
 8004682:	4770      	bx	lr

08004684 <__retarget_lock_release_recursive>:
 8004684:	4770      	bx	lr
	...

08004688 <_free_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4605      	mov	r5, r0
 800468c:	2900      	cmp	r1, #0
 800468e:	d041      	beq.n	8004714 <_free_r+0x8c>
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f0c      	subs	r4, r1, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfb8      	it	lt
 800469a:	18e4      	addlt	r4, r4, r3
 800469c:	f000 f8e0 	bl	8004860 <__malloc_lock>
 80046a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004718 <_free_r+0x90>)
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	b933      	cbnz	r3, 80046b4 <_free_r+0x2c>
 80046a6:	6063      	str	r3, [r4, #4]
 80046a8:	6014      	str	r4, [r2, #0]
 80046aa:	4628      	mov	r0, r5
 80046ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b0:	f000 b8dc 	b.w	800486c <__malloc_unlock>
 80046b4:	42a3      	cmp	r3, r4
 80046b6:	d908      	bls.n	80046ca <_free_r+0x42>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	1821      	adds	r1, r4, r0
 80046bc:	428b      	cmp	r3, r1
 80046be:	bf01      	itttt	eq
 80046c0:	6819      	ldreq	r1, [r3, #0]
 80046c2:	685b      	ldreq	r3, [r3, #4]
 80046c4:	1809      	addeq	r1, r1, r0
 80046c6:	6021      	streq	r1, [r4, #0]
 80046c8:	e7ed      	b.n	80046a6 <_free_r+0x1e>
 80046ca:	461a      	mov	r2, r3
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	b10b      	cbz	r3, 80046d4 <_free_r+0x4c>
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	d9fa      	bls.n	80046ca <_free_r+0x42>
 80046d4:	6811      	ldr	r1, [r2, #0]
 80046d6:	1850      	adds	r0, r2, r1
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d10b      	bne.n	80046f4 <_free_r+0x6c>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	4401      	add	r1, r0
 80046e0:	1850      	adds	r0, r2, r1
 80046e2:	4283      	cmp	r3, r0
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	d1e0      	bne.n	80046aa <_free_r+0x22>
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	6053      	str	r3, [r2, #4]
 80046ee:	4408      	add	r0, r1
 80046f0:	6010      	str	r0, [r2, #0]
 80046f2:	e7da      	b.n	80046aa <_free_r+0x22>
 80046f4:	d902      	bls.n	80046fc <_free_r+0x74>
 80046f6:	230c      	movs	r3, #12
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	e7d6      	b.n	80046aa <_free_r+0x22>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	1821      	adds	r1, r4, r0
 8004700:	428b      	cmp	r3, r1
 8004702:	bf04      	itt	eq
 8004704:	6819      	ldreq	r1, [r3, #0]
 8004706:	685b      	ldreq	r3, [r3, #4]
 8004708:	6063      	str	r3, [r4, #4]
 800470a:	bf04      	itt	eq
 800470c:	1809      	addeq	r1, r1, r0
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	6054      	str	r4, [r2, #4]
 8004712:	e7ca      	b.n	80046aa <_free_r+0x22>
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	2000048c 	.word	0x2000048c

0800471c <sbrk_aligned>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4e0f      	ldr	r6, [pc, #60]	@ (800475c <sbrk_aligned+0x40>)
 8004720:	460c      	mov	r4, r1
 8004722:	6831      	ldr	r1, [r6, #0]
 8004724:	4605      	mov	r5, r0
 8004726:	b911      	cbnz	r1, 800472e <sbrk_aligned+0x12>
 8004728:	f000 fca6 	bl	8005078 <_sbrk_r>
 800472c:	6030      	str	r0, [r6, #0]
 800472e:	4621      	mov	r1, r4
 8004730:	4628      	mov	r0, r5
 8004732:	f000 fca1 	bl	8005078 <_sbrk_r>
 8004736:	1c43      	adds	r3, r0, #1
 8004738:	d103      	bne.n	8004742 <sbrk_aligned+0x26>
 800473a:	f04f 34ff 	mov.w	r4, #4294967295
 800473e:	4620      	mov	r0, r4
 8004740:	bd70      	pop	{r4, r5, r6, pc}
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d0f8      	beq.n	800473e <sbrk_aligned+0x22>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4628      	mov	r0, r5
 8004750:	f000 fc92 	bl	8005078 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d1f2      	bne.n	800473e <sbrk_aligned+0x22>
 8004758:	e7ef      	b.n	800473a <sbrk_aligned+0x1e>
 800475a:	bf00      	nop
 800475c:	20000488 	.word	0x20000488

08004760 <_malloc_r>:
 8004760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004764:	1ccd      	adds	r5, r1, #3
 8004766:	f025 0503 	bic.w	r5, r5, #3
 800476a:	3508      	adds	r5, #8
 800476c:	2d0c      	cmp	r5, #12
 800476e:	bf38      	it	cc
 8004770:	250c      	movcc	r5, #12
 8004772:	2d00      	cmp	r5, #0
 8004774:	4606      	mov	r6, r0
 8004776:	db01      	blt.n	800477c <_malloc_r+0x1c>
 8004778:	42a9      	cmp	r1, r5
 800477a:	d904      	bls.n	8004786 <_malloc_r+0x26>
 800477c:	230c      	movs	r3, #12
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	2000      	movs	r0, #0
 8004782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800485c <_malloc_r+0xfc>
 800478a:	f000 f869 	bl	8004860 <__malloc_lock>
 800478e:	f8d8 3000 	ldr.w	r3, [r8]
 8004792:	461c      	mov	r4, r3
 8004794:	bb44      	cbnz	r4, 80047e8 <_malloc_r+0x88>
 8004796:	4629      	mov	r1, r5
 8004798:	4630      	mov	r0, r6
 800479a:	f7ff ffbf 	bl	800471c <sbrk_aligned>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	4604      	mov	r4, r0
 80047a2:	d158      	bne.n	8004856 <_malloc_r+0xf6>
 80047a4:	f8d8 4000 	ldr.w	r4, [r8]
 80047a8:	4627      	mov	r7, r4
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	d143      	bne.n	8004836 <_malloc_r+0xd6>
 80047ae:	2c00      	cmp	r4, #0
 80047b0:	d04b      	beq.n	800484a <_malloc_r+0xea>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	4639      	mov	r1, r7
 80047b6:	4630      	mov	r0, r6
 80047b8:	eb04 0903 	add.w	r9, r4, r3
 80047bc:	f000 fc5c 	bl	8005078 <_sbrk_r>
 80047c0:	4581      	cmp	r9, r0
 80047c2:	d142      	bne.n	800484a <_malloc_r+0xea>
 80047c4:	6821      	ldr	r1, [r4, #0]
 80047c6:	1a6d      	subs	r5, r5, r1
 80047c8:	4629      	mov	r1, r5
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ffa6 	bl	800471c <sbrk_aligned>
 80047d0:	3001      	adds	r0, #1
 80047d2:	d03a      	beq.n	800484a <_malloc_r+0xea>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	442b      	add	r3, r5
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	f8d8 3000 	ldr.w	r3, [r8]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	bb62      	cbnz	r2, 800483c <_malloc_r+0xdc>
 80047e2:	f8c8 7000 	str.w	r7, [r8]
 80047e6:	e00f      	b.n	8004808 <_malloc_r+0xa8>
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	1b52      	subs	r2, r2, r5
 80047ec:	d420      	bmi.n	8004830 <_malloc_r+0xd0>
 80047ee:	2a0b      	cmp	r2, #11
 80047f0:	d917      	bls.n	8004822 <_malloc_r+0xc2>
 80047f2:	1961      	adds	r1, r4, r5
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	6025      	str	r5, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	6059      	strne	r1, [r3, #4]
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	bf08      	it	eq
 8004800:	f8c8 1000 	streq.w	r1, [r8]
 8004804:	5162      	str	r2, [r4, r5]
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	4630      	mov	r0, r6
 800480a:	f000 f82f 	bl	800486c <__malloc_unlock>
 800480e:	f104 000b 	add.w	r0, r4, #11
 8004812:	1d23      	adds	r3, r4, #4
 8004814:	f020 0007 	bic.w	r0, r0, #7
 8004818:	1ac2      	subs	r2, r0, r3
 800481a:	bf1c      	itt	ne
 800481c:	1a1b      	subne	r3, r3, r0
 800481e:	50a3      	strne	r3, [r4, r2]
 8004820:	e7af      	b.n	8004782 <_malloc_r+0x22>
 8004822:	6862      	ldr	r2, [r4, #4]
 8004824:	42a3      	cmp	r3, r4
 8004826:	bf0c      	ite	eq
 8004828:	f8c8 2000 	streq.w	r2, [r8]
 800482c:	605a      	strne	r2, [r3, #4]
 800482e:	e7eb      	b.n	8004808 <_malloc_r+0xa8>
 8004830:	4623      	mov	r3, r4
 8004832:	6864      	ldr	r4, [r4, #4]
 8004834:	e7ae      	b.n	8004794 <_malloc_r+0x34>
 8004836:	463c      	mov	r4, r7
 8004838:	687f      	ldr	r7, [r7, #4]
 800483a:	e7b6      	b.n	80047aa <_malloc_r+0x4a>
 800483c:	461a      	mov	r2, r3
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	42a3      	cmp	r3, r4
 8004842:	d1fb      	bne.n	800483c <_malloc_r+0xdc>
 8004844:	2300      	movs	r3, #0
 8004846:	6053      	str	r3, [r2, #4]
 8004848:	e7de      	b.n	8004808 <_malloc_r+0xa8>
 800484a:	230c      	movs	r3, #12
 800484c:	6033      	str	r3, [r6, #0]
 800484e:	4630      	mov	r0, r6
 8004850:	f000 f80c 	bl	800486c <__malloc_unlock>
 8004854:	e794      	b.n	8004780 <_malloc_r+0x20>
 8004856:	6005      	str	r5, [r0, #0]
 8004858:	e7d6      	b.n	8004808 <_malloc_r+0xa8>
 800485a:	bf00      	nop
 800485c:	2000048c 	.word	0x2000048c

08004860 <__malloc_lock>:
 8004860:	4801      	ldr	r0, [pc, #4]	@ (8004868 <__malloc_lock+0x8>)
 8004862:	f7ff bf0e 	b.w	8004682 <__retarget_lock_acquire_recursive>
 8004866:	bf00      	nop
 8004868:	20000484 	.word	0x20000484

0800486c <__malloc_unlock>:
 800486c:	4801      	ldr	r0, [pc, #4]	@ (8004874 <__malloc_unlock+0x8>)
 800486e:	f7ff bf09 	b.w	8004684 <__retarget_lock_release_recursive>
 8004872:	bf00      	nop
 8004874:	20000484 	.word	0x20000484

08004878 <__sfputc_r>:
 8004878:	6893      	ldr	r3, [r2, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	b410      	push	{r4}
 8004880:	6093      	str	r3, [r2, #8]
 8004882:	da08      	bge.n	8004896 <__sfputc_r+0x1e>
 8004884:	6994      	ldr	r4, [r2, #24]
 8004886:	42a3      	cmp	r3, r4
 8004888:	db01      	blt.n	800488e <__sfputc_r+0x16>
 800488a:	290a      	cmp	r1, #10
 800488c:	d103      	bne.n	8004896 <__sfputc_r+0x1e>
 800488e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004892:	f7ff bde8 	b.w	8004466 <__swbuf_r>
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	1c58      	adds	r0, r3, #1
 800489a:	6010      	str	r0, [r2, #0]
 800489c:	7019      	strb	r1, [r3, #0]
 800489e:	4608      	mov	r0, r1
 80048a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <__sfputs_r>:
 80048a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a8:	4606      	mov	r6, r0
 80048aa:	460f      	mov	r7, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	18d5      	adds	r5, r2, r3
 80048b0:	42ac      	cmp	r4, r5
 80048b2:	d101      	bne.n	80048b8 <__sfputs_r+0x12>
 80048b4:	2000      	movs	r0, #0
 80048b6:	e007      	b.n	80048c8 <__sfputs_r+0x22>
 80048b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048bc:	463a      	mov	r2, r7
 80048be:	4630      	mov	r0, r6
 80048c0:	f7ff ffda 	bl	8004878 <__sfputc_r>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d1f3      	bne.n	80048b0 <__sfputs_r+0xa>
 80048c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048cc <_vfiprintf_r>:
 80048cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d0:	460d      	mov	r5, r1
 80048d2:	b09d      	sub	sp, #116	@ 0x74
 80048d4:	4614      	mov	r4, r2
 80048d6:	4698      	mov	r8, r3
 80048d8:	4606      	mov	r6, r0
 80048da:	b118      	cbz	r0, 80048e4 <_vfiprintf_r+0x18>
 80048dc:	6a03      	ldr	r3, [r0, #32]
 80048de:	b90b      	cbnz	r3, 80048e4 <_vfiprintf_r+0x18>
 80048e0:	f7ff fcd8 	bl	8004294 <__sinit>
 80048e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048e6:	07d9      	lsls	r1, r3, #31
 80048e8:	d405      	bmi.n	80048f6 <_vfiprintf_r+0x2a>
 80048ea:	89ab      	ldrh	r3, [r5, #12]
 80048ec:	059a      	lsls	r2, r3, #22
 80048ee:	d402      	bmi.n	80048f6 <_vfiprintf_r+0x2a>
 80048f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048f2:	f7ff fec6 	bl	8004682 <__retarget_lock_acquire_recursive>
 80048f6:	89ab      	ldrh	r3, [r5, #12]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	d501      	bpl.n	8004900 <_vfiprintf_r+0x34>
 80048fc:	692b      	ldr	r3, [r5, #16]
 80048fe:	b99b      	cbnz	r3, 8004928 <_vfiprintf_r+0x5c>
 8004900:	4629      	mov	r1, r5
 8004902:	4630      	mov	r0, r6
 8004904:	f7ff fdee 	bl	80044e4 <__swsetup_r>
 8004908:	b170      	cbz	r0, 8004928 <_vfiprintf_r+0x5c>
 800490a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800490c:	07dc      	lsls	r4, r3, #31
 800490e:	d504      	bpl.n	800491a <_vfiprintf_r+0x4e>
 8004910:	f04f 30ff 	mov.w	r0, #4294967295
 8004914:	b01d      	add	sp, #116	@ 0x74
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	89ab      	ldrh	r3, [r5, #12]
 800491c:	0598      	lsls	r0, r3, #22
 800491e:	d4f7      	bmi.n	8004910 <_vfiprintf_r+0x44>
 8004920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004922:	f7ff feaf 	bl	8004684 <__retarget_lock_release_recursive>
 8004926:	e7f3      	b.n	8004910 <_vfiprintf_r+0x44>
 8004928:	2300      	movs	r3, #0
 800492a:	9309      	str	r3, [sp, #36]	@ 0x24
 800492c:	2320      	movs	r3, #32
 800492e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004932:	f8cd 800c 	str.w	r8, [sp, #12]
 8004936:	2330      	movs	r3, #48	@ 0x30
 8004938:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004ae8 <_vfiprintf_r+0x21c>
 800493c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004940:	f04f 0901 	mov.w	r9, #1
 8004944:	4623      	mov	r3, r4
 8004946:	469a      	mov	sl, r3
 8004948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800494c:	b10a      	cbz	r2, 8004952 <_vfiprintf_r+0x86>
 800494e:	2a25      	cmp	r2, #37	@ 0x25
 8004950:	d1f9      	bne.n	8004946 <_vfiprintf_r+0x7a>
 8004952:	ebba 0b04 	subs.w	fp, sl, r4
 8004956:	d00b      	beq.n	8004970 <_vfiprintf_r+0xa4>
 8004958:	465b      	mov	r3, fp
 800495a:	4622      	mov	r2, r4
 800495c:	4629      	mov	r1, r5
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff ffa1 	bl	80048a6 <__sfputs_r>
 8004964:	3001      	adds	r0, #1
 8004966:	f000 80a7 	beq.w	8004ab8 <_vfiprintf_r+0x1ec>
 800496a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800496c:	445a      	add	r2, fp
 800496e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004970:	f89a 3000 	ldrb.w	r3, [sl]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 809f 	beq.w	8004ab8 <_vfiprintf_r+0x1ec>
 800497a:	2300      	movs	r3, #0
 800497c:	f04f 32ff 	mov.w	r2, #4294967295
 8004980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004984:	f10a 0a01 	add.w	sl, sl, #1
 8004988:	9304      	str	r3, [sp, #16]
 800498a:	9307      	str	r3, [sp, #28]
 800498c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004990:	931a      	str	r3, [sp, #104]	@ 0x68
 8004992:	4654      	mov	r4, sl
 8004994:	2205      	movs	r2, #5
 8004996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499a:	4853      	ldr	r0, [pc, #332]	@ (8004ae8 <_vfiprintf_r+0x21c>)
 800499c:	f7fb fc20 	bl	80001e0 <memchr>
 80049a0:	9a04      	ldr	r2, [sp, #16]
 80049a2:	b9d8      	cbnz	r0, 80049dc <_vfiprintf_r+0x110>
 80049a4:	06d1      	lsls	r1, r2, #27
 80049a6:	bf44      	itt	mi
 80049a8:	2320      	movmi	r3, #32
 80049aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049ae:	0713      	lsls	r3, r2, #28
 80049b0:	bf44      	itt	mi
 80049b2:	232b      	movmi	r3, #43	@ 0x2b
 80049b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b8:	f89a 3000 	ldrb.w	r3, [sl]
 80049bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80049be:	d015      	beq.n	80049ec <_vfiprintf_r+0x120>
 80049c0:	9a07      	ldr	r2, [sp, #28]
 80049c2:	4654      	mov	r4, sl
 80049c4:	2000      	movs	r0, #0
 80049c6:	f04f 0c0a 	mov.w	ip, #10
 80049ca:	4621      	mov	r1, r4
 80049cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d0:	3b30      	subs	r3, #48	@ 0x30
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	d94b      	bls.n	8004a6e <_vfiprintf_r+0x1a2>
 80049d6:	b1b0      	cbz	r0, 8004a06 <_vfiprintf_r+0x13a>
 80049d8:	9207      	str	r2, [sp, #28]
 80049da:	e014      	b.n	8004a06 <_vfiprintf_r+0x13a>
 80049dc:	eba0 0308 	sub.w	r3, r0, r8
 80049e0:	fa09 f303 	lsl.w	r3, r9, r3
 80049e4:	4313      	orrs	r3, r2
 80049e6:	9304      	str	r3, [sp, #16]
 80049e8:	46a2      	mov	sl, r4
 80049ea:	e7d2      	b.n	8004992 <_vfiprintf_r+0xc6>
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	1d19      	adds	r1, r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	9103      	str	r1, [sp, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bfbb      	ittet	lt
 80049f8:	425b      	neglt	r3, r3
 80049fa:	f042 0202 	orrlt.w	r2, r2, #2
 80049fe:	9307      	strge	r3, [sp, #28]
 8004a00:	9307      	strlt	r3, [sp, #28]
 8004a02:	bfb8      	it	lt
 8004a04:	9204      	strlt	r2, [sp, #16]
 8004a06:	7823      	ldrb	r3, [r4, #0]
 8004a08:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0a:	d10a      	bne.n	8004a22 <_vfiprintf_r+0x156>
 8004a0c:	7863      	ldrb	r3, [r4, #1]
 8004a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a10:	d132      	bne.n	8004a78 <_vfiprintf_r+0x1ac>
 8004a12:	9b03      	ldr	r3, [sp, #12]
 8004a14:	1d1a      	adds	r2, r3, #4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	9203      	str	r2, [sp, #12]
 8004a1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a1e:	3402      	adds	r4, #2
 8004a20:	9305      	str	r3, [sp, #20]
 8004a22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004af8 <_vfiprintf_r+0x22c>
 8004a26:	7821      	ldrb	r1, [r4, #0]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4650      	mov	r0, sl
 8004a2c:	f7fb fbd8 	bl	80001e0 <memchr>
 8004a30:	b138      	cbz	r0, 8004a42 <_vfiprintf_r+0x176>
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	eba0 000a 	sub.w	r0, r0, sl
 8004a38:	2240      	movs	r2, #64	@ 0x40
 8004a3a:	4082      	lsls	r2, r0
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	3401      	adds	r4, #1
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a46:	4829      	ldr	r0, [pc, #164]	@ (8004aec <_vfiprintf_r+0x220>)
 8004a48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a4c:	2206      	movs	r2, #6
 8004a4e:	f7fb fbc7 	bl	80001e0 <memchr>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d03f      	beq.n	8004ad6 <_vfiprintf_r+0x20a>
 8004a56:	4b26      	ldr	r3, [pc, #152]	@ (8004af0 <_vfiprintf_r+0x224>)
 8004a58:	bb1b      	cbnz	r3, 8004aa2 <_vfiprintf_r+0x1d6>
 8004a5a:	9b03      	ldr	r3, [sp, #12]
 8004a5c:	3307      	adds	r3, #7
 8004a5e:	f023 0307 	bic.w	r3, r3, #7
 8004a62:	3308      	adds	r3, #8
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a68:	443b      	add	r3, r7
 8004a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a6c:	e76a      	b.n	8004944 <_vfiprintf_r+0x78>
 8004a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a72:	460c      	mov	r4, r1
 8004a74:	2001      	movs	r0, #1
 8004a76:	e7a8      	b.n	80049ca <_vfiprintf_r+0xfe>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	3401      	adds	r4, #1
 8004a7c:	9305      	str	r3, [sp, #20]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f04f 0c0a 	mov.w	ip, #10
 8004a84:	4620      	mov	r0, r4
 8004a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a8a:	3a30      	subs	r2, #48	@ 0x30
 8004a8c:	2a09      	cmp	r2, #9
 8004a8e:	d903      	bls.n	8004a98 <_vfiprintf_r+0x1cc>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0c6      	beq.n	8004a22 <_vfiprintf_r+0x156>
 8004a94:	9105      	str	r1, [sp, #20]
 8004a96:	e7c4      	b.n	8004a22 <_vfiprintf_r+0x156>
 8004a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e7f0      	b.n	8004a84 <_vfiprintf_r+0x1b8>
 8004aa2:	ab03      	add	r3, sp, #12
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	462a      	mov	r2, r5
 8004aa8:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <_vfiprintf_r+0x228>)
 8004aaa:	a904      	add	r1, sp, #16
 8004aac:	4630      	mov	r0, r6
 8004aae:	f3af 8000 	nop.w
 8004ab2:	4607      	mov	r7, r0
 8004ab4:	1c78      	adds	r0, r7, #1
 8004ab6:	d1d6      	bne.n	8004a66 <_vfiprintf_r+0x19a>
 8004ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aba:	07d9      	lsls	r1, r3, #31
 8004abc:	d405      	bmi.n	8004aca <_vfiprintf_r+0x1fe>
 8004abe:	89ab      	ldrh	r3, [r5, #12]
 8004ac0:	059a      	lsls	r2, r3, #22
 8004ac2:	d402      	bmi.n	8004aca <_vfiprintf_r+0x1fe>
 8004ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ac6:	f7ff fddd 	bl	8004684 <__retarget_lock_release_recursive>
 8004aca:	89ab      	ldrh	r3, [r5, #12]
 8004acc:	065b      	lsls	r3, r3, #25
 8004ace:	f53f af1f 	bmi.w	8004910 <_vfiprintf_r+0x44>
 8004ad2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ad4:	e71e      	b.n	8004914 <_vfiprintf_r+0x48>
 8004ad6:	ab03      	add	r3, sp, #12
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	462a      	mov	r2, r5
 8004adc:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <_vfiprintf_r+0x228>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 f879 	bl	8004bd8 <_printf_i>
 8004ae6:	e7e4      	b.n	8004ab2 <_vfiprintf_r+0x1e6>
 8004ae8:	08005104 	.word	0x08005104
 8004aec:	0800510e 	.word	0x0800510e
 8004af0:	00000000 	.word	0x00000000
 8004af4:	080048a7 	.word	0x080048a7
 8004af8:	0800510a 	.word	0x0800510a

08004afc <_printf_common>:
 8004afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b00:	4616      	mov	r6, r2
 8004b02:	4698      	mov	r8, r3
 8004b04:	688a      	ldr	r2, [r1, #8]
 8004b06:	690b      	ldr	r3, [r1, #16]
 8004b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bfb8      	it	lt
 8004b10:	4613      	movlt	r3, r2
 8004b12:	6033      	str	r3, [r6, #0]
 8004b14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b18:	4607      	mov	r7, r0
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	b10a      	cbz	r2, 8004b22 <_printf_common+0x26>
 8004b1e:	3301      	adds	r3, #1
 8004b20:	6033      	str	r3, [r6, #0]
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	0699      	lsls	r1, r3, #26
 8004b26:	bf42      	ittt	mi
 8004b28:	6833      	ldrmi	r3, [r6, #0]
 8004b2a:	3302      	addmi	r3, #2
 8004b2c:	6033      	strmi	r3, [r6, #0]
 8004b2e:	6825      	ldr	r5, [r4, #0]
 8004b30:	f015 0506 	ands.w	r5, r5, #6
 8004b34:	d106      	bne.n	8004b44 <_printf_common+0x48>
 8004b36:	f104 0a19 	add.w	sl, r4, #25
 8004b3a:	68e3      	ldr	r3, [r4, #12]
 8004b3c:	6832      	ldr	r2, [r6, #0]
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	dc26      	bgt.n	8004b92 <_printf_common+0x96>
 8004b44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b48:	6822      	ldr	r2, [r4, #0]
 8004b4a:	3b00      	subs	r3, #0
 8004b4c:	bf18      	it	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	0692      	lsls	r2, r2, #26
 8004b52:	d42b      	bmi.n	8004bac <_printf_common+0xb0>
 8004b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b58:	4641      	mov	r1, r8
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	47c8      	blx	r9
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d01e      	beq.n	8004ba0 <_printf_common+0xa4>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	f003 0306 	and.w	r3, r3, #6
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	bf02      	ittt	eq
 8004b6e:	68e5      	ldreq	r5, [r4, #12]
 8004b70:	6833      	ldreq	r3, [r6, #0]
 8004b72:	1aed      	subeq	r5, r5, r3
 8004b74:	68a3      	ldr	r3, [r4, #8]
 8004b76:	bf0c      	ite	eq
 8004b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b7c:	2500      	movne	r5, #0
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	bfc4      	itt	gt
 8004b82:	1a9b      	subgt	r3, r3, r2
 8004b84:	18ed      	addgt	r5, r5, r3
 8004b86:	2600      	movs	r6, #0
 8004b88:	341a      	adds	r4, #26
 8004b8a:	42b5      	cmp	r5, r6
 8004b8c:	d11a      	bne.n	8004bc4 <_printf_common+0xc8>
 8004b8e:	2000      	movs	r0, #0
 8004b90:	e008      	b.n	8004ba4 <_printf_common+0xa8>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4652      	mov	r2, sl
 8004b96:	4641      	mov	r1, r8
 8004b98:	4638      	mov	r0, r7
 8004b9a:	47c8      	blx	r9
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d103      	bne.n	8004ba8 <_printf_common+0xac>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	3501      	adds	r5, #1
 8004baa:	e7c6      	b.n	8004b3a <_printf_common+0x3e>
 8004bac:	18e1      	adds	r1, r4, r3
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	2030      	movs	r0, #48	@ 0x30
 8004bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb6:	4422      	add	r2, r4
 8004bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	e7c7      	b.n	8004b54 <_printf_common+0x58>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4638      	mov	r0, r7
 8004bcc:	47c8      	blx	r9
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d0e6      	beq.n	8004ba0 <_printf_common+0xa4>
 8004bd2:	3601      	adds	r6, #1
 8004bd4:	e7d9      	b.n	8004b8a <_printf_common+0x8e>
	...

08004bd8 <_printf_i>:
 8004bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	7e0f      	ldrb	r7, [r1, #24]
 8004bde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be0:	2f78      	cmp	r7, #120	@ 0x78
 8004be2:	4691      	mov	r9, r2
 8004be4:	4680      	mov	r8, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	469a      	mov	sl, r3
 8004bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bee:	d807      	bhi.n	8004c00 <_printf_i+0x28>
 8004bf0:	2f62      	cmp	r7, #98	@ 0x62
 8004bf2:	d80a      	bhi.n	8004c0a <_printf_i+0x32>
 8004bf4:	2f00      	cmp	r7, #0
 8004bf6:	f000 80d2 	beq.w	8004d9e <_printf_i+0x1c6>
 8004bfa:	2f58      	cmp	r7, #88	@ 0x58
 8004bfc:	f000 80b9 	beq.w	8004d72 <_printf_i+0x19a>
 8004c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c08:	e03a      	b.n	8004c80 <_printf_i+0xa8>
 8004c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c0e:	2b15      	cmp	r3, #21
 8004c10:	d8f6      	bhi.n	8004c00 <_printf_i+0x28>
 8004c12:	a101      	add	r1, pc, #4	@ (adr r1, 8004c18 <_printf_i+0x40>)
 8004c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c18:	08004c71 	.word	0x08004c71
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c01 	.word	0x08004c01
 8004c24:	08004c01 	.word	0x08004c01
 8004c28:	08004c01 	.word	0x08004c01
 8004c2c:	08004c01 	.word	0x08004c01
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004c01 	.word	0x08004c01
 8004c38:	08004c01 	.word	0x08004c01
 8004c3c:	08004c01 	.word	0x08004c01
 8004c40:	08004c01 	.word	0x08004c01
 8004c44:	08004d85 	.word	0x08004d85
 8004c48:	08004caf 	.word	0x08004caf
 8004c4c:	08004d3f 	.word	0x08004d3f
 8004c50:	08004c01 	.word	0x08004c01
 8004c54:	08004c01 	.word	0x08004c01
 8004c58:	08004da7 	.word	0x08004da7
 8004c5c:	08004c01 	.word	0x08004c01
 8004c60:	08004caf 	.word	0x08004caf
 8004c64:	08004c01 	.word	0x08004c01
 8004c68:	08004c01 	.word	0x08004c01
 8004c6c:	08004d47 	.word	0x08004d47
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6032      	str	r2, [r6, #0]
 8004c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c80:	2301      	movs	r3, #1
 8004c82:	e09d      	b.n	8004dc0 <_printf_i+0x1e8>
 8004c84:	6833      	ldr	r3, [r6, #0]
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1d19      	adds	r1, r3, #4
 8004c8a:	6031      	str	r1, [r6, #0]
 8004c8c:	0606      	lsls	r6, r0, #24
 8004c8e:	d501      	bpl.n	8004c94 <_printf_i+0xbc>
 8004c90:	681d      	ldr	r5, [r3, #0]
 8004c92:	e003      	b.n	8004c9c <_printf_i+0xc4>
 8004c94:	0645      	lsls	r5, r0, #25
 8004c96:	d5fb      	bpl.n	8004c90 <_printf_i+0xb8>
 8004c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c9c:	2d00      	cmp	r5, #0
 8004c9e:	da03      	bge.n	8004ca8 <_printf_i+0xd0>
 8004ca0:	232d      	movs	r3, #45	@ 0x2d
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca8:	4859      	ldr	r0, [pc, #356]	@ (8004e10 <_printf_i+0x238>)
 8004caa:	230a      	movs	r3, #10
 8004cac:	e011      	b.n	8004cd2 <_printf_i+0xfa>
 8004cae:	6821      	ldr	r1, [r4, #0]
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	0608      	lsls	r0, r1, #24
 8004cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb8:	d402      	bmi.n	8004cc0 <_printf_i+0xe8>
 8004cba:	0649      	lsls	r1, r1, #25
 8004cbc:	bf48      	it	mi
 8004cbe:	b2ad      	uxthmi	r5, r5
 8004cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cc2:	4853      	ldr	r0, [pc, #332]	@ (8004e10 <_printf_i+0x238>)
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	bf14      	ite	ne
 8004cc8:	230a      	movne	r3, #10
 8004cca:	2308      	moveq	r3, #8
 8004ccc:	2100      	movs	r1, #0
 8004cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cd2:	6866      	ldr	r6, [r4, #4]
 8004cd4:	60a6      	str	r6, [r4, #8]
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	bfa2      	ittt	ge
 8004cda:	6821      	ldrge	r1, [r4, #0]
 8004cdc:	f021 0104 	bicge.w	r1, r1, #4
 8004ce0:	6021      	strge	r1, [r4, #0]
 8004ce2:	b90d      	cbnz	r5, 8004ce8 <_printf_i+0x110>
 8004ce4:	2e00      	cmp	r6, #0
 8004ce6:	d04b      	beq.n	8004d80 <_printf_i+0x1a8>
 8004ce8:	4616      	mov	r6, r2
 8004cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cee:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf2:	5dc7      	ldrb	r7, [r0, r7]
 8004cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf8:	462f      	mov	r7, r5
 8004cfa:	42bb      	cmp	r3, r7
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	d9f4      	bls.n	8004cea <_printf_i+0x112>
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d10b      	bne.n	8004d1c <_printf_i+0x144>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	07df      	lsls	r7, r3, #31
 8004d08:	d508      	bpl.n	8004d1c <_printf_i+0x144>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	6861      	ldr	r1, [r4, #4]
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	bfde      	ittt	le
 8004d12:	2330      	movle	r3, #48	@ 0x30
 8004d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d1c:	1b92      	subs	r2, r2, r6
 8004d1e:	6122      	str	r2, [r4, #16]
 8004d20:	f8cd a000 	str.w	sl, [sp]
 8004d24:	464b      	mov	r3, r9
 8004d26:	aa03      	add	r2, sp, #12
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f7ff fee6 	bl	8004afc <_printf_common>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d14a      	bne.n	8004dca <_printf_i+0x1f2>
 8004d34:	f04f 30ff 	mov.w	r0, #4294967295
 8004d38:	b004      	add	sp, #16
 8004d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	f043 0320 	orr.w	r3, r3, #32
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	4833      	ldr	r0, [pc, #204]	@ (8004e14 <_printf_i+0x23c>)
 8004d48:	2778      	movs	r7, #120	@ 0x78
 8004d4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	6831      	ldr	r1, [r6, #0]
 8004d52:	061f      	lsls	r7, r3, #24
 8004d54:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d58:	d402      	bmi.n	8004d60 <_printf_i+0x188>
 8004d5a:	065f      	lsls	r7, r3, #25
 8004d5c:	bf48      	it	mi
 8004d5e:	b2ad      	uxthmi	r5, r5
 8004d60:	6031      	str	r1, [r6, #0]
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	bf44      	itt	mi
 8004d66:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6a:	6023      	strmi	r3, [r4, #0]
 8004d6c:	b11d      	cbz	r5, 8004d76 <_printf_i+0x19e>
 8004d6e:	2310      	movs	r3, #16
 8004d70:	e7ac      	b.n	8004ccc <_printf_i+0xf4>
 8004d72:	4827      	ldr	r0, [pc, #156]	@ (8004e10 <_printf_i+0x238>)
 8004d74:	e7e9      	b.n	8004d4a <_printf_i+0x172>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f023 0320 	bic.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	e7f6      	b.n	8004d6e <_printf_i+0x196>
 8004d80:	4616      	mov	r6, r2
 8004d82:	e7bd      	b.n	8004d00 <_printf_i+0x128>
 8004d84:	6833      	ldr	r3, [r6, #0]
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	6961      	ldr	r1, [r4, #20]
 8004d8a:	1d18      	adds	r0, r3, #4
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	062e      	lsls	r6, r5, #24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0x1c0>
 8004d94:	6019      	str	r1, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0x1c6>
 8004d98:	0668      	lsls	r0, r5, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0x1bc>
 8004d9c:	8019      	strh	r1, [r3, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	4616      	mov	r6, r2
 8004da4:	e7bc      	b.n	8004d20 <_printf_i+0x148>
 8004da6:	6833      	ldr	r3, [r6, #0]
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	6032      	str	r2, [r6, #0]
 8004dac:	681e      	ldr	r6, [r3, #0]
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7fb fa14 	bl	80001e0 <memchr>
 8004db8:	b108      	cbz	r0, 8004dbe <_printf_i+0x1e6>
 8004dba:	1b80      	subs	r0, r0, r6
 8004dbc:	6060      	str	r0, [r4, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc8:	e7aa      	b.n	8004d20 <_printf_i+0x148>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	4632      	mov	r2, r6
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	47d0      	blx	sl
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d0ad      	beq.n	8004d34 <_printf_i+0x15c>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	079b      	lsls	r3, r3, #30
 8004ddc:	d413      	bmi.n	8004e06 <_printf_i+0x22e>
 8004dde:	68e0      	ldr	r0, [r4, #12]
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	4298      	cmp	r0, r3
 8004de4:	bfb8      	it	lt
 8004de6:	4618      	movlt	r0, r3
 8004de8:	e7a6      	b.n	8004d38 <_printf_i+0x160>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4632      	mov	r2, r6
 8004dee:	4649      	mov	r1, r9
 8004df0:	4640      	mov	r0, r8
 8004df2:	47d0      	blx	sl
 8004df4:	3001      	adds	r0, #1
 8004df6:	d09d      	beq.n	8004d34 <_printf_i+0x15c>
 8004df8:	3501      	adds	r5, #1
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	1a5b      	subs	r3, r3, r1
 8004e00:	42ab      	cmp	r3, r5
 8004e02:	dcf2      	bgt.n	8004dea <_printf_i+0x212>
 8004e04:	e7eb      	b.n	8004dde <_printf_i+0x206>
 8004e06:	2500      	movs	r5, #0
 8004e08:	f104 0619 	add.w	r6, r4, #25
 8004e0c:	e7f5      	b.n	8004dfa <_printf_i+0x222>
 8004e0e:	bf00      	nop
 8004e10:	08005115 	.word	0x08005115
 8004e14:	08005126 	.word	0x08005126

08004e18 <__sflush_r>:
 8004e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e20:	0716      	lsls	r6, r2, #28
 8004e22:	4605      	mov	r5, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	d454      	bmi.n	8004ed2 <__sflush_r+0xba>
 8004e28:	684b      	ldr	r3, [r1, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dc02      	bgt.n	8004e34 <__sflush_r+0x1c>
 8004e2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dd48      	ble.n	8004ec6 <__sflush_r+0xae>
 8004e34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e36:	2e00      	cmp	r6, #0
 8004e38:	d045      	beq.n	8004ec6 <__sflush_r+0xae>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e40:	682f      	ldr	r7, [r5, #0]
 8004e42:	6a21      	ldr	r1, [r4, #32]
 8004e44:	602b      	str	r3, [r5, #0]
 8004e46:	d030      	beq.n	8004eaa <__sflush_r+0x92>
 8004e48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e4a:	89a3      	ldrh	r3, [r4, #12]
 8004e4c:	0759      	lsls	r1, r3, #29
 8004e4e:	d505      	bpl.n	8004e5c <__sflush_r+0x44>
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e56:	b10b      	cbz	r3, 8004e5c <__sflush_r+0x44>
 8004e58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e60:	6a21      	ldr	r1, [r4, #32]
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b0      	blx	r6
 8004e66:	1c43      	adds	r3, r0, #1
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	d106      	bne.n	8004e7a <__sflush_r+0x62>
 8004e6c:	6829      	ldr	r1, [r5, #0]
 8004e6e:	291d      	cmp	r1, #29
 8004e70:	d82b      	bhi.n	8004eca <__sflush_r+0xb2>
 8004e72:	4a2a      	ldr	r2, [pc, #168]	@ (8004f1c <__sflush_r+0x104>)
 8004e74:	410a      	asrs	r2, r1
 8004e76:	07d6      	lsls	r6, r2, #31
 8004e78:	d427      	bmi.n	8004eca <__sflush_r+0xb2>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	6062      	str	r2, [r4, #4]
 8004e7e:	04d9      	lsls	r1, r3, #19
 8004e80:	6922      	ldr	r2, [r4, #16]
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	d504      	bpl.n	8004e90 <__sflush_r+0x78>
 8004e86:	1c42      	adds	r2, r0, #1
 8004e88:	d101      	bne.n	8004e8e <__sflush_r+0x76>
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	b903      	cbnz	r3, 8004e90 <__sflush_r+0x78>
 8004e8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e92:	602f      	str	r7, [r5, #0]
 8004e94:	b1b9      	cbz	r1, 8004ec6 <__sflush_r+0xae>
 8004e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	d002      	beq.n	8004ea4 <__sflush_r+0x8c>
 8004e9e:	4628      	mov	r0, r5
 8004ea0:	f7ff fbf2 	bl	8004688 <_free_r>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ea8:	e00d      	b.n	8004ec6 <__sflush_r+0xae>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b0      	blx	r6
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	1c50      	adds	r0, r2, #1
 8004eb4:	d1c9      	bne.n	8004e4a <__sflush_r+0x32>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0c6      	beq.n	8004e4a <__sflush_r+0x32>
 8004ebc:	2b1d      	cmp	r3, #29
 8004ebe:	d001      	beq.n	8004ec4 <__sflush_r+0xac>
 8004ec0:	2b16      	cmp	r3, #22
 8004ec2:	d11e      	bne.n	8004f02 <__sflush_r+0xea>
 8004ec4:	602f      	str	r7, [r5, #0]
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e022      	b.n	8004f10 <__sflush_r+0xf8>
 8004eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ece:	b21b      	sxth	r3, r3
 8004ed0:	e01b      	b.n	8004f0a <__sflush_r+0xf2>
 8004ed2:	690f      	ldr	r7, [r1, #16]
 8004ed4:	2f00      	cmp	r7, #0
 8004ed6:	d0f6      	beq.n	8004ec6 <__sflush_r+0xae>
 8004ed8:	0793      	lsls	r3, r2, #30
 8004eda:	680e      	ldr	r6, [r1, #0]
 8004edc:	bf08      	it	eq
 8004ede:	694b      	ldreq	r3, [r1, #20]
 8004ee0:	600f      	str	r7, [r1, #0]
 8004ee2:	bf18      	it	ne
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	eba6 0807 	sub.w	r8, r6, r7
 8004eea:	608b      	str	r3, [r1, #8]
 8004eec:	f1b8 0f00 	cmp.w	r8, #0
 8004ef0:	dde9      	ble.n	8004ec6 <__sflush_r+0xae>
 8004ef2:	6a21      	ldr	r1, [r4, #32]
 8004ef4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ef6:	4643      	mov	r3, r8
 8004ef8:	463a      	mov	r2, r7
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b0      	blx	r6
 8004efe:	2800      	cmp	r0, #0
 8004f00:	dc08      	bgt.n	8004f14 <__sflush_r+0xfc>
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f14:	4407      	add	r7, r0
 8004f16:	eba8 0800 	sub.w	r8, r8, r0
 8004f1a:	e7e7      	b.n	8004eec <__sflush_r+0xd4>
 8004f1c:	dfbffffe 	.word	0xdfbffffe

08004f20 <_fflush_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	4605      	mov	r5, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	b913      	cbnz	r3, 8004f30 <_fflush_r+0x10>
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	b118      	cbz	r0, 8004f3a <_fflush_r+0x1a>
 8004f32:	6a03      	ldr	r3, [r0, #32]
 8004f34:	b90b      	cbnz	r3, 8004f3a <_fflush_r+0x1a>
 8004f36:	f7ff f9ad 	bl	8004294 <__sinit>
 8004f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f3      	beq.n	8004f2a <_fflush_r+0xa>
 8004f42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f44:	07d0      	lsls	r0, r2, #31
 8004f46:	d404      	bmi.n	8004f52 <_fflush_r+0x32>
 8004f48:	0599      	lsls	r1, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_fflush_r+0x32>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f4e:	f7ff fb98 	bl	8004682 <__retarget_lock_acquire_recursive>
 8004f52:	4628      	mov	r0, r5
 8004f54:	4621      	mov	r1, r4
 8004f56:	f7ff ff5f 	bl	8004e18 <__sflush_r>
 8004f5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f5c:	07da      	lsls	r2, r3, #31
 8004f5e:	4605      	mov	r5, r0
 8004f60:	d4e4      	bmi.n	8004f2c <_fflush_r+0xc>
 8004f62:	89a3      	ldrh	r3, [r4, #12]
 8004f64:	059b      	lsls	r3, r3, #22
 8004f66:	d4e1      	bmi.n	8004f2c <_fflush_r+0xc>
 8004f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6a:	f7ff fb8b 	bl	8004684 <__retarget_lock_release_recursive>
 8004f6e:	e7dd      	b.n	8004f2c <_fflush_r+0xc>

08004f70 <__swhatbuf_r>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	460c      	mov	r4, r1
 8004f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	b096      	sub	sp, #88	@ 0x58
 8004f7c:	4615      	mov	r5, r2
 8004f7e:	461e      	mov	r6, r3
 8004f80:	da0d      	bge.n	8004f9e <__swhatbuf_r+0x2e>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f88:	f04f 0100 	mov.w	r1, #0
 8004f8c:	bf14      	ite	ne
 8004f8e:	2340      	movne	r3, #64	@ 0x40
 8004f90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f94:	2000      	movs	r0, #0
 8004f96:	6031      	str	r1, [r6, #0]
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	b016      	add	sp, #88	@ 0x58
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	466a      	mov	r2, sp
 8004fa0:	f000 f848 	bl	8005034 <_fstat_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	dbec      	blt.n	8004f82 <__swhatbuf_r+0x12>
 8004fa8:	9901      	ldr	r1, [sp, #4]
 8004faa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fb2:	4259      	negs	r1, r3
 8004fb4:	4159      	adcs	r1, r3
 8004fb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fba:	e7eb      	b.n	8004f94 <__swhatbuf_r+0x24>

08004fbc <__smakebuf_r>:
 8004fbc:	898b      	ldrh	r3, [r1, #12]
 8004fbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc0:	079d      	lsls	r5, r3, #30
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	d507      	bpl.n	8004fd8 <__smakebuf_r+0x1c>
 8004fc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	6163      	str	r3, [r4, #20]
 8004fd4:	b003      	add	sp, #12
 8004fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fd8:	ab01      	add	r3, sp, #4
 8004fda:	466a      	mov	r2, sp
 8004fdc:	f7ff ffc8 	bl	8004f70 <__swhatbuf_r>
 8004fe0:	9f00      	ldr	r7, [sp, #0]
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff fbba 	bl	8004760 <_malloc_r>
 8004fec:	b948      	cbnz	r0, 8005002 <__smakebuf_r+0x46>
 8004fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff2:	059a      	lsls	r2, r3, #22
 8004ff4:	d4ee      	bmi.n	8004fd4 <__smakebuf_r+0x18>
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	81a3      	strh	r3, [r4, #12]
 8005000:	e7e2      	b.n	8004fc8 <__smakebuf_r+0xc>
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	6020      	str	r0, [r4, #0]
 8005006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	9b01      	ldr	r3, [sp, #4]
 800500e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005012:	b15b      	cbz	r3, 800502c <__smakebuf_r+0x70>
 8005014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f81d 	bl	8005058 <_isatty_r>
 800501e:	b128      	cbz	r0, 800502c <__smakebuf_r+0x70>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	431d      	orrs	r5, r3
 8005030:	81a5      	strh	r5, [r4, #12]
 8005032:	e7cf      	b.n	8004fd4 <__smakebuf_r+0x18>

08005034 <_fstat_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4d07      	ldr	r5, [pc, #28]	@ (8005054 <_fstat_r+0x20>)
 8005038:	2300      	movs	r3, #0
 800503a:	4604      	mov	r4, r0
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	602b      	str	r3, [r5, #0]
 8005042:	f7fb ff0c 	bl	8000e5e <_fstat>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d102      	bne.n	8005050 <_fstat_r+0x1c>
 800504a:	682b      	ldr	r3, [r5, #0]
 800504c:	b103      	cbz	r3, 8005050 <_fstat_r+0x1c>
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	bd38      	pop	{r3, r4, r5, pc}
 8005052:	bf00      	nop
 8005054:	20000480 	.word	0x20000480

08005058 <_isatty_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4d06      	ldr	r5, [pc, #24]	@ (8005074 <_isatty_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	602b      	str	r3, [r5, #0]
 8005064:	f7fb ff0b 	bl	8000e7e <_isatty>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_isatty_r+0x1a>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_isatty_r+0x1a>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000480 	.word	0x20000480

08005078 <_sbrk_r>:
 8005078:	b538      	push	{r3, r4, r5, lr}
 800507a:	4d06      	ldr	r5, [pc, #24]	@ (8005094 <_sbrk_r+0x1c>)
 800507c:	2300      	movs	r3, #0
 800507e:	4604      	mov	r4, r0
 8005080:	4608      	mov	r0, r1
 8005082:	602b      	str	r3, [r5, #0]
 8005084:	f7fb ff14 	bl	8000eb0 <_sbrk>
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	d102      	bne.n	8005092 <_sbrk_r+0x1a>
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	b103      	cbz	r3, 8005092 <_sbrk_r+0x1a>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	20000480 	.word	0x20000480

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
