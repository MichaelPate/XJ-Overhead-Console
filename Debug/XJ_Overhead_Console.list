
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009380  08009380  0000a380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009648  08009648  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009648  08009648  0000a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009650  08009650  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  0000a650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009654  08009654  0000a654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009658  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  080096c0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  080096c0  0000b544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001886d  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbe  00000000  00000000  00023905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  000275c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c5  00000000  00000000  00028ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9c0  00000000  00000000  00029e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecca  00000000  00000000  00045825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66e2  00000000  00000000  000644ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010abd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  0010ac14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009368 	.word	0x08009368

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08009368 	.word	0x08009368

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f001 fcc5 	bl	8001f60 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 ffdc 	bl	8001598 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f001 fcf9 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 ffcc 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f002 fbef 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f002 fbe3 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 ff6d 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000700:	200b      	movs	r0, #11
 8000702:	f001 ff86 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f001 ff65 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f001 ff7e 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f001 ff5d 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000720:	2011      	movs	r0, #17
 8000722:	f001 ff76 	bl	8002612 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b52      	ldr	r3, [pc, #328]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a51      	ldr	r2, [pc, #324]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b4f      	ldr	r3, [pc, #316]	@ (8000898 <MX_GPIO_Init+0x164>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b4b      	ldr	r3, [pc, #300]	@ (8000898 <MX_GPIO_Init+0x164>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a4a      	ldr	r2, [pc, #296]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b48      	ldr	r3, [pc, #288]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b44      	ldr	r3, [pc, #272]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a43      	ldr	r2, [pc, #268]	@ (8000898 <MX_GPIO_Init+0x164>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b41      	ldr	r3, [pc, #260]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a3c      	ldr	r2, [pc, #240]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a35      	ldr	r2, [pc, #212]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f641 0122 	movw	r1, #6178	@ 0x1822
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <MX_GPIO_Init+0x168>)
 80007de:	f002 fcd3 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2110      	movs	r1, #16
 80007e6:	482e      	ldr	r0, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 80007e8:	f002 fcce 	bl	8003188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4828      	ldr	r0, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0x170>)
 8000804:	f002 fb3c 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin;
 8000808:	f641 0322 	movw	r3, #6178	@ 0x1822
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	481e      	ldr	r0, [pc, #120]	@ (800089c <MX_GPIO_Init+0x168>)
 8000822:	f002 fb2d 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4818      	ldr	r0, [pc, #96]	@ (800089c <MX_GPIO_Init+0x168>)
 800083c:	f002 fb20 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000840:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <MX_GPIO_Init+0x170>)
 8000856:	f002 fb13 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x174>)
 800086e:	f002 fb07 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000872:	2310      	movs	r3, #16
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 800088a:	f002 faf9 	bl	8002e80 <HAL_GPIO_Init>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00

080008ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f002 fc67 	bl	80031bc <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 fe50 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a50      	ldr	r2, [pc, #320]	@ (8000a68 <HAL_I2C_MspInit+0x160>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f040 8099 	bne.w	8000a5e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a4d      	ldr	r2, [pc, #308]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
 800093c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000948:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095a:	2304      	movs	r3, #4
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4842      	ldr	r0, [pc, #264]	@ (8000a70 <HAL_I2C_MspInit+0x168>)
 8000966:	f002 fa8b 	bl	8002e80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a3e      	ldr	r2, [pc, #248]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000986:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <HAL_I2C_MspInit+0x170>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 800098e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000992:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000994:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 8000996:	2240      	movs	r2, #64	@ 0x40
 8000998:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a8:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009c6:	482b      	ldr	r0, [pc, #172]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009c8:	f001 fe3e 	bl	8002648 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80009d2:	f000 fde1 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
 80009dc:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009e4:	4a26      	ldr	r2, [pc, #152]	@ (8000a80 <HAL_I2C_MspInit+0x178>)
 80009e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a02:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a22:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a24:	f001 fe10 	bl	8002648 <HAL_DMA_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000a2e:	f000 fdb3 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a38:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	201f      	movs	r0, #31
 8000a44:	f001 fdc9 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a48:	201f      	movs	r0, #31
 8000a4a:	f001 fde2 	bl	8002612 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2020      	movs	r0, #32
 8000a54:	f001 fdc1 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a58:	2020      	movs	r0, #32
 8000a5a:	f001 fdda 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	20000120 	.word	0x20000120
 8000a78:	400260a0 	.word	0x400260a0
 8000a7c:	20000180 	.word	0x20000180
 8000a80:	40026010 	.word	0x40026010

08000a84 <LCD_Init>:
 * @param  	rows    Number of rows of display
 * @param  	columns Number of columns of display
 * @return         	True if success, false if HAL error
 */
bool LCD_Init(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t rows, uint8_t cols)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	70fb      	strb	r3, [r7, #3]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70bb      	strb	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	707b      	strb	r3, [r7, #1]
	uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]

	lcd1.hi2c = hi2c;
 8000aa2:	4a5e      	ldr	r2, [pc, #376]	@ (8000c1c <LCD_Init+0x198>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
	lcd1.address = address << 1;	// typical address is 0x27
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b5b      	ldr	r3, [pc, #364]	@ (8000c1c <LCD_Init+0x198>)
 8000ab0:	711a      	strb	r2, [r3, #4]
	lcd1.rows = rows;
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8000c1c <LCD_Init+0x198>)
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	7153      	strb	r3, [r2, #5]
	lcd1.cols = cols;
 8000ab8:	4a58      	ldr	r2, [pc, #352]	@ (8000c1c <LCD_Init+0x198>)
 8000aba:	787b      	ldrb	r3, [r7, #1]
 8000abc:	7193      	strb	r3, [r2, #6]
	lcd1.backlight = LCD_BIT_BACKLIGHT_ON;
 8000abe:	4b57      	ldr	r3, [pc, #348]	@ (8000c1c <LCD_Init+0x198>)
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	71da      	strb	r2, [r3, #7]


    lcd1_CommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000ac4:	4b56      	ldr	r3, [pc, #344]	@ (8000c20 <LCD_Init+0x19c>)
 8000ac6:	2234      	movs	r2, #52	@ 0x34
 8000ac8:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];
 8000aca:	4b55      	ldr	r3, [pc, #340]	@ (8000c20 <LCD_Init+0x19c>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b54      	ldr	r3, [pc, #336]	@ (8000c20 <LCD_Init+0x19c>)
 8000ad0:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = (0x03 << 4);
 8000ad2:	4b53      	ldr	r3, [pc, #332]	@ (8000c20 <LCD_Init+0x19c>)
 8000ad4:	2230      	movs	r2, #48	@ 0x30
 8000ad6:	709a      	strb	r2, [r3, #2]

    int count = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
    // The first 3 steps of initialization are the same
    for (uint8_t i = 0; i < 3; i++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	75fb      	strb	r3, [r7, #23]
 8000ae0:	e037      	b.n	8000b52 <LCD_Init+0xce>
    {
    	//while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);

        if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 3) != HAL_OK)
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <LCD_Init+0x198>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8000c1c <LCD_Init+0x198>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2303      	movs	r3, #3
 8000aee:	4a4c      	ldr	r2, [pc, #304]	@ (8000c20 <LCD_Init+0x19c>)
 8000af0:	f002 fcbe 	bl	8003470 <HAL_I2C_Master_Transmit_DMA>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <LCD_Init+0x7a>
        {
            return false;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e089      	b.n	8000c12 <LCD_Init+0x18e>
        }

        // Wait for the LCD to ack
        while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000afe:	bf00      	nop
 8000b00:	4b46      	ldr	r3, [pc, #280]	@ (8000c1c <LCD_Init+0x198>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 f967 	bl	8003dd8 <HAL_I2C_GetState>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d1f7      	bne.n	8000b00 <LCD_Init+0x7c>

        if (i == 2)
 8000b10:	7dfb      	ldrb	r3, [r7, #23]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d10a      	bne.n	8000b2c <LCD_Init+0xa8>
        {
        	// The final cycle requires a 100us delay from the datasheet
        	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b16:	4b43      	ldr	r3, [pc, #268]	@ (8000c24 <LCD_Init+0x1a0>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	@ 0x24
        	while (__HAL_TIM_GET_COUNTER(&htim1) < 100);
 8000b1e:	bf00      	nop
 8000b20:	4b40      	ldr	r3, [pc, #256]	@ (8000c24 <LCD_Init+0x1a0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b26:	2b63      	cmp	r3, #99	@ 0x63
 8000b28:	d9fa      	bls.n	8000b20 <LCD_Init+0x9c>
 8000b2a:	e00f      	b.n	8000b4c <LCD_Init+0xc8>
        }
        else
        {
        	// The first two cycles require a 4100us delay from the datasheet
        	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c24 <LCD_Init+0x1a0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	@ 0x24
        	while (__HAL_TIM_GET_COUNTER(&htim1) < 4100)
 8000b34:	e003      	b.n	8000b3e <LCD_Init+0xba>
        		{
        		count = __HAL_TIM_GET_COUNTER(&htim1);
 8000b36:	4b3b      	ldr	r3, [pc, #236]	@ (8000c24 <LCD_Init+0x1a0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b3c:	613b      	str	r3, [r7, #16]
        	while (__HAL_TIM_GET_COUNTER(&htim1) < 4100)
 8000b3e:	4b39      	ldr	r3, [pc, #228]	@ (8000c24 <LCD_Init+0x1a0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b44:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d9f4      	bls.n	8000b36 <LCD_Init+0xb2>
    for (uint8_t i = 0; i < 3; i++)
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d9c4      	bls.n	8000ae2 <LCD_Init+0x5e>
        		}
        }
    }

    // Now we need to set 4 bit operation
    lcd1_CommandBuffer[0] = LCD_BIT_BACKLIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000b58:	4b31      	ldr	r3, [pc, #196]	@ (8000c20 <LCD_Init+0x19c>)
 8000b5a:	222c      	movs	r2, #44	@ 0x2c
 8000b5c:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];
 8000b5e:	4b30      	ldr	r3, [pc, #192]	@ (8000c20 <LCD_Init+0x19c>)
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <LCD_Init+0x19c>)
 8000b64:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = LCD_BIT_BACKLIGHT_ON | (LCD_MODE_4BITS << 4);
 8000b66:	4b2e      	ldr	r3, [pc, #184]	@ (8000c20 <LCD_Init+0x19c>)
 8000b68:	2228      	movs	r2, #40	@ 0x28
 8000b6a:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 3) != HAL_OK)
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <LCD_Init+0x198>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <LCD_Init+0x198>)
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2303      	movs	r3, #3
 8000b78:	4a29      	ldr	r2, [pc, #164]	@ (8000c20 <LCD_Init+0x19c>)
 8000b7a:	f002 fc79 	bl	8003470 <HAL_I2C_Master_Transmit_DMA>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <LCD_Init+0x104>
    {
        return false;
 8000b84:	2300      	movs	r3, #0
 8000b86:	e044      	b.n	8000c12 <LCD_Init+0x18e>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000b88:	bf00      	nop
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <LCD_Init+0x198>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 f922 	bl	8003dd8 <HAL_I2C_GetState>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b20      	cmp	r3, #32
 8000b98:	d1f7      	bne.n	8000b8a <LCD_Init+0x106>

    // Set display parameters
    lcdData |= LCD_MODE_4BITS;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	73fb      	strb	r3, [r7, #15]

    if (lcd1.rows == 1)
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c1c <LCD_Init+0x198>)
 8000ba6:	795b      	ldrb	r3, [r3, #5]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <LCD_Init+0x12e>
    {
    	lcdData |= LCD_BIT_1LINE;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	73fb      	strb	r3, [r7, #15]
 8000bb0:	e018      	b.n	8000be4 <LCD_Init+0x160>
    }
    else if (lcd1.rows == 2)
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <LCD_Init+0x198>)
 8000bb4:	795b      	ldrb	r3, [r3, #5]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d105      	bne.n	8000bc6 <LCD_Init+0x142>
    {
    	lcdData |= LCD_BIT_2LINE;
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f043 0308 	orr.w	r3, r3, #8
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	73fb      	strb	r3, [r7, #15]
 8000bc4:	e00e      	b.n	8000be4 <LCD_Init+0x160>
    }
    else if (lcd1.rows == 4)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <LCD_Init+0x198>)
 8000bc8:	795b      	ldrb	r3, [r3, #5]
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	d105      	bne.n	8000bda <LCD_Init+0x156>
    {
    	lcdData |= LCD_BIT_4LINE;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e004      	b.n	8000be4 <LCD_Init+0x160>
    }
    else
    {
    	lcdData |= LCD_BIT_2LINE;
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	73fb      	strb	r3, [r7, #15]
    }

    LCD_WriteByte((uint8_t)0x00, &lcdData);
 8000be4:	f107 030f 	add.w	r3, r7, #15
 8000be8:	4619      	mov	r1, r3
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f97e 	bl	8000eec <LCD_WriteByte>

    // For the last init step, turn display, cursor, and blink all on
    LCD_DisplayOn();
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 f818 	bl	8000c28 <LCD_Command>

    // Specify moving cursor to the right
    LCD_CursorDirToRight();
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f000 f814 	bl	8000c28 <LCD_Command>

    // Clear display and home cursor
    LCD_DisplayClear();
 8000c00:	2101      	movs	r1, #1
 8000c02:	2002      	movs	r0, #2
 8000c04:	f000 f810 	bl	8000c28 <LCD_Command>
    LCD_CursorHome();
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2005      	movs	r0, #5
 8000c0c:	f000 f80c 	bl	8000c28 <LCD_Command>

    return true;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001e0 	.word	0x200001e0
 8000c20:	200001ec 	.word	0x200001ec
 8000c24:	20000274 	.word	0x20000274

08000c28 <LCD_Command>:
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          True on success, false on HAL error
 */
bool LCD_Command(LCDCommands command, LCDParamsActions action)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	460a      	mov	r2, r1
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	71bb      	strb	r3, [r7, #6]
	uint8_t lcdData = 0x00;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]

	if (action == LCD_PARAM_SET)
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d169      	bne.n	8000d16 <LCD_Command+0xee>
	{
		switch (command)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	2b07      	cmp	r3, #7
 8000c48:	d863      	bhi.n	8000d12 <LCD_Command+0xea>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <LCD_Command+0x28>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000ca1 	.word	0x08000ca1
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000c91 	.word	0x08000c91
 8000c60:	08000cc5 	.word	0x08000cc5
 8000c64:	08000cf9 	.word	0x08000cf9
 8000c68:	08000ce9 	.word	0x08000ce9
 8000c6c:	08000d03 	.word	0x08000d03
		{
			case LCD_DISPLAY:
				lcd1.modeWord |= LCD_BIT_DISPLAY_ON;
 8000c70:	4b62      	ldr	r3, [pc, #392]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c72:	7a1b      	ldrb	r3, [r3, #8]
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4b60      	ldr	r3, [pc, #384]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c7c:	721a      	strb	r2, [r3, #8]
				break;
 8000c7e:	e096      	b.n	8000dae <LCD_Command+0x186>

			case LCD_CURSOR:
				lcd1.modeWord |= LCD_BIT_CURSOR_ON;
 8000c80:	4b5e      	ldr	r3, [pc, #376]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c8c:	721a      	strb	r2, [r3, #8]
				break;
 8000c8e:	e08e      	b.n	8000dae <LCD_Command+0x186>

			case LCD_CURSOR_BLINK:
				lcd1.modeWord |= LCD_BIT_BLINK_ON;
 8000c90:	4b5a      	ldr	r3, [pc, #360]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c92:	7a1b      	ldrb	r3, [r3, #8]
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4b58      	ldr	r3, [pc, #352]	@ (8000dfc <LCD_Command+0x1d4>)
 8000c9c:	721a      	strb	r2, [r3, #8]
				break;
 8000c9e:	e086      	b.n	8000dae <LCD_Command+0x186>

			case LCD_CLEAR:
				lcdData = LCD_BIT_DISP_CLEAR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]

				if (LCD_WriteByte((uint8_t)0x00, &lcdData) == false)
 8000ca4:	f107 030f 	add.w	r3, r7, #15
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f91e 	bl	8000eec <LCD_WriteByte>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <LCD_Command+0x92>
				{
					return false;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e09b      	b.n	8000df2 <LCD_Command+0x1ca>
				}
				else
				{
					HAL_Delay(2);
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f001 f92c 	bl	8001f18 <HAL_Delay>
					return true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e096      	b.n	8000df2 <LCD_Command+0x1ca>
				}
				break;

			case LCD_CURSOR_HOME:
				lcdData = LCD_BIT_CURSOR_HOME;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	73fb      	strb	r3, [r7, #15]

				if (LCD_WriteByte((uint8_t)0x00, &lcdData) == false)
 8000cc8:	f107 030f 	add.w	r3, r7, #15
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f90c 	bl	8000eec <LCD_WriteByte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <LCD_Command+0xb6>
				{
					return false;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e089      	b.n	8000df2 <LCD_Command+0x1ca>
				}
				else
				{
					HAL_Delay(2);
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f001 f91a 	bl	8001f18 <HAL_Delay>
					return true;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e084      	b.n	8000df2 <LCD_Command+0x1ca>
				}
				break;

			case LCD_CURSOR_DIR_RIGHT:
				lcd1.entryWord |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000ce8:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <LCD_Command+0x1d4>)
 8000cea:	7a5b      	ldrb	r3, [r3, #9]
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b42      	ldr	r3, [pc, #264]	@ (8000dfc <LCD_Command+0x1d4>)
 8000cf4:	725a      	strb	r2, [r3, #9]
				break;
 8000cf6:	e05a      	b.n	8000dae <LCD_Command+0x186>

			case LCD_CURSOR_DIR_LEFT:
				lcd1.entryWord |= LCD_BIT_CURSOR_DIR_LEFT;
 8000cf8:	4b40      	ldr	r3, [pc, #256]	@ (8000dfc <LCD_Command+0x1d4>)
 8000cfa:	7a5a      	ldrb	r2, [r3, #9]
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <LCD_Command+0x1d4>)
 8000cfe:	725a      	strb	r2, [r3, #9]
				break;
 8000d00:	e055      	b.n	8000dae <LCD_Command+0x186>

			case LCD_DISPLAY_SHIFT:
				lcd1.entryWord |= LCD_BIT_DISPLAY_SHIFT;
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d04:	7a5b      	ldrb	r3, [r3, #9]
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d0e:	725a      	strb	r2, [r3, #9]
				break;
 8000d10:	e04d      	b.n	8000dae <LCD_Command+0x186>

			default:
				return false;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e06d      	b.n	8000df2 <LCD_Command+0x1ca>
				break;
		}
	}
	else if (action == LCD_PARAM_UNSET)
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d146      	bne.n	8000daa <LCD_Command+0x182>
	{
		switch (command)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	2b07      	cmp	r3, #7
 8000d22:	d840      	bhi.n	8000da6 <LCD_Command+0x17e>
 8000d24:	a201      	add	r2, pc, #4	@ (adr r2, 8000d2c <LCD_Command+0x104>)
 8000d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d2a:	bf00      	nop
 8000d2c:	08000d4d 	.word	0x08000d4d
 8000d30:	08000da7 	.word	0x08000da7
 8000d34:	08000d5d 	.word	0x08000d5d
 8000d38:	08000d6d 	.word	0x08000d6d
 8000d3c:	08000da7 	.word	0x08000da7
 8000d40:	08000d8d 	.word	0x08000d8d
 8000d44:	08000d7d 	.word	0x08000d7d
 8000d48:	08000d97 	.word	0x08000d97
		{
			case LCD_DISPLAY:
				lcd1.modeWord &= ~LCD_BIT_DISPLAY_ON;
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d4e:	7a1b      	ldrb	r3, [r3, #8]
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d58:	721a      	strb	r2, [r3, #8]
				break;
 8000d5a:	e028      	b.n	8000dae <LCD_Command+0x186>

            case LCD_CURSOR:
                lcd1.modeWord &= ~LCD_BIT_CURSOR_ON;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d5e:	7a1b      	ldrb	r3, [r3, #8]
 8000d60:	f023 0302 	bic.w	r3, r3, #2
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d68:	721a      	strb	r2, [r3, #8]
                break;
 8000d6a:	e020      	b.n	8000dae <LCD_Command+0x186>

            case LCD_CURSOR_BLINK:
                lcd1.modeWord &= ~LCD_BIT_BLINK_ON;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d6e:	7a1b      	ldrb	r3, [r3, #8]
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d78:	721a      	strb	r2, [r3, #8]
                break;
 8000d7a:	e018      	b.n	8000dae <LCD_Command+0x186>

            case LCD_CURSOR_DIR_RIGHT:
                lcd1.entryWord &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d7e:	7a5b      	ldrb	r3, [r3, #9]
 8000d80:	f023 0302 	bic.w	r3, r3, #2
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d88:	725a      	strb	r2, [r3, #9]
                break;
 8000d8a:	e010      	b.n	8000dae <LCD_Command+0x186>

            case LCD_CURSOR_DIR_LEFT:
                lcd1.entryWord &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d8e:	7a5a      	ldrb	r2, [r3, #9]
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d92:	725a      	strb	r2, [r3, #9]
                break;
 8000d94:	e00b      	b.n	8000dae <LCD_Command+0x186>

            case LCD_DISPLAY_SHIFT:
                lcd1.entryWord &= ~LCD_BIT_DISPLAY_SHIFT;
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <LCD_Command+0x1d4>)
 8000d98:	7a5b      	ldrb	r3, [r3, #9]
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <LCD_Command+0x1d4>)
 8000da2:	725a      	strb	r2, [r3, #9]
                break;
 8000da4:	e003      	b.n	8000dae <LCD_Command+0x186>

            default:
            	return false;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e023      	b.n	8000df2 <LCD_Command+0x1ca>
            	break;
		}
	}
	else
	{
		return false;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e021      	b.n	8000df2 <LCD_Command+0x1ca>
	}

	// Now we can send the command
    switch (command)
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	dc16      	bgt.n	8000de2 <LCD_Command+0x1ba>
 8000db4:	2b06      	cmp	r3, #6
 8000db6:	da0d      	bge.n	8000dd4 <LCD_Command+0x1ac>
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d004      	beq.n	8000dc6 <LCD_Command+0x19e>
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dd10      	ble.n	8000de2 <LCD_Command+0x1ba>
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d80d      	bhi.n	8000de2 <LCD_Command+0x1ba>
    {
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcd1.modeWord;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <LCD_Command+0x1d4>)
 8000dc8:	7a1b      	ldrb	r3, [r3, #8]
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	73fb      	strb	r3, [r7, #15]
            break;
 8000dd2:	e007      	b.n	8000de4 <LCD_Command+0x1bc>
        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcd1.entryWord;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <LCD_Command+0x1d4>)
 8000dd6:	7a5b      	ldrb	r3, [r3, #9]
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	73fb      	strb	r3, [r7, #15]
            break;
 8000de0:	e000      	b.n	8000de4 <LCD_Command+0x1bc>

        default:
            break;
 8000de2:	bf00      	nop
    }

    return LCD_WriteByte((uint8_t)0x00, &lcdData);
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	4619      	mov	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f87e 	bl	8000eec <LCD_WriteByte>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001e0 	.word	0x200001e0

08000e00 <LCD_Backlight>:
 * @param  command LCD_BIT_BACKIGHT_ON to turn display backlight on
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display backlight off
 * @return         True if success or false if HAL error
 */
bool LCD_Backlight(uint8_t command)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
    lcd1.backlight = command;
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <LCD_Backlight+0x48>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, &lcd1.backlight, 1) != HAL_OK)
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <LCD_Backlight+0x48>)
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <LCD_Backlight+0x48>)
 8000e16:	791b      	ldrb	r3, [r3, #4]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <LCD_Backlight+0x4c>)
 8000e1e:	f002 fb27 	bl	8003470 <HAL_I2C_Master_Transmit_DMA>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <LCD_Backlight+0x2c>
    {
        return false;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	e009      	b.n	8000e40 <LCD_Backlight+0x40>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000e2c:	bf00      	nop
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <LCD_Backlight+0x48>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ffd0 	bl	8003dd8 <HAL_I2C_GetState>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b20      	cmp	r3, #32
 8000e3c:	d1f7      	bne.n	8000e2e <LCD_Backlight+0x2e>

    return true;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200001e0 	.word	0x200001e0
 8000e4c:	200001e7 	.word	0x200001e7

08000e50 <LCD_SetCursorPosition>:
 * @param  column counting from 0
 * @param  row    counting from 0
 * @return        True if sucess or false if HAL error
 */
bool LCD_SetCursorPosition(uint8_t column, uint8_t row)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if (row >= lcd1.rows)
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <LCD_SetCursorPosition+0x50>)
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d303      	bcc.n	8000e72 <LCD_SetCursorPosition+0x22>
    {
        row = lcd1.rows - 1;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <LCD_SetCursorPosition+0x50>)
 8000e6c:	795b      	ldrb	r3, [r3, #5]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[row]);
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <LCD_SetCursorPosition+0x54>)
 8000e76:	5cd2      	ldrb	r2, [r2, r3]
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	73fb      	strb	r3, [r7, #15]

    return LCD_WriteByte(0x00, &lcdCommand);
 8000e8a:	f107 030f 	add.w	r3, r7, #15
 8000e8e:	4619      	mov	r1, r3
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f82b 	bl	8000eec <LCD_WriteByte>
 8000e96:	4603      	mov	r3, r0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001e0 	.word	0x200001e0
 8000ea4:	080094f0 	.word	0x080094f0

08000ea8 <LCD_PrintString>:
 * @param  data   Pointer to string
 * @param  length Size of data
 * @return        True on success, false on HAL error
 */
bool LCD_PrintString(uint8_t * data, uint8_t length)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e00e      	b.n	8000ed8 <LCD_PrintString+0x30>
    {
        if (LCD_WriteByte(LCD_BIT_RS, &data[i]) == false)
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 f812 	bl	8000eec <LCD_WriteByte>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <LCD_PrintString+0x2a>
        {
            return false;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e007      	b.n	8000ee2 <LCD_PrintString+0x3a>
    for (uint8_t i = 0; i < length; ++i)
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d3ec      	bcc.n	8000eba <LCD_PrintString+0x12>
        }
    }

    return true;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <LCD_WriteByte>:
 * @param  rsBits   State of RS and R/W bits
 * @param  data     Pointer to data to be sent
 * @return          True if success, false on HAL error
 */
static bool LCD_WriteByte(uint8_t rsBits, uint8_t *data)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
    // High 4 bits
    lcd1_CommandBuffer[0] = rsBits | LCD_BIT_E | lcd1.backlight | (*data & 0xF0);  // Send data and set strobe
 8000ef8:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000efa:	79da      	ldrb	r2, [r3, #7]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f023 030f 	bic.w	r3, r3, #15
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	f043 0304 	orr.w	r3, r3, #4
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f18:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];                                          // Strobe turned on
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f20:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = rsBits | lcd1.backlight | (*data & 0xF0);              // Turning strobe off
 8000f22:	4b28      	ldr	r3, [pc, #160]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000f24:	79da      	ldrb	r2, [r3, #7]
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	b25a      	sxtb	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f42:	709a      	strb	r2, [r3, #2]

    // Low 4 bits
    lcd1_CommandBuffer[3] = rsBits | LCD_BIT_E | lcd1.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000f46:	79da      	ldrb	r2, [r3, #7]
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f62:	70da      	strb	r2, [r3, #3]
    lcd1_CommandBuffer[4] = lcd1_CommandBuffer[3];                                                 // Strobe turned on
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f66:	78da      	ldrb	r2, [r3, #3]
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f6a:	711a      	strb	r2, [r3, #4]
    lcd1_CommandBuffer[5] = rsBits | lcd1.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000f6e:	79da      	ldrb	r2, [r3, #7]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	b25a      	sxtb	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f88:	715a      	strb	r2, [r3, #5]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 6) != HAL_OK)
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000f90:	791b      	ldrb	r3, [r3, #4]
 8000f92:	4619      	mov	r1, r3
 8000f94:	2306      	movs	r3, #6
 8000f96:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc8 <LCD_WriteByte+0xdc>)
 8000f98:	f002 fa6a 	bl	8003470 <HAL_I2C_Master_Transmit_DMA>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <LCD_WriteByte+0xba>
    {
        return false;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e009      	b.n	8000fba <LCD_WriteByte+0xce>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000fa6:	bf00      	nop
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <LCD_WriteByte+0xd8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 ff13 	bl	8003dd8 <HAL_I2C_GetState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d1f7      	bne.n	8000fa8 <LCD_WriteByte+0xbc>

    return true;
 8000fb8:	2301      	movs	r3, #1
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001e0 	.word	0x200001e0
 8000fc8:	200001ec 	.word	0x200001ec

08000fcc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fd4:	1d39      	adds	r1, r7, #4
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <__io_putchar+0x20>)
 8000fde:	f005 ff5d 	bl	8006e9c <HAL_UART_Transmit>
  return ch;
 8000fe2:	687b      	ldr	r3, [r7, #4]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000304 	.word	0x20000304

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0a0      	sub	sp, #128	@ 0x80
 8000ff4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 ff1d 	bl	8001e34 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 fa4f 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f7ff fb99 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8001002:	f7ff fb67 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001006:	f000 fdab 	bl	8001b60 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800100a:	f7ff fab1 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 800100e:	f7ff fc4d 	bl	80008ac <MX_I2C1_Init>
  MX_RTC_Init();
 8001012:	f000 facd 	bl	80015b0 <MX_RTC_Init>
  MX_SPI2_Init();
 8001016:	f000 fb1d 	bl	8001654 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800101a:	f000 fd77 	bl	8001b0c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800101e:	f000 fdc9 	bl	8001bb4 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001022:	f000 fd01 	bl	8001a28 <MX_TIM1_Init>
  // whereas for getting user input (like above) we could just use blocking statements
   */

  // All UART RXs in this code expect a single "\n" control character
  // from the serial terminal, so give a warning to anyone trying to communicate
  printf("Send only newlines, not also carriage returns.\r\n");
 8001026:	488a      	ldr	r0, [pc, #552]	@ (8001250 <main+0x260>)
 8001028:	f007 f930 	bl	800828c <puts>

  /* Add I2C and scan the bus for all addresses that respond */
  // TODO: Replace generic i2c scanner with a scanner that specifically looks for our modules only
  // 20x4 LCD: 0x27, TODO: get addresses for other modules
  printf("Scanning I2C bus.\r\n");
 800102c:	4889      	ldr	r0, [pc, #548]	@ (8001254 <main+0x264>)
 800102e:	f007 f92d 	bl	800828c <puts>
  int ret = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	673b      	str	r3, [r7, #112]	@ 0x70
  char i2cBuffer[5] = {0};
 8001036:	2300      	movs	r3, #0
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
 800103a:	2300      	movs	r3, #0
 800103c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  // Scan all 128 available i2c addresses
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8001040:	2301      	movs	r3, #1
 8001042:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001046:	e026      	b.n	8001096 <main+0xa6>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(testAddr<<1), 3, 5);
 8001048:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b299      	uxth	r1, r3
 8001052:	2305      	movs	r3, #5
 8001054:	2203      	movs	r2, #3
 8001056:	4880      	ldr	r0, [pc, #512]	@ (8001258 <main+0x268>)
 8001058:	f002 fb36 	bl	80036c8 <HAL_I2C_IsDeviceReady>
 800105c:	4603      	mov	r3, r0
 800105e:	673b      	str	r3, [r7, #112]	@ 0x70
	  if (ret == HAL_OK) // If an ACK was received at address testAddr
 8001060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001062:	2b00      	cmp	r3, #0
 8001064:	d112      	bne.n	800108c <main+0x9c>
	  {
		  sprintf(i2cBuffer, "0x%X", testAddr);
 8001066:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800106a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800106e:	497b      	ldr	r1, [pc, #492]	@ (800125c <main+0x26c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f007 f913 	bl	800829c <siprintf>
		  printf("Device at: ");
 8001076:	487a      	ldr	r0, [pc, #488]	@ (8001260 <main+0x270>)
 8001078:	f007 f898 	bl	80081ac <iprintf>
		  printf(i2cBuffer);
 800107c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001080:	4618      	mov	r0, r3
 8001082:	f007 f893 	bl	80081ac <iprintf>
		  printf("\r\n");
 8001086:	4877      	ldr	r0, [pc, #476]	@ (8001264 <main+0x274>)
 8001088:	f007 f900 	bl	800828c <puts>
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 800108c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001090:	3301      	adds	r3, #1
 8001092:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8001096:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800109a:	2b00      	cmp	r3, #0
 800109c:	dad4      	bge.n	8001048 <main+0x58>
	  }
  }
  printf("Done.\r\n");
 800109e:	4872      	ldr	r0, [pc, #456]	@ (8001268 <main+0x278>)
 80010a0:	f007 f8f4 	bl	800828c <puts>


  /* Display a splash screen on the LCD */
  LCD_Init(&hi2c1, (uint8_t)0x27, 4, 20);	// from scanning, LCD I2C addr is 0x27
 80010a4:	2314      	movs	r3, #20
 80010a6:	2204      	movs	r2, #4
 80010a8:	2127      	movs	r1, #39	@ 0x27
 80010aa:	486b      	ldr	r0, [pc, #428]	@ (8001258 <main+0x268>)
 80010ac:	f7ff fcea 	bl	8000a84 <LCD_Init>
  HAL_Delay(500);
 80010b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b4:	f000 ff30 	bl	8001f18 <HAL_Delay>
  LCD_PrintString((uint8_t*)"Hello,", 6);
 80010b8:	2106      	movs	r1, #6
 80010ba:	486c      	ldr	r0, [pc, #432]	@ (800126c <main+0x27c>)
 80010bc:	f7ff fef4 	bl	8000ea8 <LCD_PrintString>
  LCD_SetCursorPosition(0, 2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fec4 	bl	8000e50 <LCD_SetCursorPosition>
  LCD_PrintString((uint8_t*)"World!", 6);
 80010c8:	2106      	movs	r1, #6
 80010ca:	4869      	ldr	r0, [pc, #420]	@ (8001270 <main+0x280>)
 80010cc:	f7ff feec 	bl	8000ea8 <LCD_PrintString>
  LCD_Backlight(LCD_BIT_BACKLIGHT_ON);
 80010d0:	2008      	movs	r0, #8
 80010d2:	f7ff fe95 	bl	8000e00 <LCD_Backlight>

  /* Get and set the RTC module */
  // Setting RTC is done following the procedure in UM1725 section 57.2
  // Enable backup domain access for the RTC first (according to documentation UM1725 57.2.3)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010da:	4b66      	ldr	r3, [pc, #408]	@ (8001274 <main+0x284>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	4a65      	ldr	r2, [pc, #404]	@ (8001274 <main+0x284>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e6:	4b63      	ldr	r3, [pc, #396]	@ (8001274 <main+0x284>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80010f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  HAL_PWR_EnableBkUpAccess();
 80010f2:	f004 fa8f 	bl	8005614 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 80010f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001274 <main+0x284>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001274 <main+0x284>)
 80010fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001100:	6093      	str	r3, [r2, #8]
 8001102:	4b5c      	ldr	r3, [pc, #368]	@ (8001274 <main+0x284>)
 8001104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001106:	4a5b      	ldr	r2, [pc, #364]	@ (8001274 <main+0x284>)
 8001108:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110c:	6713      	str	r3, [r2, #112]	@ 0x70
  __HAL_RCC_RTC_ENABLE();
 800110e:	4b5a      	ldr	r3, [pc, #360]	@ (8001278 <main+0x288>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  char timeString[8];
  char dateString[8];
  uint8_t uartBuffer[10] = {0};
 8001114:	2300      	movs	r3, #0
 8001116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001118:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	809a      	strh	r2, [r3, #4]
  RTC_DateTypeDef dateRTC;
  RTC_TimeTypeDef timeRTC;

  printf("Current date and time: ");
 8001122:	4856      	ldr	r0, [pc, #344]	@ (800127c <main+0x28c>)
 8001124:	f007 f842 	bl	80081ac <iprintf>
  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 8001128:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4853      	ldr	r0, [pc, #332]	@ (8001280 <main+0x290>)
 8001132:	f005 f926 	bl	8006382 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 8001136:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	4850      	ldr	r0, [pc, #320]	@ (8001280 <main+0x290>)
 8001140:	f005 fa01 	bl	8006546 <HAL_RTC_GetDate>

  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 8001144:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001148:	461a      	mov	r2, r3
 800114a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800114e:	4619      	mov	r1, r3
 8001150:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001154:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	460b      	mov	r3, r1
 800115c:	4949      	ldr	r1, [pc, #292]	@ (8001284 <main+0x294>)
 800115e:	f007 f89d 	bl	800829c <siprintf>
  printf(timeString);
 8001162:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001166:	4618      	mov	r0, r3
 8001168:	f007 f820 	bl	80081ac <iprintf>
  printf(" ");
 800116c:	2020      	movs	r0, #32
 800116e:	f007 f82f 	bl	80081d0 <putchar>
  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 8001172:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001176:	461a      	mov	r2, r3
 8001178:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800117c:	4619      	mov	r1, r3
 800117e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001182:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	460b      	mov	r3, r1
 800118a:	493f      	ldr	r1, [pc, #252]	@ (8001288 <main+0x298>)
 800118c:	f007 f886 	bl	800829c <siprintf>
  printf(dateString);
 8001190:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001194:	4618      	mov	r0, r3
 8001196:	f007 f809 	bl	80081ac <iprintf>

  printf("\r\nSet the time? (y/n)\r\n");
 800119a:	483c      	ldr	r0, [pc, #240]	@ (800128c <main+0x29c>)
 800119c:	f007 f876 	bl	800828c <puts>
  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 80011a0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	2202      	movs	r2, #2
 80011aa:	4839      	ldr	r0, [pc, #228]	@ (8001290 <main+0x2a0>)
 80011ac:	f005 ff01 	bl	8006fb2 <HAL_UART_Receive>

  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y')
 80011b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011b4:	2b79      	cmp	r3, #121	@ 0x79
 80011b6:	d004      	beq.n	80011c2 <main+0x1d2>
 80011b8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011bc:	2b59      	cmp	r3, #89	@ 0x59
 80011be:	f040 811b 	bne.w	80013f8 <main+0x408>
  {
	  // ask the user to set the time and date
	  printf("Enter the time in 24hr format (HH:MM)\r\n");
 80011c2:	4834      	ldr	r0, [pc, #208]	@ (8001294 <main+0x2a4>)
 80011c4:	f007 f862 	bl	800828c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 6, HAL_MAX_DELAY);
 80011c8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	2206      	movs	r2, #6
 80011d2:	482f      	ldr	r0, [pc, #188]	@ (8001290 <main+0x2a0>)
 80011d4:	f005 feed 	bl	8006fb2 <HAL_UART_Receive>

	  char charHrs[2] = {uartBuffer[0], uartBuffer[1]};
 80011d8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011dc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80011e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80011e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  char charMins[2] = {uartBuffer[3], uartBuffer[4]};
 80011e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80011f0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80011f4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	  timeRTC.Hours = atoi(charHrs);
 80011f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fc:	4618      	mov	r0, r3
 80011fe:	f006 fe8b 	bl	8007f18 <atoi>
 8001202:	4603      	mov	r3, r0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	  timeRTC.Minutes = atoi(charMins);
 800120a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800120e:	4618      	mov	r0, r3
 8001210:	f006 fe82 	bl	8007f18 <atoi>
 8001214:	4603      	mov	r3, r0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	  uint8_t dst = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	  printf("Daylight savings time? (y/n)\r\n");
 8001222:	481d      	ldr	r0, [pc, #116]	@ (8001298 <main+0x2a8>)
 8001224:	f007 f832 	bl	800828c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 8001228:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	2202      	movs	r2, #2
 8001232:	4817      	ldr	r0, [pc, #92]	@ (8001290 <main+0x2a0>)
 8001234:	f005 febd 	bl	8006fb2 <HAL_UART_Receive>

	  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y') dst = RTC_DAYLIGHTSAVING_ADD1H;
 8001238:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800123c:	2b79      	cmp	r3, #121	@ 0x79
 800123e:	d003      	beq.n	8001248 <main+0x258>
 8001240:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001244:	2b59      	cmp	r3, #89	@ 0x59
 8001246:	d129      	bne.n	800129c <main+0x2ac>
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800124e:	e028      	b.n	80012a2 <main+0x2b2>
 8001250:	08009380 	.word	0x08009380
 8001254:	080093b0 	.word	0x080093b0
 8001258:	200000cc 	.word	0x200000cc
 800125c:	080093c4 	.word	0x080093c4
 8001260:	080093cc 	.word	0x080093cc
 8001264:	080093d8 	.word	0x080093d8
 8001268:	080093dc 	.word	0x080093dc
 800126c:	080093e4 	.word	0x080093e4
 8001270:	080093ec 	.word	0x080093ec
 8001274:	40023800 	.word	0x40023800
 8001278:	42470e3c 	.word	0x42470e3c
 800127c:	080093f4 	.word	0x080093f4
 8001280:	200001f8 	.word	0x200001f8
 8001284:	0800940c 	.word	0x0800940c
 8001288:	0800941c 	.word	0x0800941c
 800128c:	0800942c 	.word	0x0800942c
 8001290:	20000304 	.word	0x20000304
 8001294:	08009444 	.word	0x08009444
 8001298:	0800946c 	.word	0x0800946c
	  else dst = RTC_DAYLIGHTSAVING_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

	  // The daylight savings and store operation interfaces have been
	  // deprecated but we will worry about that later
	  // TODO: Update interface for RTC daylight savings time
	  timeRTC.Seconds = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  timeRTC.TimeFormat = RTC_HOURFORMAT12_PM;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  timeRTC.DayLightSaving = dst;
 80012ae:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
	  timeRTC.StoreOperation = RTC_STOREOPERATION_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44

	  if (HAL_RTC_SetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN) != HAL_OK)
 80012b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	486c      	ldr	r0, [pc, #432]	@ (8001474 <main+0x484>)
 80012c2:	f004 ffc4 	bl	800624e <HAL_RTC_SetTime>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d004      	beq.n	80012d6 <main+0x2e6>
	  {
		printf("INVALID TIME.\r\n");
 80012cc:	486a      	ldr	r0, [pc, #424]	@ (8001478 <main+0x488>)
 80012ce:	f006 ffdd 	bl	800828c <puts>
		Error_Handler();
 80012d2:	f000 f961 	bl	8001598 <Error_Handler>
	  }

	  printf("Enter the date (MM-DD-YY)\r\n");
 80012d6:	4869      	ldr	r0, [pc, #420]	@ (800147c <main+0x48c>)
 80012d8:	f006 ffd8 	bl	800828c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 8, HAL_MAX_DELAY);
 80012dc:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	2208      	movs	r2, #8
 80012e6:	4866      	ldr	r0, [pc, #408]	@ (8001480 <main+0x490>)
 80012e8:	f005 fe63 	bl	8006fb2 <HAL_UART_Receive>

	  char charMM[2] = {uartBuffer[0], uartBuffer[1]};
 80012ec:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80012f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  char charDD[2] = {uartBuffer[3], uartBuffer[4]};
 80012fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001300:	f887 3020 	strb.w	r3, [r7, #32]
 8001304:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001308:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  char charYY[2] = {uartBuffer[6], uartBuffer[7]};
 800130c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001310:	773b      	strb	r3, [r7, #28]
 8001312:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001316:	777b      	strb	r3, [r7, #29]
	  dateRTC.Month = atoi(charMM);
 8001318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f006 fdfb 	bl	8007f18 <atoi>
 8001322:	4603      	mov	r3, r0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	  dateRTC.Date = atoi(charDD);
 800132a:	f107 0320 	add.w	r3, r7, #32
 800132e:	4618      	mov	r0, r3
 8001330:	f006 fdf2 	bl	8007f18 <atoi>
 8001334:	4603      	mov	r3, r0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	  dateRTC.Year = atoi(charYY);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fde9 	bl	8007f18 <atoi>
 8001346:	4603      	mov	r3, r0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	  if (HAL_RTC_SetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN) != HAL_OK)
 800134e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001352:	2200      	movs	r2, #0
 8001354:	4619      	mov	r1, r3
 8001356:	4847      	ldr	r0, [pc, #284]	@ (8001474 <main+0x484>)
 8001358:	f005 f871 	bl	800643e <HAL_RTC_SetDate>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <main+0x37c>
	  {
		  printf("INVALID DATE.\r\n");
 8001362:	4848      	ldr	r0, [pc, #288]	@ (8001484 <main+0x494>)
 8001364:	f006 ff92 	bl	800828c <puts>
		  Error_Handler();
 8001368:	f000 f916 	bl	8001598 <Error_Handler>
	  }

	  // Update the backup register too as part of setting RTC
	  // from https://controllerstech.com/internal-rtc-in-stm32/
	  // The hex number was chosen randomly
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 800136c:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001370:	2101      	movs	r1, #1
 8001372:	4840      	ldr	r0, [pc, #256]	@ (8001474 <main+0x484>)
 8001374:	f005 f9f4 	bl	8006760 <HAL_RTCEx_BKUPWrite>

	  // We'll confirm the new date and time by reading it out
	  printf("Current date and time: ");
 8001378:	4843      	ldr	r0, [pc, #268]	@ (8001488 <main+0x498>)
 800137a:	f006 ff17 	bl	80081ac <iprintf>
	  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 800137e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001382:	2200      	movs	r2, #0
 8001384:	4619      	mov	r1, r3
 8001386:	483b      	ldr	r0, [pc, #236]	@ (8001474 <main+0x484>)
 8001388:	f004 fffb 	bl	8006382 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 800138c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	4837      	ldr	r0, [pc, #220]	@ (8001474 <main+0x484>)
 8001396:	f005 f8d6 	bl	8006546 <HAL_RTC_GetDate>

	  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 800139a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800139e:	461a      	mov	r2, r3
 80013a0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80013a4:	4619      	mov	r1, r3
 80013a6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80013aa:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	460b      	mov	r3, r1
 80013b2:	4936      	ldr	r1, [pc, #216]	@ (800148c <main+0x49c>)
 80013b4:	f006 ff72 	bl	800829c <siprintf>
	  printf(timeString);
 80013b8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fef5 	bl	80081ac <iprintf>
	  printf(" ");
 80013c2:	2020      	movs	r0, #32
 80013c4:	f006 ff04 	bl	80081d0 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 80013c8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80013cc:	461a      	mov	r2, r3
 80013ce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80013d2:	4619      	mov	r1, r3
 80013d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013d8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	460b      	mov	r3, r1
 80013e0:	492b      	ldr	r1, [pc, #172]	@ (8001490 <main+0x4a0>)
 80013e2:	f006 ff5b 	bl	800829c <siprintf>
	  printf(dateString);
 80013e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 fede 	bl	80081ac <iprintf>
	  printf("\r\n");
 80013f0:	4828      	ldr	r0, [pc, #160]	@ (8001494 <main+0x4a4>)
 80013f2:	f006 ff4b 	bl	800828c <puts>
  {
 80013f6:	e002      	b.n	80013fe <main+0x40e>
  }
  else printf("Skipping time set.\r\n");
 80013f8:	4827      	ldr	r0, [pc, #156]	@ (8001498 <main+0x4a8>)
 80013fa:	f006 ff47 	bl	800828c <puts>
  while (1)
  {
	  // The goal for now is to transmit the now set time from the RTC, once a second.
	  RTC_DateTypeDef getDate;
	  RTC_TimeTypeDef getTime;
	  HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	481b      	ldr	r0, [pc, #108]	@ (8001474 <main+0x484>)
 8001406:	f004 ffbc 	bl	8006382 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4818      	ldr	r0, [pc, #96]	@ (8001474 <main+0x484>)
 8001414:	f005 f897 	bl	8006546 <HAL_RTC_GetDate>
	  sprintf(timeString, "%02d:%02d:%02d", getTime.Hours, getTime.Minutes, getTime.Seconds);
 8001418:	793b      	ldrb	r3, [r7, #4]
 800141a:	461a      	mov	r2, r3
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	4619      	mov	r1, r3
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	460b      	mov	r3, r1
 800142a:	4918      	ldr	r1, [pc, #96]	@ (800148c <main+0x49c>)
 800142c:	f006 ff36 	bl	800829c <siprintf>
	  printf(timeString);
 8001430:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001434:	4618      	mov	r0, r3
 8001436:	f006 feb9 	bl	80081ac <iprintf>
	  printf(" ");
 800143a:	2020      	movs	r0, #32
 800143c:	f006 fec8 	bl	80081d0 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", getDate.Month, getDate.Date, getDate.Year);
 8001440:	7e7b      	ldrb	r3, [r7, #25]
 8001442:	461a      	mov	r2, r3
 8001444:	7ebb      	ldrb	r3, [r7, #26]
 8001446:	4619      	mov	r1, r3
 8001448:	7efb      	ldrb	r3, [r7, #27]
 800144a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	490f      	ldr	r1, [pc, #60]	@ (8001490 <main+0x4a0>)
 8001454:	f006 ff22 	bl	800829c <siprintf>
	  printf(dateString);
 8001458:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800145c:	4618      	mov	r0, r3
 800145e:	f006 fea5 	bl	80081ac <iprintf>
	  printf("\r\n");
 8001462:	480c      	ldr	r0, [pc, #48]	@ (8001494 <main+0x4a4>)
 8001464:	f006 ff12 	bl	800828c <puts>
	  HAL_Delay(1000);
 8001468:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800146c:	f000 fd54 	bl	8001f18 <HAL_Delay>
  {
 8001470:	bf00      	nop
 8001472:	e7c4      	b.n	80013fe <main+0x40e>
 8001474:	200001f8 	.word	0x200001f8
 8001478:	0800948c 	.word	0x0800948c
 800147c:	0800949c 	.word	0x0800949c
 8001480:	20000304 	.word	0x20000304
 8001484:	080094b8 	.word	0x080094b8
 8001488:	080093f4 	.word	0x080093f4
 800148c:	0800940c 	.word	0x0800940c
 8001490:	0800941c 	.word	0x0800941c
 8001494:	080093d8 	.word	0x080093d8
 8001498:	080094c8 	.word	0x080094c8

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2230      	movs	r2, #48	@ 0x30
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 ffee 	bl	800848c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001570 <SystemClock_Config+0xd4>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	4a29      	ldr	r2, [pc, #164]	@ (8001570 <SystemClock_Config+0xd4>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <SystemClock_Config+0xd4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <SystemClock_Config+0xd8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014e8:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <SystemClock_Config+0xd8>)
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <SystemClock_Config+0xd8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80014fc:	230a      	movs	r3, #10
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150c:	2302      	movs	r3, #2
 800150e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001510:	2300      	movs	r3, #0
 8001512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001514:	2310      	movs	r3, #16
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001518:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800151c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800151e:	2304      	movs	r3, #4
 8001520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001522:	2307      	movs	r3, #7
 8001524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4618      	mov	r0, r3
 800152c:	f004 f886 	bl	800563c <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001536:	f000 f82f 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2102      	movs	r1, #2
 8001556:	4618      	mov	r0, r3
 8001558:	f004 fae8 	bl	8005b2c <HAL_RCC_ClockConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001562:	f000 f819 	bl	8001598 <Error_Handler>
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	gpv_UART2_DMA_RX_Complete = 1;
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <HAL_UART_RxCpltCallback+0x1c>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
	// this function from https://deepbluembedded.com/how-to-receive-uart-serial-data-with-stm32-dma-interrupt-polling/
    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001f4 	.word	0x200001f4

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <Error_Handler+0x14>)
 80015a2:	f006 fe03 	bl	80081ac <iprintf>
	  while (1);
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <Error_Handler+0xe>
 80015aa:	bf00      	nop
 80015ac:	080094dc 	.word	0x080094dc

080015b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <MX_RTC_Init+0x48>)
 80015b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015c2:	227f      	movs	r2, #127	@ 0x7f
 80015c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015c8:	22ff      	movs	r2, #255	@ 0xff
 80015ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015e0:	f004 fdb2 	bl	8006148 <HAL_RTC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80015ea:	f7ff ffd5 	bl	8001598 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200001f8 	.word	0x200001f8
 80015f8:	40002800 	.word	0x40002800

080015fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <HAL_RTC_MspInit+0x50>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d111      	bne.n	8001642 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800161e:	2302      	movs	r3, #2
 8001620:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001626:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4618      	mov	r0, r3
 800162e:	f004 fc9d 	bl	8005f6c <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001638:	f7ff ffae 	bl	8001598 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800163c:	4b04      	ldr	r3, [pc, #16]	@ (8001650 <HAL_RTC_MspInit+0x54>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40002800 	.word	0x40002800
 8001650:	42470e3c 	.word	0x42470e3c

08001654 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <MX_SPI2_Init+0x68>)
 800165a:	4a19      	ldr	r2, [pc, #100]	@ (80016c0 <MX_SPI2_Init+0x6c>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001668:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800166c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <MX_SPI2_Init+0x68>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001682:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001686:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_SPI2_Init+0x68>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_SPI2_Init+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_SPI2_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_SPI2_Init+0x68>)
 80016a2:	220a      	movs	r2, #10
 80016a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_SPI2_Init+0x68>)
 80016a8:	f005 f874 	bl	8006794 <HAL_SPI_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016b2:	f7ff ff71 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000218 	.word	0x20000218
 80016c0:	40003800 	.word	0x40003800

080016c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a28      	ldr	r2, [pc, #160]	@ (8001784 <HAL_SPI_MspInit+0xc0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d14a      	bne.n	800177c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a1f      	ldr	r2, [pc, #124]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a18      	ldr	r2, [pc, #96]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_SPI_MspInit+0xc4>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173a:	2308      	movs	r3, #8
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800174a:	2305      	movs	r3, #5
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <HAL_SPI_MspInit+0xc8>)
 8001756:	f001 fb93 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800175a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800176c:	2305      	movs	r3, #5
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <HAL_SPI_MspInit+0xcc>)
 8001778:	f001 fb82 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	@ 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40003800 	.word	0x40003800
 8001788:	40023800 	.word	0x40023800
 800178c:	40020800 	.word	0x40020800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fef6 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <NMI_Handler+0x4>

080017ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <MemManage_Handler+0x4>

080017fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <UsageFault_Handler+0x4>

0800180c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183a:	f000 fb4d 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <DMA1_Stream0_IRQHandler+0x10>)
 800184a:	f001 f895 	bl	8002978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000180 	.word	0x20000180

08001858 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA1_Stream5_IRQHandler+0x10>)
 800185e:	f001 f88b 	bl	8002978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000394 	.word	0x20000394

0800186c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <DMA1_Stream6_IRQHandler+0x10>)
 8001872:	f001 f881 	bl	8002978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000120 	.word	0x20000120

08001880 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <I2C1_EV_IRQHandler+0x10>)
 8001886:	f002 f84d 	bl	8003924 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200000cc 	.word	0x200000cc

08001894 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <I2C1_ER_IRQHandler+0x10>)
 800189a:	f002 f996 	bl	8003bca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000cc 	.word	0x200000cc

080018a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <USART2_IRQHandler+0x10>)
 80018ae:	f005 fc17 	bl	80070e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000304 	.word	0x20000304

080018bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00a      	b.n	80018e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ce:	f3af 8000 	nop.w
 80018d2:	4601      	mov	r1, r0
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	1c5a      	adds	r2, r3, #1
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	b2ca      	uxtb	r2, r1
 80018dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dbf0      	blt.n	80018ce <_read+0x12>
  }

  return len;
 80018ec:	687b      	ldr	r3, [r7, #4]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e009      	b.n	800191c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fb5b 	bl	8000fcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf1      	blt.n	8001908 <_write+0x12>
  }
  return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_close>:

int _close(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001956:	605a      	str	r2, [r3, #4]
  return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_isatty>:

int _isatty(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f006 fdae 	bl	8008528 <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	@ (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20018000 	.word	0x20018000
 80019f8:	00000400 	.word	0x00000400
 80019fc:	20000270 	.word	0x20000270
 8001a00:	20000548 	.word	0x20000548

08001a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a44:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a46:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <MX_TIM1_Init+0x9c>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a4c:	2253      	movs	r2, #83	@ 0x53
 8001a4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a58:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a64:	4b16      	ldr	r3, [pc, #88]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a70:	4813      	ldr	r0, [pc, #76]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a72:	f004 ff18 	bl	80068a6 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a7c:	f7ff fd8c 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001a8e:	f004 ff59 	bl	8006944 <HAL_TIM_ConfigClockSource>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a98:	f7ff fd7e 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_TIM1_Init+0x98>)
 8001aaa:	f005 f939 	bl	8006d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ab4:	f7ff fd70 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000274 	.word	0x20000274
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b04 <HAL_TIM_Base_MspInit+0x3c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10d      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_TIM_Base_MspInit+0x40>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_TIM_Base_MspInit+0x40>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <HAL_TIM_Base_MspInit+0x40>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40010000 	.word	0x40010000
 8001b08:	40023800 	.word	0x40023800

08001b0c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <MX_USART1_UART_Init+0x50>)
 8001b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b32:	220c      	movs	r2, #12
 8001b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b42:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_USART1_UART_Init+0x4c>)
 8001b44:	f005 f95a 	bl	8006dfc <HAL_UART_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b4e:	f7ff fd23 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002bc 	.word	0x200002bc
 8001b5c:	40011000 	.word	0x40011000

08001b60 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <MX_USART2_UART_Init+0x50>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <MX_USART2_UART_Init+0x4c>)
 8001b98:	f005 f930 	bl	8006dfc <HAL_UART_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ba2:	f7ff fcf9 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000304 	.word	0x20000304
 8001bb0:	40004400 	.word	0x40004400

08001bb4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <MX_USART6_UART_Init+0x50>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_USART6_UART_Init+0x4c>)
 8001bec:	f005 f906 	bl	8006dfc <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001bf6:	f7ff fccf 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000034c 	.word	0x2000034c
 8001c04:	40011400 	.word	0x40011400

08001c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08e      	sub	sp, #56	@ 0x38
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a66      	ldr	r2, [pc, #408]	@ (8001dc0 <HAL_UART_MspInit+0x1b8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12d      	bne.n	8001c86 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
 8001c2e:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a64      	ldr	r2, [pc, #400]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c34:	f043 0310 	orr.w	r3, r3, #16
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b62      	ldr	r3, [pc, #392]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	623b      	str	r3, [r7, #32]
 8001c44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c74:	2307      	movs	r3, #7
 8001c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4852      	ldr	r0, [pc, #328]	@ (8001dc8 <HAL_UART_MspInit+0x1c0>)
 8001c80:	f001 f8fe 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001c84:	e098      	b.n	8001db8 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a50      	ldr	r2, [pc, #320]	@ (8001dcc <HAL_UART_MspInit+0x1c4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d162      	bne.n	8001d56 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
 8001c94:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca0:	4b48      	ldr	r3, [pc, #288]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	4b44      	ldr	r3, [pc, #272]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	4a43      	ldr	r2, [pc, #268]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbc:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4839      	ldr	r0, [pc, #228]	@ (8001dc8 <HAL_UART_MspInit+0x1c0>)
 8001ce4:	f001 f8cc 	bl	8002e80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ce8:	4b39      	ldr	r3, [pc, #228]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001cea:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd4 <HAL_UART_MspInit+0x1cc>)
 8001cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001cee:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001cf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf6:	4b36      	ldr	r3, [pc, #216]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d02:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d16:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d22:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d28:	4829      	ldr	r0, [pc, #164]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d2a:	f000 fc8d 	bl	8002648 <HAL_DMA_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001d34:	f7ff fc30 	bl	8001598 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a25      	ldr	r2, [pc, #148]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d3e:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <HAL_UART_MspInit+0x1c8>)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2026      	movs	r0, #38	@ 0x26
 8001d4a:	f000 fc46 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d4e:	2026      	movs	r0, #38	@ 0x26
 8001d50:	f000 fc5f 	bl	8002612 <HAL_NVIC_EnableIRQ>
}
 8001d54:	e030      	b.n	8001db8 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART6)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_UART_MspInit+0x1d0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d12b      	bne.n	8001db8 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	4a16      	ldr	r2, [pc, #88]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d6a:	f043 0320 	orr.w	r3, r3, #32
 8001d6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d70:	4b14      	ldr	r3, [pc, #80]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_UART_MspInit+0x1bc>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d98:	23c0      	movs	r3, #192	@ 0xc0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001da8:	2308      	movs	r3, #8
 8001daa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db0:	4619      	mov	r1, r3
 8001db2:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <HAL_UART_MspInit+0x1d4>)
 8001db4:	f001 f864 	bl	8002e80 <HAL_GPIO_Init>
}
 8001db8:	bf00      	nop
 8001dba:	3738      	adds	r7, #56	@ 0x38
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020000 	.word	0x40020000
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	20000394 	.word	0x20000394
 8001dd4:	40026088 	.word	0x40026088
 8001dd8:	40011400 	.word	0x40011400
 8001ddc:	40020800 	.word	0x40020800

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001de4:	f7ff fe0e 	bl	8001a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	@ (8001e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f006 fb91 	bl	8008534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff f8ed 	bl	8000ff0 <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e24:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 8001e28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e2c:	20000544 	.word	0x20000544

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e38:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_Init+0x40>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <HAL_Init+0x40>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_Init+0x40>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 fbb1 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fc94 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fbc9 	bl	800262e <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 fb91 	bl	80025da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	@ (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	200003f4 	.word	0x200003f4

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003f4 	.word	0x200003f4

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e033      	b.n	8001fde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d109      	bne.n	8001f92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fb48 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d118      	bne.n	8001fd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fa6:	f023 0302 	bic.w	r3, r3, #2
 8001faa:	f043 0202 	orr.w	r2, r3, #2
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f93a 	bl	800222c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f023 0303 	bic.w	r3, r3, #3
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fce:	e001      	b.n	8001fd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1c>
 8002000:	2302      	movs	r3, #2
 8002002:	e105      	b.n	8002210 <HAL_ADC_ConfigChannel+0x228>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b09      	cmp	r3, #9
 8002012:	d925      	bls.n	8002060 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68d9      	ldr	r1, [r3, #12]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	4613      	mov	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4413      	add	r3, r2
 8002028:	3b1e      	subs	r3, #30
 800202a:	2207      	movs	r2, #7
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	4603      	mov	r3, r0
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4403      	add	r3, r0
 8002052:	3b1e      	subs	r3, #30
 8002054:	409a      	lsls	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	e022      	b.n	80020a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6919      	ldr	r1, [r3, #16]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	2207      	movs	r2, #7
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6919      	ldr	r1, [r3, #16]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	4603      	mov	r3, r0
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4403      	add	r3, r0
 800209c:	409a      	lsls	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d824      	bhi.n	80020f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b05      	subs	r3, #5
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b05      	subs	r3, #5
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020f6:	e04c      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	d824      	bhi.n	800214a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b23      	subs	r3, #35	@ 0x23
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43da      	mvns	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	400a      	ands	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	b29b      	uxth	r3, r3
 800212e:	4618      	mov	r0, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b23      	subs	r3, #35	@ 0x23
 800213c:	fa00 f203 	lsl.w	r2, r0, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
 8002148:	e023      	b.n	8002192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	3b41      	subs	r3, #65	@ 0x41
 800215c:	221f      	movs	r2, #31
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	4618      	mov	r0, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	3b41      	subs	r3, #65	@ 0x41
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_ADC_ConfigChannel+0x234>)
 8002194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	@ (8002220 <HAL_ADC_ConfigChannel+0x238>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d109      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1cc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a19      	ldr	r2, [pc, #100]	@ (8002220 <HAL_ADC_ConfigChannel+0x238>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d123      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d003      	beq.n	80021ce <HAL_ADC_ConfigChannel+0x1e6>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b11      	cmp	r3, #17
 80021cc:	d11b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d111      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <HAL_ADC_ConfigChannel+0x23c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a10      	ldr	r2, [pc, #64]	@ (8002228 <HAL_ADC_ConfigChannel+0x240>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9a      	lsrs	r2, r3, #18
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	40012000 	.word	0x40012000
 8002224:	20000000 	.word	0x20000000
 8002228:	431bde83 	.word	0x431bde83

0800222c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002234:	4b79      	ldr	r3, [pc, #484]	@ (800241c <ADC_Init+0x1f0>)
 8002236:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	021a      	lsls	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022be:	4a58      	ldr	r2, [pc, #352]	@ (8002420 <ADC_Init+0x1f4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d022      	beq.n	800230a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e00f      	b.n	800232a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002328:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0202 	bic.w	r2, r2, #2
 8002338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7e1b      	ldrb	r3, [r3, #24]
 8002344:	005a      	lsls	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01b      	beq.n	8002390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002366:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6859      	ldr	r1, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	035a      	lsls	r2, r3, #13
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e007      	b.n	80023a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	051a      	lsls	r2, r3, #20
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6899      	ldr	r1, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023e2:	025a      	lsls	r2, r3, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	029a      	lsls	r2, r3, #10
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40012300 	.word	0x40012300
 8002420:	0f000001 	.word	0x0f000001

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	@ (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4907      	ldr	r1, [pc, #28]	@ (80024c0 <__NVIC_EnableIRQ+0x38>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	@ (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	@ 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	@ 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	@ (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff8e 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff29 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ec:	f7ff ff3e 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff8e 	bl	8002518 <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5d 	bl	80024c4 <__NVIC_SetPriority>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff31 	bl	8002488 <__NVIC_EnableIRQ>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffa2 	bl	8002580 <SysTick_Config>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff fc54 	bl	8001f00 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e099      	b.n	8002798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002684:	e00f      	b.n	80026a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002686:	f7ff fc3b 	bl	8001f00 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b05      	cmp	r3, #5
 8002692:	d908      	bls.n	80026a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e078      	b.n	8002798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e8      	bne.n	8002686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4b38      	ldr	r3, [pc, #224]	@ (80027a0 <HAL_DMA_Init+0x158>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d107      	bne.n	8002710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	4313      	orrs	r3, r2
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f023 0307 	bic.w	r3, r3, #7
 8002726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	2b04      	cmp	r3, #4
 8002738:	d117      	bne.n	800276a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb1b 	bl	8002d88 <DMA_CheckFifoParam>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2240      	movs	r2, #64	@ 0x40
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002766:	2301      	movs	r3, #1
 8002768:	e016      	b.n	8002798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fad2 	bl	8002d1c <DMA_CalcBaseAndBitshift>
 8002778:	4603      	mov	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002780:	223f      	movs	r2, #63	@ 0x3f
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	f010803f 	.word	0xf010803f

080027a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_DMA_Start_IT+0x26>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e040      	b.n	800284c <HAL_DMA_Start_IT+0xa8>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d12f      	bne.n	800283e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2202      	movs	r2, #2
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fa64 	bl	8002cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	223f      	movs	r2, #63	@ 0x3f
 80027fe:	409a      	lsls	r2, r3
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0216 	orr.w	r2, r2, #22
 8002812:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0208 	orr.w	r2, r2, #8
 800282a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e005      	b.n	800284a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002862:	f7ff fb4d 	bl	8001f00 <HAL_GetTick>
 8002866:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d008      	beq.n	8002886 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e052      	b.n	800292c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0216 	bic.w	r2, r2, #22
 8002894:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_DMA_Abort+0x62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0208 	bic.w	r2, r2, #8
 80028c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d6:	e013      	b.n	8002900 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028d8:	f7ff fb12 	bl	8001f00 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d90c      	bls.n	8002900 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e015      	b.n	800292c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1e4      	bne.n	80028d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002912:	223f      	movs	r2, #63	@ 0x3f
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d004      	beq.n	8002952 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00c      	b.n	800296c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2205      	movs	r2, #5
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002984:	4b8e      	ldr	r3, [pc, #568]	@ (8002bc0 <HAL_DMA_IRQHandler+0x248>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a8e      	ldr	r2, [pc, #568]	@ (8002bc4 <HAL_DMA_IRQHandler+0x24c>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a9b      	lsrs	r3, r3, #10
 8002990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	2208      	movs	r2, #8
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01a      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0204 	bic.w	r2, r2, #4
 80029ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	2208      	movs	r2, #8
 80029d2:	409a      	lsls	r2, r3
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	f043 0201 	orr.w	r2, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e8:	2201      	movs	r2, #1
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d012      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	2201      	movs	r2, #1
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	2204      	movs	r2, #4
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f043 0204 	orr.w	r2, r3, #4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a54:	2210      	movs	r2, #16
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d043      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03c      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a72:	2210      	movs	r2, #16
 8002a74:	409a      	lsls	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d024      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
 8002aa6:	e01f      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
 8002ab8:	e016      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0208 	bic.w	r2, r2, #8
 8002ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aec:	2220      	movs	r2, #32
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 808f 	beq.w	8002c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8087 	beq.w	8002c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	2220      	movs	r2, #32
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d136      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0216 	bic.w	r2, r2, #22
 8002b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <HAL_DMA_IRQHandler+0x1da>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d007      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0208 	bic.w	r2, r2, #8
 8002b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	223f      	movs	r2, #63	@ 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d07e      	beq.n	8002c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
        }
        return;
 8002b8e:	e079      	b.n	8002c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4798      	blx	r3
 8002bbc:	e02c      	b.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e01e      	b.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10f      	bne.n	8002c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0210 	bic.w	r2, r2, #16
 8002bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d032      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2205      	movs	r2, #5
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3301      	adds	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d307      	bcc.n	8002c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f2      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x2cc>
 8002c5e:	e000      	b.n	8002c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	e000      	b.n	8002c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c84:	bf00      	nop
    }
  }
}
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c9a:	b2db      	uxtb	r3, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b40      	cmp	r3, #64	@ 0x40
 8002cec:	d108      	bne.n	8002d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cfe:	e007      	b.n	8002d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	3b10      	subs	r3, #16
 8002d2c:	4a14      	ldr	r2, [pc, #80]	@ (8002d80 <DMA_CalcBaseAndBitshift+0x64>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d36:	4a13      	ldr	r2, [pc, #76]	@ (8002d84 <DMA_CalcBaseAndBitshift+0x68>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d909      	bls.n	8002d5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	1d1a      	adds	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d5c:	e007      	b.n	8002d6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	aaaaaaab 	.word	0xaaaaaaab
 8002d84:	0800950c 	.word	0x0800950c

08002d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11f      	bne.n	8002de2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d856      	bhi.n	8002e56 <DMA_CheckFifoParam+0xce>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <DMA_CheckFifoParam+0x28>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dd3 	.word	0x08002dd3
 8002db8:	08002dc1 	.word	0x08002dc1
 8002dbc:	08002e57 	.word	0x08002e57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d046      	beq.n	8002e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd0:	e043      	b.n	8002e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002dda:	d140      	bne.n	8002e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de0:	e03d      	b.n	8002e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dea:	d121      	bne.n	8002e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d837      	bhi.n	8002e62 <DMA_CheckFifoParam+0xda>
 8002df2:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <DMA_CheckFifoParam+0x70>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e0f 	.word	0x08002e0f
 8002e00:	08002e09 	.word	0x08002e09
 8002e04:	08002e21 	.word	0x08002e21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e030      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d025      	beq.n	8002e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1e:	e022      	b.n	8002e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e28:	d11f      	bne.n	8002e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e2e:	e01c      	b.n	8002e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d903      	bls.n	8002e3e <DMA_CheckFifoParam+0xb6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e3c:	e018      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
      break;
 8002e42:	e015      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e00b      	b.n	8002e6e <DMA_CheckFifoParam+0xe6>
      break;
 8002e56:	bf00      	nop
 8002e58:	e00a      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e008      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e006      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
 8002e64:	e004      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	@ 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e159      	b.n	8003150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	f040 8148 	bne.w	800314a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d130      	bne.n	8002f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2203      	movs	r2, #3
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f08:	2201      	movs	r2, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 0201 	and.w	r2, r3, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d017      	beq.n	8002f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d123      	bne.n	8002fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	220f      	movs	r2, #15
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	08da      	lsrs	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3208      	adds	r2, #8
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	2203      	movs	r2, #3
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0203 	and.w	r2, r3, #3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a2 	beq.w	800314a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b57      	ldr	r3, [pc, #348]	@ (8003168 <HAL_GPIO_Init+0x2e8>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	4a56      	ldr	r2, [pc, #344]	@ (8003168 <HAL_GPIO_Init+0x2e8>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003014:	6453      	str	r3, [r2, #68]	@ 0x44
 8003016:	4b54      	ldr	r3, [pc, #336]	@ (8003168 <HAL_GPIO_Init+0x2e8>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003022:	4a52      	ldr	r2, [pc, #328]	@ (800316c <HAL_GPIO_Init+0x2ec>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a49      	ldr	r2, [pc, #292]	@ (8003170 <HAL_GPIO_Init+0x2f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d019      	beq.n	8003082 <HAL_GPIO_Init+0x202>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a48      	ldr	r2, [pc, #288]	@ (8003174 <HAL_GPIO_Init+0x2f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d013      	beq.n	800307e <HAL_GPIO_Init+0x1fe>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a47      	ldr	r2, [pc, #284]	@ (8003178 <HAL_GPIO_Init+0x2f8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00d      	beq.n	800307a <HAL_GPIO_Init+0x1fa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a46      	ldr	r2, [pc, #280]	@ (800317c <HAL_GPIO_Init+0x2fc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <HAL_GPIO_Init+0x1f6>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a45      	ldr	r2, [pc, #276]	@ (8003180 <HAL_GPIO_Init+0x300>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_GPIO_Init+0x1f2>
 800306e:	2304      	movs	r3, #4
 8003070:	e008      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003072:	2307      	movs	r3, #7
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003076:	2303      	movs	r3, #3
 8003078:	e004      	b.n	8003084 <HAL_GPIO_Init+0x204>
 800307a:	2302      	movs	r3, #2
 800307c:	e002      	b.n	8003084 <HAL_GPIO_Init+0x204>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x204>
 8003082:	2300      	movs	r3, #0
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	f002 0203 	and.w	r2, r2, #3
 800308a:	0092      	lsls	r2, r2, #2
 800308c:	4093      	lsls	r3, r2
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003094:	4935      	ldr	r1, [pc, #212]	@ (800316c <HAL_GPIO_Init+0x2ec>)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3302      	adds	r3, #2
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030a2:	4b38      	ldr	r3, [pc, #224]	@ (8003184 <HAL_GPIO_Init+0x304>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003184 <HAL_GPIO_Init+0x304>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003184 <HAL_GPIO_Init+0x304>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030f0:	4a24      	ldr	r2, [pc, #144]	@ (8003184 <HAL_GPIO_Init+0x304>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030f6:	4b23      	ldr	r3, [pc, #140]	@ (8003184 <HAL_GPIO_Init+0x304>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800311a:	4a1a      	ldr	r2, [pc, #104]	@ (8003184 <HAL_GPIO_Init+0x304>)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003120:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <HAL_GPIO_Init+0x304>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003144:	4a0f      	ldr	r2, [pc, #60]	@ (8003184 <HAL_GPIO_Init+0x304>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3301      	adds	r3, #1
 800314e:	61fb      	str	r3, [r7, #28]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	f67f aea2 	bls.w	8002e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3724      	adds	r7, #36	@ 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40013800 	.word	0x40013800
 8003170:	40020000 	.word	0x40020000
 8003174:	40020400 	.word	0x40020400
 8003178:	40020800 	.word	0x40020800
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40021000 	.word	0x40021000
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	807b      	strh	r3, [r7, #2]
 8003194:	4613      	mov	r3, r2
 8003196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003198:	787b      	ldrb	r3, [r7, #1]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031a4:	e003      	b.n	80031ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a6:	887b      	ldrh	r3, [r7, #2]
 80031a8:	041a      	lsls	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e12b      	b.n	8003426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fd fb90 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800320e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800321e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003220:	f002 fe7c 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8003224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a81      	ldr	r2, [pc, #516]	@ (8003430 <HAL_I2C_Init+0x274>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d807      	bhi.n	8003240 <HAL_I2C_Init+0x84>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a80      	ldr	r2, [pc, #512]	@ (8003434 <HAL_I2C_Init+0x278>)
 8003234:	4293      	cmp	r3, r2
 8003236:	bf94      	ite	ls
 8003238:	2301      	movls	r3, #1
 800323a:	2300      	movhi	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e006      	b.n	800324e <HAL_I2C_Init+0x92>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a7d      	ldr	r2, [pc, #500]	@ (8003438 <HAL_I2C_Init+0x27c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	bf94      	ite	ls
 8003248:	2301      	movls	r3, #1
 800324a:	2300      	movhi	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0e7      	b.n	8003426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a78      	ldr	r2, [pc, #480]	@ (800343c <HAL_I2C_Init+0x280>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0c9b      	lsrs	r3, r3, #18
 8003260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a6a      	ldr	r2, [pc, #424]	@ (8003430 <HAL_I2C_Init+0x274>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d802      	bhi.n	8003290 <HAL_I2C_Init+0xd4>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3301      	adds	r3, #1
 800328e:	e009      	b.n	80032a4 <HAL_I2C_Init+0xe8>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a69      	ldr	r2, [pc, #420]	@ (8003440 <HAL_I2C_Init+0x284>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	3301      	adds	r3, #1
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	495c      	ldr	r1, [pc, #368]	@ (8003430 <HAL_I2C_Init+0x274>)
 80032c0:	428b      	cmp	r3, r1
 80032c2:	d819      	bhi.n	80032f8 <HAL_I2C_Init+0x13c>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e59      	subs	r1, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d2:	1c59      	adds	r1, r3, #1
 80032d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032d8:	400b      	ands	r3, r1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_I2C_Init+0x138>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1e59      	subs	r1, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	e051      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f4:	2304      	movs	r3, #4
 80032f6:	e04f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d111      	bne.n	8003324 <HAL_I2C_Init+0x168>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e012      	b.n	800334a <HAL_I2C_Init+0x18e>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1e58      	subs	r0, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	0099      	lsls	r1, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	fbb0 f3f3 	udiv	r3, r0, r3
 800333a:	3301      	adds	r3, #1
 800333c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x196>
 800334e:	2301      	movs	r3, #1
 8003350:	e022      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <HAL_I2C_Init+0x1bc>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1e58      	subs	r0, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6859      	ldr	r1, [r3, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	440b      	add	r3, r1
 8003368:	fbb0 f3f3 	udiv	r3, r0, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003372:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003376:	e00f      	b.n	8003398 <HAL_I2C_Init+0x1dc>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1e58      	subs	r0, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	0099      	lsls	r1, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	fbb0 f3f3 	udiv	r3, r0, r3
 800338e:	3301      	adds	r3, #1
 8003390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003394:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	6809      	ldr	r1, [r1, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6911      	ldr	r1, [r2, #16]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68d2      	ldr	r2, [r2, #12]
 80033d2:	4311      	orrs	r1, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	000186a0 	.word	0x000186a0
 8003434:	001e847f 	.word	0x001e847f
 8003438:	003d08ff 	.word	0x003d08ff
 800343c:	431bde83 	.word	0x431bde83
 8003440:	10624dd3 	.word	0x10624dd3

08003444 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003456:	2b80      	cmp	r3, #128	@ 0x80
 8003458:	d103      	bne.n	8003462 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	461a      	mov	r2, r3
 800347c:	460b      	mov	r3, r1
 800347e:	817b      	strh	r3, [r7, #10]
 8003480:	4613      	mov	r3, r2
 8003482:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	f040 8109 	bne.w	80036a8 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003496:	4b87      	ldr	r3, [pc, #540]	@ (80036b4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	08db      	lsrs	r3, r3, #3
 800349c:	4a86      	ldr	r2, [pc, #536]	@ (80036b8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	0a1a      	lsrs	r2, r3, #8
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009a      	lsls	r2, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d112      	bne.n	80034e2 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	e0e3      	b.n	80036aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d0df      	beq.n	80034b0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2C_Master_Transmit_DMA+0x8e>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0d5      	b.n	80036aa <HAL_I2C_Master_Transmit_DMA+0x23a>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2221      	movs	r2, #33	@ 0x21
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2210      	movs	r2, #16
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	893a      	ldrh	r2, [r7, #8]
 8003554:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a56      	ldr	r2, [pc, #344]	@ (80036bc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003566:	897a      	ldrh	r2, [r7, #10]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d07b      	beq.n	800366c <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02a      	beq.n	80035d2 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003580:	4a4f      	ldr	r2, [pc, #316]	@ (80036c0 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003582:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003588:	4a4e      	ldr	r2, [pc, #312]	@ (80036c4 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800358a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003590:	2200      	movs	r2, #0
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	2200      	movs	r2, #0
 80035a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a8:	2200      	movs	r2, #0
 80035aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	4619      	mov	r1, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3310      	adds	r3, #16
 80035bc:	461a      	mov	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c2:	f7ff f8ef 	bl	80027a4 <HAL_DMA_Start_IT>
 80035c6:	4603      	mov	r3, r0
 80035c8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80035ca:	7dfb      	ldrb	r3, [r7, #23]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d139      	bne.n	8003644 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80035d0:	e013      	b.n	80035fa <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e057      	b.n	80036aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003610:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003620:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003630:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e02f      	b.n	80036a4 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01e      	b.n	80036aa <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800367a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800368a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80036a2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000
 80036b8:	14f8b589 	.word	0x14f8b589
 80036bc:	ffff0000 	.word	0xffff0000
 80036c0:	080050fd 	.word	0x080050fd
 80036c4:	080052bb 	.word	0x080052bb

080036c8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	@ 0x28
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	460b      	mov	r3, r1
 80036d6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7fe fc12 	bl	8001f00 <HAL_GetTick>
 80036dc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	f040 8111 	bne.w	8003912 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2319      	movs	r3, #25
 80036f6:	2201      	movs	r2, #1
 80036f8:	4988      	ldr	r1, [pc, #544]	@ (800391c <HAL_I2C_IsDeviceReady+0x254>)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f001 fec2 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003706:	2302      	movs	r3, #2
 8003708:	e104      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_I2C_IsDeviceReady+0x50>
 8003714:	2302      	movs	r3, #2
 8003716:	e0fd      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d007      	beq.n	800373e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2224      	movs	r2, #36	@ 0x24
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a70      	ldr	r2, [pc, #448]	@ (8003920 <HAL_I2C_IsDeviceReady+0x258>)
 8003760:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2200      	movs	r2, #0
 800377a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f001 fe80 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00d      	beq.n	80037a6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003798:	d103      	bne.n	80037a2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037a0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0b6      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037b4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037b6:	f7fe fba3 	bl	8001f00 <HAL_GetTick>
 80037ba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e0:	bf0c      	ite	eq
 80037e2:	2301      	moveq	r3, #1
 80037e4:	2300      	movne	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ea:	e025      	b.n	8003838 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037ec:	f7fe fb88 	bl	8001f00 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d302      	bcc.n	8003802 <HAL_I2C_IsDeviceReady+0x13a>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	22a0      	movs	r2, #160	@ 0xa0
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b02      	cmp	r3, #2
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2ba0      	cmp	r3, #160	@ 0xa0
 8003842:	d005      	beq.n	8003850 <HAL_I2C_IsDeviceReady+0x188>
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_I2C_IsDeviceReady+0x188>
 800384a:	7dbb      	ldrb	r3, [r7, #22]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0cd      	beq.n	80037ec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d129      	bne.n	80038ba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003874:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2319      	movs	r3, #25
 8003892:	2201      	movs	r2, #1
 8003894:	4921      	ldr	r1, [pc, #132]	@ (800391c <HAL_I2C_IsDeviceReady+0x254>)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f001 fdf4 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e036      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e02c      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038d2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	2319      	movs	r3, #25
 80038da:	2201      	movs	r2, #1
 80038dc:	490f      	ldr	r1, [pc, #60]	@ (800391c <HAL_I2C_IsDeviceReady+0x254>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 fdd0 	bl	8005484 <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e012      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	3301      	adds	r3, #1
 80038f2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f4ff af32 	bcc.w	8003762 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	00100002 	.word	0x00100002
 8003920:	ffff0000 	.word	0xffff0000

08003924 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003944:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800394c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b10      	cmp	r3, #16
 8003952:	d003      	beq.n	800395c <HAL_I2C_EV_IRQHandler+0x38>
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	f040 80b1 	bne.w	8003abe <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_I2C_EV_IRQHandler+0x6e>
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800397c:	d003      	beq.n	8003986 <HAL_I2C_EV_IRQHandler+0x62>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003984:	d101      	bne.n	800398a <HAL_I2C_EV_IRQHandler+0x66>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_I2C_EV_IRQHandler+0x68>
 800398a:	2300      	movs	r3, #0
 800398c:	2b01      	cmp	r3, #1
 800398e:	f000 8114 	beq.w	8003bba <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <HAL_I2C_EV_IRQHandler+0x90>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d006      	beq.n	80039b4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f001 fe18 	bl	80055dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fd88 	bl	80044c2 <I2C_Master_SB>
 80039b2:	e083      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0xac>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fe00 	bl	80045ce <I2C_Master_ADD10>
 80039ce:	e075      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xc8>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fe1c 	bl	8004622 <I2C_Master_ADDR>
 80039ea:	e067      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a04:	f000 80db 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <HAL_I2C_EV_IRQHandler+0x10a>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_I2C_EV_IRQHandler+0x10a>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9e4 	bl	8003df4 <I2C_MasterTransmit_TXE>
 8003a2c:	e046      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80c2 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80bc 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a46:	7bbb      	ldrb	r3, [r7, #14]
 8003a48:	2b21      	cmp	r3, #33	@ 0x21
 8003a4a:	d103      	bne.n	8003a54 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa6d 	bl	8003f2c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a52:	e0b4      	b.n	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	f040 80b1 	bne.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fadb 	bl	8004018 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a62:	e0ac      	b.n	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a72:	f000 80a4 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00d      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x178>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_I2C_EV_IRQHandler+0x178>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fb57 	bl	8004148 <I2C_MasterReceive_RXNE>
 8003a9a:	e00f      	b.n	8003abc <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 808b 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8085 	beq.w	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fc0f 	bl	80042d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aba:	e080      	b.n	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
 8003abc:	e07f      	b.n	8003bbe <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d004      	beq.n	8003ad0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e007      	b.n	8003ae0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d011      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x1ea>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00c      	beq.n	8003b0e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b04:	69b9      	ldr	r1, [r7, #24]
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 ffda 	bl	8004ac0 <I2C_Slave_ADDR>
 8003b0c:	e05a      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x206>
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f001 f814 	bl	8004b50 <I2C_Slave_STOPF>
 8003b28:	e04c      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b2a:	7bbb      	ldrb	r3, [r7, #14]
 8003b2c:	2b21      	cmp	r3, #33	@ 0x21
 8003b2e:	d002      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x212>
 8003b30:	7bbb      	ldrb	r3, [r7, #14]
 8003b32:	2b29      	cmp	r3, #41	@ 0x29
 8003b34:	d120      	bne.n	8003b78 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x238>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_I2C_EV_IRQHandler+0x238>
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fef5 	bl	8004944 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b5a:	e032      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d02d      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x29e>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d028      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 ff24 	bl	80049be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b76:	e024      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x27a>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x27a>
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 ff32 	bl	8004a00 <I2C_SlaveReceive_RXNE>
 8003b9c:	e012      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ff62 	bl	8004a7c <I2C_SlaveReceive_BTF>
 8003bb8:	e004      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003bba:	bf00      	nop
 8003bbc:	e002      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bbe:	bf00      	nop
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b08a      	sub	sp, #40	@ 0x28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00d      	beq.n	8003c14 <HAL_I2C_ER_IRQHandler+0x4a>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d008      	beq.n	8003c14 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f043 0301 	orr.w	r3, r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x70>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	f043 0302 	orr.w	r3, r3, #2
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c38:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03e      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0xf8>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d039      	beq.n	8003cc2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003c4e:	7efb      	ldrb	r3, [r7, #27]
 8003c50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c68:	7ebb      	ldrb	r3, [r7, #26]
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d112      	bne.n	8003c94 <HAL_I2C_ER_IRQHandler+0xca>
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10f      	bne.n	8003c94 <HAL_I2C_ER_IRQHandler+0xca>
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b21      	cmp	r3, #33	@ 0x21
 8003c78:	d008      	beq.n	8003c8c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	2b29      	cmp	r3, #41	@ 0x29
 8003c7e:	d005      	beq.n	8003c8c <HAL_I2C_ER_IRQHandler+0xc2>
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	2b28      	cmp	r3, #40	@ 0x28
 8003c84:	d106      	bne.n	8003c94 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b21      	cmp	r3, #33	@ 0x21
 8003c8a:	d103      	bne.n	8003c94 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f001 f88f 	bl	8004db0 <I2C_Slave_AF>
 8003c92:	e016      	b.n	8003cc2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	f043 0304 	orr.w	r3, r3, #4
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ca6:	7efb      	ldrb	r3, [r7, #27]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d002      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0xe8>
 8003cac:	7efb      	ldrb	r3, [r7, #27]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d107      	bne.n	8003cc2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00d      	beq.n	8003ce8 <HAL_I2C_ER_IRQHandler+0x11e>
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ce6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f001 f8cc 	bl	8004e98 <I2C_ITError>
  }
}
 8003d00:	bf00      	nop
 8003d02:	3728      	adds	r7, #40	@ 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
 8003d64:	4613      	mov	r3, r2
 8003d66:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de6:	b2db      	uxtb	r3, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d150      	bne.n	8003ebc <I2C_MasterTransmit_TXE+0xc8>
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b21      	cmp	r3, #33	@ 0x21
 8003e1e:	d14d      	bne.n	8003ebc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d01d      	beq.n	8003e62 <I2C_MasterTransmit_TXE+0x6e>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d01a      	beq.n	8003e62 <I2C_MasterTransmit_TXE+0x6e>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e32:	d016      	beq.n	8003e62 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e42:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2211      	movs	r2, #17
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff54 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e60:	e060      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e70:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e80:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b40      	cmp	r3, #64	@ 0x40
 8003e9a:	d107      	bne.n	8003eac <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff6f 	bl	8003d88 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eaa:	e03b      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff27 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eba:	e033      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	2b21      	cmp	r3, #33	@ 0x21
 8003ec0:	d005      	beq.n	8003ece <I2C_MasterTransmit_TXE+0xda>
 8003ec2:	7bbb      	ldrb	r3, [r7, #14]
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d12d      	bne.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b22      	cmp	r3, #34	@ 0x22
 8003ecc:	d12a      	bne.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d108      	bne.n	8003eea <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ee8:	e01c      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b40      	cmp	r3, #64	@ 0x40
 8003ef4:	d103      	bne.n	8003efe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f88e 	bl	8004018 <I2C_MemoryTransmit_TXE_BTF>
}
 8003efc:	e012      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f22:	e7ff      	b.n	8003f24 <I2C_MasterTransmit_TXE+0x130>
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b21      	cmp	r3, #33	@ 0x21
 8003f44:	d164      	bne.n	8004010 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d012      	beq.n	8003f76 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	781a      	ldrb	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f74:	e04c      	b.n	8004010 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d01d      	beq.n	8003fb8 <I2C_MasterTransmit_BTF+0x8c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d01a      	beq.n	8003fb8 <I2C_MasterTransmit_BTF+0x8c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f88:	d016      	beq.n	8003fb8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f98:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2211      	movs	r2, #17
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fea9 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
}
 8003fb6:	e02b      	b.n	8004010 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fc6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d107      	bne.n	8004002 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fec4 	bl	8003d88 <HAL_I2C_MemTxCpltCallback>
}
 8004000:	e006      	b.n	8004010 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe7c 	bl	8003d08 <HAL_I2C_MasterTxCpltCallback>
}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004026:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11d      	bne.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d10b      	bne.n	8004050 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403c:	b2da      	uxtb	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800404e:	e077      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004054:	b29b      	uxth	r3, r3
 8004056:	121b      	asrs	r3, r3, #8
 8004058:	b2da      	uxtb	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800406a:	e069      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004070:	2b01      	cmp	r3, #1
 8004072:	d10b      	bne.n	800408c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004078:	b2da      	uxtb	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800408a:	e059      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	2b02      	cmp	r3, #2
 8004092:	d152      	bne.n	800413a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b22      	cmp	r3, #34	@ 0x22
 8004098:	d10d      	bne.n	80040b6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040b4:	e044      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d015      	beq.n	80040ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b21      	cmp	r3, #33	@ 0x21
 80040c4:	d112      	bne.n	80040ec <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	781a      	ldrb	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80040ea:	e029      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d124      	bne.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b21      	cmp	r3, #33	@ 0x21
 80040fa:	d121      	bne.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800410a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fe28 	bl	8003d88 <HAL_I2C_MemTxCpltCallback>
}
 8004138:	e002      	b.n	8004140 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff f982 	bl	8003444 <I2C_Flush_DR>
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b22      	cmp	r3, #34	@ 0x22
 800415a:	f040 80b9 	bne.w	80042d0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d921      	bls.n	80041b6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b03      	cmp	r3, #3
 80041a0:	f040 8096 	bne.w	80042d0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80041b4:	e08c      	b.n	80042d0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d07f      	beq.n	80042be <I2C_MasterReceive_RXNE+0x176>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d002      	beq.n	80041ca <I2C_MasterReceive_RXNE+0x82>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d179      	bne.n	80042be <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f001 f9d4 	bl	8005578 <I2C_WaitOnSTOPRequestThroughIT>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d14c      	bne.n	8004270 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b40      	cmp	r3, #64	@ 0x40
 800422e:	d10a      	bne.n	8004246 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fdac 	bl	8003d9c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004244:	e044      	b.n	80042d0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d002      	beq.n	800425a <I2C_MasterReceive_RXNE+0x112>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b20      	cmp	r3, #32
 8004258:	d103      	bne.n	8004262 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004260:	e002      	b.n	8004268 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2212      	movs	r2, #18
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fd57 	bl	8003d1c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800426e:	e02f      	b.n	80042d0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff fd7a 	bl	8003db0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042bc:	e008      	b.n	80042d0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042cc:	605a      	str	r2, [r3, #4]
}
 80042ce:	e7ff      	b.n	80042d0 <I2C_MasterReceive_RXNE+0x188>
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d11b      	bne.n	8004328 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004326:	e0c8      	b.n	80044ba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b03      	cmp	r3, #3
 8004330:	d129      	bne.n	8004386 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004340:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d00a      	beq.n	800435e <I2C_MasterReceive_BTF+0x86>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d007      	beq.n	800435e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800435c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004384:	e099      	b.n	80044ba <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	f040 8081 	bne.w	8004494 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <I2C_MasterReceive_BTF+0xc6>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b10      	cmp	r3, #16
 800439c:	d108      	bne.n	80043b0 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e019      	b.n	80043e4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d002      	beq.n	80043bc <I2C_MasterReceive_BTF+0xe4>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d108      	bne.n	80043ce <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e00a      	b.n	80043e4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d007      	beq.n	80043e4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800443e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d10a      	bne.n	800446a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fc9a 	bl	8003d9c <HAL_I2C_MemRxCpltCallback>
}
 8004468:	e027      	b.n	80044ba <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d002      	beq.n	800447e <I2C_MasterReceive_BTF+0x1a6>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b20      	cmp	r3, #32
 800447c:	d103      	bne.n	8004486 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
 8004484:	e002      	b.n	800448c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2212      	movs	r2, #18
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fc45 	bl	8003d1c <HAL_I2C_MasterRxCpltCallback>
}
 8004492:	e012      	b.n	80044ba <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d117      	bne.n	8004506 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044ee:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80044f0:	e067      	b.n	80045c2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
}
 8004504:	e05d      	b.n	80045c2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800450e:	d133      	bne.n	8004578 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b21      	cmp	r3, #33	@ 0x21
 800451a:	d109      	bne.n	8004530 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800452c:	611a      	str	r2, [r3, #16]
 800452e:	e008      	b.n	8004542 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <I2C_Master_SB+0x92>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	2b00      	cmp	r3, #0
 800455a:	d032      	beq.n	80045c2 <I2C_Master_SB+0x100>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d02d      	beq.n	80045c2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004574:	605a      	str	r2, [r3, #4]
}
 8004576:	e024      	b.n	80045c2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10e      	bne.n	800459e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004584:	b29b      	uxth	r3, r3
 8004586:	11db      	asrs	r3, r3, #7
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0306 	and.w	r3, r3, #6
 800458e:	b2db      	uxtb	r3, r3
 8004590:	f063 030f 	orn	r3, r3, #15
 8004594:	b2da      	uxtb	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]
}
 800459c:	e011      	b.n	80045c2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10d      	bne.n	80045c2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	11db      	asrs	r3, r3, #7
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 0306 	and.w	r3, r3, #6
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f063 030e 	orn	r3, r3, #14
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	611a      	str	r2, [r3, #16]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d004      	beq.n	80045f4 <I2C_Master_ADD10+0x26>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00c      	beq.n	8004616 <I2C_Master_ADD10+0x48>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d007      	beq.n	8004616 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004614:	605a      	str	r2, [r3, #4]
  }
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004622:	b480      	push	{r7}
 8004624:	b091      	sub	sp, #68	@ 0x44
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004630:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b22      	cmp	r3, #34	@ 0x22
 800464a:	f040 8169 	bne.w	8004920 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <I2C_Master_ADDR+0x54>
 8004656:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d10b      	bne.n	8004676 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	633b      	str	r3, [r7, #48]	@ 0x30
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	e160      	b.n	8004938 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11d      	bne.n	80046ba <I2C_Master_ADDR+0x98>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004686:	d118      	bne.n	80046ba <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	2300      	movs	r3, #0
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ac:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80046b8:	e13e      	b.n	8004938 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c4:	2300      	movs	r3, #0
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e115      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	f040 808a 	bne.w	800480c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80046f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fe:	d137      	bne.n	8004770 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800471e:	d113      	bne.n	8004748 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	@ 0x24
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	e0e7      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004748:	2300      	movs	r3, #0
 800474a:	623b      	str	r3, [r7, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	623b      	str	r3, [r7, #32]
 800475c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e0d3      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004772:	2b08      	cmp	r3, #8
 8004774:	d02e      	beq.n	80047d4 <I2C_Master_ADDR+0x1b2>
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	2b20      	cmp	r3, #32
 800477a:	d02b      	beq.n	80047d4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477e:	2b12      	cmp	r3, #18
 8004780:	d102      	bne.n	8004788 <I2C_Master_ADDR+0x166>
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d125      	bne.n	80047d4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	2b04      	cmp	r3, #4
 800478c:	d00e      	beq.n	80047ac <I2C_Master_ADDR+0x18a>
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2b02      	cmp	r3, #2
 8004792:	d00b      	beq.n	80047ac <I2C_Master_ADDR+0x18a>
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b10      	cmp	r3, #16
 8004798:	d008      	beq.n	80047ac <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	e007      	b.n	80047bc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ba:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	e0a1      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e085      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d14d      	bne.n	80048b2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004818:	2b04      	cmp	r3, #4
 800481a:	d016      	beq.n	800484a <I2C_Master_ADDR+0x228>
 800481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481e:	2b02      	cmp	r3, #2
 8004820:	d013      	beq.n	800484a <I2C_Master_ADDR+0x228>
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	2b10      	cmp	r3, #16
 8004826:	d010      	beq.n	800484a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004836:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e007      	b.n	800485a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004858:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004868:	d117      	bne.n	800489a <I2C_Master_ADDR+0x278>
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004870:	d00b      	beq.n	800488a <I2C_Master_ADDR+0x268>
 8004872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004874:	2b01      	cmp	r3, #1
 8004876:	d008      	beq.n	800488a <I2C_Master_ADDR+0x268>
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	2b08      	cmp	r3, #8
 800487c:	d005      	beq.n	800488a <I2C_Master_ADDR+0x268>
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004880:	2b10      	cmp	r3, #16
 8004882:	d002      	beq.n	800488a <I2C_Master_ADDR+0x268>
 8004884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004886:	2b20      	cmp	r3, #32
 8004888:	d107      	bne.n	800489a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004898:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	e032      	b.n	8004918 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048c0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d0:	d117      	bne.n	8004902 <I2C_Master_ADDR+0x2e0>
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048d8:	d00b      	beq.n	80048f2 <I2C_Master_ADDR+0x2d0>
 80048da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d008      	beq.n	80048f2 <I2C_Master_ADDR+0x2d0>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d005      	beq.n	80048f2 <I2C_Master_ADDR+0x2d0>
 80048e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d002      	beq.n	80048f2 <I2C_Master_ADDR+0x2d0>
 80048ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d107      	bne.n	8004902 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004900:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800491e:	e00b      	b.n	8004938 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	e7ff      	b.n	8004938 <I2C_Master_ADDR+0x316>
 8004938:	bf00      	nop
 800493a:	3744      	adds	r7, #68	@ 0x44
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004952:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02b      	beq.n	80049b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d114      	bne.n	80049b6 <I2C_SlaveTransmit_TXE+0x72>
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b29      	cmp	r3, #41	@ 0x29
 8004990:	d111      	bne.n	80049b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2221      	movs	r2, #33	@ 0x21
 80049a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2228      	movs	r2, #40	@ 0x28
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff f9bd 	bl	8003d30 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d4:	781a      	ldrb	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02c      	beq.n	8004a74 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d114      	bne.n	8004a74 <I2C_SlaveReceive_RXNE+0x74>
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a4e:	d111      	bne.n	8004a74 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2222      	movs	r2, #34	@ 0x22
 8004a64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2228      	movs	r2, #40	@ 0x28
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff f968 	bl	8003d44 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ada:	2b28      	cmp	r3, #40	@ 0x28
 8004adc:	d125      	bne.n	8004b2a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	81bb      	strh	r3, [r7, #12]
 8004b0c:	e002      	b.n	8004b14 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b1c:	89ba      	ldrh	r2, [r7, #12]
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff f918 	bl	8003d58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b28:	e00e      	b.n	8004b48 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	60bb      	str	r3, [r7, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bac:	d172      	bne.n	8004c94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b22      	cmp	r3, #34	@ 0x22
 8004bb2:	d002      	beq.n	8004bba <I2C_Slave_STOPF+0x6a>
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bb8:	d135      	bne.n	8004c26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f043 0204 	orr.w	r2, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe f84a 	bl	8002c8c <HAL_DMA_GetState>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d049      	beq.n	8004c92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c02:	4a69      	ldr	r2, [pc, #420]	@ (8004da8 <I2C_Slave_STOPF+0x258>)
 8004c04:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fd fe92 	bl	8002934 <HAL_DMA_Abort_IT>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03d      	beq.n	8004c92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c24:	e035      	b.n	8004c92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f043 0204 	orr.w	r2, r3, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe f814 	bl	8002c8c <HAL_DMA_GetState>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d014      	beq.n	8004c94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004da8 <I2C_Slave_STOPF+0x258>)
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fd fe5c 	bl	8002934 <HAL_DMA_Abort_IT>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4798      	blx	r3
 8004c90:	e000      	b.n	8004c94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d03e      	beq.n	8004d1c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d112      	bne.n	8004cd2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d112      	bne.n	8004d06 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8b7 	bl	8004e98 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d2a:	e039      	b.n	8004da0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d30:	d109      	bne.n	8004d46 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2228      	movs	r2, #40	@ 0x28
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fe ffff 	bl	8003d44 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b28      	cmp	r3, #40	@ 0x28
 8004d50:	d111      	bne.n	8004d76 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a15      	ldr	r2, [pc, #84]	@ (8004dac <I2C_Slave_STOPF+0x25c>)
 8004d56:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff f800 	bl	8003d74 <HAL_I2C_ListenCpltCallback>
}
 8004d74:	e014      	b.n	8004da0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	2b22      	cmp	r3, #34	@ 0x22
 8004d7c:	d002      	beq.n	8004d84 <I2C_Slave_STOPF+0x234>
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b22      	cmp	r3, #34	@ 0x22
 8004d82:	d10d      	bne.n	8004da0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fe ffd2 	bl	8003d44 <HAL_I2C_SlaveRxCpltCallback>
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	08005335 	.word	0x08005335
 8004dac:	ffff0000 	.word	0xffff0000

08004db0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d002      	beq.n	8004dd2 <I2C_Slave_AF+0x22>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d129      	bne.n	8004e26 <I2C_Slave_AF+0x76>
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b28      	cmp	r3, #40	@ 0x28
 8004dd6:	d126      	bne.n	8004e26 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <I2C_Slave_AF+0xe4>)
 8004ddc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e06:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fe ffa8 	bl	8003d74 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e24:	e031      	b.n	8004e8a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b21      	cmp	r3, #33	@ 0x21
 8004e2a:	d129      	bne.n	8004e80 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	@ (8004e94 <I2C_Slave_AF+0xe4>)
 8004e30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2221      	movs	r2, #33	@ 0x21
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e56:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e60:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e70:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fe fae6 	bl	8003444 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7fe ff59 	bl	8003d30 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e7e:	e004      	b.n	8004e8a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e88:	615a      	str	r2, [r3, #20]
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	ffff0000 	.word	0xffff0000

08004e98 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d002      	beq.n	8004ebc <I2C_ITError+0x24>
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d10a      	bne.n	8004ed2 <I2C_ITError+0x3a>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b22      	cmp	r3, #34	@ 0x22
 8004ec0:	d107      	bne.n	8004ed2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ed8:	2b28      	cmp	r3, #40	@ 0x28
 8004eda:	d107      	bne.n	8004eec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2228      	movs	r2, #40	@ 0x28
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004eea:	e015      	b.n	8004f18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efa:	d00a      	beq.n	8004f12 <I2C_ITError+0x7a>
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b60      	cmp	r3, #96	@ 0x60
 8004f00:	d007      	beq.n	8004f12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f26:	d162      	bne.n	8004fee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d020      	beq.n	8004f88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80050f4 <I2C_ITError+0x25c>)
 8004f4c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fcee 	bl	8002934 <HAL_DMA_Abort_IT>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 8089 	beq.w	8005072 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f82:	4610      	mov	r0, r2
 8004f84:	4798      	blx	r3
 8004f86:	e074      	b.n	8005072 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	4a59      	ldr	r2, [pc, #356]	@ (80050f4 <I2C_ITError+0x25c>)
 8004f8e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd fccd 	bl	8002934 <HAL_DMA_Abort_IT>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d068      	beq.n	8005072 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d10b      	bne.n	8004fc6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4798      	blx	r3
 8004fec:	e041      	b.n	8005072 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b60      	cmp	r3, #96	@ 0x60
 8004ff8:	d125      	bne.n	8005046 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d10b      	bne.n	800502e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fe fec0 	bl	8003dc4 <HAL_I2C_AbortCpltCallback>
 8005044:	e015      	b.n	8005072 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005050:	2b40      	cmp	r3, #64	@ 0x40
 8005052:	d10b      	bne.n	800506c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7fe fe9f 	bl	8003db0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10e      	bne.n	80050a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800509c:	2b00      	cmp	r3, #0
 800509e:	d007      	beq.n	80050b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d113      	bne.n	80050ec <I2C_ITError+0x254>
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b28      	cmp	r3, #40	@ 0x28
 80050c8:	d110      	bne.n	80050ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a0a      	ldr	r2, [pc, #40]	@ (80050f8 <I2C_ITError+0x260>)
 80050ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fe fe44 	bl	8003d74 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	08005335 	.word	0x08005335
 80050f8:	ffff0000 	.word	0xffff0000

080050fc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005110:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005118:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800512e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513c:	2200      	movs	r2, #0
 800513e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514c:	2200      	movs	r2, #0
 800514e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005156:	2b21      	cmp	r3, #33	@ 0x21
 8005158:	d007      	beq.n	800516a <I2C_DMAXferCplt+0x6e>
 800515a:	7cfb      	ldrb	r3, [r7, #19]
 800515c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005160:	2b22      	cmp	r3, #34	@ 0x22
 8005162:	d131      	bne.n	80051c8 <I2C_DMAXferCplt+0xcc>
 8005164:	7cbb      	ldrb	r3, [r7, #18]
 8005166:	2b20      	cmp	r3, #32
 8005168:	d12e      	bne.n	80051c8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005178:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b29      	cmp	r3, #41	@ 0x29
 8005184:	d10a      	bne.n	800519c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2221      	movs	r2, #33	@ 0x21
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2228      	movs	r2, #40	@ 0x28
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	f7fe fdcb 	bl	8003d30 <HAL_I2C_SlaveTxCpltCallback>
 800519a:	e00c      	b.n	80051b6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b2a      	cmp	r3, #42	@ 0x2a
 80051a0:	d109      	bne.n	80051b6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2222      	movs	r2, #34	@ 0x22
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2228      	movs	r2, #40	@ 0x28
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051b0:	6978      	ldr	r0, [r7, #20]
 80051b2:	f7fe fdc7 	bl	8003d44 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051c6:	e074      	b.n	80052b2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d06e      	beq.n	80052b2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d107      	bne.n	80051ee <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ec:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80051fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005204:	d009      	beq.n	800521a <I2C_DMAXferCplt+0x11e>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d006      	beq.n	800521a <I2C_DMAXferCplt+0x11e>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005212:	d002      	beq.n	800521a <I2C_DMAXferCplt+0x11e>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d107      	bne.n	800522a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005228:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005238:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005248:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2200      	movs	r2, #0
 800524e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f7fe fda9 	bl	8003db0 <HAL_I2C_ErrorCallback>
}
 800525e:	e028      	b.n	80052b2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b40      	cmp	r3, #64	@ 0x40
 8005272:	d10a      	bne.n	800528a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005282:	6978      	ldr	r0, [r7, #20]
 8005284:	f7fe fd8a 	bl	8003d9c <HAL_I2C_MemRxCpltCallback>
}
 8005288:	e013      	b.n	80052b2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d002      	beq.n	800529e <I2C_DMAXferCplt+0x1a2>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b20      	cmp	r3, #32
 800529c:	d103      	bne.n	80052a6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80052a4:	e002      	b.n	80052ac <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2212      	movs	r2, #18
 80052aa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7fe fd35 	bl	8003d1c <HAL_I2C_MasterRxCpltCallback>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d4:	2200      	movs	r2, #0
 80052d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	2200      	movs	r2, #0
 80052e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fd fcdd 	bl	8002ca8 <HAL_DMA_GetError>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d01b      	beq.n	800532c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005302:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	f043 0210 	orr.w	r2, r3, #16
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7fe fd42 	bl	8003db0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005344:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800534e:	4b4b      	ldr	r3, [pc, #300]	@ (800547c <I2C_DMAAbort+0x148>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	08db      	lsrs	r3, r3, #3
 8005354:	4a4a      	ldr	r2, [pc, #296]	@ (8005480 <I2C_DMAAbort+0x14c>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0a1a      	lsrs	r2, r3, #8
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00da      	lsls	r2, r3, #3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800537a:	e00a      	b.n	8005392 <I2C_DMAAbort+0x5e>
    }
    count--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800538c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005390:	d0ea      	beq.n	8005368 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800539e:	2200      	movs	r2, #0
 80053a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	2200      	movs	r2, #0
 80053b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d4:	2200      	movs	r2, #0
 80053d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d003      	beq.n	80053e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e4:	2200      	movs	r2, #0
 80053e6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b60      	cmp	r3, #96	@ 0x60
 8005402:	d10e      	bne.n	8005422 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800541a:	6978      	ldr	r0, [r7, #20]
 800541c:	f7fe fcd2 	bl	8003dc4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005420:	e027      	b.n	8005472 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005428:	2b28      	cmp	r3, #40	@ 0x28
 800542a:	d117      	bne.n	800545c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800544a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2228      	movs	r2, #40	@ 0x28
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800545a:	e007      	b.n	800546c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800546c:	6978      	ldr	r0, [r7, #20]
 800546e:	f7fe fc9f 	bl	8003db0 <HAL_I2C_ErrorCallback>
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000000 	.word	0x20000000
 8005480:	14f8b589 	.word	0x14f8b589

08005484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005494:	e048      	b.n	8005528 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d044      	beq.n	8005528 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fc fd2f 	bl	8001f00 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d139      	bne.n	8005528 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	0c1b      	lsrs	r3, r3, #16
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d10d      	bne.n	80054da <I2C_WaitOnFlagUntilTimeout+0x56>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	43da      	mvns	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf0c      	ite	eq
 80054d0:	2301      	moveq	r3, #1
 80054d2:	2300      	movne	r3, #0
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	461a      	mov	r2, r3
 80054d8:	e00c      	b.n	80054f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d116      	bne.n	8005528 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e023      	b.n	8005570 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10d      	bne.n	800554e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	43da      	mvns	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	e00c      	b.n	8005568 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	429a      	cmp	r2, r3
 800556c:	d093      	beq.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	08db      	lsrs	r3, r3, #3
 800558a:	4a13      	ldr	r2, [pc, #76]	@ (80055d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	0a1a      	lsrs	r2, r3, #8
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b01      	subs	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d107      	bne.n	80055b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	f043 0220 	orr.w	r2, r3, #32
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e008      	b.n	80055c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c4:	d0e9      	beq.n	800559a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	20000000 	.word	0x20000000
 80055d8:	14f8b589 	.word	0x14f8b589

080055dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80055ec:	d103      	bne.n	80055f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055f4:	e007      	b.n	8005606 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80055fe:	d102      	bne.n	8005606 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2208      	movs	r2, #8
 8005604:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_PWR_EnableBkUpAccess+0x20>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005626:	687b      	ldr	r3, [r7, #4]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	420e0020 	.word	0x420e0020
 8005638:	40007000 	.word	0x40007000

0800563c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e267      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d075      	beq.n	8005746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800565a:	4b88      	ldr	r3, [pc, #544]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b04      	cmp	r3, #4
 8005664:	d00c      	beq.n	8005680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005666:	4b85      	ldr	r3, [pc, #532]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566e:	2b08      	cmp	r3, #8
 8005670:	d112      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005672:	4b82      	ldr	r3, [pc, #520]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800567e:	d10b      	bne.n	8005698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	4b7e      	ldr	r3, [pc, #504]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d05b      	beq.n	8005744 <HAL_RCC_OscConfig+0x108>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d157      	bne.n	8005744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e242      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d106      	bne.n	80056b0 <HAL_RCC_OscConfig+0x74>
 80056a2:	4b76      	ldr	r3, [pc, #472]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a75      	ldr	r2, [pc, #468]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e01d      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x98>
 80056ba:	4b70      	ldr	r3, [pc, #448]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a6f      	ldr	r2, [pc, #444]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b6d      	ldr	r3, [pc, #436]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a6c      	ldr	r2, [pc, #432]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e00b      	b.n	80056ec <HAL_RCC_OscConfig+0xb0>
 80056d4:	4b69      	ldr	r3, [pc, #420]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a68      	ldr	r2, [pc, #416]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	4b66      	ldr	r3, [pc, #408]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a65      	ldr	r2, [pc, #404]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f4:	f7fc fc04 	bl	8001f00 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056fc:	f7fc fc00 	bl	8001f00 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b64      	cmp	r3, #100	@ 0x64
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e207      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b5b      	ldr	r3, [pc, #364]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0xc0>
 800571a:	e014      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fc fbf0 	bl	8001f00 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005724:	f7fc fbec 	bl	8001f00 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	@ 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e1f3      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005736:	4b51      	ldr	r3, [pc, #324]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0xe8>
 8005742:	e000      	b.n	8005746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d063      	beq.n	800581a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005752:	4b4a      	ldr	r3, [pc, #296]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b47      	ldr	r3, [pc, #284]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005766:	2b08      	cmp	r3, #8
 8005768:	d11c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b44      	ldr	r3, [pc, #272]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d116      	bne.n	80057a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	4b41      	ldr	r3, [pc, #260]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e1c7      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578e:	4b3b      	ldr	r3, [pc, #236]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4937      	ldr	r1, [pc, #220]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057a2:	e03a      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d020      	beq.n	80057ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4b34      	ldr	r3, [pc, #208]	@ (8005880 <HAL_RCC_OscConfig+0x244>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b2:	f7fc fba5 	bl	8001f00 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ba:	f7fc fba1 	bl	8001f00 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1a8      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057cc:	4b2b      	ldr	r3, [pc, #172]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d8:	4b28      	ldr	r3, [pc, #160]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4925      	ldr	r1, [pc, #148]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	600b      	str	r3, [r1, #0]
 80057ec:	e015      	b.n	800581a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ee:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <HAL_RCC_OscConfig+0x244>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fc fb84 	bl	8001f00 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057fc:	f7fc fb80 	bl	8001f00 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e187      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580e:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d036      	beq.n	8005894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800582e:	4b15      	ldr	r3, [pc, #84]	@ (8005884 <HAL_RCC_OscConfig+0x248>)
 8005830:	2201      	movs	r2, #1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fc fb64 	bl	8001f00 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800583c:	f7fc fb60 	bl	8001f00 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e167      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584e:	4b0b      	ldr	r3, [pc, #44]	@ (800587c <HAL_RCC_OscConfig+0x240>)
 8005850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCC_OscConfig+0x200>
 800585a:	e01b      	b.n	8005894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800585c:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <HAL_RCC_OscConfig+0x248>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005862:	f7fc fb4d 	bl	8001f00 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005868:	e00e      	b.n	8005888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586a:	f7fc fb49 	bl	8001f00 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d907      	bls.n	8005888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e150      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 800587c:	40023800 	.word	0x40023800
 8005880:	42470000 	.word	0x42470000
 8005884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005888:	4b88      	ldr	r3, [pc, #544]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800588a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ea      	bne.n	800586a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8097 	beq.w	80059d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058a6:	4b81      	ldr	r3, [pc, #516]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10f      	bne.n	80058d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	4b7d      	ldr	r3, [pc, #500]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	4a7c      	ldr	r2, [pc, #496]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058c2:	4b7a      	ldr	r3, [pc, #488]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	60bb      	str	r3, [r7, #8]
 80058cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d2:	4b77      	ldr	r3, [pc, #476]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d118      	bne.n	8005910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058de:	4b74      	ldr	r3, [pc, #464]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a73      	ldr	r2, [pc, #460]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ea:	f7fc fb09 	bl	8001f00 <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f2:	f7fc fb05 	bl	8001f00 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e10c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	4b6a      	ldr	r3, [pc, #424]	@ (8005ab0 <HAL_RCC_OscConfig+0x474>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d106      	bne.n	8005926 <HAL_RCC_OscConfig+0x2ea>
 8005918:	4b64      	ldr	r3, [pc, #400]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800591a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591c:	4a63      	ldr	r2, [pc, #396]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6713      	str	r3, [r2, #112]	@ 0x70
 8005924:	e01c      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b05      	cmp	r3, #5
 800592c:	d10c      	bne.n	8005948 <HAL_RCC_OscConfig+0x30c>
 800592e:	4b5f      	ldr	r3, [pc, #380]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	4a5e      	ldr	r2, [pc, #376]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	6713      	str	r3, [r2, #112]	@ 0x70
 800593a:	4b5c      	ldr	r3, [pc, #368]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593e:	4a5b      	ldr	r2, [pc, #364]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6713      	str	r3, [r2, #112]	@ 0x70
 8005946:	e00b      	b.n	8005960 <HAL_RCC_OscConfig+0x324>
 8005948:	4b58      	ldr	r3, [pc, #352]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a57      	ldr	r2, [pc, #348]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800594e:	f023 0301 	bic.w	r3, r3, #1
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
 8005954:	4b55      	ldr	r3, [pc, #340]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005958:	4a54      	ldr	r2, [pc, #336]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 800595a:	f023 0304 	bic.w	r3, r3, #4
 800595e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d015      	beq.n	8005994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fc faca 	bl	8001f00 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7fc fac6 	bl	8001f00 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0cb      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005986:	4b49      	ldr	r3, [pc, #292]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0ee      	beq.n	8005970 <HAL_RCC_OscConfig+0x334>
 8005992:	e014      	b.n	80059be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005994:	f7fc fab4 	bl	8001f00 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800599c:	f7fc fab0 	bl	8001f00 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e0b5      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b2:	4b3e      	ldr	r3, [pc, #248]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1ee      	bne.n	800599c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059be:	7dfb      	ldrb	r3, [r7, #23]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d105      	bne.n	80059d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c4:	4b39      	ldr	r3, [pc, #228]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	4a38      	ldr	r2, [pc, #224]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80a1 	beq.w	8005b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059da:	4b34      	ldr	r3, [pc, #208]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b08      	cmp	r3, #8
 80059e4:	d05c      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d141      	bne.n	8005a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ee:	4b31      	ldr	r3, [pc, #196]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fc fa84 	bl	8001f00 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fc fa80 	bl	8001f00 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e087      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	019b      	lsls	r3, r3, #6
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	3b01      	subs	r3, #1
 8005a34:	041b      	lsls	r3, r3, #16
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3c:	061b      	lsls	r3, r3, #24
 8005a3e:	491b      	ldr	r1, [pc, #108]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a44:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fc fa59 	bl	8001f00 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a52:	f7fc fa55 	bl	8001f00 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e05c      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0f0      	beq.n	8005a52 <HAL_RCC_OscConfig+0x416>
 8005a70:	e054      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_RCC_OscConfig+0x478>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a78:	f7fc fa42 	bl	8001f00 <HAL_GetTick>
 8005a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7e:	e008      	b.n	8005a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fc fa3e 	bl	8001f00 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d901      	bls.n	8005a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e045      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <HAL_RCC_OscConfig+0x470>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1f0      	bne.n	8005a80 <HAL_RCC_OscConfig+0x444>
 8005a9e:	e03d      	b.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e038      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <HAL_RCC_OscConfig+0x4ec>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d028      	beq.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d121      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d11a      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ae8:	4013      	ands	r3, r2
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d111      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	3b01      	subs	r3, #1
 8005b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	40023800 	.word	0x40023800

08005b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0cc      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b40:	4b68      	ldr	r3, [pc, #416]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d90c      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4e:	4b65      	ldr	r3, [pc, #404]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b56:	4b63      	ldr	r3, [pc, #396]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0307 	and.w	r3, r3, #7
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d001      	beq.n	8005b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0b8      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d020      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b80:	4b59      	ldr	r3, [pc, #356]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	4a58      	ldr	r2, [pc, #352]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b98:	4b53      	ldr	r3, [pc, #332]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	4a52      	ldr	r2, [pc, #328]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b50      	ldr	r3, [pc, #320]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	494d      	ldr	r1, [pc, #308]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d044      	beq.n	8005c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d107      	bne.n	8005bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e07f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d003      	beq.n	8005bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e06f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e067      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b37      	ldr	r3, [pc, #220]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4934      	ldr	r1, [pc, #208]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c1c:	f7fc f970 	bl	8001f00 <HAL_GetTick>
 8005c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c22:	e00a      	b.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c24:	f7fc f96c 	bl	8001f00 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04f      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 020c 	and.w	r2, r3, #12
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d1eb      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d20c      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5a:	4b22      	ldr	r3, [pc, #136]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b20      	ldr	r3, [pc, #128]	@ (8005ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e032      	b.n	8005cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c80:	4b19      	ldr	r3, [pc, #100]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4916      	ldr	r1, [pc, #88]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	490e      	ldr	r1, [pc, #56]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cb2:	f000 f821 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	490a      	ldr	r1, [pc, #40]	@ (8005cec <HAL_RCC_ClockConfig+0x1c0>)
 8005cc4:	5ccb      	ldrb	r3, [r1, r3]
 8005cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cca:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc f8d0 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	080094f4 	.word	0x080094f4
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	20000004 	.word	0x20000004

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cfc:	b094      	sub	sp, #80	@ 0x50
 8005cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d04:	2300      	movs	r3, #0
 8005d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d08:	2300      	movs	r3, #0
 8005d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d10:	4b79      	ldr	r3, [pc, #484]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d00d      	beq.n	8005d38 <HAL_RCC_GetSysClockFreq+0x40>
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	f200 80e1 	bhi.w	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <HAL_RCC_GetSysClockFreq+0x34>
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d003      	beq.n	8005d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d2a:	e0db      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b73      	ldr	r3, [pc, #460]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005d30:	e0db      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d32:	4b73      	ldr	r3, [pc, #460]	@ (8005f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d36:	e0d8      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d38:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d40:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d42:	4b6d      	ldr	r3, [pc, #436]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d063      	beq.n	8005e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d4e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	099b      	lsrs	r3, r3, #6
 8005d54:	2200      	movs	r2, #0
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d62:	2300      	movs	r3, #0
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f04f 0000 	mov.w	r0, #0
 8005d72:	f04f 0100 	mov.w	r1, #0
 8005d76:	0159      	lsls	r1, r3, #5
 8005d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d7c:	0150      	lsls	r0, r2, #5
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4621      	mov	r1, r4
 8005d84:	1a51      	subs	r1, r2, r1
 8005d86:	6139      	str	r1, [r7, #16]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	018b      	lsls	r3, r1, #6
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005da6:	4651      	mov	r1, sl
 8005da8:	018a      	lsls	r2, r1, #6
 8005daa:	4651      	mov	r1, sl
 8005dac:	ebb2 0801 	subs.w	r8, r2, r1
 8005db0:	4659      	mov	r1, fp
 8005db2:	eb63 0901 	sbc.w	r9, r3, r1
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	eb18 0303 	adds.w	r3, r8, r3
 8005dd4:	60bb      	str	r3, [r7, #8]
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	eb49 0303 	adc.w	r3, r9, r3
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dea:	4629      	mov	r1, r5
 8005dec:	024b      	lsls	r3, r1, #9
 8005dee:	4621      	mov	r1, r4
 8005df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005df4:	4621      	mov	r1, r4
 8005df6:	024a      	lsls	r2, r1, #9
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfe:	2200      	movs	r2, #0
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e08:	f7fa fa3a 	bl	8000280 <__aeabi_uldivmod>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4613      	mov	r3, r2
 8005e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e14:	e058      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e16:	4b38      	ldr	r3, [pc, #224]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	099b      	lsrs	r3, r3, #6
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	4611      	mov	r1, r2
 8005e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	f04f 0000 	mov.w	r0, #0
 8005e38:	f04f 0100 	mov.w	r1, #0
 8005e3c:	0159      	lsls	r1, r3, #5
 8005e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e42:	0150      	lsls	r0, r2, #5
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4641      	mov	r1, r8
 8005e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e4e:	4649      	mov	r1, r9
 8005e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e68:	ebb2 040a 	subs.w	r4, r2, sl
 8005e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	00eb      	lsls	r3, r5, #3
 8005e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e7e:	00e2      	lsls	r2, r4, #3
 8005e80:	4614      	mov	r4, r2
 8005e82:	461d      	mov	r5, r3
 8005e84:	4643      	mov	r3, r8
 8005e86:	18e3      	adds	r3, r4, r3
 8005e88:	603b      	str	r3, [r7, #0]
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	eb45 0303 	adc.w	r3, r5, r3
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	f04f 0200 	mov.w	r2, #0
 8005e96:	f04f 0300 	mov.w	r3, #0
 8005e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	028b      	lsls	r3, r1, #10
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	028a      	lsls	r2, r1, #10
 8005eac:	4610      	mov	r0, r2
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	61fa      	str	r2, [r7, #28]
 8005eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ebc:	f7fa f9e0 	bl	8000280 <__aeabi_uldivmod>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ee2:	e002      	b.n	8005eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <HAL_RCC_GetSysClockFreq+0x204>)
 8005ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3750      	adds	r7, #80	@ 0x50
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	007a1200 	.word	0x007a1200

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b03      	ldr	r3, [pc, #12]	@ (8005f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000000 	.word	0x20000000

08005f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f20:	f7ff fff0 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f24:	4602      	mov	r2, r0
 8005f26:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	4903      	ldr	r1, [pc, #12]	@ (8005f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f32:	5ccb      	ldrb	r3, [r1, r3]
 8005f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	08009504 	.word	0x08009504

08005f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f48:	f7ff ffdc 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	0b5b      	lsrs	r3, r3, #13
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	4903      	ldr	r1, [pc, #12]	@ (8005f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	40023800 	.word	0x40023800
 8005f68:	08009504 	.word	0x08009504

08005f6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d105      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d035      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f94:	4b67      	ldr	r3, [pc, #412]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f9a:	f7fb ffb1 	bl	8001f00 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fa2:	f7fb ffad 	bl	8001f00 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e0ba      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fb4:	4b60      	ldr	r3, [pc, #384]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f0      	bne.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	019a      	lsls	r2, r3, #6
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	071b      	lsls	r3, r3, #28
 8005fcc:	495a      	ldr	r1, [pc, #360]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fd4:	4b57      	ldr	r3, [pc, #348]	@ (8006134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fda:	f7fb ff91 	bl	8001f00 <HAL_GetTick>
 8005fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fe2:	f7fb ff8d 	bl	8001f00 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e09a      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ff4:	4b50      	ldr	r3, [pc, #320]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8083 	beq.w	8006114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	4b49      	ldr	r3, [pc, #292]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	4a48      	ldr	r2, [pc, #288]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601c:	6413      	str	r3, [r2, #64]	@ 0x40
 800601e:	4b46      	ldr	r3, [pc, #280]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800602a:	4b44      	ldr	r3, [pc, #272]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a43      	ldr	r2, [pc, #268]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006034:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006036:	f7fb ff63 	bl	8001f00 <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800603e:	f7fb ff5f 	bl	8001f00 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e06c      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006050:	4b3a      	ldr	r3, [pc, #232]	@ (800613c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0f0      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800605c:	4b36      	ldr	r3, [pc, #216]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006064:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d02f      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	429a      	cmp	r2, r3
 8006078:	d028      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800607a:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006082:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006084:	4b2e      	ldr	r3, [pc, #184]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800608a:	4b2d      	ldr	r3, [pc, #180]	@ (8006140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006090:	4a29      	ldr	r2, [pc, #164]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006096:	4b28      	ldr	r3, [pc, #160]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d114      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060a2:	f7fb ff2d 	bl	8001f00 <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fb ff29 	bl	8001f00 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e034      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0ee      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060d8:	d10d      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80060ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ee:	4912      	ldr	r1, [pc, #72]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	608b      	str	r3, [r1, #8]
 80060f4:	e005      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060f6:	4b10      	ldr	r3, [pc, #64]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006100:	6093      	str	r3, [r2, #8]
 8006102:	4b0d      	ldr	r3, [pc, #52]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006104:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610e:	490a      	ldr	r1, [pc, #40]	@ (8006138 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006110:	4313      	orrs	r3, r2
 8006112:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7c1a      	ldrb	r2, [r3, #16]
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006126:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	42470068 	.word	0x42470068
 8006138:	40023800 	.word	0x40023800
 800613c:	40007000 	.word	0x40007000
 8006140:	42470e40 	.word	0x42470e40
 8006144:	424711e0 	.word	0x424711e0

08006148 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e073      	b.n	8006246 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7f5b      	ldrb	r3, [r3, #29]
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb fa44 	bl	80015fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b10      	cmp	r3, #16
 8006186:	d055      	beq.n	8006234 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	22ca      	movs	r2, #202	@ 0xca
 800618e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2253      	movs	r2, #83	@ 0x53
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fa49 	bl	8006630 <RTC_EnterInitMode>
 800619e:	4603      	mov	r3, r0
 80061a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d12c      	bne.n	8006202 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80061b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68d2      	ldr	r2, [r2, #12]
 80061e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6919      	ldr	r1, [r3, #16]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	041a      	lsls	r2, r3, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fa50 	bl	800669e <RTC_ExitInitMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d110      	bne.n	800622a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	22ff      	movs	r2, #255	@ 0xff
 8006230:	625a      	str	r2, [r3, #36]	@ 0x24
 8006232:	e001      	b.n	8006238 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800624e:	b590      	push	{r4, r7, lr}
 8006250:	b087      	sub	sp, #28
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	7f1b      	ldrb	r3, [r3, #28]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_RTC_SetTime+0x1c>
 8006266:	2302      	movs	r3, #2
 8006268:	e087      	b.n	800637a <HAL_RTC_SetTime+0x12c>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2202      	movs	r2, #2
 8006274:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d126      	bne.n	80062ca <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2200      	movs	r2, #0
 800628e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fa27 	bl	80066e8 <RTC_ByteToBcd2>
 800629a:	4603      	mov	r3, r0
 800629c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fa20 	bl	80066e8 <RTC_ByteToBcd2>
 80062a8:	4603      	mov	r3, r0
 80062aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062ac:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	789b      	ldrb	r3, [r3, #2]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fa18 	bl	80066e8 <RTC_ByteToBcd2>
 80062b8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	78db      	ldrb	r3, [r3, #3]
 80062c2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	e018      	b.n	80062fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80062ea:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80062f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	78db      	ldrb	r3, [r3, #3]
 80062f6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	22ca      	movs	r2, #202	@ 0xca
 8006302:	625a      	str	r2, [r3, #36]	@ 0x24
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2253      	movs	r2, #83	@ 0x53
 800630a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f98f 	bl	8006630 <RTC_EnterInitMode>
 8006312:	4603      	mov	r3, r0
 8006314:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d120      	bne.n	800635e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006326:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800632a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800633a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	431a      	orrs	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f9a2 	bl	800669e <RTC_ExitInitMode>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	22ff      	movs	r2, #255	@ 0xff
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]

  return status;
 8006378:	7cfb      	ldrb	r3, [r7, #19]
}
 800637a:	4618      	mov	r0, r3
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bd90      	pop	{r4, r7, pc}

08006382 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80063b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80063b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	0c1b      	lsrs	r3, r3, #16
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	0a1b      	lsrs	r3, r3, #8
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	0d9b      	lsrs	r3, r3, #22
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11a      	bne.n	8006434 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f98e 	bl	8006724 <RTC_Bcd2ToByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 f985 	bl	8006724 <RTC_Bcd2ToByte>
 800641a:	4603      	mov	r3, r0
 800641c:	461a      	mov	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	789b      	ldrb	r3, [r3, #2]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f97c 	bl	8006724 <RTC_Bcd2ToByte>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800643e:	b590      	push	{r4, r7, lr}
 8006440:	b087      	sub	sp, #28
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	7f1b      	ldrb	r3, [r3, #28]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_RTC_SetDate+0x1c>
 8006456:	2302      	movs	r3, #2
 8006458:	e071      	b.n	800653e <HAL_RTC_SetDate+0x100>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2202      	movs	r2, #2
 8006464:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10e      	bne.n	800648a <HAL_RTC_SetDate+0x4c>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	f023 0310 	bic.w	r3, r3, #16
 8006480:	b2db      	uxtb	r3, r3
 8006482:	330a      	adds	r3, #10
 8006484:	b2da      	uxtb	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11c      	bne.n	80064ca <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	78db      	ldrb	r3, [r3, #3]
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f927 	bl	80066e8 <RTC_ByteToBcd2>
 800649a:	4603      	mov	r3, r0
 800649c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f920 	bl	80066e8 <RTC_ByteToBcd2>
 80064a8:	4603      	mov	r3, r0
 80064aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f918 	bl	80066e8 <RTC_ByteToBcd2>
 80064b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e00e      	b.n	80064e8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	78db      	ldrb	r3, [r3, #3]
 80064ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80064d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80064dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	22ca      	movs	r2, #202	@ 0xca
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2253      	movs	r2, #83	@ 0x53
 80064f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f899 	bl	8006630 <RTC_EnterInitMode>
 80064fe:	4603      	mov	r3, r0
 8006500:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10c      	bne.n	8006522 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006512:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006516:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 f8c0 	bl	800669e <RTC_ExitInitMode>
 800651e:	4603      	mov	r3, r0
 8006520:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d102      	bne.n	800652e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	22ff      	movs	r2, #255	@ 0xff
 8006534:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]

  return status;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
}
 800653e:	4618      	mov	r0, r3
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006560:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006564:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	0a1b      	lsrs	r3, r3, #8
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006588:	b2da      	uxtb	r2, r3
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	0b5b      	lsrs	r3, r3, #13
 8006592:	b2db      	uxtb	r3, r3
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	b2da      	uxtb	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11a      	bne.n	80065da <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	78db      	ldrb	r3, [r3, #3]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f8bb 	bl	8006724 <RTC_Bcd2ToByte>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461a      	mov	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f8b2 	bl	8006724 <RTC_Bcd2ToByte>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	789b      	ldrb	r3, [r3, #2]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f8a9 	bl	8006724 <RTC_Bcd2ToByte>
 80065d2:	4603      	mov	r3, r0
 80065d4:	461a      	mov	r2, r3
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a0d      	ldr	r2, [pc, #52]	@ (800662c <HAL_RTC_WaitForSynchro+0x48>)
 80065f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f8:	f7fb fc82 	bl	8001f00 <HAL_GetTick>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065fe:	e009      	b.n	8006614 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006600:	f7fb fc7e 	bl	8001f00 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660e:	d901      	bls.n	8006614 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e007      	b.n	8006624 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0ee      	beq.n	8006600 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	00013f5f 	.word	0x00013f5f

08006630 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d122      	bne.n	8006694 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800665c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800665e:	f7fb fc4f 	bl	8001f00 <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006664:	e00c      	b.n	8006680 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006666:	f7fb fc4b 	bl	8001f00 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006674:	d904      	bls.n	8006680 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2204      	movs	r2, #4
 800667a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <RTC_EnterInitMode+0x64>
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d1e8      	bne.n	8006666 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006694:	7bfb      	ldrb	r3, [r7, #15]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff8b 	bl	80065e4 <HAL_RTC_WaitForSynchro>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2204      	movs	r2, #4
 80066d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80066f6:	e005      	b.n	8006704 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	3b0a      	subs	r3, #10
 8006702:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	2b09      	cmp	r3, #9
 8006708:	d8f6      	bhi.n	80066f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	b2da      	uxtb	r2, r3
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	4313      	orrs	r3, r2
 8006716:	b2db      	uxtb	r3, r3
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	091b      	lsrs	r3, r3, #4
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	b2db      	uxtb	r3, r3
 8006750:	4413      	add	r3, r2
 8006752:	b2db      	uxtb	r3, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3350      	adds	r3, #80	@ 0x50
 8006776:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07b      	b.n	800689e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d108      	bne.n	80067c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067b6:	d009      	beq.n	80067cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	61da      	str	r2, [r3, #28]
 80067be:	e005      	b.n	80067cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa ff6c 	bl	80016c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006858:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	0c1b      	lsrs	r3, r3, #16
 800686a:	f003 0104 	and.w	r1, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	f003 0210 	and.w	r2, r3, #16
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800688c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e041      	b.n	800693c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fb f8fb 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f000 f8f5 	bl	8006ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_TIM_ConfigClockSource+0x1c>
 800695c:	2302      	movs	r3, #2
 800695e:	e0b4      	b.n	8006aca <HAL_TIM_ConfigClockSource+0x186>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800697e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006998:	d03e      	beq.n	8006a18 <HAL_TIM_ConfigClockSource+0xd4>
 800699a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800699e:	f200 8087 	bhi.w	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a6:	f000 8086 	beq.w	8006ab6 <HAL_TIM_ConfigClockSource+0x172>
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ae:	d87f      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069b0:	2b70      	cmp	r3, #112	@ 0x70
 80069b2:	d01a      	beq.n	80069ea <HAL_TIM_ConfigClockSource+0xa6>
 80069b4:	2b70      	cmp	r3, #112	@ 0x70
 80069b6:	d87b      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069b8:	2b60      	cmp	r3, #96	@ 0x60
 80069ba:	d050      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0x11a>
 80069bc:	2b60      	cmp	r3, #96	@ 0x60
 80069be:	d877      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069c0:	2b50      	cmp	r3, #80	@ 0x50
 80069c2:	d03c      	beq.n	8006a3e <HAL_TIM_ConfigClockSource+0xfa>
 80069c4:	2b50      	cmp	r3, #80	@ 0x50
 80069c6:	d873      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069c8:	2b40      	cmp	r3, #64	@ 0x40
 80069ca:	d058      	beq.n	8006a7e <HAL_TIM_ConfigClockSource+0x13a>
 80069cc:	2b40      	cmp	r3, #64	@ 0x40
 80069ce:	d86f      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d0:	2b30      	cmp	r3, #48	@ 0x30
 80069d2:	d064      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x15a>
 80069d4:	2b30      	cmp	r3, #48	@ 0x30
 80069d6:	d86b      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d060      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x15a>
 80069dc:	2b20      	cmp	r3, #32
 80069de:	d867      	bhi.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d05c      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x15a>
 80069e4:	2b10      	cmp	r3, #16
 80069e6:	d05a      	beq.n	8006a9e <HAL_TIM_ConfigClockSource+0x15a>
 80069e8:	e062      	b.n	8006ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069fa:	f000 f971 	bl	8006ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	609a      	str	r2, [r3, #8]
      break;
 8006a16:	e04f      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a28:	f000 f95a 	bl	8006ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a3a:	609a      	str	r2, [r3, #8]
      break;
 8006a3c:	e03c      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f000 f8ce 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2150      	movs	r1, #80	@ 0x50
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f927 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 8006a5c:	e02c      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f000 f8ed 	bl	8006c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2160      	movs	r1, #96	@ 0x60
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f917 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 8006a7c:	e01c      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f000 f8ae 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2140      	movs	r1, #64	@ 0x40
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 f907 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 8006a9c:	e00c      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f000 f8fe 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 8006aae:	e003      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab4:	e000      	b.n	8006ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00f      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006af2:	d00b      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a37      	ldr	r2, [pc, #220]	@ (8006bd4 <TIM_Base_SetConfig+0x100>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d007      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a36      	ldr	r2, [pc, #216]	@ (8006bd8 <TIM_Base_SetConfig+0x104>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x38>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a35      	ldr	r2, [pc, #212]	@ (8006bdc <TIM_Base_SetConfig+0x108>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01b      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2c:	d017      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a28      	ldr	r2, [pc, #160]	@ (8006bd4 <TIM_Base_SetConfig+0x100>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a27      	ldr	r2, [pc, #156]	@ (8006bd8 <TIM_Base_SetConfig+0x104>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a26      	ldr	r2, [pc, #152]	@ (8006bdc <TIM_Base_SetConfig+0x108>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a25      	ldr	r2, [pc, #148]	@ (8006be0 <TIM_Base_SetConfig+0x10c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a24      	ldr	r2, [pc, #144]	@ (8006be4 <TIM_Base_SetConfig+0x110>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x8a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a23      	ldr	r2, [pc, #140]	@ (8006be8 <TIM_Base_SetConfig+0x114>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd0 <TIM_Base_SetConfig+0xfc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d103      	bne.n	8006ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f023 0201 	bic.w	r2, r3, #1
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]
  }
}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0210 	bic.w	r2, r3, #16
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f043 0307 	orr.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d101      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d34:	2302      	movs	r3, #2
 8006d36:	e050      	b.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2202      	movs	r2, #2
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1c      	ldr	r2, [pc, #112]	@ (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d84:	d013      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a18      	ldr	r2, [pc, #96]	@ (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a16      	ldr	r2, [pc, #88]	@ (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a13      	ldr	r2, [pc, #76]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d10c      	bne.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40014000 	.word	0x40014000

08006dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e042      	b.n	8006e94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fa fef0 	bl	8001c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2224      	movs	r2, #36	@ 0x24
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fdf5 	bl	8007a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	@ 0x28
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d175      	bne.n	8006fa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_UART_Transmit+0x2c>
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e06e      	b.n	8006faa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2221      	movs	r2, #33	@ 0x21
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eda:	f7fb f811 	bl	8001f00 <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef4:	d108      	bne.n	8006f08 <HAL_UART_Transmit+0x6c>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d104      	bne.n	8006f08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006efe:	2300      	movs	r3, #0
 8006f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e003      	b.n	8006f10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f10:	e02e      	b.n	8006f70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2180      	movs	r1, #128	@ 0x80
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 fb91 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e03a      	b.n	8006faa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e007      	b.n	8006f62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1cb      	bne.n	8006f12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2140      	movs	r1, #64	@ 0x40
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fb5d 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e006      	b.n	8006faa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e000      	b.n	8006faa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006fa8:	2302      	movs	r3, #2
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b08a      	sub	sp, #40	@ 0x28
 8006fb6:	af02      	add	r7, sp, #8
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	603b      	str	r3, [r7, #0]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b20      	cmp	r3, #32
 8006fd0:	f040 8081 	bne.w	80070d6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_UART_Receive+0x2e>
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e079      	b.n	80070d8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2222      	movs	r2, #34	@ 0x22
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff8:	f7fa ff82 	bl	8001f00 <HAL_GetTick>
 8006ffc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007012:	d108      	bne.n	8007026 <HAL_UART_Receive+0x74>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e003      	b.n	800702e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800702e:	e047      	b.n	80070c0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	2120      	movs	r1, #32
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fb02 	bl	8007644 <UART_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2220      	movs	r2, #32
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e042      	b.n	80070d8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b29b      	uxth	r3, r3
 8007060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007064:	b29a      	uxth	r2, r3
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	3302      	adds	r3, #2
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	e01f      	b.n	80070b2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d007      	beq.n	800708c <HAL_UART_Receive+0xda>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <HAL_UART_Receive+0xe8>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	b2da      	uxtb	r2, r3
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e008      	b.n	80070ac <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	3301      	adds	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1b2      	bne.n	8007030 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b0ba      	sub	sp, #232	@ 0xe8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007106:	2300      	movs	r3, #0
 8007108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800710c:	2300      	movs	r3, #0
 800710e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800711e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10f      	bne.n	8007146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712a:	f003 0320 	and.w	r3, r3, #32
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_UART_IRQHandler+0x66>
 8007132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fbb8 	bl	80078b4 <UART_Receive_IT>
      return;
 8007144:	e25b      	b.n	80075fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800714a:	2b00      	cmp	r3, #0
 800714c:	f000 80de 	beq.w	800730c <HAL_UART_IRQHandler+0x22c>
 8007150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007160:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 80d1 	beq.w	800730c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <HAL_UART_IRQHandler+0xae>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800717a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007186:	f043 0201 	orr.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_UART_IRQHandler+0xd2>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071aa:	f043 0202 	orr.w	r2, r3, #2
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <HAL_UART_IRQHandler+0xf6>
 80071be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f043 0204 	orr.w	r2, r3, #4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d011      	beq.n	8007206 <HAL_UART_IRQHandler+0x126>
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d105      	bne.n	80071fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f043 0208 	orr.w	r2, r3, #8
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 81f2 	beq.w	80075f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_UART_IRQHandler+0x14e>
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb43 	bl	80078b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007238:	2b40      	cmp	r3, #64	@ 0x40
 800723a:	bf0c      	ite	eq
 800723c:	2301      	moveq	r3, #1
 800723e:	2300      	movne	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <HAL_UART_IRQHandler+0x17a>
 8007252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007256:	2b00      	cmp	r3, #0
 8007258:	d04f      	beq.n	80072fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa4b 	bl	80076f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d141      	bne.n	80072f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800728c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3314      	adds	r3, #20
 8007296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800729a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800729e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1d9      	bne.n	800726e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d013      	beq.n	80072ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c6:	4a7e      	ldr	r2, [pc, #504]	@ (80074c0 <HAL_UART_IRQHandler+0x3e0>)
 80072c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fb fb30 	bl	8002934 <HAL_DMA_Abort_IT>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	e00e      	b.n	8007308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f994 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	e00a      	b.n	8007308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f990 	bl	8007618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	e006      	b.n	8007308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f98c 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007306:	e175      	b.n	80075f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	bf00      	nop
    return;
 800730a:	e173      	b.n	80075f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 814f 	bne.w	80075b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 8148 	beq.w	80075b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007328:	f003 0310 	and.w	r3, r3, #16
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8141 	beq.w	80075b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007332:	2300      	movs	r3, #0
 8007334:	60bb      	str	r3, [r7, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	f040 80b6 	bne.w	80074c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8145 	beq.w	80075f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007376:	429a      	cmp	r2, r3
 8007378:	f080 813e 	bcs.w	80075f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007382:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800738e:	f000 8088 	beq.w	80074a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	330c      	adds	r3, #12
 8007398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1d9      	bne.n	8007392 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3314      	adds	r3, #20
 80073fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007402:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007406:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800740a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e1      	bne.n	80073de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3314      	adds	r3, #20
 8007420:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800742a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800742c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3314      	adds	r3, #20
 800743a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800743e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007440:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007444:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800744c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e3      	bne.n	800741a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	330c      	adds	r3, #12
 8007466:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007470:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007472:	f023 0310 	bic.w	r3, r3, #16
 8007476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007484:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007486:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800748a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e3      	bne.n	8007460 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749c:	4618      	mov	r0, r3
 800749e:	f7fb f9d9 	bl	8002854 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f8b7 	bl	800762c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074be:	e09b      	b.n	80075f8 <HAL_UART_IRQHandler+0x518>
 80074c0:	080077bd 	.word	0x080077bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d8:	b29b      	uxth	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 808e 	beq.w	80075fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 8089 	beq.w	80075fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800750e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007510:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e3      	bne.n	80074ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	623b      	str	r3, [r7, #32]
   return(result);
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3314      	adds	r3, #20
 8007542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007546:	633a      	str	r2, [r7, #48]	@ 0x30
 8007548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e3      	bne.n	8007522 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	e853 3f00 	ldrex	r3, [r3]
 8007576:	60fb      	str	r3, [r7, #12]
   return(result);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0310 	bic.w	r3, r3, #16
 800757e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800758c:	61fa      	str	r2, [r7, #28]
 800758e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	69b9      	ldr	r1, [r7, #24]
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	617b      	str	r3, [r7, #20]
   return(result);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e3      	bne.n	8007568 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075aa:	4619      	mov	r1, r3
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f83d 	bl	800762c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075b2:	e023      	b.n	80075fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <HAL_UART_IRQHandler+0x4f4>
 80075c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d003      	beq.n	80075d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f909 	bl	80077e4 <UART_Transmit_IT>
    return;
 80075d2:	e014      	b.n	80075fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00e      	beq.n	80075fe <HAL_UART_IRQHandler+0x51e>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f949 	bl	8007884 <UART_EndTransmit_IT>
    return;
 80075f2:	e004      	b.n	80075fe <HAL_UART_IRQHandler+0x51e>
    return;
 80075f4:	bf00      	nop
 80075f6:	e002      	b.n	80075fe <HAL_UART_IRQHandler+0x51e>
      return;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <HAL_UART_IRQHandler+0x51e>
      return;
 80075fc:	bf00      	nop
  }
}
 80075fe:	37e8      	adds	r7, #232	@ 0xe8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	4613      	mov	r3, r2
 8007652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007654:	e03b      	b.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d037      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fa fc4f 	bl	8001f00 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	6a3a      	ldr	r2, [r7, #32]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <UART_WaitOnFlagUntilTimeout+0x30>
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e03a      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d023      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b80      	cmp	r3, #128	@ 0x80
 800768a:	d020      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b40      	cmp	r3, #64	@ 0x40
 8007690:	d01d      	beq.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0308 	and.w	r3, r3, #8
 800769c:	2b08      	cmp	r3, #8
 800769e:	d116      	bne.n	80076ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 f81d 	bl	80076f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2208      	movs	r2, #8
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e00f      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4013      	ands	r3, r2
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	429a      	cmp	r2, r3
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	79fb      	ldrb	r3, [r7, #7]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d0b4      	beq.n	8007656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b095      	sub	sp, #84	@ 0x54
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007714:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800771e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800772c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e5      	bne.n	80076fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3314      	adds	r3, #20
 8007738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6a3b      	ldr	r3, [r7, #32]
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	61fb      	str	r3, [r7, #28]
   return(result);
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007752:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007754:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007758:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776a:	2b01      	cmp	r3, #1
 800776c:	d119      	bne.n	80077a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	330c      	adds	r3, #12
 8007774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	60bb      	str	r3, [r7, #8]
   return(result);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	647b      	str	r3, [r7, #68]	@ 0x44
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800778e:	61ba      	str	r2, [r7, #24]
 8007790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	613b      	str	r3, [r7, #16]
   return(result);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80077b0:	bf00      	nop
 80077b2:	3754      	adds	r7, #84	@ 0x54
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff ff1e 	bl	8007618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077dc:	bf00      	nop
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b21      	cmp	r3, #33	@ 0x21
 80077f6:	d13e      	bne.n	8007876 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007800:	d114      	bne.n	800782c <UART_Transmit_IT+0x48>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d110      	bne.n	800782c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800781e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	1c9a      	adds	r2, r3, #2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]
 800782a:	e008      	b.n	800783e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	1c59      	adds	r1, r3, #1
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6211      	str	r1, [r2, #32]
 8007836:	781a      	ldrb	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29b      	uxth	r3, r3
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4619      	mov	r1, r3
 800784c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10f      	bne.n	8007872 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007860:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007870:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800789a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fead 	bl	8007604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08c      	sub	sp, #48	@ 0x30
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b22      	cmp	r3, #34	@ 0x22
 80078c6:	f040 80ae 	bne.w	8007a26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d2:	d117      	bne.n	8007904 <UART_Receive_IT+0x50>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d113      	bne.n	8007904 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078fc:	1c9a      	adds	r2, r3, #2
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	629a      	str	r2, [r3, #40]	@ 0x28
 8007902:	e026      	b.n	8007952 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007916:	d007      	beq.n	8007928 <UART_Receive_IT+0x74>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <UART_Receive_IT+0x82>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d106      	bne.n	8007936 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b2da      	uxtb	r2, r3
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e008      	b.n	8007948 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007942:	b2da      	uxtb	r2, r3
 8007944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007946:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29b      	uxth	r3, r3
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007962:	2b00      	cmp	r3, #0
 8007964:	d15d      	bne.n	8007a22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0220 	bic.w	r2, r2, #32
 8007974:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68da      	ldr	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695a      	ldr	r2, [r3, #20]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2220      	movs	r2, #32
 800799a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d135      	bne.n	8007a18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	330c      	adds	r3, #12
 80079b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	613b      	str	r3, [r7, #16]
   return(result);
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f023 0310 	bic.w	r3, r3, #16
 80079c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079d2:	623a      	str	r2, [r7, #32]
 80079d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	69f9      	ldr	r1, [r7, #28]
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	61bb      	str	r3, [r7, #24]
   return(result);
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d10a      	bne.n	8007a0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079f4:	2300      	movs	r3, #0
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff fe0b 	bl	800762c <HAL_UARTEx_RxEventCallback>
 8007a16:	e002      	b.n	8007a1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7f9 fdad 	bl	8001578 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e002      	b.n	8007a28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	e000      	b.n	8007a28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a26:	2302      	movs	r3, #2
  }
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3730      	adds	r7, #48	@ 0x30
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a34:	b0c0      	sub	sp, #256	@ 0x100
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4c:	68d9      	ldr	r1, [r3, #12]
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	ea40 0301 	orr.w	r3, r0, r1
 8007a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a88:	f021 010c 	bic.w	r1, r1, #12
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a96:	430b      	orrs	r3, r1
 8007a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aaa:	6999      	ldr	r1, [r3, #24]
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	ea40 0301 	orr.w	r3, r0, r1
 8007ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b8f      	ldr	r3, [pc, #572]	@ (8007cfc <UART_SetConfig+0x2cc>)
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d005      	beq.n	8007ad0 <UART_SetConfig+0xa0>
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b8d      	ldr	r3, [pc, #564]	@ (8007d00 <UART_SetConfig+0x2d0>)
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d104      	bne.n	8007ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ad0:	f7fe fa38 	bl	8005f44 <HAL_RCC_GetPCLK2Freq>
 8007ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ad8:	e003      	b.n	8007ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ada:	f7fe fa1f 	bl	8005f1c <HAL_RCC_GetPCLK1Freq>
 8007ade:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aec:	f040 810c 	bne.w	8007d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007afa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b02:	4622      	mov	r2, r4
 8007b04:	462b      	mov	r3, r5
 8007b06:	1891      	adds	r1, r2, r2
 8007b08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b0a:	415b      	adcs	r3, r3
 8007b0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b12:	4621      	mov	r1, r4
 8007b14:	eb12 0801 	adds.w	r8, r2, r1
 8007b18:	4629      	mov	r1, r5
 8007b1a:	eb43 0901 	adc.w	r9, r3, r1
 8007b1e:	f04f 0200 	mov.w	r2, #0
 8007b22:	f04f 0300 	mov.w	r3, #0
 8007b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b32:	4690      	mov	r8, r2
 8007b34:	4699      	mov	r9, r3
 8007b36:	4623      	mov	r3, r4
 8007b38:	eb18 0303 	adds.w	r3, r8, r3
 8007b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b40:	462b      	mov	r3, r5
 8007b42:	eb49 0303 	adc.w	r3, r9, r3
 8007b46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b5e:	460b      	mov	r3, r1
 8007b60:	18db      	adds	r3, r3, r3
 8007b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b64:	4613      	mov	r3, r2
 8007b66:	eb42 0303 	adc.w	r3, r2, r3
 8007b6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b74:	f7f8 fb84 	bl	8000280 <__aeabi_uldivmod>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	4b61      	ldr	r3, [pc, #388]	@ (8007d04 <UART_SetConfig+0x2d4>)
 8007b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	011c      	lsls	r4, r3, #4
 8007b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b98:	4642      	mov	r2, r8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	1891      	adds	r1, r2, r2
 8007b9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ba0:	415b      	adcs	r3, r3
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ba8:	4641      	mov	r1, r8
 8007baa:	eb12 0a01 	adds.w	sl, r2, r1
 8007bae:	4649      	mov	r1, r9
 8007bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8007bb4:	f04f 0200 	mov.w	r2, #0
 8007bb8:	f04f 0300 	mov.w	r3, #0
 8007bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc8:	4692      	mov	sl, r2
 8007bca:	469b      	mov	fp, r3
 8007bcc:	4643      	mov	r3, r8
 8007bce:	eb1a 0303 	adds.w	r3, sl, r3
 8007bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8007bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	18db      	adds	r3, r3, r3
 8007bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	eb42 0303 	adc.w	r3, r2, r3
 8007c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c0a:	f7f8 fb39 	bl	8000280 <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	4b3b      	ldr	r3, [pc, #236]	@ (8007d04 <UART_SetConfig+0x2d4>)
 8007c16:	fba3 2301 	umull	r2, r3, r3, r1
 8007c1a:	095b      	lsrs	r3, r3, #5
 8007c1c:	2264      	movs	r2, #100	@ 0x64
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	1acb      	subs	r3, r1, r3
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c2a:	4b36      	ldr	r3, [pc, #216]	@ (8007d04 <UART_SetConfig+0x2d4>)
 8007c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c38:	441c      	add	r4, r3
 8007c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	464b      	mov	r3, r9
 8007c50:	1891      	adds	r1, r2, r2
 8007c52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c54:	415b      	adcs	r3, r3
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c5c:	4641      	mov	r1, r8
 8007c5e:	1851      	adds	r1, r2, r1
 8007c60:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c62:	4649      	mov	r1, r9
 8007c64:	414b      	adcs	r3, r1
 8007c66:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c74:	4659      	mov	r1, fp
 8007c76:	00cb      	lsls	r3, r1, #3
 8007c78:	4651      	mov	r1, sl
 8007c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c7e:	4651      	mov	r1, sl
 8007c80:	00ca      	lsls	r2, r1, #3
 8007c82:	4610      	mov	r0, r2
 8007c84:	4619      	mov	r1, r3
 8007c86:	4603      	mov	r3, r0
 8007c88:	4642      	mov	r2, r8
 8007c8a:	189b      	adds	r3, r3, r2
 8007c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c90:	464b      	mov	r3, r9
 8007c92:	460a      	mov	r2, r1
 8007c94:	eb42 0303 	adc.w	r3, r2, r3
 8007c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	18db      	adds	r3, r3, r3
 8007cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	eb42 0303 	adc.w	r3, r2, r3
 8007cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007cc6:	f7f8 fadb 	bl	8000280 <__aeabi_uldivmod>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <UART_SetConfig+0x2d4>)
 8007cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	2164      	movs	r1, #100	@ 0x64
 8007cd8:	fb01 f303 	mul.w	r3, r1, r3
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	3332      	adds	r3, #50	@ 0x32
 8007ce2:	4a08      	ldr	r2, [pc, #32]	@ (8007d04 <UART_SetConfig+0x2d4>)
 8007ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	f003 0207 	and.w	r2, r3, #7
 8007cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4422      	add	r2, r4
 8007cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cf8:	e106      	b.n	8007f08 <UART_SetConfig+0x4d8>
 8007cfa:	bf00      	nop
 8007cfc:	40011000 	.word	0x40011000
 8007d00:	40011400 	.word	0x40011400
 8007d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d1a:	4642      	mov	r2, r8
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	1891      	adds	r1, r2, r2
 8007d20:	6239      	str	r1, [r7, #32]
 8007d22:	415b      	adcs	r3, r3
 8007d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	1854      	adds	r4, r2, r1
 8007d2e:	4649      	mov	r1, r9
 8007d30:	eb43 0501 	adc.w	r5, r3, r1
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	00eb      	lsls	r3, r5, #3
 8007d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d42:	00e2      	lsls	r2, r4, #3
 8007d44:	4614      	mov	r4, r2
 8007d46:	461d      	mov	r5, r3
 8007d48:	4643      	mov	r3, r8
 8007d4a:	18e3      	adds	r3, r4, r3
 8007d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d50:	464b      	mov	r3, r9
 8007d52:	eb45 0303 	adc.w	r3, r5, r3
 8007d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d6a:	f04f 0200 	mov.w	r2, #0
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d76:	4629      	mov	r1, r5
 8007d78:	008b      	lsls	r3, r1, #2
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d80:	4621      	mov	r1, r4
 8007d82:	008a      	lsls	r2, r1, #2
 8007d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d88:	f7f8 fa7a 	bl	8000280 <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4b60      	ldr	r3, [pc, #384]	@ (8007f14 <UART_SetConfig+0x4e4>)
 8007d92:	fba3 2302 	umull	r2, r3, r3, r2
 8007d96:	095b      	lsrs	r3, r3, #5
 8007d98:	011c      	lsls	r4, r3, #4
 8007d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007da4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007dac:	4642      	mov	r2, r8
 8007dae:	464b      	mov	r3, r9
 8007db0:	1891      	adds	r1, r2, r2
 8007db2:	61b9      	str	r1, [r7, #24]
 8007db4:	415b      	adcs	r3, r3
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	1851      	adds	r1, r2, r1
 8007dc0:	6139      	str	r1, [r7, #16]
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	414b      	adcs	r3, r1
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dd4:	4659      	mov	r1, fp
 8007dd6:	00cb      	lsls	r3, r1, #3
 8007dd8:	4651      	mov	r1, sl
 8007dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dde:	4651      	mov	r1, sl
 8007de0:	00ca      	lsls	r2, r1, #3
 8007de2:	4610      	mov	r0, r2
 8007de4:	4619      	mov	r1, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	4642      	mov	r2, r8
 8007dea:	189b      	adds	r3, r3, r2
 8007dec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007df0:	464b      	mov	r3, r9
 8007df2:	460a      	mov	r2, r1
 8007df4:	eb42 0303 	adc.w	r3, r2, r3
 8007df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e14:	4649      	mov	r1, r9
 8007e16:	008b      	lsls	r3, r1, #2
 8007e18:	4641      	mov	r1, r8
 8007e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e1e:	4641      	mov	r1, r8
 8007e20:	008a      	lsls	r2, r1, #2
 8007e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e26:	f7f8 fa2b 	bl	8000280 <__aeabi_uldivmod>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4b38      	ldr	r3, [pc, #224]	@ (8007f14 <UART_SetConfig+0x4e4>)
 8007e32:	fba3 2301 	umull	r2, r3, r3, r1
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	2264      	movs	r2, #100	@ 0x64
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	1acb      	subs	r3, r1, r3
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	3332      	adds	r3, #50	@ 0x32
 8007e44:	4a33      	ldr	r2, [pc, #204]	@ (8007f14 <UART_SetConfig+0x4e4>)
 8007e46:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e50:	441c      	add	r4, r3
 8007e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e56:	2200      	movs	r2, #0
 8007e58:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	1891      	adds	r1, r2, r2
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	415b      	adcs	r3, r3
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e70:	4641      	mov	r1, r8
 8007e72:	1851      	adds	r1, r2, r1
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	4649      	mov	r1, r9
 8007e78:	414b      	adcs	r3, r1
 8007e7a:	607b      	str	r3, [r7, #4]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e88:	4659      	mov	r1, fp
 8007e8a:	00cb      	lsls	r3, r1, #3
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e92:	4651      	mov	r1, sl
 8007e94:	00ca      	lsls	r2, r1, #3
 8007e96:	4610      	mov	r0, r2
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	189b      	adds	r3, r3, r2
 8007ea0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	460a      	mov	r2, r1
 8007ea6:	eb42 0303 	adc.w	r3, r2, r3
 8007eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eb6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	008b      	lsls	r3, r1, #2
 8007ec8:	4641      	mov	r1, r8
 8007eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ece:	4641      	mov	r1, r8
 8007ed0:	008a      	lsls	r2, r1, #2
 8007ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ed6:	f7f8 f9d3 	bl	8000280 <__aeabi_uldivmod>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4b0d      	ldr	r3, [pc, #52]	@ (8007f14 <UART_SetConfig+0x4e4>)
 8007ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	2164      	movs	r1, #100	@ 0x64
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	3332      	adds	r3, #50	@ 0x32
 8007ef2:	4a08      	ldr	r2, [pc, #32]	@ (8007f14 <UART_SetConfig+0x4e4>)
 8007ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f003 020f 	and.w	r2, r3, #15
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4422      	add	r2, r4
 8007f06:	609a      	str	r2, [r3, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f14:	51eb851f 	.word	0x51eb851f

08007f18 <atoi>:
 8007f18:	220a      	movs	r2, #10
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	f000 b87a 	b.w	8008014 <strtol>

08007f20 <_strtol_l.constprop.0>:
 8007f20:	2b24      	cmp	r3, #36	@ 0x24
 8007f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f26:	4686      	mov	lr, r0
 8007f28:	4690      	mov	r8, r2
 8007f2a:	d801      	bhi.n	8007f30 <_strtol_l.constprop.0+0x10>
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d106      	bne.n	8007f3e <_strtol_l.constprop.0+0x1e>
 8007f30:	f000 fafa 	bl	8008528 <__errno>
 8007f34:	2316      	movs	r3, #22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f3e:	4834      	ldr	r0, [pc, #208]	@ (8008010 <_strtol_l.constprop.0+0xf0>)
 8007f40:	460d      	mov	r5, r1
 8007f42:	462a      	mov	r2, r5
 8007f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f48:	5d06      	ldrb	r6, [r0, r4]
 8007f4a:	f016 0608 	ands.w	r6, r6, #8
 8007f4e:	d1f8      	bne.n	8007f42 <_strtol_l.constprop.0+0x22>
 8007f50:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f52:	d12d      	bne.n	8007fb0 <_strtol_l.constprop.0+0x90>
 8007f54:	782c      	ldrb	r4, [r5, #0]
 8007f56:	2601      	movs	r6, #1
 8007f58:	1c95      	adds	r5, r2, #2
 8007f5a:	f033 0210 	bics.w	r2, r3, #16
 8007f5e:	d109      	bne.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007f60:	2c30      	cmp	r4, #48	@ 0x30
 8007f62:	d12a      	bne.n	8007fba <_strtol_l.constprop.0+0x9a>
 8007f64:	782a      	ldrb	r2, [r5, #0]
 8007f66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6a:	2a58      	cmp	r2, #88	@ 0x58
 8007f6c:	d125      	bne.n	8007fba <_strtol_l.constprop.0+0x9a>
 8007f6e:	786c      	ldrb	r4, [r5, #1]
 8007f70:	2310      	movs	r3, #16
 8007f72:	3502      	adds	r5, #2
 8007f74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	fbbc f9f3 	udiv	r9, ip, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f8c:	2f09      	cmp	r7, #9
 8007f8e:	d81b      	bhi.n	8007fc8 <_strtol_l.constprop.0+0xa8>
 8007f90:	463c      	mov	r4, r7
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	dd27      	ble.n	8007fe6 <_strtol_l.constprop.0+0xc6>
 8007f96:	1c57      	adds	r7, r2, #1
 8007f98:	d007      	beq.n	8007faa <_strtol_l.constprop.0+0x8a>
 8007f9a:	4581      	cmp	r9, r0
 8007f9c:	d320      	bcc.n	8007fe0 <_strtol_l.constprop.0+0xc0>
 8007f9e:	d101      	bne.n	8007fa4 <_strtol_l.constprop.0+0x84>
 8007fa0:	45a2      	cmp	sl, r4
 8007fa2:	db1d      	blt.n	8007fe0 <_strtol_l.constprop.0+0xc0>
 8007fa4:	fb00 4003 	mla	r0, r0, r3, r4
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fae:	e7eb      	b.n	8007f88 <_strtol_l.constprop.0+0x68>
 8007fb0:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fb2:	bf04      	itt	eq
 8007fb4:	782c      	ldrbeq	r4, [r5, #0]
 8007fb6:	1c95      	addeq	r5, r2, #2
 8007fb8:	e7cf      	b.n	8007f5a <_strtol_l.constprop.0+0x3a>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1da      	bne.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007fbe:	2c30      	cmp	r4, #48	@ 0x30
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2308      	moveq	r3, #8
 8007fc4:	230a      	movne	r3, #10
 8007fc6:	e7d5      	b.n	8007f74 <_strtol_l.constprop.0+0x54>
 8007fc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fcc:	2f19      	cmp	r7, #25
 8007fce:	d801      	bhi.n	8007fd4 <_strtol_l.constprop.0+0xb4>
 8007fd0:	3c37      	subs	r4, #55	@ 0x37
 8007fd2:	e7de      	b.n	8007f92 <_strtol_l.constprop.0+0x72>
 8007fd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fd8:	2f19      	cmp	r7, #25
 8007fda:	d804      	bhi.n	8007fe6 <_strtol_l.constprop.0+0xc6>
 8007fdc:	3c57      	subs	r4, #87	@ 0x57
 8007fde:	e7d8      	b.n	8007f92 <_strtol_l.constprop.0+0x72>
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	e7e1      	b.n	8007faa <_strtol_l.constprop.0+0x8a>
 8007fe6:	1c53      	adds	r3, r2, #1
 8007fe8:	d108      	bne.n	8007ffc <_strtol_l.constprop.0+0xdc>
 8007fea:	2322      	movs	r3, #34	@ 0x22
 8007fec:	f8ce 3000 	str.w	r3, [lr]
 8007ff0:	4660      	mov	r0, ip
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	d0a0      	beq.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8007ff8:	1e69      	subs	r1, r5, #1
 8007ffa:	e006      	b.n	800800a <_strtol_l.constprop.0+0xea>
 8007ffc:	b106      	cbz	r6, 8008000 <_strtol_l.constprop.0+0xe0>
 8007ffe:	4240      	negs	r0, r0
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	d099      	beq.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8008006:	2a00      	cmp	r2, #0
 8008008:	d1f6      	bne.n	8007ff8 <_strtol_l.constprop.0+0xd8>
 800800a:	f8c8 1000 	str.w	r1, [r8]
 800800e:	e794      	b.n	8007f3a <_strtol_l.constprop.0+0x1a>
 8008010:	08009515 	.word	0x08009515

08008014 <strtol>:
 8008014:	4613      	mov	r3, r2
 8008016:	460a      	mov	r2, r1
 8008018:	4601      	mov	r1, r0
 800801a:	4802      	ldr	r0, [pc, #8]	@ (8008024 <strtol+0x10>)
 800801c:	6800      	ldr	r0, [r0, #0]
 800801e:	f7ff bf7f 	b.w	8007f20 <_strtol_l.constprop.0>
 8008022:	bf00      	nop
 8008024:	20000018 	.word	0x20000018

08008028 <std>:
 8008028:	2300      	movs	r3, #0
 800802a:	b510      	push	{r4, lr}
 800802c:	4604      	mov	r4, r0
 800802e:	e9c0 3300 	strd	r3, r3, [r0]
 8008032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008036:	6083      	str	r3, [r0, #8]
 8008038:	8181      	strh	r1, [r0, #12]
 800803a:	6643      	str	r3, [r0, #100]	@ 0x64
 800803c:	81c2      	strh	r2, [r0, #14]
 800803e:	6183      	str	r3, [r0, #24]
 8008040:	4619      	mov	r1, r3
 8008042:	2208      	movs	r2, #8
 8008044:	305c      	adds	r0, #92	@ 0x5c
 8008046:	f000 fa21 	bl	800848c <memset>
 800804a:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <std+0x58>)
 800804c:	6263      	str	r3, [r4, #36]	@ 0x24
 800804e:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <std+0x5c>)
 8008050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008052:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <std+0x60>)
 8008054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008056:	4b0d      	ldr	r3, [pc, #52]	@ (800808c <std+0x64>)
 8008058:	6323      	str	r3, [r4, #48]	@ 0x30
 800805a:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <std+0x68>)
 800805c:	6224      	str	r4, [r4, #32]
 800805e:	429c      	cmp	r4, r3
 8008060:	d006      	beq.n	8008070 <std+0x48>
 8008062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008066:	4294      	cmp	r4, r2
 8008068:	d002      	beq.n	8008070 <std+0x48>
 800806a:	33d0      	adds	r3, #208	@ 0xd0
 800806c:	429c      	cmp	r4, r3
 800806e:	d105      	bne.n	800807c <std+0x54>
 8008070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008078:	f000 ba80 	b.w	800857c <__retarget_lock_init_recursive>
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	080082dd 	.word	0x080082dd
 8008084:	080082ff 	.word	0x080082ff
 8008088:	08008337 	.word	0x08008337
 800808c:	0800835b 	.word	0x0800835b
 8008090:	200003f8 	.word	0x200003f8

08008094 <stdio_exit_handler>:
 8008094:	4a02      	ldr	r2, [pc, #8]	@ (80080a0 <stdio_exit_handler+0xc>)
 8008096:	4903      	ldr	r1, [pc, #12]	@ (80080a4 <stdio_exit_handler+0x10>)
 8008098:	4803      	ldr	r0, [pc, #12]	@ (80080a8 <stdio_exit_handler+0x14>)
 800809a:	f000 b869 	b.w	8008170 <_fwalk_sglue>
 800809e:	bf00      	nop
 80080a0:	2000000c 	.word	0x2000000c
 80080a4:	080090cd 	.word	0x080090cd
 80080a8:	2000001c 	.word	0x2000001c

080080ac <cleanup_stdio>:
 80080ac:	6841      	ldr	r1, [r0, #4]
 80080ae:	4b0c      	ldr	r3, [pc, #48]	@ (80080e0 <cleanup_stdio+0x34>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	b510      	push	{r4, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	d001      	beq.n	80080bc <cleanup_stdio+0x10>
 80080b8:	f001 f808 	bl	80090cc <_fflush_r>
 80080bc:	68a1      	ldr	r1, [r4, #8]
 80080be:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <cleanup_stdio+0x38>)
 80080c0:	4299      	cmp	r1, r3
 80080c2:	d002      	beq.n	80080ca <cleanup_stdio+0x1e>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f001 f801 	bl	80090cc <_fflush_r>
 80080ca:	68e1      	ldr	r1, [r4, #12]
 80080cc:	4b06      	ldr	r3, [pc, #24]	@ (80080e8 <cleanup_stdio+0x3c>)
 80080ce:	4299      	cmp	r1, r3
 80080d0:	d004      	beq.n	80080dc <cleanup_stdio+0x30>
 80080d2:	4620      	mov	r0, r4
 80080d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d8:	f000 bff8 	b.w	80090cc <_fflush_r>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	bf00      	nop
 80080e0:	200003f8 	.word	0x200003f8
 80080e4:	20000460 	.word	0x20000460
 80080e8:	200004c8 	.word	0x200004c8

080080ec <global_stdio_init.part.0>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4b0b      	ldr	r3, [pc, #44]	@ (800811c <global_stdio_init.part.0+0x30>)
 80080f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008120 <global_stdio_init.part.0+0x34>)
 80080f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008124 <global_stdio_init.part.0+0x38>)
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4620      	mov	r0, r4
 80080f8:	2200      	movs	r2, #0
 80080fa:	2104      	movs	r1, #4
 80080fc:	f7ff ff94 	bl	8008028 <std>
 8008100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008104:	2201      	movs	r2, #1
 8008106:	2109      	movs	r1, #9
 8008108:	f7ff ff8e 	bl	8008028 <std>
 800810c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008110:	2202      	movs	r2, #2
 8008112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008116:	2112      	movs	r1, #18
 8008118:	f7ff bf86 	b.w	8008028 <std>
 800811c:	20000530 	.word	0x20000530
 8008120:	200003f8 	.word	0x200003f8
 8008124:	08008095 	.word	0x08008095

08008128 <__sfp_lock_acquire>:
 8008128:	4801      	ldr	r0, [pc, #4]	@ (8008130 <__sfp_lock_acquire+0x8>)
 800812a:	f000 ba28 	b.w	800857e <__retarget_lock_acquire_recursive>
 800812e:	bf00      	nop
 8008130:	20000539 	.word	0x20000539

08008134 <__sfp_lock_release>:
 8008134:	4801      	ldr	r0, [pc, #4]	@ (800813c <__sfp_lock_release+0x8>)
 8008136:	f000 ba23 	b.w	8008580 <__retarget_lock_release_recursive>
 800813a:	bf00      	nop
 800813c:	20000539 	.word	0x20000539

08008140 <__sinit>:
 8008140:	b510      	push	{r4, lr}
 8008142:	4604      	mov	r4, r0
 8008144:	f7ff fff0 	bl	8008128 <__sfp_lock_acquire>
 8008148:	6a23      	ldr	r3, [r4, #32]
 800814a:	b11b      	cbz	r3, 8008154 <__sinit+0x14>
 800814c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008150:	f7ff bff0 	b.w	8008134 <__sfp_lock_release>
 8008154:	4b04      	ldr	r3, [pc, #16]	@ (8008168 <__sinit+0x28>)
 8008156:	6223      	str	r3, [r4, #32]
 8008158:	4b04      	ldr	r3, [pc, #16]	@ (800816c <__sinit+0x2c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f5      	bne.n	800814c <__sinit+0xc>
 8008160:	f7ff ffc4 	bl	80080ec <global_stdio_init.part.0>
 8008164:	e7f2      	b.n	800814c <__sinit+0xc>
 8008166:	bf00      	nop
 8008168:	080080ad 	.word	0x080080ad
 800816c:	20000530 	.word	0x20000530

08008170 <_fwalk_sglue>:
 8008170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008174:	4607      	mov	r7, r0
 8008176:	4688      	mov	r8, r1
 8008178:	4614      	mov	r4, r2
 800817a:	2600      	movs	r6, #0
 800817c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008180:	f1b9 0901 	subs.w	r9, r9, #1
 8008184:	d505      	bpl.n	8008192 <_fwalk_sglue+0x22>
 8008186:	6824      	ldr	r4, [r4, #0]
 8008188:	2c00      	cmp	r4, #0
 800818a:	d1f7      	bne.n	800817c <_fwalk_sglue+0xc>
 800818c:	4630      	mov	r0, r6
 800818e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d907      	bls.n	80081a8 <_fwalk_sglue+0x38>
 8008198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800819c:	3301      	adds	r3, #1
 800819e:	d003      	beq.n	80081a8 <_fwalk_sglue+0x38>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c0      	blx	r8
 80081a6:	4306      	orrs	r6, r0
 80081a8:	3568      	adds	r5, #104	@ 0x68
 80081aa:	e7e9      	b.n	8008180 <_fwalk_sglue+0x10>

080081ac <iprintf>:
 80081ac:	b40f      	push	{r0, r1, r2, r3}
 80081ae:	b507      	push	{r0, r1, r2, lr}
 80081b0:	4906      	ldr	r1, [pc, #24]	@ (80081cc <iprintf+0x20>)
 80081b2:	ab04      	add	r3, sp, #16
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ba:	6881      	ldr	r1, [r0, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	f000 fc5b 	bl	8008a78 <_vfiprintf_r>
 80081c2:	b003      	add	sp, #12
 80081c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081c8:	b004      	add	sp, #16
 80081ca:	4770      	bx	lr
 80081cc:	20000018 	.word	0x20000018

080081d0 <putchar>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	@ (80081dc <putchar+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	6882      	ldr	r2, [r0, #8]
 80081d8:	f001 b802 	b.w	80091e0 <_putc_r>
 80081dc:	20000018 	.word	0x20000018

080081e0 <_puts_r>:
 80081e0:	6a03      	ldr	r3, [r0, #32]
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	6884      	ldr	r4, [r0, #8]
 80081e6:	4605      	mov	r5, r0
 80081e8:	460e      	mov	r6, r1
 80081ea:	b90b      	cbnz	r3, 80081f0 <_puts_r+0x10>
 80081ec:	f7ff ffa8 	bl	8008140 <__sinit>
 80081f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081f2:	07db      	lsls	r3, r3, #31
 80081f4:	d405      	bmi.n	8008202 <_puts_r+0x22>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	0598      	lsls	r0, r3, #22
 80081fa:	d402      	bmi.n	8008202 <_puts_r+0x22>
 80081fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081fe:	f000 f9be 	bl	800857e <__retarget_lock_acquire_recursive>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	0719      	lsls	r1, r3, #28
 8008206:	d502      	bpl.n	800820e <_puts_r+0x2e>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d135      	bne.n	800827a <_puts_r+0x9a>
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 f8e5 	bl	80083e0 <__swsetup_r>
 8008216:	b380      	cbz	r0, 800827a <_puts_r+0x9a>
 8008218:	f04f 35ff 	mov.w	r5, #4294967295
 800821c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800821e:	07da      	lsls	r2, r3, #31
 8008220:	d405      	bmi.n	800822e <_puts_r+0x4e>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	059b      	lsls	r3, r3, #22
 8008226:	d402      	bmi.n	800822e <_puts_r+0x4e>
 8008228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800822a:	f000 f9a9 	bl	8008580 <__retarget_lock_release_recursive>
 800822e:	4628      	mov	r0, r5
 8008230:	bd70      	pop	{r4, r5, r6, pc}
 8008232:	2b00      	cmp	r3, #0
 8008234:	da04      	bge.n	8008240 <_puts_r+0x60>
 8008236:	69a2      	ldr	r2, [r4, #24]
 8008238:	429a      	cmp	r2, r3
 800823a:	dc17      	bgt.n	800826c <_puts_r+0x8c>
 800823c:	290a      	cmp	r1, #10
 800823e:	d015      	beq.n	800826c <_puts_r+0x8c>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	7019      	strb	r1, [r3, #0]
 8008248:	68a3      	ldr	r3, [r4, #8]
 800824a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800824e:	3b01      	subs	r3, #1
 8008250:	60a3      	str	r3, [r4, #8]
 8008252:	2900      	cmp	r1, #0
 8008254:	d1ed      	bne.n	8008232 <_puts_r+0x52>
 8008256:	2b00      	cmp	r3, #0
 8008258:	da11      	bge.n	800827e <_puts_r+0x9e>
 800825a:	4622      	mov	r2, r4
 800825c:	210a      	movs	r1, #10
 800825e:	4628      	mov	r0, r5
 8008260:	f000 f87f 	bl	8008362 <__swbuf_r>
 8008264:	3001      	adds	r0, #1
 8008266:	d0d7      	beq.n	8008218 <_puts_r+0x38>
 8008268:	250a      	movs	r5, #10
 800826a:	e7d7      	b.n	800821c <_puts_r+0x3c>
 800826c:	4622      	mov	r2, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f000 f877 	bl	8008362 <__swbuf_r>
 8008274:	3001      	adds	r0, #1
 8008276:	d1e7      	bne.n	8008248 <_puts_r+0x68>
 8008278:	e7ce      	b.n	8008218 <_puts_r+0x38>
 800827a:	3e01      	subs	r6, #1
 800827c:	e7e4      	b.n	8008248 <_puts_r+0x68>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	220a      	movs	r2, #10
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e7ee      	b.n	8008268 <_puts_r+0x88>
	...

0800828c <puts>:
 800828c:	4b02      	ldr	r3, [pc, #8]	@ (8008298 <puts+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f7ff bfa5 	b.w	80081e0 <_puts_r>
 8008296:	bf00      	nop
 8008298:	20000018 	.word	0x20000018

0800829c <siprintf>:
 800829c:	b40e      	push	{r1, r2, r3}
 800829e:	b500      	push	{lr}
 80082a0:	b09c      	sub	sp, #112	@ 0x70
 80082a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80082a4:	9002      	str	r0, [sp, #8]
 80082a6:	9006      	str	r0, [sp, #24]
 80082a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80082ac:	4809      	ldr	r0, [pc, #36]	@ (80082d4 <siprintf+0x38>)
 80082ae:	9107      	str	r1, [sp, #28]
 80082b0:	9104      	str	r1, [sp, #16]
 80082b2:	4909      	ldr	r1, [pc, #36]	@ (80082d8 <siprintf+0x3c>)
 80082b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b8:	9105      	str	r1, [sp, #20]
 80082ba:	6800      	ldr	r0, [r0, #0]
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	a902      	add	r1, sp, #8
 80082c0:	f000 fab4 	bl	800882c <_svfiprintf_r>
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	b01c      	add	sp, #112	@ 0x70
 80082cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d0:	b003      	add	sp, #12
 80082d2:	4770      	bx	lr
 80082d4:	20000018 	.word	0x20000018
 80082d8:	ffff0208 	.word	0xffff0208

080082dc <__sread>:
 80082dc:	b510      	push	{r4, lr}
 80082de:	460c      	mov	r4, r1
 80082e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e4:	f000 f8fc 	bl	80084e0 <_read_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	bfab      	itete	ge
 80082ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082ee:	89a3      	ldrhlt	r3, [r4, #12]
 80082f0:	181b      	addge	r3, r3, r0
 80082f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082f6:	bfac      	ite	ge
 80082f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082fa:	81a3      	strhlt	r3, [r4, #12]
 80082fc:	bd10      	pop	{r4, pc}

080082fe <__swrite>:
 80082fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008302:	461f      	mov	r7, r3
 8008304:	898b      	ldrh	r3, [r1, #12]
 8008306:	05db      	lsls	r3, r3, #23
 8008308:	4605      	mov	r5, r0
 800830a:	460c      	mov	r4, r1
 800830c:	4616      	mov	r6, r2
 800830e:	d505      	bpl.n	800831c <__swrite+0x1e>
 8008310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008314:	2302      	movs	r3, #2
 8008316:	2200      	movs	r2, #0
 8008318:	f000 f8d0 	bl	80084bc <_lseek_r>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	4628      	mov	r0, r5
 800832e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008332:	f000 b8e7 	b.w	8008504 <_write_r>

08008336 <__sseek>:
 8008336:	b510      	push	{r4, lr}
 8008338:	460c      	mov	r4, r1
 800833a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833e:	f000 f8bd 	bl	80084bc <_lseek_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	bf15      	itete	ne
 8008348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800834a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800834e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008352:	81a3      	strheq	r3, [r4, #12]
 8008354:	bf18      	it	ne
 8008356:	81a3      	strhne	r3, [r4, #12]
 8008358:	bd10      	pop	{r4, pc}

0800835a <__sclose>:
 800835a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835e:	f000 b89d 	b.w	800849c <_close_r>

08008362 <__swbuf_r>:
 8008362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008364:	460e      	mov	r6, r1
 8008366:	4614      	mov	r4, r2
 8008368:	4605      	mov	r5, r0
 800836a:	b118      	cbz	r0, 8008374 <__swbuf_r+0x12>
 800836c:	6a03      	ldr	r3, [r0, #32]
 800836e:	b90b      	cbnz	r3, 8008374 <__swbuf_r+0x12>
 8008370:	f7ff fee6 	bl	8008140 <__sinit>
 8008374:	69a3      	ldr	r3, [r4, #24]
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	071a      	lsls	r2, r3, #28
 800837c:	d501      	bpl.n	8008382 <__swbuf_r+0x20>
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	b943      	cbnz	r3, 8008394 <__swbuf_r+0x32>
 8008382:	4621      	mov	r1, r4
 8008384:	4628      	mov	r0, r5
 8008386:	f000 f82b 	bl	80083e0 <__swsetup_r>
 800838a:	b118      	cbz	r0, 8008394 <__swbuf_r+0x32>
 800838c:	f04f 37ff 	mov.w	r7, #4294967295
 8008390:	4638      	mov	r0, r7
 8008392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	1a98      	subs	r0, r3, r2
 800839a:	6963      	ldr	r3, [r4, #20]
 800839c:	b2f6      	uxtb	r6, r6
 800839e:	4283      	cmp	r3, r0
 80083a0:	4637      	mov	r7, r6
 80083a2:	dc05      	bgt.n	80083b0 <__swbuf_r+0x4e>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 fe90 	bl	80090cc <_fflush_r>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1ed      	bne.n	800838c <__swbuf_r+0x2a>
 80083b0:	68a3      	ldr	r3, [r4, #8]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	6022      	str	r2, [r4, #0]
 80083bc:	701e      	strb	r6, [r3, #0]
 80083be:	6962      	ldr	r2, [r4, #20]
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d004      	beq.n	80083d0 <__swbuf_r+0x6e>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	07db      	lsls	r3, r3, #31
 80083ca:	d5e1      	bpl.n	8008390 <__swbuf_r+0x2e>
 80083cc:	2e0a      	cmp	r6, #10
 80083ce:	d1df      	bne.n	8008390 <__swbuf_r+0x2e>
 80083d0:	4621      	mov	r1, r4
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fe7a 	bl	80090cc <_fflush_r>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d0d9      	beq.n	8008390 <__swbuf_r+0x2e>
 80083dc:	e7d6      	b.n	800838c <__swbuf_r+0x2a>
	...

080083e0 <__swsetup_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4b29      	ldr	r3, [pc, #164]	@ (8008488 <__swsetup_r+0xa8>)
 80083e4:	4605      	mov	r5, r0
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	460c      	mov	r4, r1
 80083ea:	b118      	cbz	r0, 80083f4 <__swsetup_r+0x14>
 80083ec:	6a03      	ldr	r3, [r0, #32]
 80083ee:	b90b      	cbnz	r3, 80083f4 <__swsetup_r+0x14>
 80083f0:	f7ff fea6 	bl	8008140 <__sinit>
 80083f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f8:	0719      	lsls	r1, r3, #28
 80083fa:	d422      	bmi.n	8008442 <__swsetup_r+0x62>
 80083fc:	06da      	lsls	r2, r3, #27
 80083fe:	d407      	bmi.n	8008410 <__swsetup_r+0x30>
 8008400:	2209      	movs	r2, #9
 8008402:	602a      	str	r2, [r5, #0]
 8008404:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
 800840e:	e033      	b.n	8008478 <__swsetup_r+0x98>
 8008410:	0758      	lsls	r0, r3, #29
 8008412:	d512      	bpl.n	800843a <__swsetup_r+0x5a>
 8008414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008416:	b141      	cbz	r1, 800842a <__swsetup_r+0x4a>
 8008418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800841c:	4299      	cmp	r1, r3
 800841e:	d002      	beq.n	8008426 <__swsetup_r+0x46>
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f8af 	bl	8008584 <_free_r>
 8008426:	2300      	movs	r3, #0
 8008428:	6363      	str	r3, [r4, #52]	@ 0x34
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	2300      	movs	r3, #0
 8008434:	6063      	str	r3, [r4, #4]
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f043 0308 	orr.w	r3, r3, #8
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	b94b      	cbnz	r3, 800845a <__swsetup_r+0x7a>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800844c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008450:	d003      	beq.n	800845a <__swsetup_r+0x7a>
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 fe87 	bl	8009168 <__smakebuf_r>
 800845a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845e:	f013 0201 	ands.w	r2, r3, #1
 8008462:	d00a      	beq.n	800847a <__swsetup_r+0x9a>
 8008464:	2200      	movs	r2, #0
 8008466:	60a2      	str	r2, [r4, #8]
 8008468:	6962      	ldr	r2, [r4, #20]
 800846a:	4252      	negs	r2, r2
 800846c:	61a2      	str	r2, [r4, #24]
 800846e:	6922      	ldr	r2, [r4, #16]
 8008470:	b942      	cbnz	r2, 8008484 <__swsetup_r+0xa4>
 8008472:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008476:	d1c5      	bne.n	8008404 <__swsetup_r+0x24>
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	0799      	lsls	r1, r3, #30
 800847c:	bf58      	it	pl
 800847e:	6962      	ldrpl	r2, [r4, #20]
 8008480:	60a2      	str	r2, [r4, #8]
 8008482:	e7f4      	b.n	800846e <__swsetup_r+0x8e>
 8008484:	2000      	movs	r0, #0
 8008486:	e7f7      	b.n	8008478 <__swsetup_r+0x98>
 8008488:	20000018 	.word	0x20000018

0800848c <memset>:
 800848c:	4402      	add	r2, r0
 800848e:	4603      	mov	r3, r0
 8008490:	4293      	cmp	r3, r2
 8008492:	d100      	bne.n	8008496 <memset+0xa>
 8008494:	4770      	bx	lr
 8008496:	f803 1b01 	strb.w	r1, [r3], #1
 800849a:	e7f9      	b.n	8008490 <memset+0x4>

0800849c <_close_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d06      	ldr	r5, [pc, #24]	@ (80084b8 <_close_r+0x1c>)
 80084a0:	2300      	movs	r3, #0
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	602b      	str	r3, [r5, #0]
 80084a8:	f7f9 fa41 	bl	800192e <_close>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_close_r+0x1a>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_close_r+0x1a>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20000534 	.word	0x20000534

080084bc <_lseek_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_lseek_r+0x20>)
 80084c0:	4604      	mov	r4, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f9 fa56 	bl	800197c <_lseek>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_lseek_r+0x1e>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_lseek_r+0x1e>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20000534 	.word	0x20000534

080084e0 <_read_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4d07      	ldr	r5, [pc, #28]	@ (8008500 <_read_r+0x20>)
 80084e4:	4604      	mov	r4, r0
 80084e6:	4608      	mov	r0, r1
 80084e8:	4611      	mov	r1, r2
 80084ea:	2200      	movs	r2, #0
 80084ec:	602a      	str	r2, [r5, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	f7f9 f9e4 	bl	80018bc <_read>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d102      	bne.n	80084fe <_read_r+0x1e>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	b103      	cbz	r3, 80084fe <_read_r+0x1e>
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	20000534 	.word	0x20000534

08008504 <_write_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d07      	ldr	r5, [pc, #28]	@ (8008524 <_write_r+0x20>)
 8008508:	4604      	mov	r4, r0
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	2200      	movs	r2, #0
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f7f9 f9ef 	bl	80018f6 <_write>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_write_r+0x1e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_write_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20000534 	.word	0x20000534

08008528 <__errno>:
 8008528:	4b01      	ldr	r3, [pc, #4]	@ (8008530 <__errno+0x8>)
 800852a:	6818      	ldr	r0, [r3, #0]
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000018 	.word	0x20000018

08008534 <__libc_init_array>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4d0d      	ldr	r5, [pc, #52]	@ (800856c <__libc_init_array+0x38>)
 8008538:	4c0d      	ldr	r4, [pc, #52]	@ (8008570 <__libc_init_array+0x3c>)
 800853a:	1b64      	subs	r4, r4, r5
 800853c:	10a4      	asrs	r4, r4, #2
 800853e:	2600      	movs	r6, #0
 8008540:	42a6      	cmp	r6, r4
 8008542:	d109      	bne.n	8008558 <__libc_init_array+0x24>
 8008544:	4d0b      	ldr	r5, [pc, #44]	@ (8008574 <__libc_init_array+0x40>)
 8008546:	4c0c      	ldr	r4, [pc, #48]	@ (8008578 <__libc_init_array+0x44>)
 8008548:	f000 ff0e 	bl	8009368 <_init>
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	2600      	movs	r6, #0
 8008552:	42a6      	cmp	r6, r4
 8008554:	d105      	bne.n	8008562 <__libc_init_array+0x2e>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f855 3b04 	ldr.w	r3, [r5], #4
 800855c:	4798      	blx	r3
 800855e:	3601      	adds	r6, #1
 8008560:	e7ee      	b.n	8008540 <__libc_init_array+0xc>
 8008562:	f855 3b04 	ldr.w	r3, [r5], #4
 8008566:	4798      	blx	r3
 8008568:	3601      	adds	r6, #1
 800856a:	e7f2      	b.n	8008552 <__libc_init_array+0x1e>
 800856c:	08009650 	.word	0x08009650
 8008570:	08009650 	.word	0x08009650
 8008574:	08009650 	.word	0x08009650
 8008578:	08009654 	.word	0x08009654

0800857c <__retarget_lock_init_recursive>:
 800857c:	4770      	bx	lr

0800857e <__retarget_lock_acquire_recursive>:
 800857e:	4770      	bx	lr

08008580 <__retarget_lock_release_recursive>:
 8008580:	4770      	bx	lr
	...

08008584 <_free_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4605      	mov	r5, r0
 8008588:	2900      	cmp	r1, #0
 800858a:	d041      	beq.n	8008610 <_free_r+0x8c>
 800858c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008590:	1f0c      	subs	r4, r1, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	bfb8      	it	lt
 8008596:	18e4      	addlt	r4, r4, r3
 8008598:	f000 f8e0 	bl	800875c <__malloc_lock>
 800859c:	4a1d      	ldr	r2, [pc, #116]	@ (8008614 <_free_r+0x90>)
 800859e:	6813      	ldr	r3, [r2, #0]
 80085a0:	b933      	cbnz	r3, 80085b0 <_free_r+0x2c>
 80085a2:	6063      	str	r3, [r4, #4]
 80085a4:	6014      	str	r4, [r2, #0]
 80085a6:	4628      	mov	r0, r5
 80085a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085ac:	f000 b8dc 	b.w	8008768 <__malloc_unlock>
 80085b0:	42a3      	cmp	r3, r4
 80085b2:	d908      	bls.n	80085c6 <_free_r+0x42>
 80085b4:	6820      	ldr	r0, [r4, #0]
 80085b6:	1821      	adds	r1, r4, r0
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf01      	itttt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	1809      	addeq	r1, r1, r0
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	e7ed      	b.n	80085a2 <_free_r+0x1e>
 80085c6:	461a      	mov	r2, r3
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b10b      	cbz	r3, 80085d0 <_free_r+0x4c>
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	d9fa      	bls.n	80085c6 <_free_r+0x42>
 80085d0:	6811      	ldr	r1, [r2, #0]
 80085d2:	1850      	adds	r0, r2, r1
 80085d4:	42a0      	cmp	r0, r4
 80085d6:	d10b      	bne.n	80085f0 <_free_r+0x6c>
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	4401      	add	r1, r0
 80085dc:	1850      	adds	r0, r2, r1
 80085de:	4283      	cmp	r3, r0
 80085e0:	6011      	str	r1, [r2, #0]
 80085e2:	d1e0      	bne.n	80085a6 <_free_r+0x22>
 80085e4:	6818      	ldr	r0, [r3, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	6053      	str	r3, [r2, #4]
 80085ea:	4408      	add	r0, r1
 80085ec:	6010      	str	r0, [r2, #0]
 80085ee:	e7da      	b.n	80085a6 <_free_r+0x22>
 80085f0:	d902      	bls.n	80085f8 <_free_r+0x74>
 80085f2:	230c      	movs	r3, #12
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	e7d6      	b.n	80085a6 <_free_r+0x22>
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	1821      	adds	r1, r4, r0
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bf04      	itt	eq
 8008600:	6819      	ldreq	r1, [r3, #0]
 8008602:	685b      	ldreq	r3, [r3, #4]
 8008604:	6063      	str	r3, [r4, #4]
 8008606:	bf04      	itt	eq
 8008608:	1809      	addeq	r1, r1, r0
 800860a:	6021      	streq	r1, [r4, #0]
 800860c:	6054      	str	r4, [r2, #4]
 800860e:	e7ca      	b.n	80085a6 <_free_r+0x22>
 8008610:	bd38      	pop	{r3, r4, r5, pc}
 8008612:	bf00      	nop
 8008614:	20000540 	.word	0x20000540

08008618 <sbrk_aligned>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4e0f      	ldr	r6, [pc, #60]	@ (8008658 <sbrk_aligned+0x40>)
 800861c:	460c      	mov	r4, r1
 800861e:	6831      	ldr	r1, [r6, #0]
 8008620:	4605      	mov	r5, r0
 8008622:	b911      	cbnz	r1, 800862a <sbrk_aligned+0x12>
 8008624:	f000 fe4c 	bl	80092c0 <_sbrk_r>
 8008628:	6030      	str	r0, [r6, #0]
 800862a:	4621      	mov	r1, r4
 800862c:	4628      	mov	r0, r5
 800862e:	f000 fe47 	bl	80092c0 <_sbrk_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d103      	bne.n	800863e <sbrk_aligned+0x26>
 8008636:	f04f 34ff 	mov.w	r4, #4294967295
 800863a:	4620      	mov	r0, r4
 800863c:	bd70      	pop	{r4, r5, r6, pc}
 800863e:	1cc4      	adds	r4, r0, #3
 8008640:	f024 0403 	bic.w	r4, r4, #3
 8008644:	42a0      	cmp	r0, r4
 8008646:	d0f8      	beq.n	800863a <sbrk_aligned+0x22>
 8008648:	1a21      	subs	r1, r4, r0
 800864a:	4628      	mov	r0, r5
 800864c:	f000 fe38 	bl	80092c0 <_sbrk_r>
 8008650:	3001      	adds	r0, #1
 8008652:	d1f2      	bne.n	800863a <sbrk_aligned+0x22>
 8008654:	e7ef      	b.n	8008636 <sbrk_aligned+0x1e>
 8008656:	bf00      	nop
 8008658:	2000053c 	.word	0x2000053c

0800865c <_malloc_r>:
 800865c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008660:	1ccd      	adds	r5, r1, #3
 8008662:	f025 0503 	bic.w	r5, r5, #3
 8008666:	3508      	adds	r5, #8
 8008668:	2d0c      	cmp	r5, #12
 800866a:	bf38      	it	cc
 800866c:	250c      	movcc	r5, #12
 800866e:	2d00      	cmp	r5, #0
 8008670:	4606      	mov	r6, r0
 8008672:	db01      	blt.n	8008678 <_malloc_r+0x1c>
 8008674:	42a9      	cmp	r1, r5
 8008676:	d904      	bls.n	8008682 <_malloc_r+0x26>
 8008678:	230c      	movs	r3, #12
 800867a:	6033      	str	r3, [r6, #0]
 800867c:	2000      	movs	r0, #0
 800867e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008758 <_malloc_r+0xfc>
 8008686:	f000 f869 	bl	800875c <__malloc_lock>
 800868a:	f8d8 3000 	ldr.w	r3, [r8]
 800868e:	461c      	mov	r4, r3
 8008690:	bb44      	cbnz	r4, 80086e4 <_malloc_r+0x88>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	f7ff ffbf 	bl	8008618 <sbrk_aligned>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	4604      	mov	r4, r0
 800869e:	d158      	bne.n	8008752 <_malloc_r+0xf6>
 80086a0:	f8d8 4000 	ldr.w	r4, [r8]
 80086a4:	4627      	mov	r7, r4
 80086a6:	2f00      	cmp	r7, #0
 80086a8:	d143      	bne.n	8008732 <_malloc_r+0xd6>
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	d04b      	beq.n	8008746 <_malloc_r+0xea>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	4639      	mov	r1, r7
 80086b2:	4630      	mov	r0, r6
 80086b4:	eb04 0903 	add.w	r9, r4, r3
 80086b8:	f000 fe02 	bl	80092c0 <_sbrk_r>
 80086bc:	4581      	cmp	r9, r0
 80086be:	d142      	bne.n	8008746 <_malloc_r+0xea>
 80086c0:	6821      	ldr	r1, [r4, #0]
 80086c2:	1a6d      	subs	r5, r5, r1
 80086c4:	4629      	mov	r1, r5
 80086c6:	4630      	mov	r0, r6
 80086c8:	f7ff ffa6 	bl	8008618 <sbrk_aligned>
 80086cc:	3001      	adds	r0, #1
 80086ce:	d03a      	beq.n	8008746 <_malloc_r+0xea>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	442b      	add	r3, r5
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	f8d8 3000 	ldr.w	r3, [r8]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	bb62      	cbnz	r2, 8008738 <_malloc_r+0xdc>
 80086de:	f8c8 7000 	str.w	r7, [r8]
 80086e2:	e00f      	b.n	8008704 <_malloc_r+0xa8>
 80086e4:	6822      	ldr	r2, [r4, #0]
 80086e6:	1b52      	subs	r2, r2, r5
 80086e8:	d420      	bmi.n	800872c <_malloc_r+0xd0>
 80086ea:	2a0b      	cmp	r2, #11
 80086ec:	d917      	bls.n	800871e <_malloc_r+0xc2>
 80086ee:	1961      	adds	r1, r4, r5
 80086f0:	42a3      	cmp	r3, r4
 80086f2:	6025      	str	r5, [r4, #0]
 80086f4:	bf18      	it	ne
 80086f6:	6059      	strne	r1, [r3, #4]
 80086f8:	6863      	ldr	r3, [r4, #4]
 80086fa:	bf08      	it	eq
 80086fc:	f8c8 1000 	streq.w	r1, [r8]
 8008700:	5162      	str	r2, [r4, r5]
 8008702:	604b      	str	r3, [r1, #4]
 8008704:	4630      	mov	r0, r6
 8008706:	f000 f82f 	bl	8008768 <__malloc_unlock>
 800870a:	f104 000b 	add.w	r0, r4, #11
 800870e:	1d23      	adds	r3, r4, #4
 8008710:	f020 0007 	bic.w	r0, r0, #7
 8008714:	1ac2      	subs	r2, r0, r3
 8008716:	bf1c      	itt	ne
 8008718:	1a1b      	subne	r3, r3, r0
 800871a:	50a3      	strne	r3, [r4, r2]
 800871c:	e7af      	b.n	800867e <_malloc_r+0x22>
 800871e:	6862      	ldr	r2, [r4, #4]
 8008720:	42a3      	cmp	r3, r4
 8008722:	bf0c      	ite	eq
 8008724:	f8c8 2000 	streq.w	r2, [r8]
 8008728:	605a      	strne	r2, [r3, #4]
 800872a:	e7eb      	b.n	8008704 <_malloc_r+0xa8>
 800872c:	4623      	mov	r3, r4
 800872e:	6864      	ldr	r4, [r4, #4]
 8008730:	e7ae      	b.n	8008690 <_malloc_r+0x34>
 8008732:	463c      	mov	r4, r7
 8008734:	687f      	ldr	r7, [r7, #4]
 8008736:	e7b6      	b.n	80086a6 <_malloc_r+0x4a>
 8008738:	461a      	mov	r2, r3
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	42a3      	cmp	r3, r4
 800873e:	d1fb      	bne.n	8008738 <_malloc_r+0xdc>
 8008740:	2300      	movs	r3, #0
 8008742:	6053      	str	r3, [r2, #4]
 8008744:	e7de      	b.n	8008704 <_malloc_r+0xa8>
 8008746:	230c      	movs	r3, #12
 8008748:	6033      	str	r3, [r6, #0]
 800874a:	4630      	mov	r0, r6
 800874c:	f000 f80c 	bl	8008768 <__malloc_unlock>
 8008750:	e794      	b.n	800867c <_malloc_r+0x20>
 8008752:	6005      	str	r5, [r0, #0]
 8008754:	e7d6      	b.n	8008704 <_malloc_r+0xa8>
 8008756:	bf00      	nop
 8008758:	20000540 	.word	0x20000540

0800875c <__malloc_lock>:
 800875c:	4801      	ldr	r0, [pc, #4]	@ (8008764 <__malloc_lock+0x8>)
 800875e:	f7ff bf0e 	b.w	800857e <__retarget_lock_acquire_recursive>
 8008762:	bf00      	nop
 8008764:	20000538 	.word	0x20000538

08008768 <__malloc_unlock>:
 8008768:	4801      	ldr	r0, [pc, #4]	@ (8008770 <__malloc_unlock+0x8>)
 800876a:	f7ff bf09 	b.w	8008580 <__retarget_lock_release_recursive>
 800876e:	bf00      	nop
 8008770:	20000538 	.word	0x20000538

08008774 <__ssputs_r>:
 8008774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	688e      	ldr	r6, [r1, #8]
 800877a:	461f      	mov	r7, r3
 800877c:	42be      	cmp	r6, r7
 800877e:	680b      	ldr	r3, [r1, #0]
 8008780:	4682      	mov	sl, r0
 8008782:	460c      	mov	r4, r1
 8008784:	4690      	mov	r8, r2
 8008786:	d82d      	bhi.n	80087e4 <__ssputs_r+0x70>
 8008788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800878c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008790:	d026      	beq.n	80087e0 <__ssputs_r+0x6c>
 8008792:	6965      	ldr	r5, [r4, #20]
 8008794:	6909      	ldr	r1, [r1, #16]
 8008796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800879a:	eba3 0901 	sub.w	r9, r3, r1
 800879e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087a2:	1c7b      	adds	r3, r7, #1
 80087a4:	444b      	add	r3, r9
 80087a6:	106d      	asrs	r5, r5, #1
 80087a8:	429d      	cmp	r5, r3
 80087aa:	bf38      	it	cc
 80087ac:	461d      	movcc	r5, r3
 80087ae:	0553      	lsls	r3, r2, #21
 80087b0:	d527      	bpl.n	8008802 <__ssputs_r+0x8e>
 80087b2:	4629      	mov	r1, r5
 80087b4:	f7ff ff52 	bl	800865c <_malloc_r>
 80087b8:	4606      	mov	r6, r0
 80087ba:	b360      	cbz	r0, 8008816 <__ssputs_r+0xa2>
 80087bc:	6921      	ldr	r1, [r4, #16]
 80087be:	464a      	mov	r2, r9
 80087c0:	f000 fd8e 	bl	80092e0 <memcpy>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	6126      	str	r6, [r4, #16]
 80087d2:	6165      	str	r5, [r4, #20]
 80087d4:	444e      	add	r6, r9
 80087d6:	eba5 0509 	sub.w	r5, r5, r9
 80087da:	6026      	str	r6, [r4, #0]
 80087dc:	60a5      	str	r5, [r4, #8]
 80087de:	463e      	mov	r6, r7
 80087e0:	42be      	cmp	r6, r7
 80087e2:	d900      	bls.n	80087e6 <__ssputs_r+0x72>
 80087e4:	463e      	mov	r6, r7
 80087e6:	6820      	ldr	r0, [r4, #0]
 80087e8:	4632      	mov	r2, r6
 80087ea:	4641      	mov	r1, r8
 80087ec:	f000 fd2c 	bl	8009248 <memmove>
 80087f0:	68a3      	ldr	r3, [r4, #8]
 80087f2:	1b9b      	subs	r3, r3, r6
 80087f4:	60a3      	str	r3, [r4, #8]
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	4433      	add	r3, r6
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	2000      	movs	r0, #0
 80087fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008802:	462a      	mov	r2, r5
 8008804:	f000 fd7a 	bl	80092fc <_realloc_r>
 8008808:	4606      	mov	r6, r0
 800880a:	2800      	cmp	r0, #0
 800880c:	d1e0      	bne.n	80087d0 <__ssputs_r+0x5c>
 800880e:	6921      	ldr	r1, [r4, #16]
 8008810:	4650      	mov	r0, sl
 8008812:	f7ff feb7 	bl	8008584 <_free_r>
 8008816:	230c      	movs	r3, #12
 8008818:	f8ca 3000 	str.w	r3, [sl]
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	e7e9      	b.n	80087fe <__ssputs_r+0x8a>
	...

0800882c <_svfiprintf_r>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	4698      	mov	r8, r3
 8008832:	898b      	ldrh	r3, [r1, #12]
 8008834:	061b      	lsls	r3, r3, #24
 8008836:	b09d      	sub	sp, #116	@ 0x74
 8008838:	4607      	mov	r7, r0
 800883a:	460d      	mov	r5, r1
 800883c:	4614      	mov	r4, r2
 800883e:	d510      	bpl.n	8008862 <_svfiprintf_r+0x36>
 8008840:	690b      	ldr	r3, [r1, #16]
 8008842:	b973      	cbnz	r3, 8008862 <_svfiprintf_r+0x36>
 8008844:	2140      	movs	r1, #64	@ 0x40
 8008846:	f7ff ff09 	bl	800865c <_malloc_r>
 800884a:	6028      	str	r0, [r5, #0]
 800884c:	6128      	str	r0, [r5, #16]
 800884e:	b930      	cbnz	r0, 800885e <_svfiprintf_r+0x32>
 8008850:	230c      	movs	r3, #12
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b01d      	add	sp, #116	@ 0x74
 800885a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885e:	2340      	movs	r3, #64	@ 0x40
 8008860:	616b      	str	r3, [r5, #20]
 8008862:	2300      	movs	r3, #0
 8008864:	9309      	str	r3, [sp, #36]	@ 0x24
 8008866:	2320      	movs	r3, #32
 8008868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800886c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008870:	2330      	movs	r3, #48	@ 0x30
 8008872:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a10 <_svfiprintf_r+0x1e4>
 8008876:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800887a:	f04f 0901 	mov.w	r9, #1
 800887e:	4623      	mov	r3, r4
 8008880:	469a      	mov	sl, r3
 8008882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008886:	b10a      	cbz	r2, 800888c <_svfiprintf_r+0x60>
 8008888:	2a25      	cmp	r2, #37	@ 0x25
 800888a:	d1f9      	bne.n	8008880 <_svfiprintf_r+0x54>
 800888c:	ebba 0b04 	subs.w	fp, sl, r4
 8008890:	d00b      	beq.n	80088aa <_svfiprintf_r+0x7e>
 8008892:	465b      	mov	r3, fp
 8008894:	4622      	mov	r2, r4
 8008896:	4629      	mov	r1, r5
 8008898:	4638      	mov	r0, r7
 800889a:	f7ff ff6b 	bl	8008774 <__ssputs_r>
 800889e:	3001      	adds	r0, #1
 80088a0:	f000 80a7 	beq.w	80089f2 <_svfiprintf_r+0x1c6>
 80088a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a6:	445a      	add	r2, fp
 80088a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80088aa:	f89a 3000 	ldrb.w	r3, [sl]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 809f 	beq.w	80089f2 <_svfiprintf_r+0x1c6>
 80088b4:	2300      	movs	r3, #0
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088be:	f10a 0a01 	add.w	sl, sl, #1
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	9307      	str	r3, [sp, #28]
 80088c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80088cc:	4654      	mov	r4, sl
 80088ce:	2205      	movs	r2, #5
 80088d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d4:	484e      	ldr	r0, [pc, #312]	@ (8008a10 <_svfiprintf_r+0x1e4>)
 80088d6:	f7f7 fc83 	bl	80001e0 <memchr>
 80088da:	9a04      	ldr	r2, [sp, #16]
 80088dc:	b9d8      	cbnz	r0, 8008916 <_svfiprintf_r+0xea>
 80088de:	06d0      	lsls	r0, r2, #27
 80088e0:	bf44      	itt	mi
 80088e2:	2320      	movmi	r3, #32
 80088e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088e8:	0711      	lsls	r1, r2, #28
 80088ea:	bf44      	itt	mi
 80088ec:	232b      	movmi	r3, #43	@ 0x2b
 80088ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088f2:	f89a 3000 	ldrb.w	r3, [sl]
 80088f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088f8:	d015      	beq.n	8008926 <_svfiprintf_r+0xfa>
 80088fa:	9a07      	ldr	r2, [sp, #28]
 80088fc:	4654      	mov	r4, sl
 80088fe:	2000      	movs	r0, #0
 8008900:	f04f 0c0a 	mov.w	ip, #10
 8008904:	4621      	mov	r1, r4
 8008906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800890a:	3b30      	subs	r3, #48	@ 0x30
 800890c:	2b09      	cmp	r3, #9
 800890e:	d94b      	bls.n	80089a8 <_svfiprintf_r+0x17c>
 8008910:	b1b0      	cbz	r0, 8008940 <_svfiprintf_r+0x114>
 8008912:	9207      	str	r2, [sp, #28]
 8008914:	e014      	b.n	8008940 <_svfiprintf_r+0x114>
 8008916:	eba0 0308 	sub.w	r3, r0, r8
 800891a:	fa09 f303 	lsl.w	r3, r9, r3
 800891e:	4313      	orrs	r3, r2
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	46a2      	mov	sl, r4
 8008924:	e7d2      	b.n	80088cc <_svfiprintf_r+0xa0>
 8008926:	9b03      	ldr	r3, [sp, #12]
 8008928:	1d19      	adds	r1, r3, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	9103      	str	r1, [sp, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfbb      	ittet	lt
 8008932:	425b      	neglt	r3, r3
 8008934:	f042 0202 	orrlt.w	r2, r2, #2
 8008938:	9307      	strge	r3, [sp, #28]
 800893a:	9307      	strlt	r3, [sp, #28]
 800893c:	bfb8      	it	lt
 800893e:	9204      	strlt	r2, [sp, #16]
 8008940:	7823      	ldrb	r3, [r4, #0]
 8008942:	2b2e      	cmp	r3, #46	@ 0x2e
 8008944:	d10a      	bne.n	800895c <_svfiprintf_r+0x130>
 8008946:	7863      	ldrb	r3, [r4, #1]
 8008948:	2b2a      	cmp	r3, #42	@ 0x2a
 800894a:	d132      	bne.n	80089b2 <_svfiprintf_r+0x186>
 800894c:	9b03      	ldr	r3, [sp, #12]
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	9203      	str	r2, [sp, #12]
 8008954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008958:	3402      	adds	r4, #2
 800895a:	9305      	str	r3, [sp, #20]
 800895c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a20 <_svfiprintf_r+0x1f4>
 8008960:	7821      	ldrb	r1, [r4, #0]
 8008962:	2203      	movs	r2, #3
 8008964:	4650      	mov	r0, sl
 8008966:	f7f7 fc3b 	bl	80001e0 <memchr>
 800896a:	b138      	cbz	r0, 800897c <_svfiprintf_r+0x150>
 800896c:	9b04      	ldr	r3, [sp, #16]
 800896e:	eba0 000a 	sub.w	r0, r0, sl
 8008972:	2240      	movs	r2, #64	@ 0x40
 8008974:	4082      	lsls	r2, r0
 8008976:	4313      	orrs	r3, r2
 8008978:	3401      	adds	r4, #1
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008980:	4824      	ldr	r0, [pc, #144]	@ (8008a14 <_svfiprintf_r+0x1e8>)
 8008982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008986:	2206      	movs	r2, #6
 8008988:	f7f7 fc2a 	bl	80001e0 <memchr>
 800898c:	2800      	cmp	r0, #0
 800898e:	d036      	beq.n	80089fe <_svfiprintf_r+0x1d2>
 8008990:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <_svfiprintf_r+0x1ec>)
 8008992:	bb1b      	cbnz	r3, 80089dc <_svfiprintf_r+0x1b0>
 8008994:	9b03      	ldr	r3, [sp, #12]
 8008996:	3307      	adds	r3, #7
 8008998:	f023 0307 	bic.w	r3, r3, #7
 800899c:	3308      	adds	r3, #8
 800899e:	9303      	str	r3, [sp, #12]
 80089a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a2:	4433      	add	r3, r6
 80089a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089a6:	e76a      	b.n	800887e <_svfiprintf_r+0x52>
 80089a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ac:	460c      	mov	r4, r1
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7a8      	b.n	8008904 <_svfiprintf_r+0xd8>
 80089b2:	2300      	movs	r3, #0
 80089b4:	3401      	adds	r4, #1
 80089b6:	9305      	str	r3, [sp, #20]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f04f 0c0a 	mov.w	ip, #10
 80089be:	4620      	mov	r0, r4
 80089c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089c4:	3a30      	subs	r2, #48	@ 0x30
 80089c6:	2a09      	cmp	r2, #9
 80089c8:	d903      	bls.n	80089d2 <_svfiprintf_r+0x1a6>
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0c6      	beq.n	800895c <_svfiprintf_r+0x130>
 80089ce:	9105      	str	r1, [sp, #20]
 80089d0:	e7c4      	b.n	800895c <_svfiprintf_r+0x130>
 80089d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80089d6:	4604      	mov	r4, r0
 80089d8:	2301      	movs	r3, #1
 80089da:	e7f0      	b.n	80089be <_svfiprintf_r+0x192>
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	462a      	mov	r2, r5
 80089e2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <_svfiprintf_r+0x1f0>)
 80089e4:	a904      	add	r1, sp, #16
 80089e6:	4638      	mov	r0, r7
 80089e8:	f3af 8000 	nop.w
 80089ec:	1c42      	adds	r2, r0, #1
 80089ee:	4606      	mov	r6, r0
 80089f0:	d1d6      	bne.n	80089a0 <_svfiprintf_r+0x174>
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	065b      	lsls	r3, r3, #25
 80089f6:	f53f af2d 	bmi.w	8008854 <_svfiprintf_r+0x28>
 80089fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089fc:	e72c      	b.n	8008858 <_svfiprintf_r+0x2c>
 80089fe:	ab03      	add	r3, sp, #12
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	462a      	mov	r2, r5
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <_svfiprintf_r+0x1f0>)
 8008a06:	a904      	add	r1, sp, #16
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f000 f9bb 	bl	8008d84 <_printf_i>
 8008a0e:	e7ed      	b.n	80089ec <_svfiprintf_r+0x1c0>
 8008a10:	08009615 	.word	0x08009615
 8008a14:	0800961f 	.word	0x0800961f
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	08008775 	.word	0x08008775
 8008a20:	0800961b 	.word	0x0800961b

08008a24 <__sfputc_r>:
 8008a24:	6893      	ldr	r3, [r2, #8]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	b410      	push	{r4}
 8008a2c:	6093      	str	r3, [r2, #8]
 8008a2e:	da08      	bge.n	8008a42 <__sfputc_r+0x1e>
 8008a30:	6994      	ldr	r4, [r2, #24]
 8008a32:	42a3      	cmp	r3, r4
 8008a34:	db01      	blt.n	8008a3a <__sfputc_r+0x16>
 8008a36:	290a      	cmp	r1, #10
 8008a38:	d103      	bne.n	8008a42 <__sfputc_r+0x1e>
 8008a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3e:	f7ff bc90 	b.w	8008362 <__swbuf_r>
 8008a42:	6813      	ldr	r3, [r2, #0]
 8008a44:	1c58      	adds	r0, r3, #1
 8008a46:	6010      	str	r0, [r2, #0]
 8008a48:	7019      	strb	r1, [r3, #0]
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <__sfputs_r>:
 8008a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	4614      	mov	r4, r2
 8008a5a:	18d5      	adds	r5, r2, r3
 8008a5c:	42ac      	cmp	r4, r5
 8008a5e:	d101      	bne.n	8008a64 <__sfputs_r+0x12>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e007      	b.n	8008a74 <__sfputs_r+0x22>
 8008a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a68:	463a      	mov	r2, r7
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffda 	bl	8008a24 <__sfputc_r>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d1f3      	bne.n	8008a5c <__sfputs_r+0xa>
 8008a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a78 <_vfiprintf_r>:
 8008a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	b09d      	sub	sp, #116	@ 0x74
 8008a80:	4614      	mov	r4, r2
 8008a82:	4698      	mov	r8, r3
 8008a84:	4606      	mov	r6, r0
 8008a86:	b118      	cbz	r0, 8008a90 <_vfiprintf_r+0x18>
 8008a88:	6a03      	ldr	r3, [r0, #32]
 8008a8a:	b90b      	cbnz	r3, 8008a90 <_vfiprintf_r+0x18>
 8008a8c:	f7ff fb58 	bl	8008140 <__sinit>
 8008a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a92:	07d9      	lsls	r1, r3, #31
 8008a94:	d405      	bmi.n	8008aa2 <_vfiprintf_r+0x2a>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	059a      	lsls	r2, r3, #22
 8008a9a:	d402      	bmi.n	8008aa2 <_vfiprintf_r+0x2a>
 8008a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a9e:	f7ff fd6e 	bl	800857e <__retarget_lock_acquire_recursive>
 8008aa2:	89ab      	ldrh	r3, [r5, #12]
 8008aa4:	071b      	lsls	r3, r3, #28
 8008aa6:	d501      	bpl.n	8008aac <_vfiprintf_r+0x34>
 8008aa8:	692b      	ldr	r3, [r5, #16]
 8008aaa:	b99b      	cbnz	r3, 8008ad4 <_vfiprintf_r+0x5c>
 8008aac:	4629      	mov	r1, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff fc96 	bl	80083e0 <__swsetup_r>
 8008ab4:	b170      	cbz	r0, 8008ad4 <_vfiprintf_r+0x5c>
 8008ab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ab8:	07dc      	lsls	r4, r3, #31
 8008aba:	d504      	bpl.n	8008ac6 <_vfiprintf_r+0x4e>
 8008abc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac0:	b01d      	add	sp, #116	@ 0x74
 8008ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	0598      	lsls	r0, r3, #22
 8008aca:	d4f7      	bmi.n	8008abc <_vfiprintf_r+0x44>
 8008acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ace:	f7ff fd57 	bl	8008580 <__retarget_lock_release_recursive>
 8008ad2:	e7f3      	b.n	8008abc <_vfiprintf_r+0x44>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae2:	2330      	movs	r3, #48	@ 0x30
 8008ae4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c94 <_vfiprintf_r+0x21c>
 8008ae8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aec:	f04f 0901 	mov.w	r9, #1
 8008af0:	4623      	mov	r3, r4
 8008af2:	469a      	mov	sl, r3
 8008af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af8:	b10a      	cbz	r2, 8008afe <_vfiprintf_r+0x86>
 8008afa:	2a25      	cmp	r2, #37	@ 0x25
 8008afc:	d1f9      	bne.n	8008af2 <_vfiprintf_r+0x7a>
 8008afe:	ebba 0b04 	subs.w	fp, sl, r4
 8008b02:	d00b      	beq.n	8008b1c <_vfiprintf_r+0xa4>
 8008b04:	465b      	mov	r3, fp
 8008b06:	4622      	mov	r2, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffa1 	bl	8008a52 <__sfputs_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	f000 80a7 	beq.w	8008c64 <_vfiprintf_r+0x1ec>
 8008b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b18:	445a      	add	r2, fp
 8008b1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 809f 	beq.w	8008c64 <_vfiprintf_r+0x1ec>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b30:	f10a 0a01 	add.w	sl, sl, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2205      	movs	r2, #5
 8008b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b46:	4853      	ldr	r0, [pc, #332]	@ (8008c94 <_vfiprintf_r+0x21c>)
 8008b48:	f7f7 fb4a 	bl	80001e0 <memchr>
 8008b4c:	9a04      	ldr	r2, [sp, #16]
 8008b4e:	b9d8      	cbnz	r0, 8008b88 <_vfiprintf_r+0x110>
 8008b50:	06d1      	lsls	r1, r2, #27
 8008b52:	bf44      	itt	mi
 8008b54:	2320      	movmi	r3, #32
 8008b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b5a:	0713      	lsls	r3, r2, #28
 8008b5c:	bf44      	itt	mi
 8008b5e:	232b      	movmi	r3, #43	@ 0x2b
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b64:	f89a 3000 	ldrb.w	r3, [sl]
 8008b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b6a:	d015      	beq.n	8008b98 <_vfiprintf_r+0x120>
 8008b6c:	9a07      	ldr	r2, [sp, #28]
 8008b6e:	4654      	mov	r4, sl
 8008b70:	2000      	movs	r0, #0
 8008b72:	f04f 0c0a 	mov.w	ip, #10
 8008b76:	4621      	mov	r1, r4
 8008b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b7c:	3b30      	subs	r3, #48	@ 0x30
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d94b      	bls.n	8008c1a <_vfiprintf_r+0x1a2>
 8008b82:	b1b0      	cbz	r0, 8008bb2 <_vfiprintf_r+0x13a>
 8008b84:	9207      	str	r2, [sp, #28]
 8008b86:	e014      	b.n	8008bb2 <_vfiprintf_r+0x13a>
 8008b88:	eba0 0308 	sub.w	r3, r0, r8
 8008b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b90:	4313      	orrs	r3, r2
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	46a2      	mov	sl, r4
 8008b96:	e7d2      	b.n	8008b3e <_vfiprintf_r+0xc6>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	1d19      	adds	r1, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	9103      	str	r1, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfbb      	ittet	lt
 8008ba4:	425b      	neglt	r3, r3
 8008ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8008baa:	9307      	strge	r3, [sp, #28]
 8008bac:	9307      	strlt	r3, [sp, #28]
 8008bae:	bfb8      	it	lt
 8008bb0:	9204      	strlt	r2, [sp, #16]
 8008bb2:	7823      	ldrb	r3, [r4, #0]
 8008bb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bb6:	d10a      	bne.n	8008bce <_vfiprintf_r+0x156>
 8008bb8:	7863      	ldrb	r3, [r4, #1]
 8008bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bbc:	d132      	bne.n	8008c24 <_vfiprintf_r+0x1ac>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	1d1a      	adds	r2, r3, #4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	9203      	str	r2, [sp, #12]
 8008bc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bca:	3402      	adds	r4, #2
 8008bcc:	9305      	str	r3, [sp, #20]
 8008bce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ca4 <_vfiprintf_r+0x22c>
 8008bd2:	7821      	ldrb	r1, [r4, #0]
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	4650      	mov	r0, sl
 8008bd8:	f7f7 fb02 	bl	80001e0 <memchr>
 8008bdc:	b138      	cbz	r0, 8008bee <_vfiprintf_r+0x176>
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	eba0 000a 	sub.w	r0, r0, sl
 8008be4:	2240      	movs	r2, #64	@ 0x40
 8008be6:	4082      	lsls	r2, r0
 8008be8:	4313      	orrs	r3, r2
 8008bea:	3401      	adds	r4, #1
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4829      	ldr	r0, [pc, #164]	@ (8008c98 <_vfiprintf_r+0x220>)
 8008bf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bf8:	2206      	movs	r2, #6
 8008bfa:	f7f7 faf1 	bl	80001e0 <memchr>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d03f      	beq.n	8008c82 <_vfiprintf_r+0x20a>
 8008c02:	4b26      	ldr	r3, [pc, #152]	@ (8008c9c <_vfiprintf_r+0x224>)
 8008c04:	bb1b      	cbnz	r3, 8008c4e <_vfiprintf_r+0x1d6>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	3307      	adds	r3, #7
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	3308      	adds	r3, #8
 8008c10:	9303      	str	r3, [sp, #12]
 8008c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c14:	443b      	add	r3, r7
 8008c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c18:	e76a      	b.n	8008af0 <_vfiprintf_r+0x78>
 8008c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c1e:	460c      	mov	r4, r1
 8008c20:	2001      	movs	r0, #1
 8008c22:	e7a8      	b.n	8008b76 <_vfiprintf_r+0xfe>
 8008c24:	2300      	movs	r3, #0
 8008c26:	3401      	adds	r4, #1
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f04f 0c0a 	mov.w	ip, #10
 8008c30:	4620      	mov	r0, r4
 8008c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c36:	3a30      	subs	r2, #48	@ 0x30
 8008c38:	2a09      	cmp	r2, #9
 8008c3a:	d903      	bls.n	8008c44 <_vfiprintf_r+0x1cc>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0c6      	beq.n	8008bce <_vfiprintf_r+0x156>
 8008c40:	9105      	str	r1, [sp, #20]
 8008c42:	e7c4      	b.n	8008bce <_vfiprintf_r+0x156>
 8008c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c48:	4604      	mov	r4, r0
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7f0      	b.n	8008c30 <_vfiprintf_r+0x1b8>
 8008c4e:	ab03      	add	r3, sp, #12
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	462a      	mov	r2, r5
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <_vfiprintf_r+0x228>)
 8008c56:	a904      	add	r1, sp, #16
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f3af 8000 	nop.w
 8008c5e:	4607      	mov	r7, r0
 8008c60:	1c78      	adds	r0, r7, #1
 8008c62:	d1d6      	bne.n	8008c12 <_vfiprintf_r+0x19a>
 8008c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	d405      	bmi.n	8008c76 <_vfiprintf_r+0x1fe>
 8008c6a:	89ab      	ldrh	r3, [r5, #12]
 8008c6c:	059a      	lsls	r2, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_vfiprintf_r+0x1fe>
 8008c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c72:	f7ff fc85 	bl	8008580 <__retarget_lock_release_recursive>
 8008c76:	89ab      	ldrh	r3, [r5, #12]
 8008c78:	065b      	lsls	r3, r3, #25
 8008c7a:	f53f af1f 	bmi.w	8008abc <_vfiprintf_r+0x44>
 8008c7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c80:	e71e      	b.n	8008ac0 <_vfiprintf_r+0x48>
 8008c82:	ab03      	add	r3, sp, #12
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	462a      	mov	r2, r5
 8008c88:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <_vfiprintf_r+0x228>)
 8008c8a:	a904      	add	r1, sp, #16
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f000 f879 	bl	8008d84 <_printf_i>
 8008c92:	e7e4      	b.n	8008c5e <_vfiprintf_r+0x1e6>
 8008c94:	08009615 	.word	0x08009615
 8008c98:	0800961f 	.word	0x0800961f
 8008c9c:	00000000 	.word	0x00000000
 8008ca0:	08008a53 	.word	0x08008a53
 8008ca4:	0800961b 	.word	0x0800961b

08008ca8 <_printf_common>:
 8008ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	4616      	mov	r6, r2
 8008cae:	4698      	mov	r8, r3
 8008cb0:	688a      	ldr	r2, [r1, #8]
 8008cb2:	690b      	ldr	r3, [r1, #16]
 8008cb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	bfb8      	it	lt
 8008cbc:	4613      	movlt	r3, r2
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	b10a      	cbz	r2, 8008cce <_printf_common+0x26>
 8008cca:	3301      	adds	r3, #1
 8008ccc:	6033      	str	r3, [r6, #0]
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	0699      	lsls	r1, r3, #26
 8008cd2:	bf42      	ittt	mi
 8008cd4:	6833      	ldrmi	r3, [r6, #0]
 8008cd6:	3302      	addmi	r3, #2
 8008cd8:	6033      	strmi	r3, [r6, #0]
 8008cda:	6825      	ldr	r5, [r4, #0]
 8008cdc:	f015 0506 	ands.w	r5, r5, #6
 8008ce0:	d106      	bne.n	8008cf0 <_printf_common+0x48>
 8008ce2:	f104 0a19 	add.w	sl, r4, #25
 8008ce6:	68e3      	ldr	r3, [r4, #12]
 8008ce8:	6832      	ldr	r2, [r6, #0]
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	42ab      	cmp	r3, r5
 8008cee:	dc26      	bgt.n	8008d3e <_printf_common+0x96>
 8008cf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	3b00      	subs	r3, #0
 8008cf8:	bf18      	it	ne
 8008cfa:	2301      	movne	r3, #1
 8008cfc:	0692      	lsls	r2, r2, #26
 8008cfe:	d42b      	bmi.n	8008d58 <_printf_common+0xb0>
 8008d00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d04:	4641      	mov	r1, r8
 8008d06:	4638      	mov	r0, r7
 8008d08:	47c8      	blx	r9
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	d01e      	beq.n	8008d4c <_printf_common+0xa4>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	6922      	ldr	r2, [r4, #16]
 8008d12:	f003 0306 	and.w	r3, r3, #6
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	bf02      	ittt	eq
 8008d1a:	68e5      	ldreq	r5, [r4, #12]
 8008d1c:	6833      	ldreq	r3, [r6, #0]
 8008d1e:	1aed      	subeq	r5, r5, r3
 8008d20:	68a3      	ldr	r3, [r4, #8]
 8008d22:	bf0c      	ite	eq
 8008d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d28:	2500      	movne	r5, #0
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	bfc4      	itt	gt
 8008d2e:	1a9b      	subgt	r3, r3, r2
 8008d30:	18ed      	addgt	r5, r5, r3
 8008d32:	2600      	movs	r6, #0
 8008d34:	341a      	adds	r4, #26
 8008d36:	42b5      	cmp	r5, r6
 8008d38:	d11a      	bne.n	8008d70 <_printf_common+0xc8>
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e008      	b.n	8008d50 <_printf_common+0xa8>
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4652      	mov	r2, sl
 8008d42:	4641      	mov	r1, r8
 8008d44:	4638      	mov	r0, r7
 8008d46:	47c8      	blx	r9
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d103      	bne.n	8008d54 <_printf_common+0xac>
 8008d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d54:	3501      	adds	r5, #1
 8008d56:	e7c6      	b.n	8008ce6 <_printf_common+0x3e>
 8008d58:	18e1      	adds	r1, r4, r3
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	2030      	movs	r0, #48	@ 0x30
 8008d5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d62:	4422      	add	r2, r4
 8008d64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	e7c7      	b.n	8008d00 <_printf_common+0x58>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4622      	mov	r2, r4
 8008d74:	4641      	mov	r1, r8
 8008d76:	4638      	mov	r0, r7
 8008d78:	47c8      	blx	r9
 8008d7a:	3001      	adds	r0, #1
 8008d7c:	d0e6      	beq.n	8008d4c <_printf_common+0xa4>
 8008d7e:	3601      	adds	r6, #1
 8008d80:	e7d9      	b.n	8008d36 <_printf_common+0x8e>
	...

08008d84 <_printf_i>:
 8008d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	7e0f      	ldrb	r7, [r1, #24]
 8008d8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d8c:	2f78      	cmp	r7, #120	@ 0x78
 8008d8e:	4691      	mov	r9, r2
 8008d90:	4680      	mov	r8, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	469a      	mov	sl, r3
 8008d96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d9a:	d807      	bhi.n	8008dac <_printf_i+0x28>
 8008d9c:	2f62      	cmp	r7, #98	@ 0x62
 8008d9e:	d80a      	bhi.n	8008db6 <_printf_i+0x32>
 8008da0:	2f00      	cmp	r7, #0
 8008da2:	f000 80d2 	beq.w	8008f4a <_printf_i+0x1c6>
 8008da6:	2f58      	cmp	r7, #88	@ 0x58
 8008da8:	f000 80b9 	beq.w	8008f1e <_printf_i+0x19a>
 8008dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008db0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008db4:	e03a      	b.n	8008e2c <_printf_i+0xa8>
 8008db6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dba:	2b15      	cmp	r3, #21
 8008dbc:	d8f6      	bhi.n	8008dac <_printf_i+0x28>
 8008dbe:	a101      	add	r1, pc, #4	@ (adr r1, 8008dc4 <_printf_i+0x40>)
 8008dc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dc4:	08008e1d 	.word	0x08008e1d
 8008dc8:	08008e31 	.word	0x08008e31
 8008dcc:	08008dad 	.word	0x08008dad
 8008dd0:	08008dad 	.word	0x08008dad
 8008dd4:	08008dad 	.word	0x08008dad
 8008dd8:	08008dad 	.word	0x08008dad
 8008ddc:	08008e31 	.word	0x08008e31
 8008de0:	08008dad 	.word	0x08008dad
 8008de4:	08008dad 	.word	0x08008dad
 8008de8:	08008dad 	.word	0x08008dad
 8008dec:	08008dad 	.word	0x08008dad
 8008df0:	08008f31 	.word	0x08008f31
 8008df4:	08008e5b 	.word	0x08008e5b
 8008df8:	08008eeb 	.word	0x08008eeb
 8008dfc:	08008dad 	.word	0x08008dad
 8008e00:	08008dad 	.word	0x08008dad
 8008e04:	08008f53 	.word	0x08008f53
 8008e08:	08008dad 	.word	0x08008dad
 8008e0c:	08008e5b 	.word	0x08008e5b
 8008e10:	08008dad 	.word	0x08008dad
 8008e14:	08008dad 	.word	0x08008dad
 8008e18:	08008ef3 	.word	0x08008ef3
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6032      	str	r2, [r6, #0]
 8008e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e09d      	b.n	8008f6c <_printf_i+0x1e8>
 8008e30:	6833      	ldr	r3, [r6, #0]
 8008e32:	6820      	ldr	r0, [r4, #0]
 8008e34:	1d19      	adds	r1, r3, #4
 8008e36:	6031      	str	r1, [r6, #0]
 8008e38:	0606      	lsls	r6, r0, #24
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0xbc>
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	e003      	b.n	8008e48 <_printf_i+0xc4>
 8008e40:	0645      	lsls	r5, r0, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0xb8>
 8008e44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	da03      	bge.n	8008e54 <_printf_i+0xd0>
 8008e4c:	232d      	movs	r3, #45	@ 0x2d
 8008e4e:	426d      	negs	r5, r5
 8008e50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e54:	4859      	ldr	r0, [pc, #356]	@ (8008fbc <_printf_i+0x238>)
 8008e56:	230a      	movs	r3, #10
 8008e58:	e011      	b.n	8008e7e <_printf_i+0xfa>
 8008e5a:	6821      	ldr	r1, [r4, #0]
 8008e5c:	6833      	ldr	r3, [r6, #0]
 8008e5e:	0608      	lsls	r0, r1, #24
 8008e60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e64:	d402      	bmi.n	8008e6c <_printf_i+0xe8>
 8008e66:	0649      	lsls	r1, r1, #25
 8008e68:	bf48      	it	mi
 8008e6a:	b2ad      	uxthmi	r5, r5
 8008e6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e6e:	4853      	ldr	r0, [pc, #332]	@ (8008fbc <_printf_i+0x238>)
 8008e70:	6033      	str	r3, [r6, #0]
 8008e72:	bf14      	ite	ne
 8008e74:	230a      	movne	r3, #10
 8008e76:	2308      	moveq	r3, #8
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e7e:	6866      	ldr	r6, [r4, #4]
 8008e80:	60a6      	str	r6, [r4, #8]
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	bfa2      	ittt	ge
 8008e86:	6821      	ldrge	r1, [r4, #0]
 8008e88:	f021 0104 	bicge.w	r1, r1, #4
 8008e8c:	6021      	strge	r1, [r4, #0]
 8008e8e:	b90d      	cbnz	r5, 8008e94 <_printf_i+0x110>
 8008e90:	2e00      	cmp	r6, #0
 8008e92:	d04b      	beq.n	8008f2c <_printf_i+0x1a8>
 8008e94:	4616      	mov	r6, r2
 8008e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e9e:	5dc7      	ldrb	r7, [r0, r7]
 8008ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ea4:	462f      	mov	r7, r5
 8008ea6:	42bb      	cmp	r3, r7
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	d9f4      	bls.n	8008e96 <_printf_i+0x112>
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d10b      	bne.n	8008ec8 <_printf_i+0x144>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07df      	lsls	r7, r3, #31
 8008eb4:	d508      	bpl.n	8008ec8 <_printf_i+0x144>
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	6861      	ldr	r1, [r4, #4]
 8008eba:	4299      	cmp	r1, r3
 8008ebc:	bfde      	ittt	le
 8008ebe:	2330      	movle	r3, #48	@ 0x30
 8008ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ec8:	1b92      	subs	r2, r2, r6
 8008eca:	6122      	str	r2, [r4, #16]
 8008ecc:	f8cd a000 	str.w	sl, [sp]
 8008ed0:	464b      	mov	r3, r9
 8008ed2:	aa03      	add	r2, sp, #12
 8008ed4:	4621      	mov	r1, r4
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	f7ff fee6 	bl	8008ca8 <_printf_common>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d14a      	bne.n	8008f76 <_printf_i+0x1f2>
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	b004      	add	sp, #16
 8008ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f043 0320 	orr.w	r3, r3, #32
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	4833      	ldr	r0, [pc, #204]	@ (8008fc0 <_printf_i+0x23c>)
 8008ef4:	2778      	movs	r7, #120	@ 0x78
 8008ef6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	6831      	ldr	r1, [r6, #0]
 8008efe:	061f      	lsls	r7, r3, #24
 8008f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f04:	d402      	bmi.n	8008f0c <_printf_i+0x188>
 8008f06:	065f      	lsls	r7, r3, #25
 8008f08:	bf48      	it	mi
 8008f0a:	b2ad      	uxthmi	r5, r5
 8008f0c:	6031      	str	r1, [r6, #0]
 8008f0e:	07d9      	lsls	r1, r3, #31
 8008f10:	bf44      	itt	mi
 8008f12:	f043 0320 	orrmi.w	r3, r3, #32
 8008f16:	6023      	strmi	r3, [r4, #0]
 8008f18:	b11d      	cbz	r5, 8008f22 <_printf_i+0x19e>
 8008f1a:	2310      	movs	r3, #16
 8008f1c:	e7ac      	b.n	8008e78 <_printf_i+0xf4>
 8008f1e:	4827      	ldr	r0, [pc, #156]	@ (8008fbc <_printf_i+0x238>)
 8008f20:	e7e9      	b.n	8008ef6 <_printf_i+0x172>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f023 0320 	bic.w	r3, r3, #32
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	e7f6      	b.n	8008f1a <_printf_i+0x196>
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	e7bd      	b.n	8008eac <_printf_i+0x128>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	6825      	ldr	r5, [r4, #0]
 8008f34:	6961      	ldr	r1, [r4, #20]
 8008f36:	1d18      	adds	r0, r3, #4
 8008f38:	6030      	str	r0, [r6, #0]
 8008f3a:	062e      	lsls	r6, r5, #24
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	d501      	bpl.n	8008f44 <_printf_i+0x1c0>
 8008f40:	6019      	str	r1, [r3, #0]
 8008f42:	e002      	b.n	8008f4a <_printf_i+0x1c6>
 8008f44:	0668      	lsls	r0, r5, #25
 8008f46:	d5fb      	bpl.n	8008f40 <_printf_i+0x1bc>
 8008f48:	8019      	strh	r1, [r3, #0]
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	4616      	mov	r6, r2
 8008f50:	e7bc      	b.n	8008ecc <_printf_i+0x148>
 8008f52:	6833      	ldr	r3, [r6, #0]
 8008f54:	1d1a      	adds	r2, r3, #4
 8008f56:	6032      	str	r2, [r6, #0]
 8008f58:	681e      	ldr	r6, [r3, #0]
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f7f7 f93e 	bl	80001e0 <memchr>
 8008f64:	b108      	cbz	r0, 8008f6a <_printf_i+0x1e6>
 8008f66:	1b80      	subs	r0, r0, r6
 8008f68:	6060      	str	r0, [r4, #4]
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	6123      	str	r3, [r4, #16]
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f74:	e7aa      	b.n	8008ecc <_printf_i+0x148>
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	4632      	mov	r2, r6
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	47d0      	blx	sl
 8008f80:	3001      	adds	r0, #1
 8008f82:	d0ad      	beq.n	8008ee0 <_printf_i+0x15c>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	079b      	lsls	r3, r3, #30
 8008f88:	d413      	bmi.n	8008fb2 <_printf_i+0x22e>
 8008f8a:	68e0      	ldr	r0, [r4, #12]
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	4298      	cmp	r0, r3
 8008f90:	bfb8      	it	lt
 8008f92:	4618      	movlt	r0, r3
 8008f94:	e7a6      	b.n	8008ee4 <_printf_i+0x160>
 8008f96:	2301      	movs	r3, #1
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	47d0      	blx	sl
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d09d      	beq.n	8008ee0 <_printf_i+0x15c>
 8008fa4:	3501      	adds	r5, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	9903      	ldr	r1, [sp, #12]
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	42ab      	cmp	r3, r5
 8008fae:	dcf2      	bgt.n	8008f96 <_printf_i+0x212>
 8008fb0:	e7eb      	b.n	8008f8a <_printf_i+0x206>
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	f104 0619 	add.w	r6, r4, #25
 8008fb8:	e7f5      	b.n	8008fa6 <_printf_i+0x222>
 8008fba:	bf00      	nop
 8008fbc:	08009626 	.word	0x08009626
 8008fc0:	08009637 	.word	0x08009637

08008fc4 <__sflush_r>:
 8008fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	0716      	lsls	r6, r2, #28
 8008fce:	4605      	mov	r5, r0
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	d454      	bmi.n	800907e <__sflush_r+0xba>
 8008fd4:	684b      	ldr	r3, [r1, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc02      	bgt.n	8008fe0 <__sflush_r+0x1c>
 8008fda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	dd48      	ble.n	8009072 <__sflush_r+0xae>
 8008fe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d045      	beq.n	8009072 <__sflush_r+0xae>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fec:	682f      	ldr	r7, [r5, #0]
 8008fee:	6a21      	ldr	r1, [r4, #32]
 8008ff0:	602b      	str	r3, [r5, #0]
 8008ff2:	d030      	beq.n	8009056 <__sflush_r+0x92>
 8008ff4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	0759      	lsls	r1, r3, #29
 8008ffa:	d505      	bpl.n	8009008 <__sflush_r+0x44>
 8008ffc:	6863      	ldr	r3, [r4, #4]
 8008ffe:	1ad2      	subs	r2, r2, r3
 8009000:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009002:	b10b      	cbz	r3, 8009008 <__sflush_r+0x44>
 8009004:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009006:	1ad2      	subs	r2, r2, r3
 8009008:	2300      	movs	r3, #0
 800900a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800900c:	6a21      	ldr	r1, [r4, #32]
 800900e:	4628      	mov	r0, r5
 8009010:	47b0      	blx	r6
 8009012:	1c43      	adds	r3, r0, #1
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	d106      	bne.n	8009026 <__sflush_r+0x62>
 8009018:	6829      	ldr	r1, [r5, #0]
 800901a:	291d      	cmp	r1, #29
 800901c:	d82b      	bhi.n	8009076 <__sflush_r+0xb2>
 800901e:	4a2a      	ldr	r2, [pc, #168]	@ (80090c8 <__sflush_r+0x104>)
 8009020:	410a      	asrs	r2, r1
 8009022:	07d6      	lsls	r6, r2, #31
 8009024:	d427      	bmi.n	8009076 <__sflush_r+0xb2>
 8009026:	2200      	movs	r2, #0
 8009028:	6062      	str	r2, [r4, #4]
 800902a:	04d9      	lsls	r1, r3, #19
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	6022      	str	r2, [r4, #0]
 8009030:	d504      	bpl.n	800903c <__sflush_r+0x78>
 8009032:	1c42      	adds	r2, r0, #1
 8009034:	d101      	bne.n	800903a <__sflush_r+0x76>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b903      	cbnz	r3, 800903c <__sflush_r+0x78>
 800903a:	6560      	str	r0, [r4, #84]	@ 0x54
 800903c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800903e:	602f      	str	r7, [r5, #0]
 8009040:	b1b9      	cbz	r1, 8009072 <__sflush_r+0xae>
 8009042:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009046:	4299      	cmp	r1, r3
 8009048:	d002      	beq.n	8009050 <__sflush_r+0x8c>
 800904a:	4628      	mov	r0, r5
 800904c:	f7ff fa9a 	bl	8008584 <_free_r>
 8009050:	2300      	movs	r3, #0
 8009052:	6363      	str	r3, [r4, #52]	@ 0x34
 8009054:	e00d      	b.n	8009072 <__sflush_r+0xae>
 8009056:	2301      	movs	r3, #1
 8009058:	4628      	mov	r0, r5
 800905a:	47b0      	blx	r6
 800905c:	4602      	mov	r2, r0
 800905e:	1c50      	adds	r0, r2, #1
 8009060:	d1c9      	bne.n	8008ff6 <__sflush_r+0x32>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0c6      	beq.n	8008ff6 <__sflush_r+0x32>
 8009068:	2b1d      	cmp	r3, #29
 800906a:	d001      	beq.n	8009070 <__sflush_r+0xac>
 800906c:	2b16      	cmp	r3, #22
 800906e:	d11e      	bne.n	80090ae <__sflush_r+0xea>
 8009070:	602f      	str	r7, [r5, #0]
 8009072:	2000      	movs	r0, #0
 8009074:	e022      	b.n	80090bc <__sflush_r+0xf8>
 8009076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907a:	b21b      	sxth	r3, r3
 800907c:	e01b      	b.n	80090b6 <__sflush_r+0xf2>
 800907e:	690f      	ldr	r7, [r1, #16]
 8009080:	2f00      	cmp	r7, #0
 8009082:	d0f6      	beq.n	8009072 <__sflush_r+0xae>
 8009084:	0793      	lsls	r3, r2, #30
 8009086:	680e      	ldr	r6, [r1, #0]
 8009088:	bf08      	it	eq
 800908a:	694b      	ldreq	r3, [r1, #20]
 800908c:	600f      	str	r7, [r1, #0]
 800908e:	bf18      	it	ne
 8009090:	2300      	movne	r3, #0
 8009092:	eba6 0807 	sub.w	r8, r6, r7
 8009096:	608b      	str	r3, [r1, #8]
 8009098:	f1b8 0f00 	cmp.w	r8, #0
 800909c:	dde9      	ble.n	8009072 <__sflush_r+0xae>
 800909e:	6a21      	ldr	r1, [r4, #32]
 80090a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090a2:	4643      	mov	r3, r8
 80090a4:	463a      	mov	r2, r7
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b0      	blx	r6
 80090aa:	2800      	cmp	r0, #0
 80090ac:	dc08      	bgt.n	80090c0 <__sflush_r+0xfc>
 80090ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c0:	4407      	add	r7, r0
 80090c2:	eba8 0800 	sub.w	r8, r8, r0
 80090c6:	e7e7      	b.n	8009098 <__sflush_r+0xd4>
 80090c8:	dfbffffe 	.word	0xdfbffffe

080090cc <_fflush_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	690b      	ldr	r3, [r1, #16]
 80090d0:	4605      	mov	r5, r0
 80090d2:	460c      	mov	r4, r1
 80090d4:	b913      	cbnz	r3, 80090dc <_fflush_r+0x10>
 80090d6:	2500      	movs	r5, #0
 80090d8:	4628      	mov	r0, r5
 80090da:	bd38      	pop	{r3, r4, r5, pc}
 80090dc:	b118      	cbz	r0, 80090e6 <_fflush_r+0x1a>
 80090de:	6a03      	ldr	r3, [r0, #32]
 80090e0:	b90b      	cbnz	r3, 80090e6 <_fflush_r+0x1a>
 80090e2:	f7ff f82d 	bl	8008140 <__sinit>
 80090e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f3      	beq.n	80090d6 <_fflush_r+0xa>
 80090ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090f0:	07d0      	lsls	r0, r2, #31
 80090f2:	d404      	bmi.n	80090fe <_fflush_r+0x32>
 80090f4:	0599      	lsls	r1, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_fflush_r+0x32>
 80090f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090fa:	f7ff fa40 	bl	800857e <__retarget_lock_acquire_recursive>
 80090fe:	4628      	mov	r0, r5
 8009100:	4621      	mov	r1, r4
 8009102:	f7ff ff5f 	bl	8008fc4 <__sflush_r>
 8009106:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009108:	07da      	lsls	r2, r3, #31
 800910a:	4605      	mov	r5, r0
 800910c:	d4e4      	bmi.n	80090d8 <_fflush_r+0xc>
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	059b      	lsls	r3, r3, #22
 8009112:	d4e1      	bmi.n	80090d8 <_fflush_r+0xc>
 8009114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009116:	f7ff fa33 	bl	8008580 <__retarget_lock_release_recursive>
 800911a:	e7dd      	b.n	80090d8 <_fflush_r+0xc>

0800911c <__swhatbuf_r>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	460c      	mov	r4, r1
 8009120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009124:	2900      	cmp	r1, #0
 8009126:	b096      	sub	sp, #88	@ 0x58
 8009128:	4615      	mov	r5, r2
 800912a:	461e      	mov	r6, r3
 800912c:	da0d      	bge.n	800914a <__swhatbuf_r+0x2e>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009134:	f04f 0100 	mov.w	r1, #0
 8009138:	bf14      	ite	ne
 800913a:	2340      	movne	r3, #64	@ 0x40
 800913c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009140:	2000      	movs	r0, #0
 8009142:	6031      	str	r1, [r6, #0]
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	b016      	add	sp, #88	@ 0x58
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	466a      	mov	r2, sp
 800914c:	f000 f896 	bl	800927c <_fstat_r>
 8009150:	2800      	cmp	r0, #0
 8009152:	dbec      	blt.n	800912e <__swhatbuf_r+0x12>
 8009154:	9901      	ldr	r1, [sp, #4]
 8009156:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800915a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800915e:	4259      	negs	r1, r3
 8009160:	4159      	adcs	r1, r3
 8009162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009166:	e7eb      	b.n	8009140 <__swhatbuf_r+0x24>

08009168 <__smakebuf_r>:
 8009168:	898b      	ldrh	r3, [r1, #12]
 800916a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916c:	079d      	lsls	r5, r3, #30
 800916e:	4606      	mov	r6, r0
 8009170:	460c      	mov	r4, r1
 8009172:	d507      	bpl.n	8009184 <__smakebuf_r+0x1c>
 8009174:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	2301      	movs	r3, #1
 800917e:	6163      	str	r3, [r4, #20]
 8009180:	b003      	add	sp, #12
 8009182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009184:	ab01      	add	r3, sp, #4
 8009186:	466a      	mov	r2, sp
 8009188:	f7ff ffc8 	bl	800911c <__swhatbuf_r>
 800918c:	9f00      	ldr	r7, [sp, #0]
 800918e:	4605      	mov	r5, r0
 8009190:	4639      	mov	r1, r7
 8009192:	4630      	mov	r0, r6
 8009194:	f7ff fa62 	bl	800865c <_malloc_r>
 8009198:	b948      	cbnz	r0, 80091ae <__smakebuf_r+0x46>
 800919a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800919e:	059a      	lsls	r2, r3, #22
 80091a0:	d4ee      	bmi.n	8009180 <__smakebuf_r+0x18>
 80091a2:	f023 0303 	bic.w	r3, r3, #3
 80091a6:	f043 0302 	orr.w	r3, r3, #2
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	e7e2      	b.n	8009174 <__smakebuf_r+0xc>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	6020      	str	r0, [r4, #0]
 80091b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b6:	81a3      	strh	r3, [r4, #12]
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091be:	b15b      	cbz	r3, 80091d8 <__smakebuf_r+0x70>
 80091c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091c4:	4630      	mov	r0, r6
 80091c6:	f000 f86b 	bl	80092a0 <_isatty_r>
 80091ca:	b128      	cbz	r0, 80091d8 <__smakebuf_r+0x70>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	f043 0301 	orr.w	r3, r3, #1
 80091d6:	81a3      	strh	r3, [r4, #12]
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	431d      	orrs	r5, r3
 80091dc:	81a5      	strh	r5, [r4, #12]
 80091de:	e7cf      	b.n	8009180 <__smakebuf_r+0x18>

080091e0 <_putc_r>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	460d      	mov	r5, r1
 80091e4:	4614      	mov	r4, r2
 80091e6:	4606      	mov	r6, r0
 80091e8:	b118      	cbz	r0, 80091f2 <_putc_r+0x12>
 80091ea:	6a03      	ldr	r3, [r0, #32]
 80091ec:	b90b      	cbnz	r3, 80091f2 <_putc_r+0x12>
 80091ee:	f7fe ffa7 	bl	8008140 <__sinit>
 80091f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f4:	07d8      	lsls	r0, r3, #31
 80091f6:	d405      	bmi.n	8009204 <_putc_r+0x24>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	0599      	lsls	r1, r3, #22
 80091fc:	d402      	bmi.n	8009204 <_putc_r+0x24>
 80091fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009200:	f7ff f9bd 	bl	800857e <__retarget_lock_acquire_recursive>
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	3b01      	subs	r3, #1
 8009208:	2b00      	cmp	r3, #0
 800920a:	60a3      	str	r3, [r4, #8]
 800920c:	da05      	bge.n	800921a <_putc_r+0x3a>
 800920e:	69a2      	ldr	r2, [r4, #24]
 8009210:	4293      	cmp	r3, r2
 8009212:	db12      	blt.n	800923a <_putc_r+0x5a>
 8009214:	b2eb      	uxtb	r3, r5
 8009216:	2b0a      	cmp	r3, #10
 8009218:	d00f      	beq.n	800923a <_putc_r+0x5a>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	6022      	str	r2, [r4, #0]
 8009220:	701d      	strb	r5, [r3, #0]
 8009222:	b2ed      	uxtb	r5, r5
 8009224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009226:	07da      	lsls	r2, r3, #31
 8009228:	d405      	bmi.n	8009236 <_putc_r+0x56>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	059b      	lsls	r3, r3, #22
 800922e:	d402      	bmi.n	8009236 <_putc_r+0x56>
 8009230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009232:	f7ff f9a5 	bl	8008580 <__retarget_lock_release_recursive>
 8009236:	4628      	mov	r0, r5
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	4629      	mov	r1, r5
 800923c:	4622      	mov	r2, r4
 800923e:	4630      	mov	r0, r6
 8009240:	f7ff f88f 	bl	8008362 <__swbuf_r>
 8009244:	4605      	mov	r5, r0
 8009246:	e7ed      	b.n	8009224 <_putc_r+0x44>

08009248 <memmove>:
 8009248:	4288      	cmp	r0, r1
 800924a:	b510      	push	{r4, lr}
 800924c:	eb01 0402 	add.w	r4, r1, r2
 8009250:	d902      	bls.n	8009258 <memmove+0x10>
 8009252:	4284      	cmp	r4, r0
 8009254:	4623      	mov	r3, r4
 8009256:	d807      	bhi.n	8009268 <memmove+0x20>
 8009258:	1e43      	subs	r3, r0, #1
 800925a:	42a1      	cmp	r1, r4
 800925c:	d008      	beq.n	8009270 <memmove+0x28>
 800925e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009266:	e7f8      	b.n	800925a <memmove+0x12>
 8009268:	4402      	add	r2, r0
 800926a:	4601      	mov	r1, r0
 800926c:	428a      	cmp	r2, r1
 800926e:	d100      	bne.n	8009272 <memmove+0x2a>
 8009270:	bd10      	pop	{r4, pc}
 8009272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800927a:	e7f7      	b.n	800926c <memmove+0x24>

0800927c <_fstat_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_fstat_r+0x20>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	4611      	mov	r1, r2
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	f7f8 fb5c 	bl	8001946 <_fstat>
 800928e:	1c43      	adds	r3, r0, #1
 8009290:	d102      	bne.n	8009298 <_fstat_r+0x1c>
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	b103      	cbz	r3, 8009298 <_fstat_r+0x1c>
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	bd38      	pop	{r3, r4, r5, pc}
 800929a:	bf00      	nop
 800929c:	20000534 	.word	0x20000534

080092a0 <_isatty_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d06      	ldr	r5, [pc, #24]	@ (80092bc <_isatty_r+0x1c>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	f7f8 fb5b 	bl	8001966 <_isatty>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_isatty_r+0x1a>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_isatty_r+0x1a>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20000534 	.word	0x20000534

080092c0 <_sbrk_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4d06      	ldr	r5, [pc, #24]	@ (80092dc <_sbrk_r+0x1c>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	4604      	mov	r4, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	f7f8 fb64 	bl	8001998 <_sbrk>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	d102      	bne.n	80092da <_sbrk_r+0x1a>
 80092d4:	682b      	ldr	r3, [r5, #0]
 80092d6:	b103      	cbz	r3, 80092da <_sbrk_r+0x1a>
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	20000534 	.word	0x20000534

080092e0 <memcpy>:
 80092e0:	440a      	add	r2, r1
 80092e2:	4291      	cmp	r1, r2
 80092e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092e8:	d100      	bne.n	80092ec <memcpy+0xc>
 80092ea:	4770      	bx	lr
 80092ec:	b510      	push	{r4, lr}
 80092ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f6:	4291      	cmp	r1, r2
 80092f8:	d1f9      	bne.n	80092ee <memcpy+0xe>
 80092fa:	bd10      	pop	{r4, pc}

080092fc <_realloc_r>:
 80092fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009300:	4680      	mov	r8, r0
 8009302:	4615      	mov	r5, r2
 8009304:	460c      	mov	r4, r1
 8009306:	b921      	cbnz	r1, 8009312 <_realloc_r+0x16>
 8009308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800930c:	4611      	mov	r1, r2
 800930e:	f7ff b9a5 	b.w	800865c <_malloc_r>
 8009312:	b92a      	cbnz	r2, 8009320 <_realloc_r+0x24>
 8009314:	f7ff f936 	bl	8008584 <_free_r>
 8009318:	2400      	movs	r4, #0
 800931a:	4620      	mov	r0, r4
 800931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009320:	f000 f81a 	bl	8009358 <_malloc_usable_size_r>
 8009324:	4285      	cmp	r5, r0
 8009326:	4606      	mov	r6, r0
 8009328:	d802      	bhi.n	8009330 <_realloc_r+0x34>
 800932a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800932e:	d8f4      	bhi.n	800931a <_realloc_r+0x1e>
 8009330:	4629      	mov	r1, r5
 8009332:	4640      	mov	r0, r8
 8009334:	f7ff f992 	bl	800865c <_malloc_r>
 8009338:	4607      	mov	r7, r0
 800933a:	2800      	cmp	r0, #0
 800933c:	d0ec      	beq.n	8009318 <_realloc_r+0x1c>
 800933e:	42b5      	cmp	r5, r6
 8009340:	462a      	mov	r2, r5
 8009342:	4621      	mov	r1, r4
 8009344:	bf28      	it	cs
 8009346:	4632      	movcs	r2, r6
 8009348:	f7ff ffca 	bl	80092e0 <memcpy>
 800934c:	4621      	mov	r1, r4
 800934e:	4640      	mov	r0, r8
 8009350:	f7ff f918 	bl	8008584 <_free_r>
 8009354:	463c      	mov	r4, r7
 8009356:	e7e0      	b.n	800931a <_realloc_r+0x1e>

08009358 <_malloc_usable_size_r>:
 8009358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935c:	1f18      	subs	r0, r3, #4
 800935e:	2b00      	cmp	r3, #0
 8009360:	bfbc      	itt	lt
 8009362:	580b      	ldrlt	r3, [r1, r0]
 8009364:	18c0      	addlt	r0, r0, r3
 8009366:	4770      	bx	lr

08009368 <_init>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr

08009374 <_fini>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr
