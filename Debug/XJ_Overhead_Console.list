
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009750  08009750  0000a750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009940  08009940  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009940  08009940  0000a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009948  08009948  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800994c  0800994c  0000a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009950  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000068  080099b8  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  080099b8  0000b558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ec7  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003952  00000000  00000000  00021f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001588  00000000  00000000  000258b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c3  00000000  00000000  00026e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b71b  00000000  00000000  00027f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cde9  00000000  00000000  0004361e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a67a7  00000000  00000000  00060407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106bae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000632c  00000000  00000000  00106bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009738 	.word	0x08009738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08009738 	.word	0x08009738

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9b5 	b.w	800060c <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <MX_ADC1_Init+0x9c>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800062a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064a:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0xa0>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000656:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800065e:	2201      	movs	r2, #1
 8000660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_ADC1_Init+0x98>)
 800066c:	2201      	movs	r2, #1
 800066e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000670:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000672:	f001 fe2f 	bl	80022d4 <HAL_ADC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800067c:	f001 f942 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000680:	2306      	movs	r3, #6
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_ADC1_Init+0x98>)
 8000692:	f001 fe63 	bl	800235c <HAL_ADC_ConfigChannel>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800069c:	f001 f932 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000084 	.word	0x20000084
 80006ac:	40012000 	.word	0x40012000
 80006b0:	0f000001 	.word	0x0f000001

080006b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <HAL_ADC_MspInit+0xb0>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d141      	bne.n	800075a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006de:	4a22      	ldr	r2, [pc, #136]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 80006e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b19      	ldr	r3, [pc, #100]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a14      	ldr	r2, [pc, #80]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_ADC_MspInit+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800072a:	23c0      	movs	r3, #192	@ 0xc0
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4619      	mov	r1, r3
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <HAL_ADC_MspInit+0xb8>)
 800073e:	f002 fcc7 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 8000742:	2330      	movs	r3, #48	@ 0x30
 8000744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000746:	2303      	movs	r3, #3
 8000748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	4806      	ldr	r0, [pc, #24]	@ (8000770 <HAL_ADC_MspInit+0xbc>)
 8000756:	f002 fcbb 	bl	80030d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012000 	.word	0x40012000
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <BMP280_Init>:
 * @param  hi2c	 	 I2C handle to which the BMP is connected to
 * @param  address	 I2C address (7 bit)
 * @retval 			 BMP280_Error or BMP280_Success
 */
BMP280_Result BMP280_Init(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
	bmp1.hi2c = hi2c;
 8000780:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <BMP280_Init+0x4c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
	bmp1.address = address << 1;
 8000786:	78fb      	ldrb	r3, [r7, #3]
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <BMP280_Init+0x4c>)
 800078e:	711a      	strb	r2, [r3, #4]

	BMP280_Reset();
 8000790:	f000 f835 	bl	80007fe <BMP280_Reset>

	// Set normal mode inactive duration (standby time)
	BMP280_SetStandby(BMP280_STBY_1s);
 8000794:	20a0      	movs	r0, #160	@ 0xa0
 8000796:	f000 f888 	bl	80008aa <BMP280_SetStandby>

	// Set IIR filter constant
	BMP280_SetFilter(BMP280_FILTER_16);
 800079a:	2010      	movs	r0, #16
 800079c:	f000 f869 	bl	8000872 <BMP280_SetFilter>

	// Set oversampling for temperature
	BMP280_SetOSRST(BMP280_OSRST_x2);
 80007a0:	2040      	movs	r0, #64	@ 0x40
 80007a2:	f000 f89e 	bl	80008e2 <BMP280_SetOSRST>

	// Set oversampling for pressure
	BMP280_SetOSRSP(BMP280_OSRSP_x16);
 80007a6:	2014      	movs	r0, #20
 80007a8:	f000 f8b7 	bl	800091a <BMP280_SetOSRSP>

	// Set normal mode (perpetual periodic conversion)
	BMP280_SetMode(BMP280_MODE_NORMAL);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f844 	bl	800083a <BMP280_SetMode>

	return BMP280_Check();
 80007b2:	f000 f807 	bl	80007c4 <BMP280_Check>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000cc 	.word	0x200000cc

080007c4 <BMP280_Check>:
/**
 * @brief  		Get the version of the BMP280
 * @retval 		BMP280_Error or BMP280_Success
 */
BMP280_Result BMP280_Check(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	uint8_t ver = BMP280_GetVersion();
 80007ca:	f000 f823 	bl	8000814 <BMP280_GetVersion>
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	switch (ver)
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b58      	cmp	r3, #88	@ 0x58
 80007d6:	d006      	beq.n	80007e6 <BMP280_Check+0x22>
 80007d8:	2b58      	cmp	r3, #88	@ 0x58
 80007da:	dc06      	bgt.n	80007ea <BMP280_Check+0x26>
 80007dc:	2b56      	cmp	r3, #86	@ 0x56
 80007de:	d006      	beq.n	80007ee <BMP280_Check+0x2a>
 80007e0:	2b57      	cmp	r3, #87	@ 0x57
 80007e2:	d006      	beq.n	80007f2 <BMP280_Check+0x2e>
 80007e4:	e001      	b.n	80007ea <BMP280_Check+0x26>
		case BMP280_CHIP_ID1:
			break;
		case BMP280_CHIP_ID2:
			break;
		case BMP280_CHIP_ID3:
			return BMP280_Success;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e005      	b.n	80007f6 <BMP280_Check+0x32>
		default:
			return BMP280_Error;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e003      	b.n	80007f6 <BMP280_Check+0x32>
			break;
 80007ee:	bf00      	nop
 80007f0:	e000      	b.n	80007f4 <BMP280_Check+0x30>
			break;
 80007f2:	bf00      	nop
			break;
	}
	return BMP280_Error;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <BMP280_Reset>:

/**
 * @brief  		Write the reset command to the BMP reset register
 */
inline void BMP280_Reset(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
	__BMP280_WriteReg(BMP280_REG_RESET, BMP280_CMD_RESET);
 8000802:	21b6      	movs	r1, #182	@ 0xb6
 8000804:	20e0      	movs	r0, #224	@ 0xe0
 8000806:	f000 fc6b 	bl	80010e0 <__BMP280_WriteReg>
	HAL_Delay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f001 fd3e 	bl	800228c <HAL_Delay>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <BMP280_GetVersion>:
/**
 * @brief  		Inline function to get the version from the BMP
 * @retval 		BMP280 version or zero in case of error
 */
inline uint8_t BMP280_GetVersion(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	return __BMP280_ReadReg(BMP280_REG_ID);
 8000818:	20d0      	movs	r0, #208	@ 0xd0
 800081a:	f000 fc7f 	bl	800111c <__BMP280_ReadReg>
 800081e:	4603      	mov	r3, r0
}
 8000820:	4618      	mov	r0, r3
 8000822:	bd80      	pop	{r7, pc}

08000824 <BMP280_GetStatus>:
/**
 * @brief  		Inline function to get the status from the BMP
 * @retval 		BMP280 status or zero in case of error
 */
inline uint8_t BMP280_GetStatus(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	return __BMP280_ReadReg(BMP280_REG_STATUS) & BMP280_MASK_STATUS;
 8000828:	20f3      	movs	r0, #243	@ 0xf3
 800082a:	f000 fc77 	bl	800111c <__BMP280_ReadReg>
 800082e:	4603      	mov	r3, r0
 8000830:	f003 0309 	and.w	r3, r3, #9
 8000834:	b2db      	uxtb	r3, r3
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}

0800083a <BMP280_SetMode>:
/**
 * @brief  		Set the mode of the BMP280
 * @param 		BMP280 power mode
 */
void BMP280_SetMode(uint8_t mode)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b084      	sub	sp, #16
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	mode &= BMP280_MASK_MODE;
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_MASK_MODE);
 800084c:	20f4      	movs	r0, #244	@ 0xf4
 800084e:	f000 fc65 	bl	800111c <__BMP280_ReadReg>
 8000852:	4603      	mov	r3, r0
 8000854:	f023 0303 	bic.w	r3, r3, #3
 8000858:	73fb      	strb	r3, [r7, #15]
	__BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg | mode);
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4313      	orrs	r3, r2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4619      	mov	r1, r3
 8000864:	20f4      	movs	r0, #244	@ 0xf4
 8000866:	f000 fc3b 	bl	80010e0 <__BMP280_WriteReg>
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <BMP280_SetFilter>:
/**
 * @brief  		Set the coefficient of the BMP280 IIR filter
 * @param 		BMP280 filter coefficient
 */
void BMP280_SetFilter(uint8_t filter)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	4603      	mov	r3, r0
 800087a:	71fb      	strb	r3, [r7, #7]
	filter &= BMP280_MASK_FILTER;
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 031c 	and.w	r3, r3, #28
 8000882:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_MASK_FILTER);
 8000884:	20f5      	movs	r0, #245	@ 0xf5
 8000886:	f000 fc49 	bl	800111c <__BMP280_ReadReg>
 800088a:	4603      	mov	r3, r0
 800088c:	f023 031c 	bic.w	r3, r3, #28
 8000890:	73fb      	strb	r3, [r7, #15]
	__BMP280_WriteReg(BMP280_REG_CONFIG, reg | filter);
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4313      	orrs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4619      	mov	r1, r3
 800089c:	20f5      	movs	r0, #245	@ 0xf5
 800089e:	f000 fc1f 	bl	80010e0 <__BMP280_WriteReg>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <BMP280_SetStandby>:
/**
 * @brief  		Set the inactive duration in normal mode (T_standby)
 * @param 		BMP280 inactive duration
 */
void BMP280_SetStandby(uint8_t tsb)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]
	tsb &= BMP280_MASK_STBY;
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__BMP280_ReadReg(BMP280_REG_CONFIG) & ~BMP280_MASK_STBY);
 80008bc:	20f5      	movs	r0, #245	@ 0xf5
 80008be:	f000 fc2d 	bl	800111c <__BMP280_ReadReg>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f023 0303 	bic.w	r3, r3, #3
 80008c8:	73fb      	strb	r3, [r7, #15]
	__BMP280_WriteReg(BMP280_REG_CONFIG, reg | tsb);
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4619      	mov	r1, r3
 80008d4:	20f5      	movs	r0, #245	@ 0xf5
 80008d6:	f000 fc03 	bl	80010e0 <__BMP280_WriteReg>
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <BMP280_SetOSRST>:
/**
 * @brief  		Set the temperature oversampling setting
 * @param 		oversampling value
 */
void BMP280_SetOSRST(uint8_t osrs)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b084      	sub	sp, #16
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
	osrs &= BMP280_MASK_OSRST;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f023 031f 	bic.w	r3, r3, #31
 80008f2:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_MASK_OSRST);
 80008f4:	20f4      	movs	r0, #244	@ 0xf4
 80008f6:	f000 fc11 	bl	800111c <__BMP280_ReadReg>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	73fb      	strb	r3, [r7, #15]
	__BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg | osrs);
 8000902:	7bfa      	ldrb	r2, [r7, #15]
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4313      	orrs	r3, r2
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4619      	mov	r1, r3
 800090c:	20f4      	movs	r0, #244	@ 0xf4
 800090e:	f000 fbe7 	bl	80010e0 <__BMP280_WriteReg>
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <BMP280_SetOSRSP>:
/**
 * @brief  		Set the pressure oversampling setting
 * @param 		oversampling value
 */
void BMP280_SetOSRSP(uint8_t osrs)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
	osrs &= BMP280_MASK_OSRSP;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 031c 	and.w	r3, r3, #28
 800092a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__BMP280_ReadReg(BMP280_REG_CTRL_MEAS) & ~BMP280_MASK_OSRSP);
 800092c:	20f4      	movs	r0, #244	@ 0xf4
 800092e:	f000 fbf5 	bl	800111c <__BMP280_ReadReg>
 8000932:	4603      	mov	r3, r0
 8000934:	f023 031c 	bic.w	r3, r3, #28
 8000938:	73fb      	strb	r3, [r7, #15]
	__BMP280_WriteReg(BMP280_REG_CTRL_MEAS, reg | osrs);
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4313      	orrs	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	20f4      	movs	r0, #244	@ 0xf4
 8000946:	f000 fbcb 	bl	80010e0 <__BMP280_WriteReg>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <BMP280_ReadUTP>:
 * @note		0x80000 in either UT or UP means "no data present"
 * 				which could mean the respective measurement isnt ready or is disabled.
 * @retval 		BMP280_Error in case of error on I2C bus, BMP280_Success otherwise
 */
BMP280_Result BMP280_ReadUTP(int32_t *UT, int32_t *UP)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b084      	sub	sp, #16
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	6039      	str	r1, [r7, #0]
	uint8_t buf[8];

	// Bulk read from 'press_msb' to 'temp_xlsb'
	if (__BMP280_BulkReadReg(BMP280_REG_PRESS_MSB, buf, sizeof(buf)) == BMP280_Success)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2208      	movs	r2, #8
 8000962:	4619      	mov	r1, r3
 8000964:	20f7      	movs	r0, #247	@ 0xf7
 8000966:	f000 fc07 	bl	8001178 <__BMP280_BulkReadReg>
 800096a:	4603      	mov	r3, r0
 800096c:	2b01      	cmp	r3, #1
 800096e:	d117      	bne.n	80009a0 <BMP280_ReadUTP+0x4e>
	{
		*UP = (int32_t)((buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4));
 8000970:	7a3b      	ldrb	r3, [r7, #8]
 8000972:	031a      	lsls	r2, r3, #12
 8000974:	7a7b      	ldrb	r3, [r7, #9]
 8000976:	011b      	lsls	r3, r3, #4
 8000978:	4313      	orrs	r3, r2
 800097a:	7aba      	ldrb	r2, [r7, #10]
 800097c:	0912      	lsrs	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	431a      	orrs	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	601a      	str	r2, [r3, #0]
		*UT = (int32_t)((buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4));
 8000986:	7afb      	ldrb	r3, [r7, #11]
 8000988:	031a      	lsls	r2, r3, #12
 800098a:	7b3b      	ldrb	r3, [r7, #12]
 800098c:	011b      	lsls	r3, r3, #4
 800098e:	4313      	orrs	r3, r2
 8000990:	7b7a      	ldrb	r2, [r7, #13]
 8000992:	0912      	lsrs	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	431a      	orrs	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	601a      	str	r2, [r3, #0]
		return BMP280_Success;
 800099c:	2301      	movs	r3, #1
 800099e:	e008      	b.n	80009b2 <BMP280_ReadUTP+0x60>
	}

	// Default result values
	*UT = BMP280_NO_TEMPERATURE;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009a6:	601a      	str	r2, [r3, #0]
	*UP = BMP280_NO_PRESSURE;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ae:	601a      	str	r2, [r3, #0]

	return BMP280_Error;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <BMP280_CalcT>:
 * @note		Sourced from BMP280 datasheet rev 1.19
 * @param   UT	32 bit raw temperature value from BMP280_ReadUT()
 * @retval		temperature in *C: value of 1234 = '12.34*C'
 */
int32_t  BMP280_CalcT(int32_t UT)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	// The implementation depends on the library configuration
	#if (BMP280_LIBCONFIG_CALCTYPE != 2)

		// Use integer calculations
		t_fine  = ((((UT >> 3) - ((int32_t)BMP280_CalParams.dig_T1 << 1))) \
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	10da      	asrs	r2, r3, #3
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <BMP280_CalcT+0x70>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	1ad3      	subs	r3, r2, r3
				* ((int32_t)BMP280_CalParams.dig_T2)) >> 11;
 80009d0:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <BMP280_CalcT+0x70>)
 80009d2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	12db      	asrs	r3, r3, #11
		t_fine  = ((((UT >> 3) - ((int32_t)BMP280_CalParams.dig_T1 << 1))) \
 80009dc:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <BMP280_CalcT+0x74>)
 80009de:	6013      	str	r3, [r2, #0]
		t_fine += (((((UT >> 4) - ((int32_t)BMP280_CalParams.dig_T1)) \
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	111b      	asrs	r3, r3, #4
 80009e4:	4a11      	ldr	r2, [pc, #68]	@ (8000a2c <BMP280_CalcT+0x70>)
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	1a9b      	subs	r3, r3, r2
				* ((UT >> 4) - ((int32_t)BMP280_CalParams.dig_T1))) >> 12) \
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	1112      	asrs	r2, r2, #4
 80009ee:	490f      	ldr	r1, [pc, #60]	@ (8000a2c <BMP280_CalcT+0x70>)
 80009f0:	8809      	ldrh	r1, [r1, #0]
 80009f2:	1a52      	subs	r2, r2, r1
 80009f4:	fb02 f303 	mul.w	r3, r2, r3
 80009f8:	131b      	asrs	r3, r3, #12
				* ((int32_t)BMP280_CalParams.dig_T3)) >> 14;
 80009fa:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <BMP280_CalcT+0x70>)
 80009fc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000a00:	fb02 f303 	mul.w	r3, r2, r3
 8000a04:	139a      	asrs	r2, r3, #14
		t_fine += (((((UT >> 4) - ((int32_t)BMP280_CalParams.dig_T1)) \
 8000a06:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <BMP280_CalcT+0x74>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <BMP280_CalcT+0x74>)
 8000a0e:	6013      	str	r3, [r2, #0]

		return ((t_fine * 5) + 128) >> 8;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <BMP280_CalcT+0x74>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	3380      	adds	r3, #128	@ 0x80
 8000a1c:	121b      	asrs	r3, r3, #8
		t_fine_f = v_x1 + v_x2;

		return (int32_t)(((v_x1 + v_x2) / 5120.0F) * 100.0F);

	#endif // BMP280_LIBCONFIG_CALCTYPE
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000d8 	.word	0x200000d8
 8000a30:	200000d4 	.word	0x200000d4

08000a34 <BMP280_CalcP>:
 * @note		BMP_CalcT() should be called before calling this!
 * @param   UP	32 bit raw pressure value from BMP280_ReadUP()
 * @retval		Pressure in mPa: value of 123456789 = '123456.789Pa'
 */
uint32_t BMP280_CalcP(int32_t UP)
{
 8000a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a38:	b0ce      	sub	sp, #312	@ 0x138
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
		return p * 1000U;
	#elif (BMP280_LIBCONFIG_CALCTYPE == 1)
		// 64-bit calculations
		int64_t v1, v2, p;

		v1 = (int64_t)t_fine - 128000;
 8000a40:	4baf      	ldr	r3, [pc, #700]	@ (8000d00 <BMP280_CalcP+0x2cc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	17da      	asrs	r2, r3, #31
 8000a46:	461c      	mov	r4, r3
 8000a48:	4615      	mov	r5, r2
 8000a4a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000a4e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8000a52:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	@ 0x130
		v2 = v1 * v1 * (int64_t)BMP280_CalParams.dig_P6;
 8000a56:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000a5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000a5e:	fb03 f102 	mul.w	r1, r3, r2
 8000a62:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000a6a:	fb02 f303 	mul.w	r3, r2, r3
 8000a6e:	18ca      	adds	r2, r1, r3
 8000a70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000a74:	fba3 8903 	umull	r8, r9, r3, r3
 8000a78:	eb02 0309 	add.w	r3, r2, r9
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000a80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	17da      	asrs	r2, r3, #31
 8000a88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000a8c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000a90:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8000a94:	4603      	mov	r3, r0
 8000a96:	fb03 f209 	mul.w	r2, r3, r9
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	fb08 f303 	mul.w	r3, r8, r3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	fba8 1202 	umull	r1, r2, r8, r2
 8000aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000aac:	460a      	mov	r2, r1
 8000aae:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000ab2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000ab6:	4413      	add	r3, r2
 8000ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000abc:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8000ac0:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8000ac4:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		v2 = v2 + ((v1 * (int64_t)BMP280_CalParams.dig_P5) << 17);
 8000ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000aca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	17da      	asrs	r2, r3, #31
 8000ad2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000ad6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000ada:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000ade:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	fb02 f203 	mul.w	r2, r2, r3
 8000ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000aec:	4621      	mov	r1, r4
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	441a      	add	r2, r3
 8000af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000af8:	4621      	mov	r1, r4
 8000afa:	fba3 1301 	umull	r1, r3, r3, r1
 8000afe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000b02:	460b      	mov	r3, r1
 8000b04:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000b0c:	18d3      	adds	r3, r2, r3
 8000b0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	f04f 0100 	mov.w	r1, #0
 8000b1a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8000b1e:	462b      	mov	r3, r5
 8000b20:	0459      	lsls	r1, r3, #17
 8000b22:	4623      	mov	r3, r4
 8000b24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000b28:	4623      	mov	r3, r4
 8000b2a:	0458      	lsls	r0, r3, #17
 8000b2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000b30:	1814      	adds	r4, r2, r0
 8000b32:	653c      	str	r4, [r7, #80]	@ 0x50
 8000b34:	414b      	adcs	r3, r1
 8000b36:	657b      	str	r3, [r7, #84]	@ 0x54
 8000b38:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8000b3c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		v2 = v2 + ((int64_t)BMP280_CalParams.dig_P4 << 35);
 8000b40:	4b70      	ldr	r3, [pc, #448]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000b42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	17da      	asrs	r2, r3, #31
 8000b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000b4e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	f04f 0100 	mov.w	r1, #0
 8000b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000b5e:	00d9      	lsls	r1, r3, #3
 8000b60:	2000      	movs	r0, #0
 8000b62:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000b66:	1814      	adds	r4, r2, r0
 8000b68:	64bc      	str	r4, [r7, #72]	@ 0x48
 8000b6a:	414b      	adcs	r3, r1
 8000b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000b6e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8000b72:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		v1 = ((v1 * v1 * (int64_t)BMP280_CalParams.dig_P3) >> 8) + \
 8000b76:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000b7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000b7e:	fb03 f102 	mul.w	r1, r3, r2
 8000b82:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000b86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000b8a:	fb02 f303 	mul.w	r3, r2, r3
 8000b8e:	18ca      	adds	r2, r1, r3
 8000b90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000b94:	fba3 1303 	umull	r1, r3, r3, r3
 8000b98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ba6:	18d3      	adds	r3, r2, r3
 8000ba8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000bac:	4b55      	ldr	r3, [pc, #340]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000bae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	17da      	asrs	r2, r3, #31
 8000bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000bba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000bbe:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8000bc2:	462b      	mov	r3, r5
 8000bc4:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8000bc8:	4642      	mov	r2, r8
 8000bca:	fb02 f203 	mul.w	r2, r2, r3
 8000bce:	464b      	mov	r3, r9
 8000bd0:	4621      	mov	r1, r4
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4622      	mov	r2, r4
 8000bda:	4641      	mov	r1, r8
 8000bdc:	fba2 1201 	umull	r1, r2, r2, r1
 8000be0:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000be4:	460a      	mov	r2, r1
 8000be6:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8000bea:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8000bee:	4413      	add	r3, r2
 8000bf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	f04f 0100 	mov.w	r1, #0
 8000bfc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000c00:	4623      	mov	r3, r4
 8000c02:	0a18      	lsrs	r0, r3, #8
 8000c04:	462b      	mov	r3, r5
 8000c06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000c0a:	462b      	mov	r3, r5
 8000c0c:	1219      	asrs	r1, r3, #8
				((v1 * (int64_t)BMP280_CalParams.dig_P2) << 12);
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000c10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	17da      	asrs	r2, r3, #31
 8000c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000c24:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8000c28:	464a      	mov	r2, r9
 8000c2a:	fb02 f203 	mul.w	r2, r2, r3
 8000c2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000c32:	4644      	mov	r4, r8
 8000c34:	fb04 f303 	mul.w	r3, r4, r3
 8000c38:	441a      	add	r2, r3
 8000c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000c3e:	4644      	mov	r4, r8
 8000c40:	fba3 4304 	umull	r4, r3, r3, r4
 8000c44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c48:	4623      	mov	r3, r4
 8000c4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000c52:	18d3      	adds	r3, r2, r3
 8000c54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c58:	f04f 0200 	mov.w	r2, #0
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8000c64:	464c      	mov	r4, r9
 8000c66:	0323      	lsls	r3, r4, #12
 8000c68:	4644      	mov	r4, r8
 8000c6a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c6e:	4644      	mov	r4, r8
 8000c70:	0322      	lsls	r2, r4, #12
		v1 = ((v1 * v1 * (int64_t)BMP280_CalParams.dig_P3) >> 8) + \
 8000c72:	1884      	adds	r4, r0, r2
 8000c74:	643c      	str	r4, [r7, #64]	@ 0x40
 8000c76:	eb41 0303 	adc.w	r3, r1, r3
 8000c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c7c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000c80:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		v1 = (((((int64_t)1) << 47) + v1)) * ((int64_t)BMP280_CalParams.dig_P1) >> 33;
 8000c84:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000c88:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c8c:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8000c90:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <BMP280_CalcP+0x2d0>)
 8000c96:	88db      	ldrh	r3, [r3, #6]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000ca0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000ca4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8000ca8:	462b      	mov	r3, r5
 8000caa:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000cae:	4642      	mov	r2, r8
 8000cb0:	fb02 f203 	mul.w	r2, r2, r3
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	fb01 f303 	mul.w	r3, r1, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	4641      	mov	r1, r8
 8000cc2:	fba2 1201 	umull	r1, r2, r2, r1
 8000cc6:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000cca:	460a      	mov	r2, r1
 8000ccc:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000cd0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000cda:	f04f 0200 	mov.w	r2, #0
 8000cde:	f04f 0300 	mov.w	r3, #0
 8000ce2:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	104a      	asrs	r2, r1, #1
 8000cea:	4629      	mov	r1, r5
 8000cec:	17cb      	asrs	r3, r1, #31
 8000cee:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		if (v1 == 0) {
 8000cf2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <BMP280_CalcP+0x2d4>
			// avoid exception caused by division by zero
			return 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e18d      	b.n	800101a <BMP280_CalcP+0x5e6>
 8000cfe:	bf00      	nop
 8000d00:	200000d4 	.word	0x200000d4
 8000d04:	200000d8 	.word	0x200000d8
		}
		p = 1048576 - UP;
 8000d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000d0c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000d10:	17da      	asrs	r2, r3, #31
 8000d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000d16:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000d1a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
		p = (((p << 31) - v2) * 3125) / v1;
 8000d1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d22:	105b      	asrs	r3, r3, #1
 8000d24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000d2c:	07db      	lsls	r3, r3, #31
 8000d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000d32:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000d36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000d3a:	4621      	mov	r1, r4
 8000d3c:	1a89      	subs	r1, r1, r2
 8000d3e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8000d42:	4629      	mov	r1, r5
 8000d44:	eb61 0303 	sbc.w	r3, r1, r3
 8000d48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000d4c:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8000d50:	4622      	mov	r2, r4
 8000d52:	462b      	mov	r3, r5
 8000d54:	1891      	adds	r1, r2, r2
 8000d56:	6339      	str	r1, [r7, #48]	@ 0x30
 8000d58:	415b      	adcs	r3, r3
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000d60:	4621      	mov	r1, r4
 8000d62:	1851      	adds	r1, r2, r1
 8000d64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000d66:	4629      	mov	r1, r5
 8000d68:	414b      	adcs	r3, r1
 8000d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8000d78:	4649      	mov	r1, r9
 8000d7a:	018b      	lsls	r3, r1, #6
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d82:	4641      	mov	r1, r8
 8000d84:	018a      	lsls	r2, r1, #6
 8000d86:	4641      	mov	r1, r8
 8000d88:	1889      	adds	r1, r1, r2
 8000d8a:	6239      	str	r1, [r7, #32]
 8000d8c:	4649      	mov	r1, r9
 8000d8e:	eb43 0101 	adc.w	r1, r3, r1
 8000d92:	6279      	str	r1, [r7, #36]	@ 0x24
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000da0:	4649      	mov	r1, r9
 8000da2:	008b      	lsls	r3, r1, #2
 8000da4:	4641      	mov	r1, r8
 8000da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000daa:	4641      	mov	r1, r8
 8000dac:	008a      	lsls	r2, r1, #2
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	4603      	mov	r3, r0
 8000db4:	4622      	mov	r2, r4
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	eb42 0303 	adc.w	r3, r2, r3
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000dd0:	4649      	mov	r1, r9
 8000dd2:	008b      	lsls	r3, r1, #2
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000dda:	4641      	mov	r1, r8
 8000ddc:	008a      	lsls	r2, r1, #2
 8000dde:	4610      	mov	r0, r2
 8000de0:	4619      	mov	r1, r3
 8000de2:	4603      	mov	r3, r0
 8000de4:	4622      	mov	r2, r4
 8000de6:	189b      	adds	r3, r3, r2
 8000de8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000dec:	462b      	mov	r3, r5
 8000dee:	460a      	mov	r2, r1
 8000df0:	eb42 0303 	adc.w	r3, r2, r3
 8000df4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000df8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000dfc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8000e00:	f7ff fa3e 	bl	8000280 <__aeabi_ldivmod>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
		v1 = (((int64_t)BMP280_CalParams.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8000e0c:	4b86      	ldr	r3, [pc, #536]	@ (8001028 <BMP280_CalcP+0x5f4>)
 8000e0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	17da      	asrs	r2, r3, #31
 8000e16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000e18:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000e1a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	f04f 0100 	mov.w	r1, #0
 8000e26:	0b50      	lsrs	r0, r2, #13
 8000e28:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e2c:	1359      	asrs	r1, r3, #13
 8000e2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000e32:	462b      	mov	r3, r5
 8000e34:	fb00 f203 	mul.w	r2, r0, r3
 8000e38:	4623      	mov	r3, r4
 8000e3a:	fb03 f301 	mul.w	r3, r3, r1
 8000e3e:	4413      	add	r3, r2
 8000e40:	4622      	mov	r2, r4
 8000e42:	fba2 1200 	umull	r1, r2, r2, r0
 8000e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8000e4a:	460a      	mov	r2, r1
 8000e4c:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8000e50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e54:	4413      	add	r3, r2
 8000e56:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000e5a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000e5e:	f04f 0000 	mov.w	r0, #0
 8000e62:	f04f 0100 	mov.w	r1, #0
 8000e66:	0b50      	lsrs	r0, r2, #13
 8000e68:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e6c:	1359      	asrs	r1, r3, #13
 8000e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8000e72:	462b      	mov	r3, r5
 8000e74:	fb00 f203 	mul.w	r2, r0, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	fb03 f301 	mul.w	r3, r3, r1
 8000e7e:	4413      	add	r3, r2
 8000e80:	4622      	mov	r2, r4
 8000e82:	fba2 1200 	umull	r1, r2, r2, r0
 8000e86:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000e90:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000e94:	4413      	add	r3, r2
 8000e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	0e4a      	lsrs	r2, r1, #25
 8000eaa:	4629      	mov	r1, r5
 8000eac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	164b      	asrs	r3, r1, #25
 8000eb4:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		v2 = (((int64_t)BMP280_CalParams.dig_P8) * p) >> 19;
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <BMP280_CalcP+0x5f4>)
 8000eba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	17da      	asrs	r2, r3, #31
 8000ec2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ec4:	677a      	str	r2, [r7, #116]	@ 0x74
 8000ec6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000eca:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8000ece:	462a      	mov	r2, r5
 8000ed0:	fb02 f203 	mul.w	r2, r2, r3
 8000ed4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ed8:	4621      	mov	r1, r4
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
 8000ede:	441a      	add	r2, r3
 8000ee0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	fba3 1301 	umull	r1, r3, r3, r1
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000eee:	460b      	mov	r3, r1
 8000ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	0cca      	lsrs	r2, r1, #19
 8000f0e:	4629      	mov	r1, r5
 8000f10:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000f14:	4629      	mov	r1, r5
 8000f16:	14cb      	asrs	r3, r1, #19
 8000f18:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
		p = ((p + v1 + v2) >> 8) + ((int64_t)BMP280_CalParams.dig_P7 << 4);
 8000f1c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8000f20:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8000f24:	1884      	adds	r4, r0, r2
 8000f26:	66bc      	str	r4, [r7, #104]	@ 0x68
 8000f28:	eb41 0303 	adc.w	r3, r1, r3
 8000f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f2e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8000f32:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000f36:	4621      	mov	r1, r4
 8000f38:	1889      	adds	r1, r1, r2
 8000f3a:	6639      	str	r1, [r7, #96]	@ 0x60
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	eb43 0101 	adc.w	r1, r3, r1
 8000f42:	6679      	str	r1, [r7, #100]	@ 0x64
 8000f44:	f04f 0000 	mov.w	r0, #0
 8000f48:	f04f 0100 	mov.w	r1, #0
 8000f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000f50:	4623      	mov	r3, r4
 8000f52:	0a18      	lsrs	r0, r3, #8
 8000f54:	462b      	mov	r3, r5
 8000f56:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f5a:	462b      	mov	r3, r5
 8000f5c:	1219      	asrs	r1, r3, #8
 8000f5e:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <BMP280_CalcP+0x5f4>)
 8000f60:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	17da      	asrs	r2, r3, #31
 8000f68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000f6a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8000f78:	464c      	mov	r4, r9
 8000f7a:	0123      	lsls	r3, r4, #4
 8000f7c:	4644      	mov	r4, r8
 8000f7e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f82:	4644      	mov	r4, r8
 8000f84:	0122      	lsls	r2, r4, #4
 8000f86:	1884      	adds	r4, r0, r2
 8000f88:	613c      	str	r4, [r7, #16]
 8000f8a:	eb41 0303 	adc.w	r3, r1, r3
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f94:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120

		return (uint32_t)((p * 1000) >> 8);
 8000f98:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	f04f 0400 	mov.w	r4, #0
 8000fa4:	f04f 0500 	mov.w	r5, #0
 8000fa8:	015d      	lsls	r5, r3, #5
 8000faa:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8000fae:	0154      	lsls	r4, r2, #5
 8000fb0:	4622      	mov	r2, r4
 8000fb2:	462b      	mov	r3, r5
 8000fb4:	1a14      	subs	r4, r2, r0
 8000fb6:	60bc      	str	r4, [r7, #8]
 8000fb8:	eb63 0301 	sbc.w	r3, r3, r1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000fca:	464c      	mov	r4, r9
 8000fcc:	00a3      	lsls	r3, r4, #2
 8000fce:	4644      	mov	r4, r8
 8000fd0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000fd4:	4644      	mov	r4, r8
 8000fd6:	00a2      	lsls	r2, r4, #2
 8000fd8:	4614      	mov	r4, r2
 8000fda:	461d      	mov	r5, r3
 8000fdc:	4623      	mov	r3, r4
 8000fde:	181b      	adds	r3, r3, r0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	462b      	mov	r3, r5
 8000fe4:	eb41 0303 	adc.w	r3, r1, r3
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000ff6:	4629      	mov	r1, r5
 8000ff8:	00cb      	lsls	r3, r1, #3
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001000:	4621      	mov	r1, r4
 8001002:	00ca      	lsls	r2, r1, #3
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	0a02      	lsrs	r2, r0, #8
 8001012:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001016:	120b      	asrs	r3, r1, #8
 8001018:	4613      	mov	r3, r2
		v_x2 = p_f * ((float)BMP280_CalParams.dig_P8) / 32768.0F;
		p_f += (v_x1 + v_x2 + ((float)BMP280_CalParams.dig_P7)) / 16.0F;

		return (uint32_t)(p_f * 1000.0F);
	#endif // BMP280_LIBCONFIG_CALCTYPE
}
 800101a:	4618      	mov	r0, r3
 800101c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001020:	46bd      	mov	sp, r7
 8001022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001026:	bf00      	nop
 8001028:	200000d8 	.word	0x200000d8
 800102c:	00000000 	.word	0x00000000

08001030 <BMP280_Pa_to_mmHg>:
 * @brief  			Convert Pa to mmHg
 * @param   p_pa	Pressure in mPa
 * @retval  		Pressure in mmHg: 123456 = '123.456mmHg'
 */
uint32_t BMP280_Pa_to_mmHg(uint32_t p_pa)
{
 8001030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001034:	b088      	sub	sp, #32
 8001036:	af00      	add	r7, sp, #0
 8001038:	6178      	str	r0, [r7, #20]
		return ((p >> 22) * 1000U) + ((((p << 10) >> 18) * 61039U) / 1000000U);
	#elif (BMP280_LIBCONFIG_CALCTYPE == 1)
		// 64-bit integer calculations

		// A bit more precision but noticeable slower on a 32-bit MCU
		uint64_t p_mmHg = ((uint64_t)p_pa * 1000000ULL) / 133322368ULL;
 800103a:	6979      	ldr	r1, [r7, #20]
 800103c:	2000      	movs	r0, #0
 800103e:	4688      	mov	r8, r1
 8001040:	4681      	mov	r9, r0
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f04f 0a00 	mov.w	sl, #0
 800104a:	f04f 0b00 	mov.w	fp, #0
 800104e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001052:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001056:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800105a:	4650      	mov	r0, sl
 800105c:	4659      	mov	r1, fp
 800105e:	ebb0 0208 	subs.w	r2, r0, r8
 8001062:	eb61 0309 	sbc.w	r3, r1, r9
 8001066:	f04f 0000 	mov.w	r0, #0
 800106a:	f04f 0100 	mov.w	r1, #0
 800106e:	0259      	lsls	r1, r3, #9
 8001070:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001074:	0250      	lsls	r0, r2, #9
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	eb12 0408 	adds.w	r4, r2, r8
 800107e:	eb43 0509 	adc.w	r5, r3, r9
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	01ab      	lsls	r3, r5, #6
 800108c:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001090:	01a2      	lsls	r2, r4, #6
 8001092:	1b11      	subs	r1, r2, r4
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	eb63 0305 	sbc.w	r3, r3, r5
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80010a0:	460b      	mov	r3, r1
 80010a2:	eb13 0308 	adds.w	r3, r3, r8
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4613      	mov	r3, r2
 80010aa:	eb43 0309 	adc.w	r3, r3, r9
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	a309      	add	r3, pc, #36	@ (adr r3, 80010d8 <BMP280_Pa_to_mmHg+0xa8>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010ba:	f7ff f931 	bl	8000320 <__aeabi_uldivmod>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		return (uint32_t)p_mmHg;
 80010c6:	69bb      	ldr	r3, [r7, #24]
	#else // BMP280_LIBCONFIG_CALCTYPE == 2
		// Float calculations
		return (uint32_t)((float)p_pa / 133.322368F);
	#endif // BMP280_LIBCONFIG_CALCTYPE
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010d2:	bf00      	nop
 80010d4:	f3af 8000 	nop.w
 80010d8:	07f25680 	.word	0x07f25680
 80010dc:	00000000 	.word	0x00000000

080010e0 <__BMP280_WriteReg>:
 * @brief  		Write data to a given register in the BMP280
 * @param  reg	Address of the register to write to
 * @param  data	Data to be written
 */
static void __BMP280_WriteReg(uint8_t reg, uint8_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] = {reg, data};
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	733b      	strb	r3, [r7, #12]
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(bmp1.hi2c, bmp1.address, buf, 2, 100);
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <__BMP280_WriteReg+0x38>)
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <__BMP280_WriteReg+0x38>)
 80010fe:	791b      	ldrb	r3, [r3, #4]
 8001100:	4619      	mov	r1, r3
 8001102:	f107 020c 	add.w	r2, r7, #12
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	f002 fad8 	bl	80036c0 <HAL_I2C_Master_Transmit>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000cc 	.word	0x200000cc

0800111c <__BMP280_ReadReg>:
 * @brief  		Read data from a given register in the BMP280
 * @param  reg  Address of the register to read from
 * @retval      Data read from the register
 */
static uint8_t __BMP280_ReadReg(uint8_t reg)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	uint8_t retval = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(bmp1.hi2c, bmp1.address, &reg, 1, 100);
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <__BMP280_ReadReg+0x58>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <__BMP280_ReadReg+0x58>)
 8001130:	791b      	ldrb	r3, [r3, #4]
 8001132:	4619      	mov	r1, r3
 8001134:	1dfa      	adds	r2, r7, #7
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	f002 fac0 	bl	80036c0 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(bmp1.hi2c) != HAL_I2C_STATE_READY);
 8001140:	bf00      	nop
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <__BMP280_ReadReg+0x58>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f972 	bl	8004430 <HAL_I2C_GetState>
 800114c:	4603      	mov	r3, r0
 800114e:	2b20      	cmp	r3, #32
 8001150:	d1f7      	bne.n	8001142 <__BMP280_ReadReg+0x26>
	HAL_I2C_Master_Receive(bmp1.hi2c, bmp1.address, &retval, 1, 100);
 8001152:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <__BMP280_ReadReg+0x58>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <__BMP280_ReadReg+0x58>)
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	4619      	mov	r1, r3
 800115c:	f107 020f 	add.w	r2, r7, #15
 8001160:	2364      	movs	r3, #100	@ 0x64
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	f002 fba9 	bl	80038bc <HAL_I2C_Master_Receive>
	return retval;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000cc 	.word	0x200000cc

08001178 <__BMP280_BulkReadReg>:
 * @param  buf  Buffer to store read registers
 * @param  size Number of registers to be read
 * @retval      BMP280_Error or BMP280_Success
 */
static BMP280_Result __BMP280_BulkReadReg(uint8_t reg, uint8_t *buf, uint32_t size)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Master_Transmit(bmp1.hi2c, bmp1.address, &reg, 1, 100) == HAL_OK)
 8001186:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <__BMP280_BulkReadReg+0x6c>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <__BMP280_BulkReadReg+0x6c>)
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	4619      	mov	r1, r3
 8001190:	f107 020f 	add.w	r2, r7, #15
 8001194:	2364      	movs	r3, #100	@ 0x64
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	f002 fa91 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d119      	bne.n	80011d8 <__BMP280_BulkReadReg+0x60>
	{
		while (HAL_I2C_GetState(bmp1.hi2c) != HAL_I2C_STATE_READY);
 80011a4:	bf00      	nop
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <__BMP280_BulkReadReg+0x6c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f940 	bl	8004430 <HAL_I2C_GetState>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	d1f7      	bne.n	80011a6 <__BMP280_BulkReadReg+0x2e>
		if (HAL_I2C_Master_Receive(bmp1.hi2c, bmp1.address, buf, size, 100) == HAL_OK)
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <__BMP280_BulkReadReg+0x6c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <__BMP280_BulkReadReg+0x6c>)
 80011bc:	791b      	ldrb	r3, [r3, #4]
 80011be:	4619      	mov	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2264      	movs	r2, #100	@ 0x64
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	f002 fb77 	bl	80038bc <HAL_I2C_Master_Receive>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <__BMP280_BulkReadReg+0x60>
		{
			return BMP280_Success;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <__BMP280_BulkReadReg+0x62>
		}
	}

	return BMP280_Error;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000cc 	.word	0x200000cc

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_DMA_Init+0x5c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <MX_DMA_Init+0x5c>)
 80011f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_DMA_Init+0x5c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f001 fb9d 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f001 fbb6 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2010      	movs	r0, #16
 8001220:	f001 fb95 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001224:	2010      	movs	r0, #16
 8001226:	f001 fbae 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2011      	movs	r0, #17
 8001230:	f001 fb8d 	bl	800294e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001234:	2011      	movs	r0, #17
 8001236:	f001 fba6 	bl	8002986 <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b52      	ldr	r3, [pc, #328]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a51      	ldr	r2, [pc, #324]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <MX_GPIO_Init+0x164>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b48      	ldr	r3, [pc, #288]	@ (80013ac <MX_GPIO_Init+0x164>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <MX_GPIO_Init+0x164>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a43      	ldr	r2, [pc, #268]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a3c      	ldr	r2, [pc, #240]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b3a      	ldr	r3, [pc, #232]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a35      	ldr	r2, [pc, #212]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <MX_GPIO_Init+0x164>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f641 0122 	movw	r1, #6178	@ 0x1822
 80012f0:	482f      	ldr	r0, [pc, #188]	@ (80013b0 <MX_GPIO_Init+0x168>)
 80012f2:	f002 f871 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2110      	movs	r1, #16
 80012fa:	482e      	ldr	r0, [pc, #184]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 80012fc:	f002 f86c 	bl	80033d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001306:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4828      	ldr	r0, [pc, #160]	@ (80013b8 <MX_GPIO_Init+0x170>)
 8001318:	f001 feda 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin;
 800131c:	f641 0322 	movw	r3, #6178	@ 0x1822
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	481e      	ldr	r0, [pc, #120]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001336:	f001 fecb 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 800133a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4818      	ldr	r0, [pc, #96]	@ (80013b0 <MX_GPIO_Init+0x168>)
 8001350:	f001 febe 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8001354:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <MX_GPIO_Init+0x170>)
 800136a:	f001 feb1 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800136e:	2304      	movs	r3, #4
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	480e      	ldr	r0, [pc, #56]	@ (80013bc <MX_GPIO_Init+0x174>)
 8001382:	f001 fea5 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8001386:	2310      	movs	r3, #16
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_GPIO_Init+0x16c>)
 800139e:	f001 fe97 	bl	80030d0 <HAL_GPIO_Init>

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013c4:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <MX_I2C1_Init+0x54>)
 80013c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <MX_I2C1_Init+0x58>)
 80013ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_I2C1_Init+0x50>)
 80013fe:	f002 f805 	bl	800340c <HAL_I2C_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001408:	f000 fa7c 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200000f0 	.word	0x200000f0
 8001414:	40005400 	.word	0x40005400
 8001418:	000186a0 	.word	0x000186a0

0800141c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a50      	ldr	r2, [pc, #320]	@ (800157c <HAL_I2C_MspInit+0x160>)
 800143a:	4293      	cmp	r3, r2
 800143c:	f040 8099 	bne.w	8001572 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	4b4e      	ldr	r3, [pc, #312]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	4a4d      	ldr	r2, [pc, #308]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 800144a:	f043 0302 	orr.w	r3, r3, #2
 800144e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001450:	4b4b      	ldr	r3, [pc, #300]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800145c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4842      	ldr	r0, [pc, #264]	@ (8001584 <HAL_I2C_MspInit+0x168>)
 800147a:	f001 fe29 	bl	80030d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b3f      	ldr	r3, [pc, #252]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	4a3e      	ldr	r2, [pc, #248]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 8001488:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800148c:	6413      	str	r3, [r2, #64]	@ 0x40
 800148e:	4b3c      	ldr	r3, [pc, #240]	@ (8001580 <HAL_I2C_MspInit+0x164>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800149a:	4b3b      	ldr	r3, [pc, #236]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 800149c:	4a3b      	ldr	r2, [pc, #236]	@ (800158c <HAL_I2C_MspInit+0x170>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80014a0:	4b39      	ldr	r3, [pc, #228]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80014a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a8:	4b37      	ldr	r3, [pc, #220]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014aa:	2240      	movs	r2, #64	@ 0x40
 80014ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ae:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b4:	4b34      	ldr	r3, [pc, #208]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014bc:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80014da:	482b      	ldr	r0, [pc, #172]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014dc:	f001 fa6e 	bl	80029bc <HAL_DMA_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80014e6:	f000 fa0d 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a26      	ldr	r2, [pc, #152]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80014f0:	4a25      	ldr	r2, [pc, #148]	@ (8001588 <HAL_I2C_MspInit+0x16c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80014f6:	4b26      	ldr	r3, [pc, #152]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 80014f8:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_I2C_MspInit+0x178>)
 80014fa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 80014fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001502:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001504:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150a:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001516:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001536:	4816      	ldr	r0, [pc, #88]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 8001538:	f001 fa40 	bl	80029bc <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001542:	f000 f9df 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 800154a:	639a      	str	r2, [r3, #56]	@ 0x38
 800154c:	4a10      	ldr	r2, [pc, #64]	@ (8001590 <HAL_I2C_MspInit+0x174>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201f      	movs	r0, #31
 8001558:	f001 f9f9 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800155c:	201f      	movs	r0, #31
 800155e:	f001 fa12 	bl	8002986 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2020      	movs	r0, #32
 8001568:	f001 f9f1 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800156c:	2020      	movs	r0, #32
 800156e:	f001 fa0a 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	20000144 	.word	0x20000144
 800158c:	400260a0 	.word	0x400260a0
 8001590:	200001a4 	.word	0x200001a4
 8001594:	40026010 	.word	0x40026010

08001598 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015a0:	1d39      	adds	r1, r7, #4
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2201      	movs	r2, #1
 80015a8:	4803      	ldr	r0, [pc, #12]	@ (80015b8 <__io_putchar+0x20>)
 80015aa:	f005 ffb9 	bl	8007520 <HAL_UART_Transmit>
  return ch;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000318 	.word	0x20000318

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ac      	sub	sp, #176	@ 0xb0
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 fdf1 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f91f 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f7ff fe3d 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ce:	f7ff fe0b 	bl	80011e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015d2:	f000 fc7f 	bl	8001ed4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015d6:	f7ff f81b 	bl	8000610 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015da:	f7ff fef1 	bl	80013c0 <MX_I2C1_Init>
  MX_RTC_Init();
 80015de:	f000 f99d 	bl	800191c <MX_RTC_Init>
  MX_SPI2_Init();
 80015e2:	f000 f9ed 	bl	80019c0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80015e6:	f000 fc4b 	bl	8001e80 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80015ea:	f000 fc9d 	bl	8001f28 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80015ee:	f000 fbd1 	bl	8001d94 <MX_TIM1_Init>
  // whereas for getting user input (like above) we could just use blocking statements
   */

  // All UART RXs in this code expect a single "\n" control character
  // from the serial terminal, so give a warning to anyone trying to communicate
  printf("Send only newlines, not also carriage returns.\r\n");
 80015f2:	486b      	ldr	r0, [pc, #428]	@ (80017a0 <main+0x1e4>)
 80015f4:	f007 f866 	bl	80086c4 <puts>

  /* Add I2C and scan the bus for all addresses that respond */
  // TODO: Replace generic i2c scanner with a scanner that specifically looks for our modules only
  // 20x4 LCD: 0x27, TODO: get addresses for other modules
  printf("Scanning I2C bus.\r\n");
 80015f8:	486a      	ldr	r0, [pc, #424]	@ (80017a4 <main+0x1e8>)
 80015fa:	f007 f863 	bl	80086c4 <puts>
  int ret = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  char i2cBuffer[5] = {0};
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800160a:	2300      	movs	r3, #0
 800160c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
  // Scan all 128 available i2c addresses
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8001610:	2301      	movs	r3, #1
 8001612:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 8001616:	e028      	b.n	800166a <main+0xae>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(testAddr<<1), 3, 5);
 8001618:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800161c:	b29b      	uxth	r3, r3
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	2305      	movs	r3, #5
 8001624:	2203      	movs	r2, #3
 8001626:	4860      	ldr	r0, [pc, #384]	@ (80017a8 <main+0x1ec>)
 8001628:	f002 fb7a 	bl	8003d20 <HAL_I2C_IsDeviceReady>
 800162c:	4603      	mov	r3, r0
 800162e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	  if (ret == HAL_OK) // If an ACK was received at address testAddr
 8001632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001636:	2b00      	cmp	r3, #0
 8001638:	d112      	bne.n	8001660 <main+0xa4>
	  {
		  sprintf(i2cBuffer, "0x%X", testAddr);
 800163a:	f897 20ab 	ldrb.w	r2, [r7, #171]	@ 0xab
 800163e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001642:	495a      	ldr	r1, [pc, #360]	@ (80017ac <main+0x1f0>)
 8001644:	4618      	mov	r0, r3
 8001646:	f007 f845 	bl	80086d4 <siprintf>
		  printf("Device at: ");
 800164a:	4859      	ldr	r0, [pc, #356]	@ (80017b0 <main+0x1f4>)
 800164c:	f006 ffd2 	bl	80085f4 <iprintf>
		  printf(i2cBuffer);
 8001650:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001654:	4618      	mov	r0, r3
 8001656:	f006 ffcd 	bl	80085f4 <iprintf>
		  printf("\r\n");
 800165a:	4856      	ldr	r0, [pc, #344]	@ (80017b4 <main+0x1f8>)
 800165c:	f007 f832 	bl	80086c4 <puts>
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8001660:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001664:	3301      	adds	r3, #1
 8001666:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800166a:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
 800166e:	2b00      	cmp	r3, #0
 8001670:	dad2      	bge.n	8001618 <main+0x5c>
	  }
  }
  printf("Done.\r\n");
 8001672:	4851      	ldr	r0, [pc, #324]	@ (80017b8 <main+0x1fc>)
 8001674:	f007 f826 	bl	80086c4 <puts>

  /* Interface with the BMP280 */
  uint8_t retval = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
  retval = BMP280_Init(&hi2c1, (uint8_t)0x76);
 800167e:	2176      	movs	r1, #118	@ 0x76
 8001680:	4849      	ldr	r0, [pc, #292]	@ (80017a8 <main+0x1ec>)
 8001682:	f7ff f877 	bl	8000774 <BMP280_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
  int32_t temperature;
  uint32_t pressure;

  while (1) {
  		// Check status of chip
  		i = BMP280_GetStatus();
 800168c:	f7ff f8ca 	bl	8000824 <BMP280_GetStatus>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b49      	ldr	r3, [pc, #292]	@ (80017bc <main+0x200>)
 8001696:	601a      	str	r2, [r3, #0]
  		printf("Status: [%02X] %s %s\r\n",
 8001698:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <main+0x200>)
 800169a:	6819      	ldr	r1, [r3, #0]
  				i,
  				(i & BMP280_STATUS_MEASURING) ? "MEASURING" : "READY",
 800169c:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <main+0x200>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
  		printf("Status: [%02X] %s %s\r\n",
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <main+0xf0>
 80016a8:	4a45      	ldr	r2, [pc, #276]	@ (80017c0 <main+0x204>)
 80016aa:	e000      	b.n	80016ae <main+0xf2>
 80016ac:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <main+0x208>)
  				(i & BMP280_STATUS_IM_UPDATE) ? "NVM_UPDATE" : "NVM_READY"
 80016ae:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <main+0x200>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
  		printf("Status: [%02X] %s %s\r\n",
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <main+0x102>
 80016ba:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <main+0x20c>)
 80016bc:	e000      	b.n	80016c0 <main+0x104>
 80016be:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <main+0x210>)
 80016c0:	4843      	ldr	r0, [pc, #268]	@ (80017d0 <main+0x214>)
 80016c2:	f006 ff97 	bl	80085f4 <iprintf>
  			);

  		// Get raw readings from the chip
  		i = BMP280_ReadUTP(&UT, &UP);
 80016c6:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80016ca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f93e 	bl	8000952 <BMP280_ReadUTP>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <main+0x200>)
 80016dc:	601a      	str	r2, [r3, #0]
  		printf("Raw: T=0x%05X P=0x%05X [R=%s]\r\n",
 80016de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80016e2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
  				UT,
  				UP,
  				i ? "OK" : "ERROR"
 80016e6:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <main+0x200>)
 80016e8:	681b      	ldr	r3, [r3, #0]
  		printf("Raw: T=0x%05X P=0x%05X [R=%s]\r\n",
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <main+0x136>
 80016ee:	4b39      	ldr	r3, [pc, #228]	@ (80017d4 <main+0x218>)
 80016f0:	e000      	b.n	80016f4 <main+0x138>
 80016f2:	4b39      	ldr	r3, [pc, #228]	@ (80017d8 <main+0x21c>)
 80016f4:	4839      	ldr	r0, [pc, #228]	@ (80017dc <main+0x220>)
 80016f6:	f006 ff7d 	bl	80085f4 <iprintf>
  			);

  		if (UT == 0x80000) {
 80016fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001702:	d106      	bne.n	8001712 <main+0x156>
  			// Either temperature measurement is configured as 'skip' or first conversion is not completed yet
  			printf("Temperature: no data\r\n");
 8001704:	4836      	ldr	r0, [pc, #216]	@ (80017e0 <main+0x224>)
 8001706:	f006 ffdd 	bl	80086c4 <puts>
  			// There is no sense to calculate pressure without temperature readings
  			printf("Pressure: no temperature readings\r\n");
 800170a:	4836      	ldr	r0, [pc, #216]	@ (80017e4 <main+0x228>)
 800170c:	f006 ffda 	bl	80086c4 <puts>
 8001710:	e03e      	b.n	8001790 <main+0x1d4>
  		} else {
  			// Temperature (must be calculated first)
  			//  UT = 0x84D3C; // test raw value: 25.90C
  			temperature = BMP280_CalcT((int32_t)0x84DC3);
 8001712:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <main+0x22c>)
 8001714:	f7ff f952 	bl	80009bc <BMP280_CalcT>
 8001718:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  			int t = temperature / 100.0f;
 800171c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001728:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80017ec <main+0x230>
 800172c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  			printf("Temperature: %.2iC\r\n", t);
 800173c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001740:	482b      	ldr	r0, [pc, #172]	@ (80017f0 <main+0x234>)
 8001742:	f006 ff57 	bl	80085f4 <iprintf>

  			if (UP == 0x80000) {
 8001746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800174a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800174e:	d103      	bne.n	8001758 <main+0x19c>
  				// Either pressure measurement is configured as 'skip' or first conversion is not completed yet
  				printf("Pressure: no data\r\n");
 8001750:	4828      	ldr	r0, [pc, #160]	@ (80017f4 <main+0x238>)
 8001752:	f006 ffb7 	bl	80086c4 <puts>
 8001756:	e01b      	b.n	8001790 <main+0x1d4>
  			} else {
  				// Pressure
  				pressure = BMP280_CalcP(UP);
 8001758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f969 	bl	8000a34 <BMP280_CalcP>
 8001762:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  				printf("Pressure: %.3uPa [%.3uhPa]\r\n",
 8001766:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800176a:	4a23      	ldr	r2, [pc, #140]	@ (80017f8 <main+0x23c>)
 800176c:	fba2 2303 	umull	r2, r3, r2, r3
 8001770:	095b      	lsrs	r3, r3, #5
 8001772:	461a      	mov	r2, r3
 8001774:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8001778:	4820      	ldr	r0, [pc, #128]	@ (80017fc <main+0x240>)
 800177a:	f006 ff3b 	bl	80085f4 <iprintf>
  						pressure,
  						pressure / 100
  					);

  				printf("mmHg: %.3u\r\n",
 800177e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001782:	f7ff fc55 	bl	8001030 <BMP280_Pa_to_mmHg>
 8001786:	4603      	mov	r3, r0
 8001788:	4619      	mov	r1, r3
 800178a:	481d      	ldr	r0, [pc, #116]	@ (8001800 <main+0x244>)
 800178c:	f006 ff32 	bl	80085f4 <iprintf>
  					);

  			}
  		}

  		printf("------------------------\r\n");
 8001790:	481c      	ldr	r0, [pc, #112]	@ (8001804 <main+0x248>)
 8001792:	f006 ff97 	bl	80086c4 <puts>

  		// Invert state of the Nucleo LED
  		//GPIO_PIN_INVERT(GPIOA, GPIO_PIN_5);

  		HAL_Delay(1000);
 8001796:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179a:	f000 fd77 	bl	800228c <HAL_Delay>
  		i = BMP280_GetStatus();
 800179e:	e775      	b.n	800168c <main+0xd0>
 80017a0:	08009750 	.word	0x08009750
 80017a4:	08009780 	.word	0x08009780
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	08009794 	.word	0x08009794
 80017b0:	0800979c 	.word	0x0800979c
 80017b4:	080097a8 	.word	0x080097a8
 80017b8:	080097ac 	.word	0x080097ac
 80017bc:	20000208 	.word	0x20000208
 80017c0:	080097b4 	.word	0x080097b4
 80017c4:	080097c0 	.word	0x080097c0
 80017c8:	080097c8 	.word	0x080097c8
 80017cc:	080097d4 	.word	0x080097d4
 80017d0:	080097e0 	.word	0x080097e0
 80017d4:	080097f8 	.word	0x080097f8
 80017d8:	080097fc 	.word	0x080097fc
 80017dc:	08009804 	.word	0x08009804
 80017e0:	08009824 	.word	0x08009824
 80017e4:	0800983c 	.word	0x0800983c
 80017e8:	00084dc3 	.word	0x00084dc3
 80017ec:	42c80000 	.word	0x42c80000
 80017f0:	08009860 	.word	0x08009860
 80017f4:	08009878 	.word	0x08009878
 80017f8:	51eb851f 	.word	0x51eb851f
 80017fc:	0800988c 	.word	0x0800988c
 8001800:	080098ac 	.word	0x080098ac
 8001804:	080098bc 	.word	0x080098bc

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	@ 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f007 f854 	bl	80088c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <SystemClock_Config+0xd4>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <SystemClock_Config+0xd4>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <SystemClock_Config+0xd4>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <SystemClock_Config+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001854:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <SystemClock_Config+0xd8>)
 8001856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <SystemClock_Config+0xd8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001868:	230a      	movs	r3, #10
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001870:	2310      	movs	r3, #16
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001874:	2301      	movs	r3, #1
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001878:	2302      	movs	r3, #2
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800187c:	2300      	movs	r3, #0
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001880:	2310      	movs	r3, #16
 8001882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001884:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800188a:	2304      	movs	r3, #4
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800188e:	2307      	movs	r3, #7
 8001890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	f107 0320 	add.w	r3, r7, #32
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fbd8 	bl	800604c <HAL_RCC_OscConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018a2:	f000 f82f 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f004 fe3a 	bl	800653c <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018ce:	f000 f819 	bl	8001904 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	@ 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	gpv_UART2_DMA_RX_Complete = 1;
 80018ec:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <HAL_UART_RxCpltCallback+0x1c>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
	// this function from https://deepbluembedded.com/how-to-receive-uart-serial-data-with-stm32-dma-interrupt-polling/
    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000204 	.word	0x20000204

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <Error_Handler+0x14>)
 800190e:	f006 fe71 	bl	80085f4 <iprintf>
	  while (1);
 8001912:	bf00      	nop
 8001914:	e7fd      	b.n	8001912 <Error_Handler+0xe>
 8001916:	bf00      	nop
 8001918:	080098d8 	.word	0x080098d8

0800191c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_RTC_Init+0x44>)
 8001922:	4a10      	ldr	r2, [pc, #64]	@ (8001964 <MX_RTC_Init+0x48>)
 8001924:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_RTC_Init+0x44>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_RTC_Init+0x44>)
 800192e:	227f      	movs	r2, #127	@ 0x7f
 8001930:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 260;
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <MX_RTC_Init+0x44>)
 8001934:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001938:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_RTC_Init+0x44>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <MX_RTC_Init+0x44>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_RTC_Init+0x44>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <MX_RTC_Init+0x44>)
 800194e:	f005 f903 	bl	8006b58 <HAL_RTC_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001958:	f7ff ffd4 	bl	8001904 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000020c 	.word	0x2000020c
 8001964:	40002800 	.word	0x40002800

08001968 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <HAL_RTC_MspInit+0x50>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d111      	bne.n	80019ae <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800198a:	2302      	movs	r3, #2
 800198c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800198e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001992:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4618      	mov	r0, r3
 800199a:	f004 ffef 	bl	800697c <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80019a4:	f7ff ffae 	bl	8001904 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <HAL_RTC_MspInit+0x54>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40002800 	.word	0x40002800
 80019bc:	42470e3c 	.word	0x42470e3c

080019c0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019c4:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019c6:	4a19      	ldr	r2, [pc, #100]	@ (8001a2c <MX_SPI2_Init+0x6c>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_SPI2_Init+0x68>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_SPI2_Init+0x68>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_SPI2_Init+0x68>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_SPI2_Init+0x68>)
 8001a0e:	220a      	movs	r2, #10
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_SPI2_Init+0x68>)
 8001a14:	f005 f9a6 	bl	8006d64 <HAL_SPI_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001a1e:	f7ff ff71 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000022c 	.word	0x2000022c
 8001a2c:	40003800 	.word	0x40003800

08001a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a28      	ldr	r2, [pc, #160]	@ (8001af0 <HAL_SPI_MspInit+0xc0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d14a      	bne.n	8001ae8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b27      	ldr	r3, [pc, #156]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a26      	ldr	r2, [pc, #152]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a1f      	ldr	r2, [pc, #124]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b19      	ldr	r3, [pc, #100]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_SPI_MspInit+0xc4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <HAL_SPI_MspInit+0xc8>)
 8001ac2:	f001 fb05 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	@ (8001afc <HAL_SPI_MspInit+0xcc>)
 8001ae4:	f001 faf4 	bl	80030d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3728      	adds	r7, #40	@ 0x28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40003800 	.word	0x40003800
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a08      	ldr	r2, [pc, #32]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3e:	2007      	movs	r0, #7
 8001b40:	f000 fefa 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <NMI_Handler+0x4>

08001b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <MemManage_Handler+0x4>

08001b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 fb51 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <DMA1_Stream0_IRQHandler+0x10>)
 8001bb6:	f001 f841 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200001a4 	.word	0x200001a4

08001bc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <DMA1_Stream5_IRQHandler+0x10>)
 8001bca:	f001 f837 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200003a8 	.word	0x200003a8

08001bd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <DMA1_Stream6_IRQHandler+0x10>)
 8001bde:	f001 f82d 	bl	8002c3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000144 	.word	0x20000144

08001bec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <I2C1_EV_IRQHandler+0x10>)
 8001bf2:	f002 f9c3 	bl	8003f7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000f0 	.word	0x200000f0

08001c00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <I2C1_ER_IRQHandler+0x10>)
 8001c06:	f002 fb0c 	bl	8004222 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200000f0 	.word	0x200000f0

08001c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USART2_IRQHandler+0x10>)
 8001c1a:	f005 fd0d 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000318 	.word	0x20000318

08001c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
  }

  return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fc8b 	bl	8001598 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
  }
  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 fe14 	bl	8008960 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20018000 	.word	0x20018000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000284 	.word	0x20000284
 8001d6c:	20000558 	.word	0x20000558

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0308 	add.w	r3, r7, #8
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db0:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <MX_TIM1_Init+0xa4>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001db6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001db8:	2253      	movs	r2, #83	@ 0x53
 8001dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dc4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd0:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ddc:	4815      	ldr	r0, [pc, #84]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dde:	f005 f84a 	bl	8006e76 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001de8:	f7ff fd8c 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4619      	mov	r1, r3
 8001df8:	480e      	ldr	r0, [pc, #56]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001dfa:	f005 f8e5 	bl	8006fc8 <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e04:	f7ff fd7e 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	4619      	mov	r1, r3
 8001e14:	4807      	ldr	r0, [pc, #28]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001e16:	f005 fac5 	bl	80073a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e20:	f7ff fd70 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // This timer is used for making microsecond delays
  HAL_TIM_Base_Start(&htim1);
 8001e24:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <MX_TIM1_Init+0xa0>)
 8001e26:	f005 f875 	bl	8006f14 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000288 	.word	0x20000288
 8001e38:	40010000 	.word	0x40010000

08001e3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_TIM_Base_MspInit+0x3c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d10d      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_TIM_Base_MspInit+0x40>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_TIM_Base_MspInit+0x40>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <HAL_TIM_Base_MspInit+0x40>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40023800 	.word	0x40023800

08001e80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <MX_USART1_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb8:	f005 fae2 	bl	8007480 <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f7ff fd1f 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200002d0 	.word	0x200002d0
 8001ed0:	40011000 	.word	0x40011000

08001ed4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	@ (8001f24 <MX_USART2_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	f005 fab8 	bl	8007480 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f7ff fcf5 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000318 	.word	0x20000318
 8001f24:	40004400 	.word	0x40004400

08001f28 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <MX_USART6_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	@ (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f60:	f005 fa8e 	bl	8007480 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f6a:	f7ff fccb 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000360 	.word	0x20000360
 8001f78:	40011400 	.word	0x40011400

08001f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	@ 0x38
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a66      	ldr	r2, [pc, #408]	@ (8002134 <HAL_UART_MspInit+0x1b8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12d      	bne.n	8001ffa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
 8001fa2:	4b65      	ldr	r3, [pc, #404]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a64      	ldr	r2, [pc, #400]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b62      	ldr	r3, [pc, #392]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	4b5e      	ldr	r3, [pc, #376]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b5b      	ldr	r3, [pc, #364]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fd6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe8:	2307      	movs	r3, #7
 8001fea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4852      	ldr	r0, [pc, #328]	@ (800213c <HAL_UART_MspInit+0x1c0>)
 8001ff4:	f001 f86c 	bl	80030d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ff8:	e098      	b.n	800212c <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a50      	ldr	r2, [pc, #320]	@ (8002140 <HAL_UART_MspInit+0x1c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d162      	bne.n	80020ca <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b48      	ldr	r3, [pc, #288]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	4b44      	ldr	r3, [pc, #272]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a43      	ldr	r2, [pc, #268]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800203c:	230c      	movs	r3, #12
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204c:	2307      	movs	r3, #7
 800204e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4839      	ldr	r0, [pc, #228]	@ (800213c <HAL_UART_MspInit+0x1c0>)
 8002058:	f001 f83a 	bl	80030d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800205c:	4b39      	ldr	r3, [pc, #228]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 800205e:	4a3a      	ldr	r2, [pc, #232]	@ (8002148 <HAL_UART_MspInit+0x1cc>)
 8002060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002064:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002068:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800206a:	4b36      	ldr	r3, [pc, #216]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002070:	4b34      	ldr	r3, [pc, #208]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002076:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800207c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800207e:	4b31      	ldr	r3, [pc, #196]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002080:	2200      	movs	r2, #0
 8002082:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002086:	2200      	movs	r2, #0
 8002088:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800208a:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002090:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002096:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800209c:	4829      	ldr	r0, [pc, #164]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 800209e:	f000 fc8d 	bl	80029bc <HAL_DMA_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_MspInit+0x130>
      Error_Handler();
 80020a8:	f7ff fc2c 	bl	8001904 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a25      	ldr	r2, [pc, #148]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 80020b0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020b2:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <HAL_UART_MspInit+0x1c8>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2026      	movs	r0, #38	@ 0x26
 80020be:	f000 fc46 	bl	800294e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020c2:	2026      	movs	r0, #38	@ 0x26
 80020c4:	f000 fc5f 	bl	8002986 <HAL_NVIC_EnableIRQ>
}
 80020c8:	e030      	b.n	800212c <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART6)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <HAL_UART_MspInit+0x1d0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d12b      	bne.n	800212c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 80020da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020dc:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 80020de:	f043 0320 	orr.w	r3, r3, #32
 80020e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e4:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_UART_MspInit+0x1bc>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800210c:	23c0      	movs	r3, #192	@ 0xc0
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800211c:	2308      	movs	r3, #8
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	480a      	ldr	r0, [pc, #40]	@ (8002150 <HAL_UART_MspInit+0x1d4>)
 8002128:	f000 ffd2 	bl	80030d0 <HAL_GPIO_Init>
}
 800212c:	bf00      	nop
 800212e:	3738      	adds	r7, #56	@ 0x38
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40011000 	.word	0x40011000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020000 	.word	0x40020000
 8002140:	40004400 	.word	0x40004400
 8002144:	200003a8 	.word	0x200003a8
 8002148:	40026088 	.word	0x40026088
 800214c:	40011400 	.word	0x40011400
 8002150:	40020800 	.word	0x40020800

08002154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800218c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002158:	f7ff fe0a 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	@ (8002194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	@ (80021a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002182:	f006 fbf3 	bl	800896c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002186:	f7ff fa19 	bl	80015bc <main>
  bx  lr    
 800218a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800218c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002198:	08009950 	.word	0x08009950
  ldr r2, =_sbss
 800219c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80021a0:	20000558 	.word	0x20000558

080021a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <HAL_Init+0x40>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <HAL_Init+0x40>)
 80021be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_Init+0x40>)
 80021ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 fbb1 	bl	8002938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fc90 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023c00 	.word	0x40023c00

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fbc9 	bl	80029a2 <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f000 fb91 	bl	800294e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	@ (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000000 	.word	0x20000000
 8002244:	20000008 	.word	0x20000008
 8002248:	20000004 	.word	0x20000004

0800224c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x20>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_IncTick+0x24>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <HAL_IncTick+0x24>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000008 	.word	0x20000008
 8002270:	20000408 	.word	0x20000408

08002274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return uwTick;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <HAL_GetTick+0x14>)
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000408 	.word	0x20000408

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff ffee 	bl	8002274 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffde 	bl	8002274 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008

080022d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e033      	b.n	8002352 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe f9de 	bl	80006b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800231a:	f023 0302 	bic.w	r3, r3, #2
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f93a 	bl	80025a0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	@ 0x40
 8002342:	e001      	b.n	8002348 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1c>
 8002374:	2302      	movs	r3, #2
 8002376:	e105      	b.n	8002584 <HAL_ADC_ConfigChannel+0x228>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b09      	cmp	r3, #9
 8002386:	d925      	bls.n	80023d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	3b1e      	subs	r3, #30
 800239e:	2207      	movs	r2, #7
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43da      	mvns	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	400a      	ands	r2, r1
 80023ac:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68d9      	ldr	r1, [r3, #12]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	4603      	mov	r3, r0
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4403      	add	r3, r0
 80023c6:	3b1e      	subs	r3, #30
 80023c8:	409a      	lsls	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	e022      	b.n	800241a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	2207      	movs	r2, #7
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	400a      	ands	r2, r1
 80023f6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	4618      	mov	r0, r3
 800240a:	4603      	mov	r3, r0
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4403      	add	r3, r0
 8002410:	409a      	lsls	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d824      	bhi.n	800246c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	3b05      	subs	r3, #5
 8002434:	221f      	movs	r2, #31
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	3b05      	subs	r3, #5
 800245e:	fa00 f203 	lsl.w	r2, r0, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	635a      	str	r2, [r3, #52]	@ 0x34
 800246a:	e04c      	b.n	8002506 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	d824      	bhi.n	80024be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b23      	subs	r3, #35	@ 0x23
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b23      	subs	r3, #35	@ 0x23
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80024bc:	e023      	b.n	8002506 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b41      	subs	r3, #65	@ 0x41
 80024d0:	221f      	movs	r2, #31
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	400a      	ands	r2, r1
 80024de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	4618      	mov	r0, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	3b41      	subs	r3, #65	@ 0x41
 80024fa:	fa00 f203 	lsl.w	r2, r0, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002506:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_ADC_ConfigChannel+0x234>)
 8002508:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <HAL_ADC_ConfigChannel+0x238>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d109      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1cc>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d105      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_ADC_ConfigChannel+0x238>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d123      	bne.n	800257a <HAL_ADC_ConfigChannel+0x21e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d003      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x1e6>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b11      	cmp	r3, #17
 8002540:	d11b      	bne.n	800257a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b10      	cmp	r3, #16
 8002554:	d111      	bne.n	800257a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <HAL_ADC_ConfigChannel+0x23c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <HAL_ADC_ConfigChannel+0x240>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9a      	lsrs	r2, r3, #18
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800256c:	e002      	b.n	8002574 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3b01      	subs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f9      	bne.n	800256e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40012300 	.word	0x40012300
 8002594:	40012000 	.word	0x40012000
 8002598:	20000000 	.word	0x20000000
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a8:	4b79      	ldr	r3, [pc, #484]	@ (8002790 <ADC_Init+0x1f0>)
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	021a      	lsls	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	4a58      	ldr	r2, [pc, #352]	@ (8002794 <ADC_Init+0x1f4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d022      	beq.n	800267e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002646:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002668:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6899      	ldr	r1, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e00f      	b.n	800269e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800268c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0202 	bic.w	r2, r2, #2
 80026ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	005a      	lsls	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01b      	beq.n	8002704 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026da:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	3b01      	subs	r3, #1
 80026f8:	035a      	lsls	r2, r3, #13
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e007      	b.n	8002714 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002712:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002722:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	3b01      	subs	r3, #1
 8002730:	051a      	lsls	r2, r3, #20
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002748:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6899      	ldr	r1, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002756:	025a      	lsls	r2, r3, #9
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800276e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	029a      	lsls	r2, r3, #10
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40012300 	.word	0x40012300
 8002794:	0f000001 	.word	0x0f000001

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4907      	ldr	r1, [pc, #28]	@ (8002834 <__NVIC_EnableIRQ+0x38>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	e000e100 	.word	0xe000e100

08002838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	2b00      	cmp	r3, #0
 800284a:	db0a      	blt.n	8002862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	b2da      	uxtb	r2, r3
 8002850:	490c      	ldr	r1, [pc, #48]	@ (8002884 <__NVIC_SetPriority+0x4c>)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	0112      	lsls	r2, r2, #4
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	440b      	add	r3, r1
 800285c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002860:	e00a      	b.n	8002878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	4908      	ldr	r1, [pc, #32]	@ (8002888 <__NVIC_SetPriority+0x50>)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	3b04      	subs	r3, #4
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	440b      	add	r3, r1
 8002876:	761a      	strb	r2, [r3, #24]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e100 	.word	0xe000e100
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f1c3 0307 	rsb	r3, r3, #7
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf28      	it	cs
 80028aa:	2304      	movcs	r3, #4
 80028ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2b06      	cmp	r3, #6
 80028b4:	d902      	bls.n	80028bc <NVIC_EncodePriority+0x30>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3b03      	subs	r3, #3
 80028ba:	e000      	b.n	80028be <NVIC_EncodePriority+0x32>
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	401a      	ands	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d4:	f04f 31ff 	mov.w	r1, #4294967295
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	43d9      	mvns	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	4313      	orrs	r3, r2
         );
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3724      	adds	r7, #36	@ 0x24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002904:	d301      	bcc.n	800290a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002906:	2301      	movs	r3, #1
 8002908:	e00f      	b.n	800292a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290a:	4a0a      	ldr	r2, [pc, #40]	@ (8002934 <SysTick_Config+0x40>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002912:	210f      	movs	r1, #15
 8002914:	f04f 30ff 	mov.w	r0, #4294967295
 8002918:	f7ff ff8e 	bl	8002838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <SysTick_Config+0x40>)
 800291e:	2200      	movs	r2, #0
 8002920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002922:	4b04      	ldr	r3, [pc, #16]	@ (8002934 <SysTick_Config+0x40>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff29 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff ff3e 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff8e 	bl	800288c <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5d 	bl	8002838 <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff31 	bl	80027fc <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ffa2 	bl	80028f4 <SysTick_Config>
 80029b0:	4603      	mov	r3, r0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029c8:	f7ff fc54 	bl	8002274 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e099      	b.n	8002b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f8:	e00f      	b.n	8002a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fa:	f7ff fc3b 	bl	8002274 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d908      	bls.n	8002a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e078      	b.n	8002b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e8      	bne.n	80029fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4b38      	ldr	r3, [pc, #224]	@ (8002b14 <HAL_DMA_Init+0x158>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d107      	bne.n	8002a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f023 0307 	bic.w	r3, r3, #7
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d117      	bne.n	8002ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa89 	bl	8002fd8 <DMA_CheckFifoParam>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ada:	2301      	movs	r3, #1
 8002adc:	e016      	b.n	8002b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fa40 	bl	8002f6c <DMA_CalcBaseAndBitshift>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af4:	223f      	movs	r2, #63	@ 0x3f
 8002af6:	409a      	lsls	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	f010803f 	.word	0xf010803f

08002b18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b26:	f7ff fba5 	bl	8002274 <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d008      	beq.n	8002b4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2280      	movs	r2, #128	@ 0x80
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e052      	b.n	8002bf0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_Abort+0x62>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9a:	e013      	b.n	8002bc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9c:	f7ff fb6a 	bl	8002274 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d90c      	bls.n	8002bc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e015      	b.n	8002bf0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1e4      	bne.n	8002b9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd6:	223f      	movs	r2, #63	@ 0x3f
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d004      	beq.n	8002c16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2280      	movs	r2, #128	@ 0x80
 8002c10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00c      	b.n	8002c30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c48:	4b8e      	ldr	r3, [pc, #568]	@ (8002e84 <HAL_DMA_IRQHandler+0x248>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002e88 <HAL_DMA_IRQHandler+0x24c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	0a9b      	lsrs	r3, r3, #10
 8002c54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c66:	2208      	movs	r2, #8
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d01a      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	2201      	movs	r2, #1
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	f043 0202 	orr.w	r2, r3, #2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d00:	2204      	movs	r2, #4
 8002d02:	409a      	lsls	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d18:	2210      	movs	r2, #16
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d043      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03c      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	2210      	movs	r2, #16
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d018      	beq.n	8002d7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d108      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d024      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e01f      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
 8002d7c:	e016      	b.n	8002dac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0208 	bic.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db0:	2220      	movs	r2, #32
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 808f 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0310 	and.w	r3, r3, #16
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8087 	beq.w	8002edc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d136      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0216 	bic.w	r2, r2, #22
 8002df4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_DMA_IRQHandler+0x1da>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0208 	bic.w	r2, r2, #8
 8002e24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2a:	223f      	movs	r2, #63	@ 0x3f
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d07e      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	4798      	blx	r3
        }
        return;
 8002e52:	e079      	b.n	8002f48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d01d      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10d      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d031      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
 8002e80:	e02c      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
 8002e82:	bf00      	nop
 8002e84:	20000000 	.word	0x20000000
 8002e88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e01e      	b.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0210 	bic.w	r2, r2, #16
 8002eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d032      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d307      	bcc.n	8002f24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f2      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x2cc>
 8002f22:	e000      	b.n	8002f26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e000      	b.n	8002f4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f48:	bf00      	nop
    }
  }
}
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f5e:	b2db      	uxtb	r3, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3b10      	subs	r3, #16
 8002f7c:	4a14      	ldr	r2, [pc, #80]	@ (8002fd0 <DMA_CalcBaseAndBitshift+0x64>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	091b      	lsrs	r3, r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f86:	4a13      	ldr	r2, [pc, #76]	@ (8002fd4 <DMA_CalcBaseAndBitshift+0x68>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d909      	bls.n	8002fae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fa2:	f023 0303 	bic.w	r3, r3, #3
 8002fa6:	1d1a      	adds	r2, r3, #4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fac:	e007      	b.n	8002fbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	aaaaaaab 	.word	0xaaaaaaab
 8002fd4:	08009904 	.word	0x08009904

08002fd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11f      	bne.n	8003032 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d856      	bhi.n	80030a6 <DMA_CheckFifoParam+0xce>
 8002ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8003000 <DMA_CheckFifoParam+0x28>)
 8002ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffe:	bf00      	nop
 8003000:	08003011 	.word	0x08003011
 8003004:	08003023 	.word	0x08003023
 8003008:	08003011 	.word	0x08003011
 800300c:	080030a7 	.word	0x080030a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d046      	beq.n	80030aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003020:	e043      	b.n	80030aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800302a:	d140      	bne.n	80030ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003030:	e03d      	b.n	80030ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800303a:	d121      	bne.n	8003080 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d837      	bhi.n	80030b2 <DMA_CheckFifoParam+0xda>
 8003042:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <DMA_CheckFifoParam+0x70>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	08003059 	.word	0x08003059
 800304c:	0800305f 	.word	0x0800305f
 8003050:	08003059 	.word	0x08003059
 8003054:	08003071 	.word	0x08003071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      break;
 800305c:	e030      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d025      	beq.n	80030b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306e:	e022      	b.n	80030b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003074:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003078:	d11f      	bne.n	80030ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800307e:	e01c      	b.n	80030ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d903      	bls.n	800308e <DMA_CheckFifoParam+0xb6>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d003      	beq.n	8003094 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800308c:	e018      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      break;
 8003092:	e015      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00e      	beq.n	80030be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
      break;
 80030a4:	e00b      	b.n	80030be <DMA_CheckFifoParam+0xe6>
      break;
 80030a6:	bf00      	nop
 80030a8:	e00a      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e008      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e006      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e004      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <DMA_CheckFifoParam+0xe8>
      break;
 80030be:	bf00      	nop
    }
  } 
  
  return status; 
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e159      	b.n	80033a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	f040 8148 	bne.w	800339a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d005      	beq.n	8003122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	2b02      	cmp	r3, #2
 8003120:	d130      	bne.n	8003184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 0201 	and.w	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d017      	beq.n	80031c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d123      	bne.n	8003214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a2 	beq.w	800339a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b57      	ldr	r3, [pc, #348]	@ (80033b8 <HAL_GPIO_Init+0x2e8>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	4a56      	ldr	r2, [pc, #344]	@ (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003264:	6453      	str	r3, [r2, #68]	@ 0x44
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <HAL_GPIO_Init+0x2e8>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003272:	4a52      	ldr	r2, [pc, #328]	@ (80033bc <HAL_GPIO_Init+0x2ec>)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a49      	ldr	r2, [pc, #292]	@ (80033c0 <HAL_GPIO_Init+0x2f0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d019      	beq.n	80032d2 <HAL_GPIO_Init+0x202>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a48      	ldr	r2, [pc, #288]	@ (80033c4 <HAL_GPIO_Init+0x2f4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0x1fe>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a47      	ldr	r2, [pc, #284]	@ (80033c8 <HAL_GPIO_Init+0x2f8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00d      	beq.n	80032ca <HAL_GPIO_Init+0x1fa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a46      	ldr	r2, [pc, #280]	@ (80033cc <HAL_GPIO_Init+0x2fc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <HAL_GPIO_Init+0x1f6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a45      	ldr	r2, [pc, #276]	@ (80033d0 <HAL_GPIO_Init+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_GPIO_Init+0x1f2>
 80032be:	2304      	movs	r3, #4
 80032c0:	e008      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c2:	2307      	movs	r3, #7
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032c6:	2303      	movs	r3, #3
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x204>
 80032d2:	2300      	movs	r3, #0
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e4:	4935      	ldr	r1, [pc, #212]	@ (80033bc <HAL_GPIO_Init+0x2ec>)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f2:	4b38      	ldr	r3, [pc, #224]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003316:	4a2f      	ldr	r2, [pc, #188]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800331c:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003340:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003346:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800336a:	4a1a      	ldr	r2, [pc, #104]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003370:	4b18      	ldr	r3, [pc, #96]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003394:	4a0f      	ldr	r2, [pc, #60]	@ (80033d4 <HAL_GPIO_Init+0x304>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b0f      	cmp	r3, #15
 80033a4:	f67f aea2 	bls.w	80030ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3724      	adds	r7, #36	@ 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40013800 	.word	0x40013800
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40020400 	.word	0x40020400
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40013c00 	.word	0x40013c00

080033d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	807b      	strh	r3, [r7, #2]
 80033e4:	4613      	mov	r3, r2
 80033e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e8:	787b      	ldrb	r3, [r7, #1]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f4:	e003      	b.n	80033fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f6:	887b      	ldrh	r3, [r7, #2]
 80033f8:	041a      	lsls	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	619a      	str	r2, [r3, #24]
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e12b      	b.n	8003676 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fd fff2 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800345e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003470:	f003 fa5c 	bl	800692c <HAL_RCC_GetPCLK1Freq>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a81      	ldr	r2, [pc, #516]	@ (8003680 <HAL_I2C_Init+0x274>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d807      	bhi.n	8003490 <HAL_I2C_Init+0x84>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a80      	ldr	r2, [pc, #512]	@ (8003684 <HAL_I2C_Init+0x278>)
 8003484:	4293      	cmp	r3, r2
 8003486:	bf94      	ite	ls
 8003488:	2301      	movls	r3, #1
 800348a:	2300      	movhi	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e006      	b.n	800349e <HAL_I2C_Init+0x92>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a7d      	ldr	r2, [pc, #500]	@ (8003688 <HAL_I2C_Init+0x27c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0e7      	b.n	8003676 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a78      	ldr	r2, [pc, #480]	@ (800368c <HAL_I2C_Init+0x280>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0c9b      	lsrs	r3, r3, #18
 80034b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003680 <HAL_I2C_Init+0x274>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d802      	bhi.n	80034e0 <HAL_I2C_Init+0xd4>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3301      	adds	r3, #1
 80034de:	e009      	b.n	80034f4 <HAL_I2C_Init+0xe8>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	4a69      	ldr	r2, [pc, #420]	@ (8003690 <HAL_I2C_Init+0x284>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	3301      	adds	r3, #1
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6812      	ldr	r2, [r2, #0]
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003506:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	495c      	ldr	r1, [pc, #368]	@ (8003680 <HAL_I2C_Init+0x274>)
 8003510:	428b      	cmp	r3, r1
 8003512:	d819      	bhi.n	8003548 <HAL_I2C_Init+0x13c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1e59      	subs	r1, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003522:	1c59      	adds	r1, r3, #1
 8003524:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_I2C_Init+0x138>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1e59      	subs	r1, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003542:	e051      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003544:	2304      	movs	r3, #4
 8003546:	e04f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d111      	bne.n	8003574 <HAL_I2C_Init+0x168>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	440b      	add	r3, r1
 800355e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e012      	b.n	800359a <HAL_I2C_Init+0x18e>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e58      	subs	r0, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	0099      	lsls	r1, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	fbb0 f3f3 	udiv	r3, r0, r3
 800358a:	3301      	adds	r3, #1
 800358c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_I2C_Init+0x196>
 800359e:	2301      	movs	r3, #1
 80035a0:	e022      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10e      	bne.n	80035c8 <HAL_I2C_Init+0x1bc>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1e58      	subs	r0, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	440b      	add	r3, r1
 80035b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035c6:	e00f      	b.n	80035e8 <HAL_I2C_Init+0x1dc>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	0099      	lsls	r1, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	fbb0 f3f3 	udiv	r3, r0, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6809      	ldr	r1, [r1, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003616:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6911      	ldr	r1, [r2, #16]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	000186a0 	.word	0x000186a0
 8003684:	001e847f 	.word	0x001e847f
 8003688:	003d08ff 	.word	0x003d08ff
 800368c:	431bde83 	.word	0x431bde83
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	2b80      	cmp	r3, #128	@ 0x80
 80036a8:	d103      	bne.n	80036b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	817b      	strh	r3, [r7, #10]
 80036d0:	4613      	mov	r3, r2
 80036d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7fe fdce 	bl	8002274 <HAL_GetTick>
 80036d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	f040 80e0 	bne.w	80038a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2319      	movs	r3, #25
 80036ee:	2201      	movs	r2, #1
 80036f0:	4970      	ldr	r1, [pc, #448]	@ (80038b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f002 fa26 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
 8003700:	e0d3      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_I2C_Master_Transmit+0x50>
 800370c:	2302      	movs	r3, #2
 800370e:	e0cc      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d007      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2221      	movs	r2, #33	@ 0x21
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2210      	movs	r2, #16
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	893a      	ldrh	r2, [r7, #8]
 8003766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a50      	ldr	r2, [pc, #320]	@ (80038b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003778:	8979      	ldrh	r1, [r7, #10]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f001 ffe8 	bl	8005754 <I2C_MasterRequestWrite>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e08d      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80037a4:	e066      	b.n	8003874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	6a39      	ldr	r1, [r7, #32]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f002 fae4 	bl	8005d78 <I2C_WaitOnTXEFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d107      	bne.n	80037ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e06b      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d11b      	bne.n	8003848 <HAL_I2C_Master_Transmit+0x188>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d017      	beq.n	8003848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	6a39      	ldr	r1, [r7, #32]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f002 fadb 	bl	8005e08 <I2C_WaitOnBTFFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385c:	2b04      	cmp	r3, #4
 800385e:	d107      	bne.n	8003870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01a      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d194      	bne.n	80037a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	00100002 	.word	0x00100002
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	@ 0x30
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	461a      	mov	r2, r3
 80038c8:	460b      	mov	r3, r1
 80038ca:	817b      	strh	r3, [r7, #10]
 80038cc:	4613      	mov	r3, r2
 80038ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7fe fcd0 	bl	8002274 <HAL_GetTick>
 80038d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	f040 8217 	bne.w	8003d12 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2319      	movs	r3, #25
 80038ea:	2201      	movs	r2, #1
 80038ec:	497c      	ldr	r1, [pc, #496]	@ (8003ae0 <HAL_I2C_Master_Receive+0x224>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f002 f928 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
 80038fc:	e20a      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_I2C_Master_Receive+0x50>
 8003908:	2302      	movs	r3, #2
 800390a:	e203      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d007      	beq.n	8003932 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2222      	movs	r2, #34	@ 0x22
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2210      	movs	r2, #16
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	893a      	ldrh	r2, [r7, #8]
 8003962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a5c      	ldr	r2, [pc, #368]	@ (8003ae4 <HAL_I2C_Master_Receive+0x228>)
 8003972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003974:	8979      	ldrh	r1, [r7, #10]
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f001 ff6c 	bl	8005858 <I2C_MasterRequestRead>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c4      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2300      	movs	r3, #0
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e198      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11b      	bne.n	80039fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e178      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d11b      	bne.n	8003a3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	e158      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a60:	e144      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	f200 80f1 	bhi.w	8003c4e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d123      	bne.n	8003abc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f002 fa3f 	bl	8005efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e145      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aba:	e117      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d14e      	bne.n	8003b62 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	2200      	movs	r2, #0
 8003acc:	4906      	ldr	r1, [pc, #24]	@ (8003ae8 <HAL_I2C_Master_Receive+0x22c>)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f002 f838 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e11a      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
 8003ade:	bf00      	nop
 8003ae0:	00100002 	.word	0x00100002
 8003ae4:	ffff0000 	.word	0xffff0000
 8003ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b60:	e0c4      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	2200      	movs	r2, #0
 8003b6a:	496c      	ldr	r1, [pc, #432]	@ (8003d1c <HAL_I2C_Master_Receive+0x460>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f001 ffe9 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e0cb      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4955      	ldr	r1, [pc, #340]	@ (8003d1c <HAL_I2C_Master_Receive+0x460>)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f001 ffbb 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e09d      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c4c:	e04e      	b.n	8003cec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f002 f952 	bl	8005efc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e058      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d124      	bne.n	8003cec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cb8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f aeb6 	bne.w	8003a62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	@ 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	00010004 	.word	0x00010004

08003d20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	@ 0x28
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7fe faa0 	bl	8002274 <HAL_GetTick>
 8003d34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	f040 8111 	bne.w	8003f6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2319      	movs	r3, #25
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4988      	ldr	r1, [pc, #544]	@ (8003f74 <HAL_I2C_IsDeviceReady+0x254>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f001 fef6 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e104      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2C_IsDeviceReady+0x50>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0fd      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d007      	beq.n	8003d96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003da4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2224      	movs	r2, #36	@ 0x24
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a70      	ldr	r2, [pc, #448]	@ (8003f78 <HAL_I2C_IsDeviceReady+0x258>)
 8003db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f001 feb4 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df0:	d103      	bne.n	8003dfa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0b6      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dfe:	897b      	ldrh	r3, [r7, #10]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fa31 	bl	8002274 <HAL_GetTick>
 8003e12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e42:	e025      	b.n	8003e90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fe fa16 	bl	8002274 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d302      	bcc.n	8003e5a <HAL_I2C_IsDeviceReady+0x13a>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22a0      	movs	r2, #160	@ 0xa0
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_I2C_IsDeviceReady+0x188>
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_I2C_IsDeviceReady+0x188>
 8003ea2:	7dbb      	ldrb	r3, [r7, #22]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0cd      	beq.n	8003e44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d129      	bne.n	8003f12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	2319      	movs	r3, #25
 8003eea:	2201      	movs	r2, #1
 8003eec:	4921      	ldr	r1, [pc, #132]	@ (8003f74 <HAL_I2C_IsDeviceReady+0x254>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 fe28 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e036      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e02c      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2319      	movs	r3, #25
 8003f32:	2201      	movs	r2, #1
 8003f34:	490f      	ldr	r1, [pc, #60]	@ (8003f74 <HAL_I2C_IsDeviceReady+0x254>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f001 fe04 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e012      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	f4ff af32 	bcc.w	8003dba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	00100002 	.word	0x00100002
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d003      	beq.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x38>
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	f040 80b1 	bne.w	8004116 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10d      	bne.n	8003fea <HAL_I2C_EV_IRQHandler+0x6e>
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003fd4:	d003      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x62>
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x66>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x68>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	f000 8114 	beq.w	8004212 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00b      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x90>
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d006      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f002 f808 	bl	8006014 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fd88 	bl	8004b1a <I2C_Master_SB>
 800400a:	e083      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0xac>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fe00 	bl	8004c26 <I2C_Master_ADD10>
 8004026:	e075      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0xc8>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fe1c 	bl	8004c7a <I2C_Master_ADDR>
 8004042:	e067      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d036      	beq.n	80040bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405c:	f000 80db 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00d      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9e4 	bl	800444c <I2C_MasterTransmit_TXE>
 8004084:	e046      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80c2 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80bc 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800409e:	7bbb      	ldrb	r3, [r7, #14]
 80040a0:	2b21      	cmp	r3, #33	@ 0x21
 80040a2:	d103      	bne.n	80040ac <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fa6d 	bl	8004584 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040aa:	e0b4      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b40      	cmp	r3, #64	@ 0x40
 80040b0:	f040 80b1 	bne.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fadb 	bl	8004670 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ba:	e0ac      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ca:	f000 80a4 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00d      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fb57 	bl	80047a0 <I2C_MasterReceive_RXNE>
 80040f2:	e00f      	b.n	8004114 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 808b 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8085 	beq.w	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fc0f 	bl	8004930 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004112:	e080      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
 8004114:	e07f      	b.n	8004216 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	e007      	b.n	8004138 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d011      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 ffda 	bl	8005118 <I2C_Slave_ADDR>
 8004164:	e05a      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0x206>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f001 f814 	bl	80051a8 <I2C_Slave_STOPF>
 8004180:	e04c      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004182:	7bbb      	ldrb	r3, [r7, #14]
 8004184:	2b21      	cmp	r3, #33	@ 0x21
 8004186:	d002      	beq.n	800418e <HAL_I2C_EV_IRQHandler+0x212>
 8004188:	7bbb      	ldrb	r3, [r7, #14]
 800418a:	2b29      	cmp	r3, #41	@ 0x29
 800418c:	d120      	bne.n	80041d0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fef5 	bl	8004f9c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041b2:	e032      	b.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02d      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d028      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 ff24 	bl	8005016 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ce:	e024      	b.n	800421a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 ff32 	bl	8005058 <I2C_SlaveReceive_RXNE>
 80041f4:	e012      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00d      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 ff62 	bl	80050d4 <I2C_SlaveReceive_BTF>
 8004210:	e004      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004212:	bf00      	nop
 8004214:	e002      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b08a      	sub	sp, #40	@ 0x28
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004244:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_I2C_ER_IRQHandler+0x4a>
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d008      	beq.n	800426c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800426a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_I2C_ER_IRQHandler+0x70>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004290:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d03e      	beq.n	800431a <HAL_I2C_ER_IRQHandler+0xf8>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d039      	beq.n	800431a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80042a6:	7efb      	ldrb	r3, [r7, #27]
 80042a8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80042c0:	7ebb      	ldrb	r3, [r7, #26]
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d112      	bne.n	80042ec <HAL_I2C_ER_IRQHandler+0xca>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10f      	bne.n	80042ec <HAL_I2C_ER_IRQHandler+0xca>
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b21      	cmp	r3, #33	@ 0x21
 80042d0:	d008      	beq.n	80042e4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b29      	cmp	r3, #41	@ 0x29
 80042d6:	d005      	beq.n	80042e4 <HAL_I2C_ER_IRQHandler+0xc2>
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b28      	cmp	r3, #40	@ 0x28
 80042dc:	d106      	bne.n	80042ec <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b21      	cmp	r3, #33	@ 0x21
 80042e2:	d103      	bne.n	80042ec <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f001 f88f 	bl	8005408 <I2C_Slave_AF>
 80042ea:	e016      	b.n	800431a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042f4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	f043 0304 	orr.w	r3, r3, #4
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042fe:	7efb      	ldrb	r3, [r7, #27]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d002      	beq.n	800430a <HAL_I2C_ER_IRQHandler+0xe8>
 8004304:	7efb      	ldrb	r3, [r7, #27]
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d107      	bne.n	800431a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004318:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_I2C_ER_IRQHandler+0x11e>
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	f043 0308 	orr.w	r3, r3, #8
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800433e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f001 f8cc 	bl	80054f0 <I2C_ITError>
  }
}
 8004358:	bf00      	nop
 800435a:	3728      	adds	r7, #40	@ 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	70fb      	strb	r3, [r7, #3]
 80043bc:	4613      	mov	r3, r2
 80043be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443e:	b2db      	uxtb	r3, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800445a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	2b00      	cmp	r3, #0
 8004470:	d150      	bne.n	8004514 <I2C_MasterTransmit_TXE+0xc8>
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	2b21      	cmp	r3, #33	@ 0x21
 8004476:	d14d      	bne.n	8004514 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b08      	cmp	r3, #8
 800447c:	d01d      	beq.n	80044ba <I2C_MasterTransmit_TXE+0x6e>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b20      	cmp	r3, #32
 8004482:	d01a      	beq.n	80044ba <I2C_MasterTransmit_TXE+0x6e>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800448a:	d016      	beq.n	80044ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800449a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2211      	movs	r2, #17
 80044a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ff54 	bl	8004360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044b8:	e060      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d107      	bne.n	8004504 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff6f 	bl	80043e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004502:	e03b      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff27 	bl	8004360 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004512:	e033      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d005      	beq.n	8004526 <I2C_MasterTransmit_TXE+0xda>
 800451a:	7bbb      	ldrb	r3, [r7, #14]
 800451c:	2b40      	cmp	r3, #64	@ 0x40
 800451e:	d12d      	bne.n	800457c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	2b22      	cmp	r3, #34	@ 0x22
 8004524:	d12a      	bne.n	800457c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004540:	e01c      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b40      	cmp	r3, #64	@ 0x40
 800454c:	d103      	bne.n	8004556 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f88e 	bl	8004670 <I2C_MemoryTransmit_TXE_BTF>
}
 8004554:	e012      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800457a:	e7ff      	b.n	800457c <I2C_MasterTransmit_TXE+0x130>
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b21      	cmp	r3, #33	@ 0x21
 800459c:	d164      	bne.n	8004668 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	3b01      	subs	r3, #1
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80045cc:	e04c      	b.n	8004668 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d01d      	beq.n	8004610 <I2C_MasterTransmit_BTF+0x8c>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d01a      	beq.n	8004610 <I2C_MasterTransmit_BTF+0x8c>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045e0:	d016      	beq.n	8004610 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2211      	movs	r2, #17
 80045f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fea9 	bl	8004360 <HAL_I2C_MasterTxCpltCallback>
}
 800460e:	e02b      	b.n	8004668 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800461e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	d107      	bne.n	800465a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fec4 	bl	80043e0 <HAL_I2C_MemTxCpltCallback>
}
 8004658:	e006      	b.n	8004668 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fe7c 	bl	8004360 <HAL_I2C_MasterTxCpltCallback>
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800467e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004684:	2b00      	cmp	r3, #0
 8004686:	d11d      	bne.n	80046c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10b      	bne.n	80046a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004694:	b2da      	uxtb	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80046a6:	e077      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	121b      	asrs	r3, r3, #8
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80046c2:	e069      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10b      	bne.n	80046e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	1c5a      	adds	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80046e2:	e059      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d152      	bne.n	8004792 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	2b22      	cmp	r3, #34	@ 0x22
 80046f0:	d10d      	bne.n	800470e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004700:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800470c:	e044      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d015      	beq.n	8004744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b21      	cmp	r3, #33	@ 0x21
 800471c:	d112      	bne.n	8004744 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004742:	e029      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d124      	bne.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b21      	cmp	r3, #33	@ 0x21
 8004752:	d121      	bne.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004762:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004772:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fe28 	bl	80043e0 <HAL_I2C_MemTxCpltCallback>
}
 8004790:	e002      	b.n	8004798 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fe ff7e 	bl	8003694 <I2C_Flush_DR>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b22      	cmp	r3, #34	@ 0x22
 80047b2:	f040 80b9 	bne.w	8004928 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d921      	bls.n	800480e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	f040 8096 	bne.w	8004928 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800480a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800480c:	e08c      	b.n	8004928 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004812:	2b02      	cmp	r3, #2
 8004814:	d07f      	beq.n	8004916 <I2C_MasterReceive_RXNE+0x176>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <I2C_MasterReceive_RXNE+0x82>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d179      	bne.n	8004916 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f001 fb38 	bl	8005e98 <I2C_WaitOnSTOPRequestThroughIT>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d14c      	bne.n	80048c8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800484c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b40      	cmp	r3, #64	@ 0x40
 8004886:	d10a      	bne.n	800489e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fdac 	bl	80043f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800489c:	e044      	b.n	8004928 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d002      	beq.n	80048b2 <I2C_MasterReceive_RXNE+0x112>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d103      	bne.n	80048ba <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80048b8:	e002      	b.n	80048c0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2212      	movs	r2, #18
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fd57 	bl	8004374 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048c6:	e02f      	b.n	8004928 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fd7a 	bl	8004408 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004914:	e008      	b.n	8004928 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004924:	605a      	str	r2, [r3, #4]
}
 8004926:	e7ff      	b.n	8004928 <I2C_MasterReceive_RXNE+0x188>
 8004928:	bf00      	nop
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	2b04      	cmp	r3, #4
 8004946:	d11b      	bne.n	8004980 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004956:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800497e:	e0c8      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b03      	cmp	r3, #3
 8004988:	d129      	bne.n	80049de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004998:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d00a      	beq.n	80049b6 <I2C_MasterReceive_BTF+0x86>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d007      	beq.n	80049b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80049dc:	e099      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	f040 8081 	bne.w	8004aec <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d002      	beq.n	80049f6 <I2C_MasterReceive_BTF+0xc6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d108      	bne.n	8004a08 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e019      	b.n	8004a3c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d002      	beq.n	8004a14 <I2C_MasterReceive_BTF+0xe4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d108      	bne.n	8004a26 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e00a      	b.n	8004a3c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d007      	beq.n	8004a3c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004a96:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	d10a      	bne.n	8004ac2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fc9a 	bl	80043f4 <HAL_I2C_MemRxCpltCallback>
}
 8004ac0:	e027      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d002      	beq.n	8004ad6 <I2C_MasterReceive_BTF+0x1a6>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d103      	bne.n	8004ade <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
 8004adc:	e002      	b.n	8004ae4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2212      	movs	r2, #18
 8004ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fc45 	bl	8004374 <HAL_I2C_MasterRxCpltCallback>
}
 8004aea:	e012      	b.n	8004b12 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b40      	cmp	r3, #64	@ 0x40
 8004b2c:	d117      	bne.n	8004b5e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b46:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b48:	e067      	b.n	8004c1a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
}
 8004b5c:	e05d      	b.n	8004c1a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b66:	d133      	bne.n	8004bd0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b21      	cmp	r3, #33	@ 0x21
 8004b72:	d109      	bne.n	8004b88 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b84:	611a      	str	r2, [r3, #16]
 8004b86:	e008      	b.n	8004b9a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d004      	beq.n	8004bac <I2C_Master_SB+0x92>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d032      	beq.n	8004c1a <I2C_Master_SB+0x100>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d02d      	beq.n	8004c1a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bcc:	605a      	str	r2, [r3, #4]
}
 8004bce:	e024      	b.n	8004c1a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	11db      	asrs	r3, r3, #7
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f063 030f 	orn	r3, r3, #15
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]
}
 8004bf4:	e011      	b.n	8004c1a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d10d      	bne.n	8004c1a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	11db      	asrs	r3, r3, #7
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 0306 	and.w	r3, r3, #6
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f063 030e 	orn	r3, r3, #14
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	611a      	str	r2, [r3, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <I2C_Master_ADD10+0x26>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <I2C_Master_ADD10+0x48>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c6c:	605a      	str	r2, [r3, #4]
  }
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b091      	sub	sp, #68	@ 0x44
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b22      	cmp	r3, #34	@ 0x22
 8004ca2:	f040 8169 	bne.w	8004f78 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10f      	bne.n	8004cce <I2C_Master_ADDR+0x54>
 8004cae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004cb2:	2b40      	cmp	r3, #64	@ 0x40
 8004cb4:	d10b      	bne.n	8004cce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	e160      	b.n	8004f90 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11d      	bne.n	8004d12 <I2C_Master_ADDR+0x98>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004cde:	d118      	bne.n	8004d12 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d04:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d10:	e13e      	b.n	8004f90 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d113      	bne.n	8004d44 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	e115      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 808a 	bne.w	8004e64 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d56:	d137      	bne.n	8004dc8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d66:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d76:	d113      	bne.n	8004da0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d86:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d88:	2300      	movs	r3, #0
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	e0e7      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da0:	2300      	movs	r3, #0
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	623b      	str	r3, [r7, #32]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	e0d3      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d02e      	beq.n	8004e2c <I2C_Master_ADDR+0x1b2>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d02b      	beq.n	8004e2c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	2b12      	cmp	r3, #18
 8004dd8:	d102      	bne.n	8004de0 <I2C_Master_ADDR+0x166>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d125      	bne.n	8004e2c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d00e      	beq.n	8004e04 <I2C_Master_ADDR+0x18a>
 8004de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d00b      	beq.n	8004e04 <I2C_Master_ADDR+0x18a>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d008      	beq.n	8004e04 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e007      	b.n	8004e14 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e12:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	e0a1      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e085      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d14d      	bne.n	8004f0a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d016      	beq.n	8004ea2 <I2C_Master_ADDR+0x228>
 8004e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d013      	beq.n	8004ea2 <I2C_Master_ADDR+0x228>
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	2b10      	cmp	r3, #16
 8004e7e:	d010      	beq.n	8004ea2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e007      	b.n	8004eb2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004eb0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec0:	d117      	bne.n	8004ef2 <I2C_Master_ADDR+0x278>
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ec8:	d00b      	beq.n	8004ee2 <I2C_Master_ADDR+0x268>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d008      	beq.n	8004ee2 <I2C_Master_ADDR+0x268>
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d005      	beq.n	8004ee2 <I2C_Master_ADDR+0x268>
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d002      	beq.n	8004ee2 <I2C_Master_ADDR+0x268>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d107      	bne.n	8004ef2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ef0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	e032      	b.n	8004f70 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f18:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f28:	d117      	bne.n	8004f5a <I2C_Master_ADDR+0x2e0>
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f30:	d00b      	beq.n	8004f4a <I2C_Master_ADDR+0x2d0>
 8004f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d008      	beq.n	8004f4a <I2C_Master_ADDR+0x2d0>
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d005      	beq.n	8004f4a <I2C_Master_ADDR+0x2d0>
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d002      	beq.n	8004f4a <I2C_Master_ADDR+0x2d0>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d107      	bne.n	8004f5a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f76:	e00b      	b.n	8004f90 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	e7ff      	b.n	8004f90 <I2C_Master_ADDR+0x316>
 8004f90:	bf00      	nop
 8004f92:	3744      	adds	r7, #68	@ 0x44
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004faa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d02b      	beq.n	800500e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d114      	bne.n	800500e <I2C_SlaveTransmit_TXE+0x72>
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b29      	cmp	r3, #41	@ 0x29
 8004fe8:	d111      	bne.n	800500e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2221      	movs	r2, #33	@ 0x21
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2228      	movs	r2, #40	@ 0x28
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff f9bd 	bl	8004388 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d011      	beq.n	800504c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005066:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d02c      	beq.n	80050cc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d114      	bne.n	80050cc <I2C_SlaveReceive_RXNE+0x74>
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a6:	d111      	bne.n	80050cc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2222      	movs	r2, #34	@ 0x22
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2228      	movs	r2, #40	@ 0x28
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff f968 	bl	800439c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d012      	beq.n	800510c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005132:	2b28      	cmp	r3, #40	@ 0x28
 8005134:	d125      	bne.n	8005182 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005144:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	81bb      	strh	r3, [r7, #12]
 8005164:	e002      	b.n	800516c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005174:	89ba      	ldrh	r2, [r7, #12]
 8005176:	7bfb      	ldrb	r3, [r7, #15]
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff f918 	bl	80043b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005180:	e00e      	b.n	80051a0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051c8:	2300      	movs	r3, #0
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	60bb      	str	r3, [r7, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005204:	d172      	bne.n	80052ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b22      	cmp	r3, #34	@ 0x22
 800520a:	d002      	beq.n	8005212 <I2C_Slave_STOPF+0x6a>
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005210:	d135      	bne.n	800527e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	f043 0204 	orr.w	r2, r3, #4
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005244:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524a:	4618      	mov	r0, r3
 800524c:	f7fd fe80 	bl	8002f50 <HAL_DMA_GetState>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d049      	beq.n	80052ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	4a69      	ldr	r2, [pc, #420]	@ (8005400 <I2C_Slave_STOPF+0x258>)
 800525c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fcc8 	bl	8002bf8 <HAL_DMA_Abort_IT>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d03d      	beq.n	80052ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800527c:	e035      	b.n	80052ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f043 0204 	orr.w	r2, r3, #4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd fe4a 	bl	8002f50 <HAL_DMA_GetState>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d014      	beq.n	80052ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005400 <I2C_Slave_STOPF+0x258>)
 80052c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fd fc92 	bl	8002bf8 <HAL_DMA_Abort_IT>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	e000      	b.n	80052ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d03e      	beq.n	8005374 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d112      	bne.n	800532a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d112      	bne.n	800535e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f8b7 	bl	80054f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005382:	e039      	b.n	80053f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b2a      	cmp	r3, #42	@ 0x2a
 8005388:	d109      	bne.n	800539e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2228      	movs	r2, #40	@ 0x28
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7fe ffff 	bl	800439c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b28      	cmp	r3, #40	@ 0x28
 80053a8:	d111      	bne.n	80053ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a15      	ldr	r2, [pc, #84]	@ (8005404 <I2C_Slave_STOPF+0x25c>)
 80053ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff f800 	bl	80043cc <HAL_I2C_ListenCpltCallback>
}
 80053cc:	e014      	b.n	80053f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	2b22      	cmp	r3, #34	@ 0x22
 80053d4:	d002      	beq.n	80053dc <I2C_Slave_STOPF+0x234>
 80053d6:	7bfb      	ldrb	r3, [r7, #15]
 80053d8:	2b22      	cmp	r3, #34	@ 0x22
 80053da:	d10d      	bne.n	80053f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fe ffd2 	bl	800439c <HAL_I2C_SlaveRxCpltCallback>
}
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	080059f5 	.word	0x080059f5
 8005404:	ffff0000 	.word	0xffff0000

08005408 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d002      	beq.n	800542a <I2C_Slave_AF+0x22>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b20      	cmp	r3, #32
 8005428:	d129      	bne.n	800547e <I2C_Slave_AF+0x76>
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b28      	cmp	r3, #40	@ 0x28
 800542e:	d126      	bne.n	800547e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a2e      	ldr	r2, [pc, #184]	@ (80054ec <I2C_Slave_AF+0xe4>)
 8005434:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005444:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800544e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800545e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fe ffa8 	bl	80043cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800547c:	e031      	b.n	80054e2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800547e:	7bfb      	ldrb	r3, [r7, #15]
 8005480:	2b21      	cmp	r3, #33	@ 0x21
 8005482:	d129      	bne.n	80054d8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <I2C_Slave_AF+0xe4>)
 8005488:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2221      	movs	r2, #33	@ 0x21
 800548e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fe f8e2 	bl	8003694 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fe ff59 	bl	8004388 <HAL_I2C_SlaveTxCpltCallback>
}
 80054d6:	e004      	b.n	80054e2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054e0:	615a      	str	r2, [r3, #20]
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	ffff0000 	.word	0xffff0000

080054f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005506:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005508:	7bbb      	ldrb	r3, [r7, #14]
 800550a:	2b10      	cmp	r3, #16
 800550c:	d002      	beq.n	8005514 <I2C_ITError+0x24>
 800550e:	7bbb      	ldrb	r3, [r7, #14]
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d10a      	bne.n	800552a <I2C_ITError+0x3a>
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b22      	cmp	r3, #34	@ 0x22
 8005518:	d107      	bne.n	800552a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005528:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005530:	2b28      	cmp	r3, #40	@ 0x28
 8005532:	d107      	bne.n	8005544 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2228      	movs	r2, #40	@ 0x28
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005542:	e015      	b.n	8005570 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005552:	d00a      	beq.n	800556a <I2C_ITError+0x7a>
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b60      	cmp	r3, #96	@ 0x60
 8005558:	d007      	beq.n	800556a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800557e:	d162      	bne.n	8005646 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800558e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d020      	beq.n	80055e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055a2:	4a6a      	ldr	r2, [pc, #424]	@ (800574c <I2C_ITError+0x25c>)
 80055a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd fb24 	bl	8002bf8 <HAL_DMA_Abort_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 8089 	beq.w	80056ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
 80055de:	e074      	b.n	80056ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e4:	4a59      	ldr	r2, [pc, #356]	@ (800574c <I2C_ITError+0x25c>)
 80055e6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fd fb03 	bl	8002bf8 <HAL_DMA_Abort_IT>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d068      	beq.n	80056ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005602:	2b40      	cmp	r3, #64	@ 0x40
 8005604:	d10b      	bne.n	800561e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	e041      	b.n	80056ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b60      	cmp	r3, #96	@ 0x60
 8005650:	d125      	bne.n	800569e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566a:	2b40      	cmp	r3, #64	@ 0x40
 800566c:	d10b      	bne.n	8005686 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fe fec0 	bl	800441c <HAL_I2C_AbortCpltCallback>
 800569c:	e015      	b.n	80056ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d10b      	bne.n	80056c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fe fe9f 	bl	8004408 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10e      	bne.n	80056f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800570e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b04      	cmp	r3, #4
 800571a:	d113      	bne.n	8005744 <I2C_ITError+0x254>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b28      	cmp	r3, #40	@ 0x28
 8005720:	d110      	bne.n	8005744 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a0a      	ldr	r2, [pc, #40]	@ (8005750 <I2C_ITError+0x260>)
 8005726:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7fe fe44 	bl	80043cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	080059f5 	.word	0x080059f5
 8005750:	ffff0000 	.word	0xffff0000

08005754 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	460b      	mov	r3, r1
 8005762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d006      	beq.n	800577e <I2C_MasterRequestWrite+0x2a>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d003      	beq.n	800577e <I2C_MasterRequestWrite+0x2a>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800577c:	d108      	bne.n	8005790 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e00b      	b.n	80057a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	2b12      	cmp	r3, #18
 8005796:	d107      	bne.n	80057a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f9c5 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ce:	d103      	bne.n	80057d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e035      	b.n	8005848 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057e4:	d108      	bne.n	80057f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057f4:	611a      	str	r2, [r3, #16]
 80057f6:	e01b      	b.n	8005830 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057f8:	897b      	ldrh	r3, [r7, #10]
 80057fa:	11db      	asrs	r3, r3, #7
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0306 	and.w	r3, r3, #6
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f063 030f 	orn	r3, r3, #15
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	490e      	ldr	r1, [pc, #56]	@ (8005850 <I2C_MasterRequestWrite+0xfc>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fa0e 	bl	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e010      	b.n	8005848 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005826:	897b      	ldrh	r3, [r7, #10]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4907      	ldr	r1, [pc, #28]	@ (8005854 <I2C_MasterRequestWrite+0x100>)
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f9fe 	bl	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	00010008 	.word	0x00010008
 8005854:	00010002 	.word	0x00010002

08005858 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	460b      	mov	r3, r1
 8005866:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800587c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b08      	cmp	r3, #8
 8005882:	d006      	beq.n	8005892 <I2C_MasterRequestRead+0x3a>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d003      	beq.n	8005892 <I2C_MasterRequestRead+0x3a>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005890:	d108      	bne.n	80058a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e00b      	b.n	80058bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	2b11      	cmp	r3, #17
 80058aa:	d107      	bne.n	80058bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f93b 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e2:	d103      	bne.n	80058ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e079      	b.n	80059e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058f8:	d108      	bne.n	800590c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058fa:	897b      	ldrh	r3, [r7, #10]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	611a      	str	r2, [r3, #16]
 800590a:	e05f      	b.n	80059cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	11db      	asrs	r3, r3, #7
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0306 	and.w	r3, r3, #6
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f063 030f 	orn	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4930      	ldr	r1, [pc, #192]	@ (80059ec <I2C_MasterRequestRead+0x194>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f984 	bl	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e054      	b.n	80059e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4929      	ldr	r1, [pc, #164]	@ (80059f0 <I2C_MasterRequestRead+0x198>)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f974 	bl	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e044      	b.n	80059e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800597e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f8d9 	bl	8005b44 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a6:	d103      	bne.n	80059b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e017      	b.n	80059e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80059b4:	897b      	ldrh	r3, [r7, #10]
 80059b6:	11db      	asrs	r3, r3, #7
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	f003 0306 	and.w	r3, r3, #6
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f063 030e 	orn	r3, r3, #14
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4907      	ldr	r1, [pc, #28]	@ (80059f0 <I2C_MasterRequestRead+0x198>)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f930 	bl	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	00010008 	.word	0x00010008
 80059f0:	00010002 	.word	0x00010002

080059f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a0c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b3c <I2C_DMAAbort+0x148>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	08db      	lsrs	r3, r3, #3
 8005a14:	4a4a      	ldr	r2, [pc, #296]	@ (8005b40 <I2C_DMAAbort+0x14c>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0a1a      	lsrs	r2, r3, #8
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	00da      	lsls	r2, r3, #3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	f043 0220 	orr.w	r2, r3, #32
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005a3a:	e00a      	b.n	8005a52 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a50:	d0ea      	beq.n	8005a28 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a5e:	2200      	movs	r2, #0
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6e:	2200      	movs	r2, #0
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a80:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a94:	2200      	movs	r2, #0
 8005a96:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d003      	beq.n	8005aa8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b60      	cmp	r3, #96	@ 0x60
 8005ac2:	d10e      	bne.n	8005ae2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ada:	6978      	ldr	r0, [r7, #20]
 8005adc:	f7fe fc9e 	bl	800441c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ae0:	e027      	b.n	8005b32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ae2:	7cfb      	ldrb	r3, [r7, #19]
 8005ae4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ae8:	2b28      	cmp	r3, #40	@ 0x28
 8005aea:	d117      	bne.n	8005b1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2228      	movs	r2, #40	@ 0x28
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b1a:	e007      	b.n	8005b2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b2c:	6978      	ldr	r0, [r7, #20]
 8005b2e:	f7fe fc6b 	bl	8004408 <HAL_I2C_ErrorCallback>
}
 8005b32:	bf00      	nop
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000000 	.word	0x20000000
 8005b40:	14f8b589 	.word	0x14f8b589

08005b44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b54:	e048      	b.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5c:	d044      	beq.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fc fb89 	bl	8002274 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d139      	bne.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	0c1b      	lsrs	r3, r3, #16
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10d      	bne.n	8005b9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	43da      	mvns	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	e00c      	b.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	43da      	mvns	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d116      	bne.n	8005be8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e023      	b.n	8005c30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d10d      	bne.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	e00c      	b.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d093      	beq.n	8005b56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c46:	e071      	b.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c56:	d123      	bne.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e067      	b.n	8005d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d041      	beq.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca8:	f7fc fae4 	bl	8002274 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d136      	bne.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10c      	bne.n	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	43da      	mvns	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf14      	ite	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	2300      	moveq	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	e00b      	b.n	8005cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4013      	ands	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	bf14      	ite	ne
 8005cf4:	2301      	movne	r3, #1
 8005cf6:	2300      	moveq	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e021      	b.n	8005d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	0c1b      	lsrs	r3, r3, #16
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10c      	bne.n	8005d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	e00b      	b.n	8005d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	43da      	mvns	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	2300      	moveq	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f af6d 	bne.w	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d84:	e034      	b.n	8005df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f915 	bl	8005fb6 <I2C_IsAcknowledgeFailed>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e034      	b.n	8005e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d028      	beq.n	8005df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d9e:	f7fc fa69 	bl	8002274 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d302      	bcc.n	8005db4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11d      	bne.n	8005df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dbe:	2b80      	cmp	r3, #128	@ 0x80
 8005dc0:	d016      	beq.n	8005df0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e007      	b.n	8005e00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b80      	cmp	r3, #128	@ 0x80
 8005dfc:	d1c3      	bne.n	8005d86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e14:	e034      	b.n	8005e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f8cd 	bl	8005fb6 <I2C_IsAcknowledgeFailed>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e034      	b.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d028      	beq.n	8005e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fc fa21 	bl	8002274 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d11d      	bne.n	8005e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d016      	beq.n	8005e80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	f043 0220 	orr.w	r2, r3, #32
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e007      	b.n	8005e90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d1c3      	bne.n	8005e16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ea4:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	0a1a      	lsrs	r2, r3, #8
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d107      	bne.n	8005ed6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e008      	b.n	8005ee8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d0e9      	beq.n	8005eba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000000 	.word	0x20000000
 8005ef8:	14f8b589 	.word	0x14f8b589

08005efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f08:	e049      	b.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d119      	bne.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0210 	mvn.w	r2, #16
 8005f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e030      	b.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4c:	f7fc f992 	bl	8002274 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d302      	bcc.n	8005f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d11d      	bne.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b40      	cmp	r3, #64	@ 0x40
 8005f6e:	d016      	beq.n	8005f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	f043 0220 	orr.w	r2, r3, #32
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e007      	b.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d1ae      	bne.n	8005f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fcc:	d11b      	bne.n	8006006 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	f043 0204 	orr.w	r2, r3, #4
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006024:	d103      	bne.n	800602e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800602c:	e007      	b.n	800603e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006036:	d102      	bne.n	800603e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2208      	movs	r2, #8
 800603c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e267      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d075      	beq.n	8006156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800606a:	4b88      	ldr	r3, [pc, #544]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
 8006072:	2b04      	cmp	r3, #4
 8006074:	d00c      	beq.n	8006090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b85      	ldr	r3, [pc, #532]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800607e:	2b08      	cmp	r3, #8
 8006080:	d112      	bne.n	80060a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006082:	4b82      	ldr	r3, [pc, #520]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800608a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800608e:	d10b      	bne.n	80060a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	4b7e      	ldr	r3, [pc, #504]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05b      	beq.n	8006154 <HAL_RCC_OscConfig+0x108>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d157      	bne.n	8006154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e242      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d106      	bne.n	80060c0 <HAL_RCC_OscConfig+0x74>
 80060b2:	4b76      	ldr	r3, [pc, #472]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a75      	ldr	r2, [pc, #468]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e01d      	b.n	80060fc <HAL_RCC_OscConfig+0xb0>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x98>
 80060ca:	4b70      	ldr	r3, [pc, #448]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6f      	ldr	r2, [pc, #444]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	4b6d      	ldr	r3, [pc, #436]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a6c      	ldr	r2, [pc, #432]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e00b      	b.n	80060fc <HAL_RCC_OscConfig+0xb0>
 80060e4:	4b69      	ldr	r3, [pc, #420]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a68      	ldr	r2, [pc, #416]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b66      	ldr	r3, [pc, #408]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a65      	ldr	r2, [pc, #404]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80060f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006104:	f7fc f8b6 	bl	8002274 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800610c:	f7fc f8b2 	bl	8002274 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b64      	cmp	r3, #100	@ 0x64
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e207      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611e:	4b5b      	ldr	r3, [pc, #364]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f0      	beq.n	800610c <HAL_RCC_OscConfig+0xc0>
 800612a:	e014      	b.n	8006156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7fc f8a2 	bl	8002274 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006134:	f7fc f89e 	bl	8002274 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b64      	cmp	r3, #100	@ 0x64
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e1f3      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006146:	4b51      	ldr	r3, [pc, #324]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0xe8>
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d063      	beq.n	800622a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b47      	ldr	r3, [pc, #284]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006176:	2b08      	cmp	r3, #8
 8006178:	d11c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617a:	4b44      	ldr	r3, [pc, #272]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d116      	bne.n	80061b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006186:	4b41      	ldr	r3, [pc, #260]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_RCC_OscConfig+0x152>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d001      	beq.n	800619e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e1c7      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619e:	4b3b      	ldr	r3, [pc, #236]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4937      	ldr	r1, [pc, #220]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b2:	e03a      	b.n	800622a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d020      	beq.n	80061fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061bc:	4b34      	ldr	r3, [pc, #208]	@ (8006290 <HAL_RCC_OscConfig+0x244>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fc f857 	bl	8002274 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ca:	f7fc f853 	bl	8002274 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1a8      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061dc:	4b2b      	ldr	r3, [pc, #172]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e8:	4b28      	ldr	r3, [pc, #160]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4925      	ldr	r1, [pc, #148]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
 80061fc:	e015      	b.n	800622a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <HAL_RCC_OscConfig+0x244>)
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fc f836 	bl	8002274 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620c:	f7fc f832 	bl	8002274 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e187      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800621e:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d036      	beq.n	80062a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623e:	4b15      	ldr	r3, [pc, #84]	@ (8006294 <HAL_RCC_OscConfig+0x248>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fc f816 	bl	8002274 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624c:	f7fc f812 	bl	8002274 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e167      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800625e:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCC_OscConfig+0x240>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x200>
 800626a:	e01b      	b.n	80062a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800626c:	4b09      	ldr	r3, [pc, #36]	@ (8006294 <HAL_RCC_OscConfig+0x248>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006272:	f7fb ffff 	bl	8002274 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006278:	e00e      	b.n	8006298 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627a:	f7fb fffb 	bl	8002274 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d907      	bls.n	8006298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e150      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
 800628c:	40023800 	.word	0x40023800
 8006290:	42470000 	.word	0x42470000
 8006294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006298:	4b88      	ldr	r3, [pc, #544]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800629a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1ea      	bne.n	800627a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8097 	beq.w	80063e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b6:	4b81      	ldr	r3, [pc, #516]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	4b7d      	ldr	r3, [pc, #500]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	4a7c      	ldr	r2, [pc, #496]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d2:	4b7a      	ldr	r3, [pc, #488]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	4b77      	ldr	r3, [pc, #476]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d118      	bne.n	8006320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ee:	4b74      	ldr	r3, [pc, #464]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a73      	ldr	r2, [pc, #460]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062fa:	f7fb ffbb 	bl	8002274 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fb ffb7 	bl	8002274 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e10c      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006314:	4b6a      	ldr	r3, [pc, #424]	@ (80064c0 <HAL_RCC_OscConfig+0x474>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d106      	bne.n	8006336 <HAL_RCC_OscConfig+0x2ea>
 8006328:	4b64      	ldr	r3, [pc, #400]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632c:	4a63      	ldr	r2, [pc, #396]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	@ 0x70
 8006334:	e01c      	b.n	8006370 <HAL_RCC_OscConfig+0x324>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x30c>
 800633e:	4b5f      	ldr	r3, [pc, #380]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5e      	ldr	r2, [pc, #376]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0304 	orr.w	r3, r3, #4
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	4b5c      	ldr	r3, [pc, #368]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800634e:	4a5b      	ldr	r2, [pc, #364]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6713      	str	r3, [r2, #112]	@ 0x70
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0x324>
 8006358:	4b58      	ldr	r3, [pc, #352]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	4a57      	ldr	r2, [pc, #348]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6713      	str	r3, [r2, #112]	@ 0x70
 8006364:	4b55      	ldr	r3, [pc, #340]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006368:	4a54      	ldr	r2, [pc, #336]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 800636a:	f023 0304 	bic.w	r3, r3, #4
 800636e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d015      	beq.n	80063a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb ff7c 	bl	8002274 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637e:	e00a      	b.n	8006396 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006380:	f7fb ff78 	bl	8002274 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0cb      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	4b49      	ldr	r3, [pc, #292]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ee      	beq.n	8006380 <HAL_RCC_OscConfig+0x334>
 80063a2:	e014      	b.n	80063ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a4:	f7fb ff66 	bl	8002274 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fb ff62 	bl	8002274 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0b5      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c2:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ee      	bne.n	80063ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d105      	bne.n	80063e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d4:	4b39      	ldr	r3, [pc, #228]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	4a38      	ldr	r2, [pc, #224]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80a1 	beq.w	800652c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ea:	4b34      	ldr	r3, [pc, #208]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d05c      	beq.n	80064b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d141      	bne.n	8006482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fb ff36 	bl	8002274 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640c:	f7fb ff32 	bl	8002274 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e087      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641e:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	3b01      	subs	r3, #1
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800644c:	061b      	lsls	r3, r3, #24
 800644e:	491b      	ldr	r1, [pc, #108]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006450:	4313      	orrs	r3, r2
 8006452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006454:	4b1b      	ldr	r3, [pc, #108]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006456:	2201      	movs	r2, #1
 8006458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fb ff0b 	bl	8002274 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006462:	f7fb ff07 	bl	8002274 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e05c      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006474:	4b11      	ldr	r3, [pc, #68]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x416>
 8006480:	e054      	b.n	800652c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006482:	4b10      	ldr	r3, [pc, #64]	@ (80064c4 <HAL_RCC_OscConfig+0x478>)
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006488:	f7fb fef4 	bl	8002274 <HAL_GetTick>
 800648c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648e:	e008      	b.n	80064a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006490:	f7fb fef0 	bl	8002274 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	2b02      	cmp	r3, #2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e045      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064a2:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <HAL_RCC_OscConfig+0x470>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1f0      	bne.n	8006490 <HAL_RCC_OscConfig+0x444>
 80064ae:	e03d      	b.n	800652c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e038      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40007000 	.word	0x40007000
 80064c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006538 <HAL_RCC_OscConfig+0x4ec>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d028      	beq.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d121      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d11a      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006500:	4293      	cmp	r3, r2
 8006502:	d111      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	3b01      	subs	r3, #1
 8006512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023800 	.word	0x40023800

0800653c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0cc      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	4b68      	ldr	r3, [pc, #416]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0307 	and.w	r3, r3, #7
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d90c      	bls.n	8006578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655e:	4b65      	ldr	r3, [pc, #404]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006566:	4b63      	ldr	r3, [pc, #396]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d001      	beq.n	8006578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e0b8      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d020      	beq.n	80065c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006590:	4b59      	ldr	r3, [pc, #356]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4a58      	ldr	r2, [pc, #352]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006596:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800659a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a8:	4b53      	ldr	r3, [pc, #332]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4a52      	ldr	r2, [pc, #328]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b4:	4b50      	ldr	r3, [pc, #320]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	494d      	ldr	r1, [pc, #308]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d044      	beq.n	800665c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d107      	bne.n	80065ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065da:	4b47      	ldr	r3, [pc, #284]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d119      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e07f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d003      	beq.n	80065fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d107      	bne.n	800660a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fa:	4b3f      	ldr	r3, [pc, #252]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e06f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800660a:	4b3b      	ldr	r3, [pc, #236]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e067      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800661a:	4b37      	ldr	r3, [pc, #220]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 0203 	bic.w	r2, r3, #3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	4934      	ldr	r1, [pc, #208]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	4313      	orrs	r3, r2
 800662a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800662c:	f7fb fe22 	bl	8002274 <HAL_GetTick>
 8006630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006632:	e00a      	b.n	800664a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006634:	f7fb fe1e 	bl	8002274 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006642:	4293      	cmp	r3, r2
 8006644:	d901      	bls.n	800664a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e04f      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664a:	4b2b      	ldr	r3, [pc, #172]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 020c 	and.w	r2, r3, #12
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	429a      	cmp	r2, r3
 800665a:	d1eb      	bne.n	8006634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800665c:	4b25      	ldr	r3, [pc, #148]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0307 	and.w	r3, r3, #7
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d20c      	bcs.n	8006684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800666a:	4b22      	ldr	r3, [pc, #136]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b20      	ldr	r3, [pc, #128]	@ (80066f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d001      	beq.n	8006684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e032      	b.n	80066ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b00      	cmp	r3, #0
 800668e:	d008      	beq.n	80066a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006690:	4b19      	ldr	r3, [pc, #100]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4916      	ldr	r1, [pc, #88]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d009      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ae:	4b12      	ldr	r3, [pc, #72]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	490e      	ldr	r1, [pc, #56]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066c2:	f000 f821 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80066c6:	4602      	mov	r2, r0
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	091b      	lsrs	r3, r3, #4
 80066ce:	f003 030f 	and.w	r3, r3, #15
 80066d2:	490a      	ldr	r1, [pc, #40]	@ (80066fc <HAL_RCC_ClockConfig+0x1c0>)
 80066d4:	5ccb      	ldrb	r3, [r1, r3]
 80066d6:	fa22 f303 	lsr.w	r3, r2, r3
 80066da:	4a09      	ldr	r2, [pc, #36]	@ (8006700 <HAL_RCC_ClockConfig+0x1c4>)
 80066dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066de:	4b09      	ldr	r3, [pc, #36]	@ (8006704 <HAL_RCC_ClockConfig+0x1c8>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fb fd82 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023c00 	.word	0x40023c00
 80066f8:	40023800 	.word	0x40023800
 80066fc:	080098ec 	.word	0x080098ec
 8006700:	20000000 	.word	0x20000000
 8006704:	20000004 	.word	0x20000004

08006708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800670c:	b094      	sub	sp, #80	@ 0x50
 800670e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	647b      	str	r3, [r7, #68]	@ 0x44
 8006714:	2300      	movs	r3, #0
 8006716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006718:	2300      	movs	r3, #0
 800671a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006720:	4b79      	ldr	r3, [pc, #484]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d00d      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x40>
 800672c:	2b08      	cmp	r3, #8
 800672e:	f200 80e1 	bhi.w	80068f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x34>
 8006736:	2b04      	cmp	r3, #4
 8006738:	d003      	beq.n	8006742 <HAL_RCC_GetSysClockFreq+0x3a>
 800673a:	e0db      	b.n	80068f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b73      	ldr	r3, [pc, #460]	@ (800690c <HAL_RCC_GetSysClockFreq+0x204>)
 800673e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006740:	e0db      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006742:	4b73      	ldr	r3, [pc, #460]	@ (8006910 <HAL_RCC_GetSysClockFreq+0x208>)
 8006744:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006746:	e0d8      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006748:	4b6f      	ldr	r3, [pc, #444]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006750:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006752:	4b6d      	ldr	r3, [pc, #436]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d063      	beq.n	8006826 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675e:	4b6a      	ldr	r3, [pc, #424]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	099b      	lsrs	r3, r3, #6
 8006764:	2200      	movs	r2, #0
 8006766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006768:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006770:	633b      	str	r3, [r7, #48]	@ 0x30
 8006772:	2300      	movs	r3, #0
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
 8006776:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800677a:	4622      	mov	r2, r4
 800677c:	462b      	mov	r3, r5
 800677e:	f04f 0000 	mov.w	r0, #0
 8006782:	f04f 0100 	mov.w	r1, #0
 8006786:	0159      	lsls	r1, r3, #5
 8006788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800678c:	0150      	lsls	r0, r2, #5
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	4621      	mov	r1, r4
 8006794:	1a51      	subs	r1, r2, r1
 8006796:	6139      	str	r1, [r7, #16]
 8006798:	4629      	mov	r1, r5
 800679a:	eb63 0301 	sbc.w	r3, r3, r1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ac:	4659      	mov	r1, fp
 80067ae:	018b      	lsls	r3, r1, #6
 80067b0:	4651      	mov	r1, sl
 80067b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067b6:	4651      	mov	r1, sl
 80067b8:	018a      	lsls	r2, r1, #6
 80067ba:	4651      	mov	r1, sl
 80067bc:	ebb2 0801 	subs.w	r8, r2, r1
 80067c0:	4659      	mov	r1, fp
 80067c2:	eb63 0901 	sbc.w	r9, r3, r1
 80067c6:	f04f 0200 	mov.w	r2, #0
 80067ca:	f04f 0300 	mov.w	r3, #0
 80067ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067da:	4690      	mov	r8, r2
 80067dc:	4699      	mov	r9, r3
 80067de:	4623      	mov	r3, r4
 80067e0:	eb18 0303 	adds.w	r3, r8, r3
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	462b      	mov	r3, r5
 80067e8:	eb49 0303 	adc.w	r3, r9, r3
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	f04f 0200 	mov.w	r2, #0
 80067f2:	f04f 0300 	mov.w	r3, #0
 80067f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067fa:	4629      	mov	r1, r5
 80067fc:	024b      	lsls	r3, r1, #9
 80067fe:	4621      	mov	r1, r4
 8006800:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006804:	4621      	mov	r1, r4
 8006806:	024a      	lsls	r2, r1, #9
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680e:	2200      	movs	r2, #0
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006818:	f7f9 fd82 	bl	8000320 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4613      	mov	r3, r2
 8006822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006824:	e058      	b.n	80068d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006826:	4b38      	ldr	r3, [pc, #224]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	099b      	lsrs	r3, r3, #6
 800682c:	2200      	movs	r2, #0
 800682e:	4618      	mov	r0, r3
 8006830:	4611      	mov	r1, r2
 8006832:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006836:	623b      	str	r3, [r7, #32]
 8006838:	2300      	movs	r3, #0
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
 800683c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	f04f 0000 	mov.w	r0, #0
 8006848:	f04f 0100 	mov.w	r1, #0
 800684c:	0159      	lsls	r1, r3, #5
 800684e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006852:	0150      	lsls	r0, r2, #5
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4641      	mov	r1, r8
 800685a:	ebb2 0a01 	subs.w	sl, r2, r1
 800685e:	4649      	mov	r1, r9
 8006860:	eb63 0b01 	sbc.w	fp, r3, r1
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006870:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006874:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006878:	ebb2 040a 	subs.w	r4, r2, sl
 800687c:	eb63 050b 	sbc.w	r5, r3, fp
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	00eb      	lsls	r3, r5, #3
 800688a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800688e:	00e2      	lsls	r2, r4, #3
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	4643      	mov	r3, r8
 8006896:	18e3      	adds	r3, r4, r3
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	464b      	mov	r3, r9
 800689c:	eb45 0303 	adc.w	r3, r5, r3
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	f04f 0300 	mov.w	r3, #0
 80068aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068ae:	4629      	mov	r1, r5
 80068b0:	028b      	lsls	r3, r1, #10
 80068b2:	4621      	mov	r1, r4
 80068b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068b8:	4621      	mov	r1, r4
 80068ba:	028a      	lsls	r2, r1, #10
 80068bc:	4610      	mov	r0, r2
 80068be:	4619      	mov	r1, r3
 80068c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c2:	2200      	movs	r2, #0
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	61fa      	str	r2, [r7, #28]
 80068c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068cc:	f7f9 fd28 	bl	8000320 <__aeabi_uldivmod>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4613      	mov	r3, r2
 80068d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x200>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0c1b      	lsrs	r3, r3, #16
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	3301      	adds	r3, #1
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80068e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068f2:	e002      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <HAL_RCC_GetSysClockFreq+0x204>)
 80068f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3750      	adds	r7, #80	@ 0x50
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800
 800690c:	00f42400 	.word	0x00f42400
 8006910:	007a1200 	.word	0x007a1200

08006914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006918:	4b03      	ldr	r3, [pc, #12]	@ (8006928 <HAL_RCC_GetHCLKFreq+0x14>)
 800691a:	681b      	ldr	r3, [r3, #0]
}
 800691c:	4618      	mov	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000000 	.word	0x20000000

0800692c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006930:	f7ff fff0 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0a9b      	lsrs	r3, r3, #10
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	@ (8006950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40023800 	.word	0x40023800
 8006950:	080098fc 	.word	0x080098fc

08006954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006958:	f7ff ffdc 	bl	8006914 <HAL_RCC_GetHCLKFreq>
 800695c:	4602      	mov	r2, r0
 800695e:	4b05      	ldr	r3, [pc, #20]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	0b5b      	lsrs	r3, r3, #13
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	4903      	ldr	r1, [pc, #12]	@ (8006978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800696a:	5ccb      	ldrb	r3, [r1, r3]
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40023800 	.word	0x40023800
 8006978:	080098fc 	.word	0x080098fc

0800697c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d035      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069a4:	4b67      	ldr	r3, [pc, #412]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069aa:	f7fb fc63 	bl	8002274 <HAL_GetTick>
 80069ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069b2:	f7fb fc5f 	bl	8002274 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e0ba      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069c4:	4b60      	ldr	r3, [pc, #384]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f0      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	019a      	lsls	r2, r3, #6
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	071b      	lsls	r3, r3, #28
 80069dc:	495a      	ldr	r1, [pc, #360]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069e4:	4b57      	ldr	r3, [pc, #348]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80069e6:	2201      	movs	r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ea:	f7fb fc43 	bl	8002274 <HAL_GetTick>
 80069ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069f0:	e008      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069f2:	f7fb fc3f 	bl	8002274 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e09a      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a04:	4b50      	ldr	r3, [pc, #320]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0f0      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0302 	and.w	r3, r3, #2
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8083 	beq.w	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	4b49      	ldr	r3, [pc, #292]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	4a48      	ldr	r2, [pc, #288]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a2e:	4b46      	ldr	r3, [pc, #280]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a3a:	4b44      	ldr	r3, [pc, #272]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a43      	ldr	r2, [pc, #268]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a46:	f7fb fc15 	bl	8002274 <HAL_GetTick>
 8006a4a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a4e:	f7fb fc11 	bl	8002274 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e06c      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a60:	4b3a      	ldr	r3, [pc, #232]	@ (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a6c:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d02f      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d028      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a94:	4b2e      	ldr	r3, [pc, #184]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006aa0:	4a29      	ldr	r2, [pc, #164]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006aa6:	4b28      	ldr	r3, [pc, #160]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d114      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ab2:	f7fb fbdf 	bl	8002274 <HAL_GetTick>
 8006ab6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab8:	e00a      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aba:	f7fb fbdb 	bl	8002274 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e034      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ee      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ae8:	d10d      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006aea:	4b17      	ldr	r3, [pc, #92]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afe:	4912      	ldr	r1, [pc, #72]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	608b      	str	r3, [r1, #8]
 8006b04:	e005      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006b06:	4b10      	ldr	r3, [pc, #64]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b0c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b10:	6093      	str	r3, [r2, #8]
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b14:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b1e:	490a      	ldr	r1, [pc, #40]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7c1a      	ldrb	r2, [r3, #16]
 8006b34:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b36:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	42470068 	.word	0x42470068
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	40007000 	.word	0x40007000
 8006b50:	42470e40 	.word	0x42470e40
 8006b54:	424711e0 	.word	0x424711e0

08006b58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e073      	b.n	8006c56 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7f5b      	ldrb	r3, [r3, #29]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa fef2 	bl	8001968 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d055      	beq.n	8006c44 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	22ca      	movs	r2, #202	@ 0xca
 8006b9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2253      	movs	r2, #83	@ 0x53
 8006ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f87f 	bl	8006cac <RTC_EnterInitMode>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d12c      	bne.n	8006c12 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bca:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68d2      	ldr	r2, [r2, #12]
 8006bf2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6919      	ldr	r1, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	041a      	lsls	r2, r3, #16
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	430a      	orrs	r2, r1
 8006c06:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f886 	bl	8006d1a <RTC_ExitInitMode>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d110      	bne.n	8006c3a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c26:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	22ff      	movs	r2, #255	@ 0xff
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c42:	e001      	b.n	8006c48 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca8 <HAL_RTC_WaitForSynchro+0x48>)
 8006c72:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c74:	f7fb fafe 	bl	8002274 <HAL_GetTick>
 8006c78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c7a:	e009      	b.n	8006c90 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c7c:	f7fb fafa 	bl	8002274 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c8a:	d901      	bls.n	8006c90 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e007      	b.n	8006ca0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ee      	beq.n	8006c7c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	00013f5f 	.word	0x00013f5f

08006cac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d122      	bne.n	8006d10 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006cd8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cda:	f7fb facb 	bl	8002274 <HAL_GetTick>
 8006cde:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ce0:	e00c      	b.n	8006cfc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ce2:	f7fb fac7 	bl	8002274 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cf0:	d904      	bls.n	8006cfc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <RTC_EnterInitMode+0x64>
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d1e8      	bne.n	8006ce2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff8b 	bl	8006c60 <HAL_RTC_WaitForSynchro>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2204      	movs	r2, #4
 8006d54:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e07b      	b.n	8006e6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d86:	d009      	beq.n	8006d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61da      	str	r2, [r3, #28]
 8006d8e:	e005      	b.n	8006d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fa fe3a 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e20:	ea42 0103 	orr.w	r1, r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	0c1b      	lsrs	r3, r3, #16
 8006e3a:	f003 0104 	and.w	r1, r3, #4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	f003 0210 	and.w	r2, r3, #16
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e041      	b.n	8006f0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fa ffcd 	bl	8001e3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f000 f94f 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d001      	beq.n	8006f2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e03c      	b.n	8006fa6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb4 <HAL_TIM_Base_Start+0xa0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d018      	beq.n	8006f70 <HAL_TIM_Base_Start+0x5c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f46:	d013      	beq.n	8006f70 <HAL_TIM_Base_Start+0x5c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <HAL_TIM_Base_Start+0xa4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00e      	beq.n	8006f70 <HAL_TIM_Base_Start+0x5c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a19      	ldr	r2, [pc, #100]	@ (8006fbc <HAL_TIM_Base_Start+0xa8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d009      	beq.n	8006f70 <HAL_TIM_Base_Start+0x5c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a17      	ldr	r2, [pc, #92]	@ (8006fc0 <HAL_TIM_Base_Start+0xac>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_TIM_Base_Start+0x5c>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a16      	ldr	r2, [pc, #88]	@ (8006fc4 <HAL_TIM_Base_Start+0xb0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d111      	bne.n	8006f94 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b06      	cmp	r3, #6
 8006f80:	d010      	beq.n	8006fa4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0201 	orr.w	r2, r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f92:	e007      	b.n	8006fa4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40014000 	.word	0x40014000

08006fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e0b4      	b.n	800714e <HAL_TIM_ConfigClockSource+0x186>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800700a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800701c:	d03e      	beq.n	800709c <HAL_TIM_ConfigClockSource+0xd4>
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007022:	f200 8087 	bhi.w	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702a:	f000 8086 	beq.w	800713a <HAL_TIM_ConfigClockSource+0x172>
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007032:	d87f      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b70      	cmp	r3, #112	@ 0x70
 8007036:	d01a      	beq.n	800706e <HAL_TIM_ConfigClockSource+0xa6>
 8007038:	2b70      	cmp	r3, #112	@ 0x70
 800703a:	d87b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b60      	cmp	r3, #96	@ 0x60
 800703e:	d050      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007040:	2b60      	cmp	r3, #96	@ 0x60
 8007042:	d877      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b50      	cmp	r3, #80	@ 0x50
 8007046:	d03c      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007048:	2b50      	cmp	r3, #80	@ 0x50
 800704a:	d873      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800704c:	2b40      	cmp	r3, #64	@ 0x40
 800704e:	d058      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x13a>
 8007050:	2b40      	cmp	r3, #64	@ 0x40
 8007052:	d86f      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007054:	2b30      	cmp	r3, #48	@ 0x30
 8007056:	d064      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007058:	2b30      	cmp	r3, #48	@ 0x30
 800705a:	d86b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800705c:	2b20      	cmp	r3, #32
 800705e:	d060      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007060:	2b20      	cmp	r3, #32
 8007062:	d867      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d05c      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007068:	2b10      	cmp	r3, #16
 800706a:	d05a      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 800706c:	e062      	b.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800707e:	f000 f971 	bl	8007364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007090:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	609a      	str	r2, [r3, #8]
      break;
 800709a:	e04f      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ac:	f000 f95a 	bl	8007364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070be:	609a      	str	r2, [r3, #8]
      break;
 80070c0:	e03c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ce:	461a      	mov	r2, r3
 80070d0:	f000 f8ce 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2150      	movs	r1, #80	@ 0x50
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f927 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 80070e0:	e02c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ee:	461a      	mov	r2, r3
 80070f0:	f000 f8ed 	bl	80072ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2160      	movs	r1, #96	@ 0x60
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 f917 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8007100:	e01c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	461a      	mov	r2, r3
 8007110:	f000 f8ae 	bl	8007270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2140      	movs	r1, #64	@ 0x40
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f907 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8007120:	e00c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f000 f8fe 	bl	800732e <TIM_ITRx_SetConfig>
      break;
 8007132:	e003      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e000      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800713a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a3a      	ldr	r2, [pc, #232]	@ (8007254 <TIM_Base_SetConfig+0xfc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00f      	beq.n	8007190 <TIM_Base_SetConfig+0x38>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d00b      	beq.n	8007190 <TIM_Base_SetConfig+0x38>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a37      	ldr	r2, [pc, #220]	@ (8007258 <TIM_Base_SetConfig+0x100>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d007      	beq.n	8007190 <TIM_Base_SetConfig+0x38>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a36      	ldr	r2, [pc, #216]	@ (800725c <TIM_Base_SetConfig+0x104>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d003      	beq.n	8007190 <TIM_Base_SetConfig+0x38>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a35      	ldr	r2, [pc, #212]	@ (8007260 <TIM_Base_SetConfig+0x108>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d108      	bne.n	80071a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007254 <TIM_Base_SetConfig+0xfc>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01b      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b0:	d017      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a28      	ldr	r2, [pc, #160]	@ (8007258 <TIM_Base_SetConfig+0x100>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a27      	ldr	r2, [pc, #156]	@ (800725c <TIM_Base_SetConfig+0x104>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a26      	ldr	r2, [pc, #152]	@ (8007260 <TIM_Base_SetConfig+0x108>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a25      	ldr	r2, [pc, #148]	@ (8007264 <TIM_Base_SetConfig+0x10c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a24      	ldr	r2, [pc, #144]	@ (8007268 <TIM_Base_SetConfig+0x110>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a23      	ldr	r2, [pc, #140]	@ (800726c <TIM_Base_SetConfig+0x114>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d108      	bne.n	80071f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a0e      	ldr	r2, [pc, #56]	@ (8007254 <TIM_Base_SetConfig+0xfc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d103      	bne.n	8007228 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b01      	cmp	r3, #1
 8007238:	d105      	bne.n	8007246 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	f023 0201 	bic.w	r2, r3, #1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	611a      	str	r2, [r3, #16]
  }
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40010000 	.word	0x40010000
 8007258:	40000400 	.word	0x40000400
 800725c:	40000800 	.word	0x40000800
 8007260:	40000c00 	.word	0x40000c00
 8007264:	40014000 	.word	0x40014000
 8007268:	40014400 	.word	0x40014400
 800726c:	40014800 	.word	0x40014800

08007270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0201 	bic.w	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800729a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f023 030a 	bic.w	r3, r3, #10
 80072ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b087      	sub	sp, #28
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f023 0210 	bic.w	r2, r3, #16
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	031b      	lsls	r3, r3, #12
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800730a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	f043 0307 	orr.w	r3, r3, #7
 8007350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	609a      	str	r2, [r3, #8]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	021a      	lsls	r2, r3, #8
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	431a      	orrs	r2, r3
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4313      	orrs	r3, r2
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d101      	bne.n	80073bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073b8:	2302      	movs	r3, #2
 80073ba:	e050      	b.n	800745e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007408:	d013      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a18      	ldr	r2, [pc, #96]	@ (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a16      	ldr	r2, [pc, #88]	@ (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a15      	ldr	r2, [pc, #84]	@ (8007478 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a13      	ldr	r2, [pc, #76]	@ (800747c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d10c      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4313      	orrs	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40010000 	.word	0x40010000
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40000c00 	.word	0x40000c00
 800747c:	40014000 	.word	0x40014000

08007480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e042      	b.n	8007518 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fa fd68 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	@ 0x24
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fd5f 	bl	8007f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695a      	ldr	r2, [r3, #20]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2220      	movs	r2, #32
 8007504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	@ 0x28
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800753a:	b2db      	uxtb	r3, r3
 800753c:	2b20      	cmp	r3, #32
 800753e:	d175      	bne.n	800762c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_UART_Transmit+0x2c>
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e06e      	b.n	800762e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2221      	movs	r2, #33	@ 0x21
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755e:	f7fa fe89 	bl	8002274 <HAL_GetTick>
 8007562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	88fa      	ldrh	r2, [r7, #6]
 800756e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007578:	d108      	bne.n	800758c <HAL_UART_Transmit+0x6c>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	61bb      	str	r3, [r7, #24]
 800758a:	e003      	b.n	8007594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007590:	2300      	movs	r3, #0
 8007592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007594:	e02e      	b.n	80075f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2200      	movs	r2, #0
 800759e:	2180      	movs	r1, #128	@ 0x80
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fafb 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e03a      	b.n	800762e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	881b      	ldrh	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	3302      	adds	r3, #2
 80075d2:	61bb      	str	r3, [r7, #24]
 80075d4:	e007      	b.n	80075e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	781a      	ldrb	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	3301      	adds	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1cb      	bne.n	8007596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	2200      	movs	r2, #0
 8007606:	2140      	movs	r1, #64	@ 0x40
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fac7 	bl	8007b9c <UART_WaitOnFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e006      	b.n	800762e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007628:	2300      	movs	r3, #0
 800762a:	e000      	b.n	800762e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0ba      	sub	sp, #232	@ 0xe8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800765e:	2300      	movs	r3, #0
 8007660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007664:	2300      	movs	r3, #0
 8007666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d10f      	bne.n	800769e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <HAL_UART_IRQHandler+0x66>
 800768a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fbb8 	bl	8007e0c <UART_Receive_IT>
      return;
 800769c:	e25b      	b.n	8007b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800769e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f000 80de 	beq.w	8007864 <HAL_UART_IRQHandler+0x22c>
 80076a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80d1 	beq.w	8007864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_UART_IRQHandler+0xae>
 80076ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d005      	beq.n	80076e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	f043 0201 	orr.w	r2, r3, #1
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <HAL_UART_IRQHandler+0xd2>
 80076f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d005      	beq.n	800770a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007702:	f043 0202 	orr.w	r2, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800770a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <HAL_UART_IRQHandler+0xf6>
 8007716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800772e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b00      	cmp	r3, #0
 8007738:	d011      	beq.n	800775e <HAL_UART_IRQHandler+0x126>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007756:	f043 0208 	orr.w	r2, r3, #8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 81f2 	beq.w	8007b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776c:	f003 0320 	and.w	r3, r3, #32
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_UART_IRQHandler+0x14e>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fb43 	bl	8007e0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	695b      	ldr	r3, [r3, #20]
 800778c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007790:	2b40      	cmp	r3, #64	@ 0x40
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d103      	bne.n	80077b2 <HAL_UART_IRQHandler+0x17a>
 80077aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d04f      	beq.n	8007852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa4b 	bl	8007c4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c2:	2b40      	cmp	r3, #64	@ 0x40
 80077c4:	d141      	bne.n	800784a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3314      	adds	r3, #20
 80077cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3314      	adds	r3, #20
 80077ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800780a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1d9      	bne.n	80077c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d013      	beq.n	8007842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a18 <HAL_UART_IRQHandler+0x3e0>)
 8007820:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007826:	4618      	mov	r0, r3
 8007828:	f7fb f9e6 	bl	8002bf8 <HAL_DMA_Abort_IT>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	e00e      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f994 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007848:	e00a      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f990 	bl	8007b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007850:	e006      	b.n	8007860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f98c 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800785e:	e175      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	bf00      	nop
    return;
 8007862:	e173      	b.n	8007b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 814f 	bne.w	8007b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 0310 	and.w	r3, r3, #16
 8007876:	2b00      	cmp	r3, #0
 8007878:	f000 8148 	beq.w	8007b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8141 	beq.w	8007b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b40      	cmp	r3, #64	@ 0x40
 80078ac:	f040 80b6 	bne.w	8007a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8145 	beq.w	8007b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078ce:	429a      	cmp	r2, r3
 80078d0:	f080 813e 	bcs.w	8007b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078e6:	f000 8088 	beq.w	80079fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	330c      	adds	r3, #12
 8007912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800791a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007922:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800792e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1d9      	bne.n	80078ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3314      	adds	r3, #20
 8007956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800795a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800795e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007962:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800796c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e1      	bne.n	8007936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3314      	adds	r3, #20
 8007978:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3314      	adds	r3, #20
 8007992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007998:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800799c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e3      	bne.n	8007972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	330c      	adds	r3, #12
 80079be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ca:	f023 0310 	bic.w	r3, r3, #16
 80079ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	330c      	adds	r3, #12
 80079d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80079dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80079de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80079ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e3      	bne.n	80079b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fb f88f 	bl	8002b18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8b7 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a16:	e09b      	b.n	8007b50 <HAL_UART_IRQHandler+0x518>
 8007a18:	08007d15 	.word	0x08007d15
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 808e 	beq.w	8007b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8089 	beq.w	8007b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a6e:	e841 2300 	strex	r3, r2, [r1]
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1e3      	bne.n	8007a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3314      	adds	r3, #20
 8007a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3314      	adds	r3, #20
 8007a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e3      	bne.n	8007a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	330c      	adds	r3, #12
 8007ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ae4:	61fa      	str	r2, [r7, #28]
 8007ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	69b9      	ldr	r1, [r7, #24]
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	617b      	str	r3, [r7, #20]
   return(result);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e3      	bne.n	8007ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f83d 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b0a:	e023      	b.n	8007b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_UART_IRQHandler+0x4f4>
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f909 	bl	8007d3c <UART_Transmit_IT>
    return;
 8007b2a:	e014      	b.n	8007b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <HAL_UART_IRQHandler+0x51e>
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f949 	bl	8007ddc <UART_EndTransmit_IT>
    return;
 8007b4a:	e004      	b.n	8007b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8007b4c:	bf00      	nop
 8007b4e:	e002      	b.n	8007b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b50:	bf00      	nop
 8007b52:	e000      	b.n	8007b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007b54:	bf00      	nop
  }
}
 8007b56:	37e8      	adds	r7, #232	@ 0xe8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bac:	e03b      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d037      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb6:	f7fa fb5d 	bl	8002274 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	6a3a      	ldr	r2, [r7, #32]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d302      	bcc.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e03a      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d023      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b80      	cmp	r3, #128	@ 0x80
 8007be2:	d020      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b40      	cmp	r3, #64	@ 0x40
 8007be8:	d01d      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d116      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f81d 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2208      	movs	r2, #8
 8007c18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e00f      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d0b4      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b095      	sub	sp, #84	@ 0x54
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c76:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3314      	adds	r3, #20
 8007ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d119      	bne.n	8007cfa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	330c      	adds	r3, #12
 8007ccc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f023 0310 	bic.w	r3, r3, #16
 8007cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	330c      	adds	r3, #12
 8007ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ce6:	61ba      	str	r2, [r7, #24]
 8007ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6979      	ldr	r1, [r7, #20]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e5      	bne.n	8007cc6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007d08:	bf00      	nop
 8007d0a:	3754      	adds	r7, #84	@ 0x54
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f7ff ff1e 	bl	8007b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b21      	cmp	r3, #33	@ 0x21
 8007d4e:	d13e      	bne.n	8007dce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d58:	d114      	bne.n	8007d84 <UART_Transmit_IT+0x48>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d110      	bne.n	8007d84 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d76:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a1b      	ldr	r3, [r3, #32]
 8007d7c:	1c9a      	adds	r2, r3, #2
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]
 8007d82:	e008      	b.n	8007d96 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	1c59      	adds	r1, r3, #1
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	6211      	str	r1, [r2, #32]
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	4619      	mov	r1, r3
 8007da4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10f      	bne.n	8007dca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007db8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68da      	ldr	r2, [r3, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dc8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e000      	b.n	8007dd0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
  }
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007df2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fead 	bl	8007b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	@ 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b22      	cmp	r3, #34	@ 0x22
 8007e1e:	f040 80ae 	bne.w	8007f7e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e2a:	d117      	bne.n	8007e5c <UART_Receive_IT+0x50>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d113      	bne.n	8007e5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e54:	1c9a      	adds	r2, r3, #2
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e5a:	e026      	b.n	8007eaa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6e:	d007      	beq.n	8007e80 <UART_Receive_IT+0x74>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <UART_Receive_IT+0x82>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d106      	bne.n	8007e8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	e008      	b.n	8007ea0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d15d      	bne.n	8007f7a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0220 	bic.w	r2, r2, #32
 8007ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007edc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695a      	ldr	r2, [r3, #20]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0201 	bic.w	r2, r2, #1
 8007eec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d135      	bne.n	8007f70 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	330c      	adds	r3, #12
 8007f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	613b      	str	r3, [r7, #16]
   return(result);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	f023 0310 	bic.w	r3, r3, #16
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	330c      	adds	r3, #12
 8007f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2a:	623a      	str	r2, [r7, #32]
 8007f2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	69f9      	ldr	r1, [r7, #28]
 8007f30:	6a3a      	ldr	r2, [r7, #32]
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e5      	bne.n	8007f0a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d10a      	bne.n	8007f62 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff fe0b 	bl	8007b84 <HAL_UARTEx_RxEventCallback>
 8007f6e:	e002      	b.n	8007f76 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7f9 fcb7 	bl	80018e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e002      	b.n	8007f80 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e000      	b.n	8007f80 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007f7e:	2302      	movs	r3, #2
  }
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3730      	adds	r7, #48	@ 0x30
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f8c:	b0c0      	sub	sp, #256	@ 0x100
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa4:	68d9      	ldr	r1, [r3, #12]
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	ea40 0301 	orr.w	r3, r0, r1
 8007fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb6:	689a      	ldr	r2, [r3, #8]
 8007fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007fe0:	f021 010c 	bic.w	r1, r1, #12
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fee:	430b      	orrs	r3, r1
 8007ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008002:	6999      	ldr	r1, [r3, #24]
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	ea40 0301 	orr.w	r3, r0, r1
 800800e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b8f      	ldr	r3, [pc, #572]	@ (8008254 <UART_SetConfig+0x2cc>)
 8008018:	429a      	cmp	r2, r3
 800801a:	d005      	beq.n	8008028 <UART_SetConfig+0xa0>
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	4b8d      	ldr	r3, [pc, #564]	@ (8008258 <UART_SetConfig+0x2d0>)
 8008024:	429a      	cmp	r2, r3
 8008026:	d104      	bne.n	8008032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008028:	f7fe fc94 	bl	8006954 <HAL_RCC_GetPCLK2Freq>
 800802c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008030:	e003      	b.n	800803a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008032:	f7fe fc7b 	bl	800692c <HAL_RCC_GetPCLK1Freq>
 8008036:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800803a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008044:	f040 810c 	bne.w	8008260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008052:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800805a:	4622      	mov	r2, r4
 800805c:	462b      	mov	r3, r5
 800805e:	1891      	adds	r1, r2, r2
 8008060:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008062:	415b      	adcs	r3, r3
 8008064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800806a:	4621      	mov	r1, r4
 800806c:	eb12 0801 	adds.w	r8, r2, r1
 8008070:	4629      	mov	r1, r5
 8008072:	eb43 0901 	adc.w	r9, r3, r1
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800808a:	4690      	mov	r8, r2
 800808c:	4699      	mov	r9, r3
 800808e:	4623      	mov	r3, r4
 8008090:	eb18 0303 	adds.w	r3, r8, r3
 8008094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008098:	462b      	mov	r3, r5
 800809a:	eb49 0303 	adc.w	r3, r9, r3
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80080ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80080b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80080b6:	460b      	mov	r3, r1
 80080b8:	18db      	adds	r3, r3, r3
 80080ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80080bc:	4613      	mov	r3, r2
 80080be:	eb42 0303 	adc.w	r3, r2, r3
 80080c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80080c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80080c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80080cc:	f7f8 f928 	bl	8000320 <__aeabi_uldivmod>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4b61      	ldr	r3, [pc, #388]	@ (800825c <UART_SetConfig+0x2d4>)
 80080d6:	fba3 2302 	umull	r2, r3, r3, r2
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	011c      	lsls	r4, r3, #4
 80080de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	1891      	adds	r1, r2, r2
 80080f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80080f8:	415b      	adcs	r3, r3
 80080fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008100:	4641      	mov	r1, r8
 8008102:	eb12 0a01 	adds.w	sl, r2, r1
 8008106:	4649      	mov	r1, r9
 8008108:	eb43 0b01 	adc.w	fp, r3, r1
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800811c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008120:	4692      	mov	sl, r2
 8008122:	469b      	mov	fp, r3
 8008124:	4643      	mov	r3, r8
 8008126:	eb1a 0303 	adds.w	r3, sl, r3
 800812a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800812e:	464b      	mov	r3, r9
 8008130:	eb4b 0303 	adc.w	r3, fp, r3
 8008134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008144:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800814c:	460b      	mov	r3, r1
 800814e:	18db      	adds	r3, r3, r3
 8008150:	643b      	str	r3, [r7, #64]	@ 0x40
 8008152:	4613      	mov	r3, r2
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	647b      	str	r3, [r7, #68]	@ 0x44
 800815a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800815e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008162:	f7f8 f8dd 	bl	8000320 <__aeabi_uldivmod>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4611      	mov	r1, r2
 800816c:	4b3b      	ldr	r3, [pc, #236]	@ (800825c <UART_SetConfig+0x2d4>)
 800816e:	fba3 2301 	umull	r2, r3, r3, r1
 8008172:	095b      	lsrs	r3, r3, #5
 8008174:	2264      	movs	r2, #100	@ 0x64
 8008176:	fb02 f303 	mul.w	r3, r2, r3
 800817a:	1acb      	subs	r3, r1, r3
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008182:	4b36      	ldr	r3, [pc, #216]	@ (800825c <UART_SetConfig+0x2d4>)
 8008184:	fba3 2302 	umull	r2, r3, r3, r2
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008190:	441c      	add	r4, r3
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008196:	2200      	movs	r2, #0
 8008198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800819c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80081a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	1891      	adds	r1, r2, r2
 80081aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80081ac:	415b      	adcs	r3, r3
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80081b4:	4641      	mov	r1, r8
 80081b6:	1851      	adds	r1, r2, r1
 80081b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80081ba:	4649      	mov	r1, r9
 80081bc:	414b      	adcs	r3, r1
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c0:	f04f 0200 	mov.w	r2, #0
 80081c4:	f04f 0300 	mov.w	r3, #0
 80081c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80081cc:	4659      	mov	r1, fp
 80081ce:	00cb      	lsls	r3, r1, #3
 80081d0:	4651      	mov	r1, sl
 80081d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d6:	4651      	mov	r1, sl
 80081d8:	00ca      	lsls	r2, r1, #3
 80081da:	4610      	mov	r0, r2
 80081dc:	4619      	mov	r1, r3
 80081de:	4603      	mov	r3, r0
 80081e0:	4642      	mov	r2, r8
 80081e2:	189b      	adds	r3, r3, r2
 80081e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081e8:	464b      	mov	r3, r9
 80081ea:	460a      	mov	r2, r1
 80081ec:	eb42 0303 	adc.w	r3, r2, r3
 80081f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008200:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008208:	460b      	mov	r3, r1
 800820a:	18db      	adds	r3, r3, r3
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800820e:	4613      	mov	r3, r2
 8008210:	eb42 0303 	adc.w	r3, r2, r3
 8008214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800821a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800821e:	f7f8 f87f 	bl	8000320 <__aeabi_uldivmod>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <UART_SetConfig+0x2d4>)
 8008228:	fba3 1302 	umull	r1, r3, r3, r2
 800822c:	095b      	lsrs	r3, r3, #5
 800822e:	2164      	movs	r1, #100	@ 0x64
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	3332      	adds	r3, #50	@ 0x32
 800823a:	4a08      	ldr	r2, [pc, #32]	@ (800825c <UART_SetConfig+0x2d4>)
 800823c:	fba2 2303 	umull	r2, r3, r2, r3
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	f003 0207 	and.w	r2, r3, #7
 8008246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4422      	add	r2, r4
 800824e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008250:	e106      	b.n	8008460 <UART_SetConfig+0x4d8>
 8008252:	bf00      	nop
 8008254:	40011000 	.word	0x40011000
 8008258:	40011400 	.word	0x40011400
 800825c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008264:	2200      	movs	r2, #0
 8008266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800826a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800826e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008272:	4642      	mov	r2, r8
 8008274:	464b      	mov	r3, r9
 8008276:	1891      	adds	r1, r2, r2
 8008278:	6239      	str	r1, [r7, #32]
 800827a:	415b      	adcs	r3, r3
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
 800827e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008282:	4641      	mov	r1, r8
 8008284:	1854      	adds	r4, r2, r1
 8008286:	4649      	mov	r1, r9
 8008288:	eb43 0501 	adc.w	r5, r3, r1
 800828c:	f04f 0200 	mov.w	r2, #0
 8008290:	f04f 0300 	mov.w	r3, #0
 8008294:	00eb      	lsls	r3, r5, #3
 8008296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800829a:	00e2      	lsls	r2, r4, #3
 800829c:	4614      	mov	r4, r2
 800829e:	461d      	mov	r5, r3
 80082a0:	4643      	mov	r3, r8
 80082a2:	18e3      	adds	r3, r4, r3
 80082a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082a8:	464b      	mov	r3, r9
 80082aa:	eb45 0303 	adc.w	r3, r5, r3
 80082ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80082b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80082ce:	4629      	mov	r1, r5
 80082d0:	008b      	lsls	r3, r1, #2
 80082d2:	4621      	mov	r1, r4
 80082d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d8:	4621      	mov	r1, r4
 80082da:	008a      	lsls	r2, r1, #2
 80082dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80082e0:	f7f8 f81e 	bl	8000320 <__aeabi_uldivmod>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4b60      	ldr	r3, [pc, #384]	@ (800846c <UART_SetConfig+0x4e4>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	011c      	lsls	r4, r3, #4
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	61b9      	str	r1, [r7, #24]
 800830c:	415b      	adcs	r3, r3
 800830e:	61fb      	str	r3, [r7, #28]
 8008310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008314:	4641      	mov	r1, r8
 8008316:	1851      	adds	r1, r2, r1
 8008318:	6139      	str	r1, [r7, #16]
 800831a:	4649      	mov	r1, r9
 800831c:	414b      	adcs	r3, r1
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800832c:	4659      	mov	r1, fp
 800832e:	00cb      	lsls	r3, r1, #3
 8008330:	4651      	mov	r1, sl
 8008332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008336:	4651      	mov	r1, sl
 8008338:	00ca      	lsls	r2, r1, #3
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	4603      	mov	r3, r0
 8008340:	4642      	mov	r2, r8
 8008342:	189b      	adds	r3, r3, r2
 8008344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008348:	464b      	mov	r3, r9
 800834a:	460a      	mov	r2, r1
 800834c:	eb42 0303 	adc.w	r3, r2, r3
 8008350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800835e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	f04f 0300 	mov.w	r3, #0
 8008368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800836c:	4649      	mov	r1, r9
 800836e:	008b      	lsls	r3, r1, #2
 8008370:	4641      	mov	r1, r8
 8008372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008376:	4641      	mov	r1, r8
 8008378:	008a      	lsls	r2, r1, #2
 800837a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800837e:	f7f7 ffcf 	bl	8000320 <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4611      	mov	r1, r2
 8008388:	4b38      	ldr	r3, [pc, #224]	@ (800846c <UART_SetConfig+0x4e4>)
 800838a:	fba3 2301 	umull	r2, r3, r3, r1
 800838e:	095b      	lsrs	r3, r3, #5
 8008390:	2264      	movs	r2, #100	@ 0x64
 8008392:	fb02 f303 	mul.w	r3, r2, r3
 8008396:	1acb      	subs	r3, r1, r3
 8008398:	011b      	lsls	r3, r3, #4
 800839a:	3332      	adds	r3, #50	@ 0x32
 800839c:	4a33      	ldr	r2, [pc, #204]	@ (800846c <UART_SetConfig+0x4e4>)
 800839e:	fba2 2303 	umull	r2, r3, r2, r3
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083a8:	441c      	add	r4, r3
 80083aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083ae:	2200      	movs	r2, #0
 80083b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80083b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80083b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	415b      	adcs	r3, r3
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083c8:	4641      	mov	r1, r8
 80083ca:	1851      	adds	r1, r2, r1
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	4649      	mov	r1, r9
 80083d0:	414b      	adcs	r3, r1
 80083d2:	607b      	str	r3, [r7, #4]
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083e0:	4659      	mov	r1, fp
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4651      	mov	r1, sl
 80083e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ea:	4651      	mov	r1, sl
 80083ec:	00ca      	lsls	r2, r1, #3
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	4642      	mov	r2, r8
 80083f6:	189b      	adds	r3, r3, r2
 80083f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083fa:	464b      	mov	r3, r9
 80083fc:	460a      	mov	r2, r1
 80083fe:	eb42 0303 	adc.w	r3, r2, r3
 8008402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	663b      	str	r3, [r7, #96]	@ 0x60
 800840e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f04f 0300 	mov.w	r3, #0
 8008418:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800841c:	4649      	mov	r1, r9
 800841e:	008b      	lsls	r3, r1, #2
 8008420:	4641      	mov	r1, r8
 8008422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008426:	4641      	mov	r1, r8
 8008428:	008a      	lsls	r2, r1, #2
 800842a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800842e:	f7f7 ff77 	bl	8000320 <__aeabi_uldivmod>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4b0d      	ldr	r3, [pc, #52]	@ (800846c <UART_SetConfig+0x4e4>)
 8008438:	fba3 1302 	umull	r1, r3, r3, r2
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	2164      	movs	r1, #100	@ 0x64
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	3332      	adds	r3, #50	@ 0x32
 800844a:	4a08      	ldr	r2, [pc, #32]	@ (800846c <UART_SetConfig+0x4e4>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	f003 020f 	and.w	r2, r3, #15
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4422      	add	r2, r4
 800845e:	609a      	str	r2, [r3, #8]
}
 8008460:	bf00      	nop
 8008462:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008466:	46bd      	mov	sp, r7
 8008468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800846c:	51eb851f 	.word	0x51eb851f

08008470 <std>:
 8008470:	2300      	movs	r3, #0
 8008472:	b510      	push	{r4, lr}
 8008474:	4604      	mov	r4, r0
 8008476:	e9c0 3300 	strd	r3, r3, [r0]
 800847a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800847e:	6083      	str	r3, [r0, #8]
 8008480:	8181      	strh	r1, [r0, #12]
 8008482:	6643      	str	r3, [r0, #100]	@ 0x64
 8008484:	81c2      	strh	r2, [r0, #14]
 8008486:	6183      	str	r3, [r0, #24]
 8008488:	4619      	mov	r1, r3
 800848a:	2208      	movs	r2, #8
 800848c:	305c      	adds	r0, #92	@ 0x5c
 800848e:	f000 fa19 	bl	80088c4 <memset>
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <std+0x58>)
 8008494:	6263      	str	r3, [r4, #36]	@ 0x24
 8008496:	4b0d      	ldr	r3, [pc, #52]	@ (80084cc <std+0x5c>)
 8008498:	62a3      	str	r3, [r4, #40]	@ 0x28
 800849a:	4b0d      	ldr	r3, [pc, #52]	@ (80084d0 <std+0x60>)
 800849c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800849e:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <std+0x64>)
 80084a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80084a2:	4b0d      	ldr	r3, [pc, #52]	@ (80084d8 <std+0x68>)
 80084a4:	6224      	str	r4, [r4, #32]
 80084a6:	429c      	cmp	r4, r3
 80084a8:	d006      	beq.n	80084b8 <std+0x48>
 80084aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084ae:	4294      	cmp	r4, r2
 80084b0:	d002      	beq.n	80084b8 <std+0x48>
 80084b2:	33d0      	adds	r3, #208	@ 0xd0
 80084b4:	429c      	cmp	r4, r3
 80084b6:	d105      	bne.n	80084c4 <std+0x54>
 80084b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084c0:	f000 ba78 	b.w	80089b4 <__retarget_lock_init_recursive>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	bf00      	nop
 80084c8:	08008715 	.word	0x08008715
 80084cc:	08008737 	.word	0x08008737
 80084d0:	0800876f 	.word	0x0800876f
 80084d4:	08008793 	.word	0x08008793
 80084d8:	2000040c 	.word	0x2000040c

080084dc <stdio_exit_handler>:
 80084dc:	4a02      	ldr	r2, [pc, #8]	@ (80084e8 <stdio_exit_handler+0xc>)
 80084de:	4903      	ldr	r1, [pc, #12]	@ (80084ec <stdio_exit_handler+0x10>)
 80084e0:	4803      	ldr	r0, [pc, #12]	@ (80084f0 <stdio_exit_handler+0x14>)
 80084e2:	f000 b869 	b.w	80085b8 <_fwalk_sglue>
 80084e6:	bf00      	nop
 80084e8:	2000000c 	.word	0x2000000c
 80084ec:	08009505 	.word	0x08009505
 80084f0:	2000001c 	.word	0x2000001c

080084f4 <cleanup_stdio>:
 80084f4:	6841      	ldr	r1, [r0, #4]
 80084f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008528 <cleanup_stdio+0x34>)
 80084f8:	4299      	cmp	r1, r3
 80084fa:	b510      	push	{r4, lr}
 80084fc:	4604      	mov	r4, r0
 80084fe:	d001      	beq.n	8008504 <cleanup_stdio+0x10>
 8008500:	f001 f800 	bl	8009504 <_fflush_r>
 8008504:	68a1      	ldr	r1, [r4, #8]
 8008506:	4b09      	ldr	r3, [pc, #36]	@ (800852c <cleanup_stdio+0x38>)
 8008508:	4299      	cmp	r1, r3
 800850a:	d002      	beq.n	8008512 <cleanup_stdio+0x1e>
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fff9 	bl	8009504 <_fflush_r>
 8008512:	68e1      	ldr	r1, [r4, #12]
 8008514:	4b06      	ldr	r3, [pc, #24]	@ (8008530 <cleanup_stdio+0x3c>)
 8008516:	4299      	cmp	r1, r3
 8008518:	d004      	beq.n	8008524 <cleanup_stdio+0x30>
 800851a:	4620      	mov	r0, r4
 800851c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008520:	f000 bff0 	b.w	8009504 <_fflush_r>
 8008524:	bd10      	pop	{r4, pc}
 8008526:	bf00      	nop
 8008528:	2000040c 	.word	0x2000040c
 800852c:	20000474 	.word	0x20000474
 8008530:	200004dc 	.word	0x200004dc

08008534 <global_stdio_init.part.0>:
 8008534:	b510      	push	{r4, lr}
 8008536:	4b0b      	ldr	r3, [pc, #44]	@ (8008564 <global_stdio_init.part.0+0x30>)
 8008538:	4c0b      	ldr	r4, [pc, #44]	@ (8008568 <global_stdio_init.part.0+0x34>)
 800853a:	4a0c      	ldr	r2, [pc, #48]	@ (800856c <global_stdio_init.part.0+0x38>)
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	4620      	mov	r0, r4
 8008540:	2200      	movs	r2, #0
 8008542:	2104      	movs	r1, #4
 8008544:	f7ff ff94 	bl	8008470 <std>
 8008548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800854c:	2201      	movs	r2, #1
 800854e:	2109      	movs	r1, #9
 8008550:	f7ff ff8e 	bl	8008470 <std>
 8008554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008558:	2202      	movs	r2, #2
 800855a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855e:	2112      	movs	r1, #18
 8008560:	f7ff bf86 	b.w	8008470 <std>
 8008564:	20000544 	.word	0x20000544
 8008568:	2000040c 	.word	0x2000040c
 800856c:	080084dd 	.word	0x080084dd

08008570 <__sfp_lock_acquire>:
 8008570:	4801      	ldr	r0, [pc, #4]	@ (8008578 <__sfp_lock_acquire+0x8>)
 8008572:	f000 ba20 	b.w	80089b6 <__retarget_lock_acquire_recursive>
 8008576:	bf00      	nop
 8008578:	2000054d 	.word	0x2000054d

0800857c <__sfp_lock_release>:
 800857c:	4801      	ldr	r0, [pc, #4]	@ (8008584 <__sfp_lock_release+0x8>)
 800857e:	f000 ba1b 	b.w	80089b8 <__retarget_lock_release_recursive>
 8008582:	bf00      	nop
 8008584:	2000054d 	.word	0x2000054d

08008588 <__sinit>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	f7ff fff0 	bl	8008570 <__sfp_lock_acquire>
 8008590:	6a23      	ldr	r3, [r4, #32]
 8008592:	b11b      	cbz	r3, 800859c <__sinit+0x14>
 8008594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008598:	f7ff bff0 	b.w	800857c <__sfp_lock_release>
 800859c:	4b04      	ldr	r3, [pc, #16]	@ (80085b0 <__sinit+0x28>)
 800859e:	6223      	str	r3, [r4, #32]
 80085a0:	4b04      	ldr	r3, [pc, #16]	@ (80085b4 <__sinit+0x2c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f5      	bne.n	8008594 <__sinit+0xc>
 80085a8:	f7ff ffc4 	bl	8008534 <global_stdio_init.part.0>
 80085ac:	e7f2      	b.n	8008594 <__sinit+0xc>
 80085ae:	bf00      	nop
 80085b0:	080084f5 	.word	0x080084f5
 80085b4:	20000544 	.word	0x20000544

080085b8 <_fwalk_sglue>:
 80085b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085bc:	4607      	mov	r7, r0
 80085be:	4688      	mov	r8, r1
 80085c0:	4614      	mov	r4, r2
 80085c2:	2600      	movs	r6, #0
 80085c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085c8:	f1b9 0901 	subs.w	r9, r9, #1
 80085cc:	d505      	bpl.n	80085da <_fwalk_sglue+0x22>
 80085ce:	6824      	ldr	r4, [r4, #0]
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	d1f7      	bne.n	80085c4 <_fwalk_sglue+0xc>
 80085d4:	4630      	mov	r0, r6
 80085d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d907      	bls.n	80085f0 <_fwalk_sglue+0x38>
 80085e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085e4:	3301      	adds	r3, #1
 80085e6:	d003      	beq.n	80085f0 <_fwalk_sglue+0x38>
 80085e8:	4629      	mov	r1, r5
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c0      	blx	r8
 80085ee:	4306      	orrs	r6, r0
 80085f0:	3568      	adds	r5, #104	@ 0x68
 80085f2:	e7e9      	b.n	80085c8 <_fwalk_sglue+0x10>

080085f4 <iprintf>:
 80085f4:	b40f      	push	{r0, r1, r2, r3}
 80085f6:	b507      	push	{r0, r1, r2, lr}
 80085f8:	4906      	ldr	r1, [pc, #24]	@ (8008614 <iprintf+0x20>)
 80085fa:	ab04      	add	r3, sp, #16
 80085fc:	6808      	ldr	r0, [r1, #0]
 80085fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008602:	6881      	ldr	r1, [r0, #8]
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	f000 fc53 	bl	8008eb0 <_vfiprintf_r>
 800860a:	b003      	add	sp, #12
 800860c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008610:	b004      	add	sp, #16
 8008612:	4770      	bx	lr
 8008614:	20000018 	.word	0x20000018

08008618 <_puts_r>:
 8008618:	6a03      	ldr	r3, [r0, #32]
 800861a:	b570      	push	{r4, r5, r6, lr}
 800861c:	6884      	ldr	r4, [r0, #8]
 800861e:	4605      	mov	r5, r0
 8008620:	460e      	mov	r6, r1
 8008622:	b90b      	cbnz	r3, 8008628 <_puts_r+0x10>
 8008624:	f7ff ffb0 	bl	8008588 <__sinit>
 8008628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d405      	bmi.n	800863a <_puts_r+0x22>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	0598      	lsls	r0, r3, #22
 8008632:	d402      	bmi.n	800863a <_puts_r+0x22>
 8008634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008636:	f000 f9be 	bl	80089b6 <__retarget_lock_acquire_recursive>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	0719      	lsls	r1, r3, #28
 800863e:	d502      	bpl.n	8008646 <_puts_r+0x2e>
 8008640:	6923      	ldr	r3, [r4, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d135      	bne.n	80086b2 <_puts_r+0x9a>
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f000 f8e5 	bl	8008818 <__swsetup_r>
 800864e:	b380      	cbz	r0, 80086b2 <_puts_r+0x9a>
 8008650:	f04f 35ff 	mov.w	r5, #4294967295
 8008654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008656:	07da      	lsls	r2, r3, #31
 8008658:	d405      	bmi.n	8008666 <_puts_r+0x4e>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	059b      	lsls	r3, r3, #22
 800865e:	d402      	bmi.n	8008666 <_puts_r+0x4e>
 8008660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008662:	f000 f9a9 	bl	80089b8 <__retarget_lock_release_recursive>
 8008666:	4628      	mov	r0, r5
 8008668:	bd70      	pop	{r4, r5, r6, pc}
 800866a:	2b00      	cmp	r3, #0
 800866c:	da04      	bge.n	8008678 <_puts_r+0x60>
 800866e:	69a2      	ldr	r2, [r4, #24]
 8008670:	429a      	cmp	r2, r3
 8008672:	dc17      	bgt.n	80086a4 <_puts_r+0x8c>
 8008674:	290a      	cmp	r1, #10
 8008676:	d015      	beq.n	80086a4 <_puts_r+0x8c>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	6022      	str	r2, [r4, #0]
 800867e:	7019      	strb	r1, [r3, #0]
 8008680:	68a3      	ldr	r3, [r4, #8]
 8008682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008686:	3b01      	subs	r3, #1
 8008688:	60a3      	str	r3, [r4, #8]
 800868a:	2900      	cmp	r1, #0
 800868c:	d1ed      	bne.n	800866a <_puts_r+0x52>
 800868e:	2b00      	cmp	r3, #0
 8008690:	da11      	bge.n	80086b6 <_puts_r+0x9e>
 8008692:	4622      	mov	r2, r4
 8008694:	210a      	movs	r1, #10
 8008696:	4628      	mov	r0, r5
 8008698:	f000 f87f 	bl	800879a <__swbuf_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d0d7      	beq.n	8008650 <_puts_r+0x38>
 80086a0:	250a      	movs	r5, #10
 80086a2:	e7d7      	b.n	8008654 <_puts_r+0x3c>
 80086a4:	4622      	mov	r2, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	f000 f877 	bl	800879a <__swbuf_r>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1e7      	bne.n	8008680 <_puts_r+0x68>
 80086b0:	e7ce      	b.n	8008650 <_puts_r+0x38>
 80086b2:	3e01      	subs	r6, #1
 80086b4:	e7e4      	b.n	8008680 <_puts_r+0x68>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	220a      	movs	r2, #10
 80086be:	701a      	strb	r2, [r3, #0]
 80086c0:	e7ee      	b.n	80086a0 <_puts_r+0x88>
	...

080086c4 <puts>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	@ (80086d0 <puts+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f7ff bfa5 	b.w	8008618 <_puts_r>
 80086ce:	bf00      	nop
 80086d0:	20000018 	.word	0x20000018

080086d4 <siprintf>:
 80086d4:	b40e      	push	{r1, r2, r3}
 80086d6:	b500      	push	{lr}
 80086d8:	b09c      	sub	sp, #112	@ 0x70
 80086da:	ab1d      	add	r3, sp, #116	@ 0x74
 80086dc:	9002      	str	r0, [sp, #8]
 80086de:	9006      	str	r0, [sp, #24]
 80086e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80086e4:	4809      	ldr	r0, [pc, #36]	@ (800870c <siprintf+0x38>)
 80086e6:	9107      	str	r1, [sp, #28]
 80086e8:	9104      	str	r1, [sp, #16]
 80086ea:	4909      	ldr	r1, [pc, #36]	@ (8008710 <siprintf+0x3c>)
 80086ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f0:	9105      	str	r1, [sp, #20]
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	a902      	add	r1, sp, #8
 80086f8:	f000 fab4 	bl	8008c64 <_svfiprintf_r>
 80086fc:	9b02      	ldr	r3, [sp, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	b01c      	add	sp, #112	@ 0x70
 8008704:	f85d eb04 	ldr.w	lr, [sp], #4
 8008708:	b003      	add	sp, #12
 800870a:	4770      	bx	lr
 800870c:	20000018 	.word	0x20000018
 8008710:	ffff0208 	.word	0xffff0208

08008714 <__sread>:
 8008714:	b510      	push	{r4, lr}
 8008716:	460c      	mov	r4, r1
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	f000 f8fc 	bl	8008918 <_read_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	bfab      	itete	ge
 8008724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008726:	89a3      	ldrhlt	r3, [r4, #12]
 8008728:	181b      	addge	r3, r3, r0
 800872a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800872e:	bfac      	ite	ge
 8008730:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008732:	81a3      	strhlt	r3, [r4, #12]
 8008734:	bd10      	pop	{r4, pc}

08008736 <__swrite>:
 8008736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873a:	461f      	mov	r7, r3
 800873c:	898b      	ldrh	r3, [r1, #12]
 800873e:	05db      	lsls	r3, r3, #23
 8008740:	4605      	mov	r5, r0
 8008742:	460c      	mov	r4, r1
 8008744:	4616      	mov	r6, r2
 8008746:	d505      	bpl.n	8008754 <__swrite+0x1e>
 8008748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800874c:	2302      	movs	r3, #2
 800874e:	2200      	movs	r2, #0
 8008750:	f000 f8d0 	bl	80088f4 <_lseek_r>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	4632      	mov	r2, r6
 8008762:	463b      	mov	r3, r7
 8008764:	4628      	mov	r0, r5
 8008766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800876a:	f000 b8e7 	b.w	800893c <_write_r>

0800876e <__sseek>:
 800876e:	b510      	push	{r4, lr}
 8008770:	460c      	mov	r4, r1
 8008772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008776:	f000 f8bd 	bl	80088f4 <_lseek_r>
 800877a:	1c43      	adds	r3, r0, #1
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	bf15      	itete	ne
 8008780:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800878a:	81a3      	strheq	r3, [r4, #12]
 800878c:	bf18      	it	ne
 800878e:	81a3      	strhne	r3, [r4, #12]
 8008790:	bd10      	pop	{r4, pc}

08008792 <__sclose>:
 8008792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008796:	f000 b89d 	b.w	80088d4 <_close_r>

0800879a <__swbuf_r>:
 800879a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879c:	460e      	mov	r6, r1
 800879e:	4614      	mov	r4, r2
 80087a0:	4605      	mov	r5, r0
 80087a2:	b118      	cbz	r0, 80087ac <__swbuf_r+0x12>
 80087a4:	6a03      	ldr	r3, [r0, #32]
 80087a6:	b90b      	cbnz	r3, 80087ac <__swbuf_r+0x12>
 80087a8:	f7ff feee 	bl	8008588 <__sinit>
 80087ac:	69a3      	ldr	r3, [r4, #24]
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	071a      	lsls	r2, r3, #28
 80087b4:	d501      	bpl.n	80087ba <__swbuf_r+0x20>
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	b943      	cbnz	r3, 80087cc <__swbuf_r+0x32>
 80087ba:	4621      	mov	r1, r4
 80087bc:	4628      	mov	r0, r5
 80087be:	f000 f82b 	bl	8008818 <__swsetup_r>
 80087c2:	b118      	cbz	r0, 80087cc <__swbuf_r+0x32>
 80087c4:	f04f 37ff 	mov.w	r7, #4294967295
 80087c8:	4638      	mov	r0, r7
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	6922      	ldr	r2, [r4, #16]
 80087d0:	1a98      	subs	r0, r3, r2
 80087d2:	6963      	ldr	r3, [r4, #20]
 80087d4:	b2f6      	uxtb	r6, r6
 80087d6:	4283      	cmp	r3, r0
 80087d8:	4637      	mov	r7, r6
 80087da:	dc05      	bgt.n	80087e8 <__swbuf_r+0x4e>
 80087dc:	4621      	mov	r1, r4
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 fe90 	bl	8009504 <_fflush_r>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d1ed      	bne.n	80087c4 <__swbuf_r+0x2a>
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	3b01      	subs	r3, #1
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	6022      	str	r2, [r4, #0]
 80087f4:	701e      	strb	r6, [r3, #0]
 80087f6:	6962      	ldr	r2, [r4, #20]
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d004      	beq.n	8008808 <__swbuf_r+0x6e>
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	07db      	lsls	r3, r3, #31
 8008802:	d5e1      	bpl.n	80087c8 <__swbuf_r+0x2e>
 8008804:	2e0a      	cmp	r6, #10
 8008806:	d1df      	bne.n	80087c8 <__swbuf_r+0x2e>
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 fe7a 	bl	8009504 <_fflush_r>
 8008810:	2800      	cmp	r0, #0
 8008812:	d0d9      	beq.n	80087c8 <__swbuf_r+0x2e>
 8008814:	e7d6      	b.n	80087c4 <__swbuf_r+0x2a>
	...

08008818 <__swsetup_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4b29      	ldr	r3, [pc, #164]	@ (80088c0 <__swsetup_r+0xa8>)
 800881c:	4605      	mov	r5, r0
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	460c      	mov	r4, r1
 8008822:	b118      	cbz	r0, 800882c <__swsetup_r+0x14>
 8008824:	6a03      	ldr	r3, [r0, #32]
 8008826:	b90b      	cbnz	r3, 800882c <__swsetup_r+0x14>
 8008828:	f7ff feae 	bl	8008588 <__sinit>
 800882c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008830:	0719      	lsls	r1, r3, #28
 8008832:	d422      	bmi.n	800887a <__swsetup_r+0x62>
 8008834:	06da      	lsls	r2, r3, #27
 8008836:	d407      	bmi.n	8008848 <__swsetup_r+0x30>
 8008838:	2209      	movs	r2, #9
 800883a:	602a      	str	r2, [r5, #0]
 800883c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	f04f 30ff 	mov.w	r0, #4294967295
 8008846:	e033      	b.n	80088b0 <__swsetup_r+0x98>
 8008848:	0758      	lsls	r0, r3, #29
 800884a:	d512      	bpl.n	8008872 <__swsetup_r+0x5a>
 800884c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800884e:	b141      	cbz	r1, 8008862 <__swsetup_r+0x4a>
 8008850:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008854:	4299      	cmp	r1, r3
 8008856:	d002      	beq.n	800885e <__swsetup_r+0x46>
 8008858:	4628      	mov	r0, r5
 800885a:	f000 f8af 	bl	80089bc <_free_r>
 800885e:	2300      	movs	r3, #0
 8008860:	6363      	str	r3, [r4, #52]	@ 0x34
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	2300      	movs	r3, #0
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	81a3      	strh	r3, [r4, #12]
 800887a:	6923      	ldr	r3, [r4, #16]
 800887c:	b94b      	cbnz	r3, 8008892 <__swsetup_r+0x7a>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008888:	d003      	beq.n	8008892 <__swsetup_r+0x7a>
 800888a:	4621      	mov	r1, r4
 800888c:	4628      	mov	r0, r5
 800888e:	f000 fe87 	bl	80095a0 <__smakebuf_r>
 8008892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008896:	f013 0201 	ands.w	r2, r3, #1
 800889a:	d00a      	beq.n	80088b2 <__swsetup_r+0x9a>
 800889c:	2200      	movs	r2, #0
 800889e:	60a2      	str	r2, [r4, #8]
 80088a0:	6962      	ldr	r2, [r4, #20]
 80088a2:	4252      	negs	r2, r2
 80088a4:	61a2      	str	r2, [r4, #24]
 80088a6:	6922      	ldr	r2, [r4, #16]
 80088a8:	b942      	cbnz	r2, 80088bc <__swsetup_r+0xa4>
 80088aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088ae:	d1c5      	bne.n	800883c <__swsetup_r+0x24>
 80088b0:	bd38      	pop	{r3, r4, r5, pc}
 80088b2:	0799      	lsls	r1, r3, #30
 80088b4:	bf58      	it	pl
 80088b6:	6962      	ldrpl	r2, [r4, #20]
 80088b8:	60a2      	str	r2, [r4, #8]
 80088ba:	e7f4      	b.n	80088a6 <__swsetup_r+0x8e>
 80088bc:	2000      	movs	r0, #0
 80088be:	e7f7      	b.n	80088b0 <__swsetup_r+0x98>
 80088c0:	20000018 	.word	0x20000018

080088c4 <memset>:
 80088c4:	4402      	add	r2, r0
 80088c6:	4603      	mov	r3, r0
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d100      	bne.n	80088ce <memset+0xa>
 80088cc:	4770      	bx	lr
 80088ce:	f803 1b01 	strb.w	r1, [r3], #1
 80088d2:	e7f9      	b.n	80088c8 <memset+0x4>

080088d4 <_close_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d06      	ldr	r5, [pc, #24]	@ (80088f0 <_close_r+0x1c>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	f7f9 f9db 	bl	8001c9a <_close>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_close_r+0x1a>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_close_r+0x1a>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20000548 	.word	0x20000548

080088f4 <_lseek_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	@ (8008914 <_lseek_r+0x20>)
 80088f8:	4604      	mov	r4, r0
 80088fa:	4608      	mov	r0, r1
 80088fc:	4611      	mov	r1, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f7f9 f9f0 	bl	8001ce8 <_lseek>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_lseek_r+0x1e>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_lseek_r+0x1e>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000548 	.word	0x20000548

08008918 <_read_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d07      	ldr	r5, [pc, #28]	@ (8008938 <_read_r+0x20>)
 800891c:	4604      	mov	r4, r0
 800891e:	4608      	mov	r0, r1
 8008920:	4611      	mov	r1, r2
 8008922:	2200      	movs	r2, #0
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7f9 f97e 	bl	8001c28 <_read>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_read_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_read_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000548 	.word	0x20000548

0800893c <_write_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d07      	ldr	r5, [pc, #28]	@ (800895c <_write_r+0x20>)
 8008940:	4604      	mov	r4, r0
 8008942:	4608      	mov	r0, r1
 8008944:	4611      	mov	r1, r2
 8008946:	2200      	movs	r2, #0
 8008948:	602a      	str	r2, [r5, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	f7f9 f989 	bl	8001c62 <_write>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_write_r+0x1e>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_write_r+0x1e>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000548 	.word	0x20000548

08008960 <__errno>:
 8008960:	4b01      	ldr	r3, [pc, #4]	@ (8008968 <__errno+0x8>)
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20000018 	.word	0x20000018

0800896c <__libc_init_array>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	4d0d      	ldr	r5, [pc, #52]	@ (80089a4 <__libc_init_array+0x38>)
 8008970:	4c0d      	ldr	r4, [pc, #52]	@ (80089a8 <__libc_init_array+0x3c>)
 8008972:	1b64      	subs	r4, r4, r5
 8008974:	10a4      	asrs	r4, r4, #2
 8008976:	2600      	movs	r6, #0
 8008978:	42a6      	cmp	r6, r4
 800897a:	d109      	bne.n	8008990 <__libc_init_array+0x24>
 800897c:	4d0b      	ldr	r5, [pc, #44]	@ (80089ac <__libc_init_array+0x40>)
 800897e:	4c0c      	ldr	r4, [pc, #48]	@ (80089b0 <__libc_init_array+0x44>)
 8008980:	f000 feda 	bl	8009738 <_init>
 8008984:	1b64      	subs	r4, r4, r5
 8008986:	10a4      	asrs	r4, r4, #2
 8008988:	2600      	movs	r6, #0
 800898a:	42a6      	cmp	r6, r4
 800898c:	d105      	bne.n	800899a <__libc_init_array+0x2e>
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	f855 3b04 	ldr.w	r3, [r5], #4
 8008994:	4798      	blx	r3
 8008996:	3601      	adds	r6, #1
 8008998:	e7ee      	b.n	8008978 <__libc_init_array+0xc>
 800899a:	f855 3b04 	ldr.w	r3, [r5], #4
 800899e:	4798      	blx	r3
 80089a0:	3601      	adds	r6, #1
 80089a2:	e7f2      	b.n	800898a <__libc_init_array+0x1e>
 80089a4:	08009948 	.word	0x08009948
 80089a8:	08009948 	.word	0x08009948
 80089ac:	08009948 	.word	0x08009948
 80089b0:	0800994c 	.word	0x0800994c

080089b4 <__retarget_lock_init_recursive>:
 80089b4:	4770      	bx	lr

080089b6 <__retarget_lock_acquire_recursive>:
 80089b6:	4770      	bx	lr

080089b8 <__retarget_lock_release_recursive>:
 80089b8:	4770      	bx	lr
	...

080089bc <_free_r>:
 80089bc:	b538      	push	{r3, r4, r5, lr}
 80089be:	4605      	mov	r5, r0
 80089c0:	2900      	cmp	r1, #0
 80089c2:	d041      	beq.n	8008a48 <_free_r+0x8c>
 80089c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c8:	1f0c      	subs	r4, r1, #4
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bfb8      	it	lt
 80089ce:	18e4      	addlt	r4, r4, r3
 80089d0:	f000 f8e0 	bl	8008b94 <__malloc_lock>
 80089d4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a4c <_free_r+0x90>)
 80089d6:	6813      	ldr	r3, [r2, #0]
 80089d8:	b933      	cbnz	r3, 80089e8 <_free_r+0x2c>
 80089da:	6063      	str	r3, [r4, #4]
 80089dc:	6014      	str	r4, [r2, #0]
 80089de:	4628      	mov	r0, r5
 80089e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e4:	f000 b8dc 	b.w	8008ba0 <__malloc_unlock>
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d908      	bls.n	80089fe <_free_r+0x42>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	1821      	adds	r1, r4, r0
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf01      	itttt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	1809      	addeq	r1, r1, r0
 80089fa:	6021      	streq	r1, [r4, #0]
 80089fc:	e7ed      	b.n	80089da <_free_r+0x1e>
 80089fe:	461a      	mov	r2, r3
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	b10b      	cbz	r3, 8008a08 <_free_r+0x4c>
 8008a04:	42a3      	cmp	r3, r4
 8008a06:	d9fa      	bls.n	80089fe <_free_r+0x42>
 8008a08:	6811      	ldr	r1, [r2, #0]
 8008a0a:	1850      	adds	r0, r2, r1
 8008a0c:	42a0      	cmp	r0, r4
 8008a0e:	d10b      	bne.n	8008a28 <_free_r+0x6c>
 8008a10:	6820      	ldr	r0, [r4, #0]
 8008a12:	4401      	add	r1, r0
 8008a14:	1850      	adds	r0, r2, r1
 8008a16:	4283      	cmp	r3, r0
 8008a18:	6011      	str	r1, [r2, #0]
 8008a1a:	d1e0      	bne.n	80089de <_free_r+0x22>
 8008a1c:	6818      	ldr	r0, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	6053      	str	r3, [r2, #4]
 8008a22:	4408      	add	r0, r1
 8008a24:	6010      	str	r0, [r2, #0]
 8008a26:	e7da      	b.n	80089de <_free_r+0x22>
 8008a28:	d902      	bls.n	8008a30 <_free_r+0x74>
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	e7d6      	b.n	80089de <_free_r+0x22>
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	1821      	adds	r1, r4, r0
 8008a34:	428b      	cmp	r3, r1
 8008a36:	bf04      	itt	eq
 8008a38:	6819      	ldreq	r1, [r3, #0]
 8008a3a:	685b      	ldreq	r3, [r3, #4]
 8008a3c:	6063      	str	r3, [r4, #4]
 8008a3e:	bf04      	itt	eq
 8008a40:	1809      	addeq	r1, r1, r0
 8008a42:	6021      	streq	r1, [r4, #0]
 8008a44:	6054      	str	r4, [r2, #4]
 8008a46:	e7ca      	b.n	80089de <_free_r+0x22>
 8008a48:	bd38      	pop	{r3, r4, r5, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000554 	.word	0x20000554

08008a50 <sbrk_aligned>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	4e0f      	ldr	r6, [pc, #60]	@ (8008a90 <sbrk_aligned+0x40>)
 8008a54:	460c      	mov	r4, r1
 8008a56:	6831      	ldr	r1, [r6, #0]
 8008a58:	4605      	mov	r5, r0
 8008a5a:	b911      	cbnz	r1, 8008a62 <sbrk_aligned+0x12>
 8008a5c:	f000 fe18 	bl	8009690 <_sbrk_r>
 8008a60:	6030      	str	r0, [r6, #0]
 8008a62:	4621      	mov	r1, r4
 8008a64:	4628      	mov	r0, r5
 8008a66:	f000 fe13 	bl	8009690 <_sbrk_r>
 8008a6a:	1c43      	adds	r3, r0, #1
 8008a6c:	d103      	bne.n	8008a76 <sbrk_aligned+0x26>
 8008a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a72:	4620      	mov	r0, r4
 8008a74:	bd70      	pop	{r4, r5, r6, pc}
 8008a76:	1cc4      	adds	r4, r0, #3
 8008a78:	f024 0403 	bic.w	r4, r4, #3
 8008a7c:	42a0      	cmp	r0, r4
 8008a7e:	d0f8      	beq.n	8008a72 <sbrk_aligned+0x22>
 8008a80:	1a21      	subs	r1, r4, r0
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 fe04 	bl	8009690 <_sbrk_r>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d1f2      	bne.n	8008a72 <sbrk_aligned+0x22>
 8008a8c:	e7ef      	b.n	8008a6e <sbrk_aligned+0x1e>
 8008a8e:	bf00      	nop
 8008a90:	20000550 	.word	0x20000550

08008a94 <_malloc_r>:
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a98:	1ccd      	adds	r5, r1, #3
 8008a9a:	f025 0503 	bic.w	r5, r5, #3
 8008a9e:	3508      	adds	r5, #8
 8008aa0:	2d0c      	cmp	r5, #12
 8008aa2:	bf38      	it	cc
 8008aa4:	250c      	movcc	r5, #12
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	db01      	blt.n	8008ab0 <_malloc_r+0x1c>
 8008aac:	42a9      	cmp	r1, r5
 8008aae:	d904      	bls.n	8008aba <_malloc_r+0x26>
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b90 <_malloc_r+0xfc>
 8008abe:	f000 f869 	bl	8008b94 <__malloc_lock>
 8008ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	bb44      	cbnz	r4, 8008b1c <_malloc_r+0x88>
 8008aca:	4629      	mov	r1, r5
 8008acc:	4630      	mov	r0, r6
 8008ace:	f7ff ffbf 	bl	8008a50 <sbrk_aligned>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	d158      	bne.n	8008b8a <_malloc_r+0xf6>
 8008ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8008adc:	4627      	mov	r7, r4
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d143      	bne.n	8008b6a <_malloc_r+0xd6>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	d04b      	beq.n	8008b7e <_malloc_r+0xea>
 8008ae6:	6823      	ldr	r3, [r4, #0]
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4630      	mov	r0, r6
 8008aec:	eb04 0903 	add.w	r9, r4, r3
 8008af0:	f000 fdce 	bl	8009690 <_sbrk_r>
 8008af4:	4581      	cmp	r9, r0
 8008af6:	d142      	bne.n	8008b7e <_malloc_r+0xea>
 8008af8:	6821      	ldr	r1, [r4, #0]
 8008afa:	1a6d      	subs	r5, r5, r1
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffa6 	bl	8008a50 <sbrk_aligned>
 8008b04:	3001      	adds	r0, #1
 8008b06:	d03a      	beq.n	8008b7e <_malloc_r+0xea>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	442b      	add	r3, r5
 8008b0c:	6023      	str	r3, [r4, #0]
 8008b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b12:	685a      	ldr	r2, [r3, #4]
 8008b14:	bb62      	cbnz	r2, 8008b70 <_malloc_r+0xdc>
 8008b16:	f8c8 7000 	str.w	r7, [r8]
 8008b1a:	e00f      	b.n	8008b3c <_malloc_r+0xa8>
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	1b52      	subs	r2, r2, r5
 8008b20:	d420      	bmi.n	8008b64 <_malloc_r+0xd0>
 8008b22:	2a0b      	cmp	r2, #11
 8008b24:	d917      	bls.n	8008b56 <_malloc_r+0xc2>
 8008b26:	1961      	adds	r1, r4, r5
 8008b28:	42a3      	cmp	r3, r4
 8008b2a:	6025      	str	r5, [r4, #0]
 8008b2c:	bf18      	it	ne
 8008b2e:	6059      	strne	r1, [r3, #4]
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	bf08      	it	eq
 8008b34:	f8c8 1000 	streq.w	r1, [r8]
 8008b38:	5162      	str	r2, [r4, r5]
 8008b3a:	604b      	str	r3, [r1, #4]
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f000 f82f 	bl	8008ba0 <__malloc_unlock>
 8008b42:	f104 000b 	add.w	r0, r4, #11
 8008b46:	1d23      	adds	r3, r4, #4
 8008b48:	f020 0007 	bic.w	r0, r0, #7
 8008b4c:	1ac2      	subs	r2, r0, r3
 8008b4e:	bf1c      	itt	ne
 8008b50:	1a1b      	subne	r3, r3, r0
 8008b52:	50a3      	strne	r3, [r4, r2]
 8008b54:	e7af      	b.n	8008ab6 <_malloc_r+0x22>
 8008b56:	6862      	ldr	r2, [r4, #4]
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	bf0c      	ite	eq
 8008b5c:	f8c8 2000 	streq.w	r2, [r8]
 8008b60:	605a      	strne	r2, [r3, #4]
 8008b62:	e7eb      	b.n	8008b3c <_malloc_r+0xa8>
 8008b64:	4623      	mov	r3, r4
 8008b66:	6864      	ldr	r4, [r4, #4]
 8008b68:	e7ae      	b.n	8008ac8 <_malloc_r+0x34>
 8008b6a:	463c      	mov	r4, r7
 8008b6c:	687f      	ldr	r7, [r7, #4]
 8008b6e:	e7b6      	b.n	8008ade <_malloc_r+0x4a>
 8008b70:	461a      	mov	r2, r3
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	42a3      	cmp	r3, r4
 8008b76:	d1fb      	bne.n	8008b70 <_malloc_r+0xdc>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	6053      	str	r3, [r2, #4]
 8008b7c:	e7de      	b.n	8008b3c <_malloc_r+0xa8>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6033      	str	r3, [r6, #0]
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 f80c 	bl	8008ba0 <__malloc_unlock>
 8008b88:	e794      	b.n	8008ab4 <_malloc_r+0x20>
 8008b8a:	6005      	str	r5, [r0, #0]
 8008b8c:	e7d6      	b.n	8008b3c <_malloc_r+0xa8>
 8008b8e:	bf00      	nop
 8008b90:	20000554 	.word	0x20000554

08008b94 <__malloc_lock>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__malloc_lock+0x8>)
 8008b96:	f7ff bf0e 	b.w	80089b6 <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	2000054c 	.word	0x2000054c

08008ba0 <__malloc_unlock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_unlock+0x8>)
 8008ba2:	f7ff bf09 	b.w	80089b8 <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	2000054c 	.word	0x2000054c

08008bac <__ssputs_r>:
 8008bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	688e      	ldr	r6, [r1, #8]
 8008bb2:	461f      	mov	r7, r3
 8008bb4:	42be      	cmp	r6, r7
 8008bb6:	680b      	ldr	r3, [r1, #0]
 8008bb8:	4682      	mov	sl, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	4690      	mov	r8, r2
 8008bbe:	d82d      	bhi.n	8008c1c <__ssputs_r+0x70>
 8008bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bc8:	d026      	beq.n	8008c18 <__ssputs_r+0x6c>
 8008bca:	6965      	ldr	r5, [r4, #20]
 8008bcc:	6909      	ldr	r1, [r1, #16]
 8008bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bd2:	eba3 0901 	sub.w	r9, r3, r1
 8008bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bda:	1c7b      	adds	r3, r7, #1
 8008bdc:	444b      	add	r3, r9
 8008bde:	106d      	asrs	r5, r5, #1
 8008be0:	429d      	cmp	r5, r3
 8008be2:	bf38      	it	cc
 8008be4:	461d      	movcc	r5, r3
 8008be6:	0553      	lsls	r3, r2, #21
 8008be8:	d527      	bpl.n	8008c3a <__ssputs_r+0x8e>
 8008bea:	4629      	mov	r1, r5
 8008bec:	f7ff ff52 	bl	8008a94 <_malloc_r>
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	b360      	cbz	r0, 8008c4e <__ssputs_r+0xa2>
 8008bf4:	6921      	ldr	r1, [r4, #16]
 8008bf6:	464a      	mov	r2, r9
 8008bf8:	f000 fd5a 	bl	80096b0 <memcpy>
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	81a3      	strh	r3, [r4, #12]
 8008c08:	6126      	str	r6, [r4, #16]
 8008c0a:	6165      	str	r5, [r4, #20]
 8008c0c:	444e      	add	r6, r9
 8008c0e:	eba5 0509 	sub.w	r5, r5, r9
 8008c12:	6026      	str	r6, [r4, #0]
 8008c14:	60a5      	str	r5, [r4, #8]
 8008c16:	463e      	mov	r6, r7
 8008c18:	42be      	cmp	r6, r7
 8008c1a:	d900      	bls.n	8008c1e <__ssputs_r+0x72>
 8008c1c:	463e      	mov	r6, r7
 8008c1e:	6820      	ldr	r0, [r4, #0]
 8008c20:	4632      	mov	r2, r6
 8008c22:	4641      	mov	r1, r8
 8008c24:	f000 fcf8 	bl	8009618 <memmove>
 8008c28:	68a3      	ldr	r3, [r4, #8]
 8008c2a:	1b9b      	subs	r3, r3, r6
 8008c2c:	60a3      	str	r3, [r4, #8]
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	4433      	add	r3, r6
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	f000 fd46 	bl	80096cc <_realloc_r>
 8008c40:	4606      	mov	r6, r0
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d1e0      	bne.n	8008c08 <__ssputs_r+0x5c>
 8008c46:	6921      	ldr	r1, [r4, #16]
 8008c48:	4650      	mov	r0, sl
 8008c4a:	f7ff feb7 	bl	80089bc <_free_r>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	f8ca 3000 	str.w	r3, [sl]
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c5a:	81a3      	strh	r3, [r4, #12]
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e7e9      	b.n	8008c36 <__ssputs_r+0x8a>
	...

08008c64 <_svfiprintf_r>:
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	4698      	mov	r8, r3
 8008c6a:	898b      	ldrh	r3, [r1, #12]
 8008c6c:	061b      	lsls	r3, r3, #24
 8008c6e:	b09d      	sub	sp, #116	@ 0x74
 8008c70:	4607      	mov	r7, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	4614      	mov	r4, r2
 8008c76:	d510      	bpl.n	8008c9a <_svfiprintf_r+0x36>
 8008c78:	690b      	ldr	r3, [r1, #16]
 8008c7a:	b973      	cbnz	r3, 8008c9a <_svfiprintf_r+0x36>
 8008c7c:	2140      	movs	r1, #64	@ 0x40
 8008c7e:	f7ff ff09 	bl	8008a94 <_malloc_r>
 8008c82:	6028      	str	r0, [r5, #0]
 8008c84:	6128      	str	r0, [r5, #16]
 8008c86:	b930      	cbnz	r0, 8008c96 <_svfiprintf_r+0x32>
 8008c88:	230c      	movs	r3, #12
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b01d      	add	sp, #116	@ 0x74
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	2340      	movs	r3, #64	@ 0x40
 8008c98:	616b      	str	r3, [r5, #20]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9e:	2320      	movs	r3, #32
 8008ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ca8:	2330      	movs	r3, #48	@ 0x30
 8008caa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e48 <_svfiprintf_r+0x1e4>
 8008cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cb2:	f04f 0901 	mov.w	r9, #1
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	469a      	mov	sl, r3
 8008cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cbe:	b10a      	cbz	r2, 8008cc4 <_svfiprintf_r+0x60>
 8008cc0:	2a25      	cmp	r2, #37	@ 0x25
 8008cc2:	d1f9      	bne.n	8008cb8 <_svfiprintf_r+0x54>
 8008cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8008cc8:	d00b      	beq.n	8008ce2 <_svfiprintf_r+0x7e>
 8008cca:	465b      	mov	r3, fp
 8008ccc:	4622      	mov	r2, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	f7ff ff6b 	bl	8008bac <__ssputs_r>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	f000 80a7 	beq.w	8008e2a <_svfiprintf_r+0x1c6>
 8008cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cde:	445a      	add	r2, fp
 8008ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 809f 	beq.w	8008e2a <_svfiprintf_r+0x1c6>
 8008cec:	2300      	movs	r3, #0
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cf6:	f10a 0a01 	add.w	sl, sl, #1
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	9307      	str	r3, [sp, #28]
 8008cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d04:	4654      	mov	r4, sl
 8008d06:	2205      	movs	r2, #5
 8008d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0c:	484e      	ldr	r0, [pc, #312]	@ (8008e48 <_svfiprintf_r+0x1e4>)
 8008d0e:	f7f7 fa67 	bl	80001e0 <memchr>
 8008d12:	9a04      	ldr	r2, [sp, #16]
 8008d14:	b9d8      	cbnz	r0, 8008d4e <_svfiprintf_r+0xea>
 8008d16:	06d0      	lsls	r0, r2, #27
 8008d18:	bf44      	itt	mi
 8008d1a:	2320      	movmi	r3, #32
 8008d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d20:	0711      	lsls	r1, r2, #28
 8008d22:	bf44      	itt	mi
 8008d24:	232b      	movmi	r3, #43	@ 0x2b
 8008d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d30:	d015      	beq.n	8008d5e <_svfiprintf_r+0xfa>
 8008d32:	9a07      	ldr	r2, [sp, #28]
 8008d34:	4654      	mov	r4, sl
 8008d36:	2000      	movs	r0, #0
 8008d38:	f04f 0c0a 	mov.w	ip, #10
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d42:	3b30      	subs	r3, #48	@ 0x30
 8008d44:	2b09      	cmp	r3, #9
 8008d46:	d94b      	bls.n	8008de0 <_svfiprintf_r+0x17c>
 8008d48:	b1b0      	cbz	r0, 8008d78 <_svfiprintf_r+0x114>
 8008d4a:	9207      	str	r2, [sp, #28]
 8008d4c:	e014      	b.n	8008d78 <_svfiprintf_r+0x114>
 8008d4e:	eba0 0308 	sub.w	r3, r0, r8
 8008d52:	fa09 f303 	lsl.w	r3, r9, r3
 8008d56:	4313      	orrs	r3, r2
 8008d58:	9304      	str	r3, [sp, #16]
 8008d5a:	46a2      	mov	sl, r4
 8008d5c:	e7d2      	b.n	8008d04 <_svfiprintf_r+0xa0>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	9103      	str	r1, [sp, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfbb      	ittet	lt
 8008d6a:	425b      	neglt	r3, r3
 8008d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d70:	9307      	strge	r3, [sp, #28]
 8008d72:	9307      	strlt	r3, [sp, #28]
 8008d74:	bfb8      	it	lt
 8008d76:	9204      	strlt	r2, [sp, #16]
 8008d78:	7823      	ldrb	r3, [r4, #0]
 8008d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d7c:	d10a      	bne.n	8008d94 <_svfiprintf_r+0x130>
 8008d7e:	7863      	ldrb	r3, [r4, #1]
 8008d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d82:	d132      	bne.n	8008dea <_svfiprintf_r+0x186>
 8008d84:	9b03      	ldr	r3, [sp, #12]
 8008d86:	1d1a      	adds	r2, r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	9203      	str	r2, [sp, #12]
 8008d8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d90:	3402      	adds	r4, #2
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e58 <_svfiprintf_r+0x1f4>
 8008d98:	7821      	ldrb	r1, [r4, #0]
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f7f7 fa1f 	bl	80001e0 <memchr>
 8008da2:	b138      	cbz	r0, 8008db4 <_svfiprintf_r+0x150>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	eba0 000a 	sub.w	r0, r0, sl
 8008daa:	2240      	movs	r2, #64	@ 0x40
 8008dac:	4082      	lsls	r2, r0
 8008dae:	4313      	orrs	r3, r2
 8008db0:	3401      	adds	r4, #1
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db8:	4824      	ldr	r0, [pc, #144]	@ (8008e4c <_svfiprintf_r+0x1e8>)
 8008dba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dbe:	2206      	movs	r2, #6
 8008dc0:	f7f7 fa0e 	bl	80001e0 <memchr>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d036      	beq.n	8008e36 <_svfiprintf_r+0x1d2>
 8008dc8:	4b21      	ldr	r3, [pc, #132]	@ (8008e50 <_svfiprintf_r+0x1ec>)
 8008dca:	bb1b      	cbnz	r3, 8008e14 <_svfiprintf_r+0x1b0>
 8008dcc:	9b03      	ldr	r3, [sp, #12]
 8008dce:	3307      	adds	r3, #7
 8008dd0:	f023 0307 	bic.w	r3, r3, #7
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dda:	4433      	add	r3, r6
 8008ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dde:	e76a      	b.n	8008cb6 <_svfiprintf_r+0x52>
 8008de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008de4:	460c      	mov	r4, r1
 8008de6:	2001      	movs	r0, #1
 8008de8:	e7a8      	b.n	8008d3c <_svfiprintf_r+0xd8>
 8008dea:	2300      	movs	r3, #0
 8008dec:	3401      	adds	r4, #1
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	4619      	mov	r1, r3
 8008df2:	f04f 0c0a 	mov.w	ip, #10
 8008df6:	4620      	mov	r0, r4
 8008df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dfc:	3a30      	subs	r2, #48	@ 0x30
 8008dfe:	2a09      	cmp	r2, #9
 8008e00:	d903      	bls.n	8008e0a <_svfiprintf_r+0x1a6>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0c6      	beq.n	8008d94 <_svfiprintf_r+0x130>
 8008e06:	9105      	str	r1, [sp, #20]
 8008e08:	e7c4      	b.n	8008d94 <_svfiprintf_r+0x130>
 8008e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e0e:	4604      	mov	r4, r0
 8008e10:	2301      	movs	r3, #1
 8008e12:	e7f0      	b.n	8008df6 <_svfiprintf_r+0x192>
 8008e14:	ab03      	add	r3, sp, #12
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	462a      	mov	r2, r5
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8008e54 <_svfiprintf_r+0x1f0>)
 8008e1c:	a904      	add	r1, sp, #16
 8008e1e:	4638      	mov	r0, r7
 8008e20:	f3af 8000 	nop.w
 8008e24:	1c42      	adds	r2, r0, #1
 8008e26:	4606      	mov	r6, r0
 8008e28:	d1d6      	bne.n	8008dd8 <_svfiprintf_r+0x174>
 8008e2a:	89ab      	ldrh	r3, [r5, #12]
 8008e2c:	065b      	lsls	r3, r3, #25
 8008e2e:	f53f af2d 	bmi.w	8008c8c <_svfiprintf_r+0x28>
 8008e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e34:	e72c      	b.n	8008c90 <_svfiprintf_r+0x2c>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b05      	ldr	r3, [pc, #20]	@ (8008e54 <_svfiprintf_r+0x1f0>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4638      	mov	r0, r7
 8008e42:	f000 f9bb 	bl	80091bc <_printf_i>
 8008e46:	e7ed      	b.n	8008e24 <_svfiprintf_r+0x1c0>
 8008e48:	0800990c 	.word	0x0800990c
 8008e4c:	08009916 	.word	0x08009916
 8008e50:	00000000 	.word	0x00000000
 8008e54:	08008bad 	.word	0x08008bad
 8008e58:	08009912 	.word	0x08009912

08008e5c <__sfputc_r>:
 8008e5c:	6893      	ldr	r3, [r2, #8]
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	b410      	push	{r4}
 8008e64:	6093      	str	r3, [r2, #8]
 8008e66:	da08      	bge.n	8008e7a <__sfputc_r+0x1e>
 8008e68:	6994      	ldr	r4, [r2, #24]
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	db01      	blt.n	8008e72 <__sfputc_r+0x16>
 8008e6e:	290a      	cmp	r1, #10
 8008e70:	d103      	bne.n	8008e7a <__sfputc_r+0x1e>
 8008e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e76:	f7ff bc90 	b.w	800879a <__swbuf_r>
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	1c58      	adds	r0, r3, #1
 8008e7e:	6010      	str	r0, [r2, #0]
 8008e80:	7019      	strb	r1, [r3, #0]
 8008e82:	4608      	mov	r0, r1
 8008e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <__sfputs_r>:
 8008e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	18d5      	adds	r5, r2, r3
 8008e94:	42ac      	cmp	r4, r5
 8008e96:	d101      	bne.n	8008e9c <__sfputs_r+0x12>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e007      	b.n	8008eac <__sfputs_r+0x22>
 8008e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea0:	463a      	mov	r2, r7
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f7ff ffda 	bl	8008e5c <__sfputc_r>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d1f3      	bne.n	8008e94 <__sfputs_r+0xa>
 8008eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008eb0 <_vfiprintf_r>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	b09d      	sub	sp, #116	@ 0x74
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4698      	mov	r8, r3
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	b118      	cbz	r0, 8008ec8 <_vfiprintf_r+0x18>
 8008ec0:	6a03      	ldr	r3, [r0, #32]
 8008ec2:	b90b      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x18>
 8008ec4:	f7ff fb60 	bl	8008588 <__sinit>
 8008ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d405      	bmi.n	8008eda <_vfiprintf_r+0x2a>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	059a      	lsls	r2, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_vfiprintf_r+0x2a>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ed6:	f7ff fd6e 	bl	80089b6 <__retarget_lock_acquire_recursive>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	071b      	lsls	r3, r3, #28
 8008ede:	d501      	bpl.n	8008ee4 <_vfiprintf_r+0x34>
 8008ee0:	692b      	ldr	r3, [r5, #16]
 8008ee2:	b99b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x5c>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f7ff fc96 	bl	8008818 <__swsetup_r>
 8008eec:	b170      	cbz	r0, 8008f0c <_vfiprintf_r+0x5c>
 8008eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ef0:	07dc      	lsls	r4, r3, #31
 8008ef2:	d504      	bpl.n	8008efe <_vfiprintf_r+0x4e>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	b01d      	add	sp, #116	@ 0x74
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4f7      	bmi.n	8008ef4 <_vfiprintf_r+0x44>
 8008f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f06:	f7ff fd57 	bl	80089b8 <__retarget_lock_release_recursive>
 8008f0a:	e7f3      	b.n	8008ef4 <_vfiprintf_r+0x44>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1a:	2330      	movs	r3, #48	@ 0x30
 8008f1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80090cc <_vfiprintf_r+0x21c>
 8008f20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f24:	f04f 0901 	mov.w	r9, #1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0x86>
 8008f32:	2a25      	cmp	r2, #37	@ 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x7a>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xa4>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ffa1 	bl	8008e8a <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80a7 	beq.w	800909c <_vfiprintf_r+0x1ec>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 809f 	beq.w	800909c <_vfiprintf_r+0x1ec>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4853      	ldr	r0, [pc, #332]	@ (80090cc <_vfiprintf_r+0x21c>)
 8008f80:	f7f7 f92e 	bl	80001e0 <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x110>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	@ 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x120>
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f04f 0c0a 	mov.w	ip, #10
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	@ 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94b      	bls.n	8009052 <_vfiprintf_r+0x1a2>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x13a>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x13a>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	46a2      	mov	sl, r4
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xc6>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fee:	d10a      	bne.n	8009006 <_vfiprintf_r+0x156>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ff4:	d132      	bne.n	800905c <_vfiprintf_r+0x1ac>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9203      	str	r2, [sp, #12]
 8008ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009002:	3402      	adds	r4, #2
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090dc <_vfiprintf_r+0x22c>
 800900a:	7821      	ldrb	r1, [r4, #0]
 800900c:	2203      	movs	r2, #3
 800900e:	4650      	mov	r0, sl
 8009010:	f7f7 f8e6 	bl	80001e0 <memchr>
 8009014:	b138      	cbz	r0, 8009026 <_vfiprintf_r+0x176>
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	eba0 000a 	sub.w	r0, r0, sl
 800901c:	2240      	movs	r2, #64	@ 0x40
 800901e:	4082      	lsls	r2, r0
 8009020:	4313      	orrs	r3, r2
 8009022:	3401      	adds	r4, #1
 8009024:	9304      	str	r3, [sp, #16]
 8009026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902a:	4829      	ldr	r0, [pc, #164]	@ (80090d0 <_vfiprintf_r+0x220>)
 800902c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009030:	2206      	movs	r2, #6
 8009032:	f7f7 f8d5 	bl	80001e0 <memchr>
 8009036:	2800      	cmp	r0, #0
 8009038:	d03f      	beq.n	80090ba <_vfiprintf_r+0x20a>
 800903a:	4b26      	ldr	r3, [pc, #152]	@ (80090d4 <_vfiprintf_r+0x224>)
 800903c:	bb1b      	cbnz	r3, 8009086 <_vfiprintf_r+0x1d6>
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	3307      	adds	r3, #7
 8009042:	f023 0307 	bic.w	r3, r3, #7
 8009046:	3308      	adds	r3, #8
 8009048:	9303      	str	r3, [sp, #12]
 800904a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800904c:	443b      	add	r3, r7
 800904e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009050:	e76a      	b.n	8008f28 <_vfiprintf_r+0x78>
 8009052:	fb0c 3202 	mla	r2, ip, r2, r3
 8009056:	460c      	mov	r4, r1
 8009058:	2001      	movs	r0, #1
 800905a:	e7a8      	b.n	8008fae <_vfiprintf_r+0xfe>
 800905c:	2300      	movs	r3, #0
 800905e:	3401      	adds	r4, #1
 8009060:	9305      	str	r3, [sp, #20]
 8009062:	4619      	mov	r1, r3
 8009064:	f04f 0c0a 	mov.w	ip, #10
 8009068:	4620      	mov	r0, r4
 800906a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800906e:	3a30      	subs	r2, #48	@ 0x30
 8009070:	2a09      	cmp	r2, #9
 8009072:	d903      	bls.n	800907c <_vfiprintf_r+0x1cc>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0c6      	beq.n	8009006 <_vfiprintf_r+0x156>
 8009078:	9105      	str	r1, [sp, #20]
 800907a:	e7c4      	b.n	8009006 <_vfiprintf_r+0x156>
 800907c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009080:	4604      	mov	r4, r0
 8009082:	2301      	movs	r3, #1
 8009084:	e7f0      	b.n	8009068 <_vfiprintf_r+0x1b8>
 8009086:	ab03      	add	r3, sp, #12
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	462a      	mov	r2, r5
 800908c:	4b12      	ldr	r3, [pc, #72]	@ (80090d8 <_vfiprintf_r+0x228>)
 800908e:	a904      	add	r1, sp, #16
 8009090:	4630      	mov	r0, r6
 8009092:	f3af 8000 	nop.w
 8009096:	4607      	mov	r7, r0
 8009098:	1c78      	adds	r0, r7, #1
 800909a:	d1d6      	bne.n	800904a <_vfiprintf_r+0x19a>
 800909c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800909e:	07d9      	lsls	r1, r3, #31
 80090a0:	d405      	bmi.n	80090ae <_vfiprintf_r+0x1fe>
 80090a2:	89ab      	ldrh	r3, [r5, #12]
 80090a4:	059a      	lsls	r2, r3, #22
 80090a6:	d402      	bmi.n	80090ae <_vfiprintf_r+0x1fe>
 80090a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090aa:	f7ff fc85 	bl	80089b8 <__retarget_lock_release_recursive>
 80090ae:	89ab      	ldrh	r3, [r5, #12]
 80090b0:	065b      	lsls	r3, r3, #25
 80090b2:	f53f af1f 	bmi.w	8008ef4 <_vfiprintf_r+0x44>
 80090b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090b8:	e71e      	b.n	8008ef8 <_vfiprintf_r+0x48>
 80090ba:	ab03      	add	r3, sp, #12
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	462a      	mov	r2, r5
 80090c0:	4b05      	ldr	r3, [pc, #20]	@ (80090d8 <_vfiprintf_r+0x228>)
 80090c2:	a904      	add	r1, sp, #16
 80090c4:	4630      	mov	r0, r6
 80090c6:	f000 f879 	bl	80091bc <_printf_i>
 80090ca:	e7e4      	b.n	8009096 <_vfiprintf_r+0x1e6>
 80090cc:	0800990c 	.word	0x0800990c
 80090d0:	08009916 	.word	0x08009916
 80090d4:	00000000 	.word	0x00000000
 80090d8:	08008e8b 	.word	0x08008e8b
 80090dc:	08009912 	.word	0x08009912

080090e0 <_printf_common>:
 80090e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e4:	4616      	mov	r6, r2
 80090e6:	4698      	mov	r8, r3
 80090e8:	688a      	ldr	r2, [r1, #8]
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090f0:	4293      	cmp	r3, r2
 80090f2:	bfb8      	it	lt
 80090f4:	4613      	movlt	r3, r2
 80090f6:	6033      	str	r3, [r6, #0]
 80090f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090fc:	4607      	mov	r7, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	b10a      	cbz	r2, 8009106 <_printf_common+0x26>
 8009102:	3301      	adds	r3, #1
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	0699      	lsls	r1, r3, #26
 800910a:	bf42      	ittt	mi
 800910c:	6833      	ldrmi	r3, [r6, #0]
 800910e:	3302      	addmi	r3, #2
 8009110:	6033      	strmi	r3, [r6, #0]
 8009112:	6825      	ldr	r5, [r4, #0]
 8009114:	f015 0506 	ands.w	r5, r5, #6
 8009118:	d106      	bne.n	8009128 <_printf_common+0x48>
 800911a:	f104 0a19 	add.w	sl, r4, #25
 800911e:	68e3      	ldr	r3, [r4, #12]
 8009120:	6832      	ldr	r2, [r6, #0]
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	42ab      	cmp	r3, r5
 8009126:	dc26      	bgt.n	8009176 <_printf_common+0x96>
 8009128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800912c:	6822      	ldr	r2, [r4, #0]
 800912e:	3b00      	subs	r3, #0
 8009130:	bf18      	it	ne
 8009132:	2301      	movne	r3, #1
 8009134:	0692      	lsls	r2, r2, #26
 8009136:	d42b      	bmi.n	8009190 <_printf_common+0xb0>
 8009138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800913c:	4641      	mov	r1, r8
 800913e:	4638      	mov	r0, r7
 8009140:	47c8      	blx	r9
 8009142:	3001      	adds	r0, #1
 8009144:	d01e      	beq.n	8009184 <_printf_common+0xa4>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6922      	ldr	r2, [r4, #16]
 800914a:	f003 0306 	and.w	r3, r3, #6
 800914e:	2b04      	cmp	r3, #4
 8009150:	bf02      	ittt	eq
 8009152:	68e5      	ldreq	r5, [r4, #12]
 8009154:	6833      	ldreq	r3, [r6, #0]
 8009156:	1aed      	subeq	r5, r5, r3
 8009158:	68a3      	ldr	r3, [r4, #8]
 800915a:	bf0c      	ite	eq
 800915c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009160:	2500      	movne	r5, #0
 8009162:	4293      	cmp	r3, r2
 8009164:	bfc4      	itt	gt
 8009166:	1a9b      	subgt	r3, r3, r2
 8009168:	18ed      	addgt	r5, r5, r3
 800916a:	2600      	movs	r6, #0
 800916c:	341a      	adds	r4, #26
 800916e:	42b5      	cmp	r5, r6
 8009170:	d11a      	bne.n	80091a8 <_printf_common+0xc8>
 8009172:	2000      	movs	r0, #0
 8009174:	e008      	b.n	8009188 <_printf_common+0xa8>
 8009176:	2301      	movs	r3, #1
 8009178:	4652      	mov	r2, sl
 800917a:	4641      	mov	r1, r8
 800917c:	4638      	mov	r0, r7
 800917e:	47c8      	blx	r9
 8009180:	3001      	adds	r0, #1
 8009182:	d103      	bne.n	800918c <_printf_common+0xac>
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	3501      	adds	r5, #1
 800918e:	e7c6      	b.n	800911e <_printf_common+0x3e>
 8009190:	18e1      	adds	r1, r4, r3
 8009192:	1c5a      	adds	r2, r3, #1
 8009194:	2030      	movs	r0, #48	@ 0x30
 8009196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800919a:	4422      	add	r2, r4
 800919c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091a4:	3302      	adds	r3, #2
 80091a6:	e7c7      	b.n	8009138 <_printf_common+0x58>
 80091a8:	2301      	movs	r3, #1
 80091aa:	4622      	mov	r2, r4
 80091ac:	4641      	mov	r1, r8
 80091ae:	4638      	mov	r0, r7
 80091b0:	47c8      	blx	r9
 80091b2:	3001      	adds	r0, #1
 80091b4:	d0e6      	beq.n	8009184 <_printf_common+0xa4>
 80091b6:	3601      	adds	r6, #1
 80091b8:	e7d9      	b.n	800916e <_printf_common+0x8e>
	...

080091bc <_printf_i>:
 80091bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	7e0f      	ldrb	r7, [r1, #24]
 80091c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091c4:	2f78      	cmp	r7, #120	@ 0x78
 80091c6:	4691      	mov	r9, r2
 80091c8:	4680      	mov	r8, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	469a      	mov	sl, r3
 80091ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091d2:	d807      	bhi.n	80091e4 <_printf_i+0x28>
 80091d4:	2f62      	cmp	r7, #98	@ 0x62
 80091d6:	d80a      	bhi.n	80091ee <_printf_i+0x32>
 80091d8:	2f00      	cmp	r7, #0
 80091da:	f000 80d2 	beq.w	8009382 <_printf_i+0x1c6>
 80091de:	2f58      	cmp	r7, #88	@ 0x58
 80091e0:	f000 80b9 	beq.w	8009356 <_printf_i+0x19a>
 80091e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091ec:	e03a      	b.n	8009264 <_printf_i+0xa8>
 80091ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091f2:	2b15      	cmp	r3, #21
 80091f4:	d8f6      	bhi.n	80091e4 <_printf_i+0x28>
 80091f6:	a101      	add	r1, pc, #4	@ (adr r1, 80091fc <_printf_i+0x40>)
 80091f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091fc:	08009255 	.word	0x08009255
 8009200:	08009269 	.word	0x08009269
 8009204:	080091e5 	.word	0x080091e5
 8009208:	080091e5 	.word	0x080091e5
 800920c:	080091e5 	.word	0x080091e5
 8009210:	080091e5 	.word	0x080091e5
 8009214:	08009269 	.word	0x08009269
 8009218:	080091e5 	.word	0x080091e5
 800921c:	080091e5 	.word	0x080091e5
 8009220:	080091e5 	.word	0x080091e5
 8009224:	080091e5 	.word	0x080091e5
 8009228:	08009369 	.word	0x08009369
 800922c:	08009293 	.word	0x08009293
 8009230:	08009323 	.word	0x08009323
 8009234:	080091e5 	.word	0x080091e5
 8009238:	080091e5 	.word	0x080091e5
 800923c:	0800938b 	.word	0x0800938b
 8009240:	080091e5 	.word	0x080091e5
 8009244:	08009293 	.word	0x08009293
 8009248:	080091e5 	.word	0x080091e5
 800924c:	080091e5 	.word	0x080091e5
 8009250:	0800932b 	.word	0x0800932b
 8009254:	6833      	ldr	r3, [r6, #0]
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6032      	str	r2, [r6, #0]
 800925c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009264:	2301      	movs	r3, #1
 8009266:	e09d      	b.n	80093a4 <_printf_i+0x1e8>
 8009268:	6833      	ldr	r3, [r6, #0]
 800926a:	6820      	ldr	r0, [r4, #0]
 800926c:	1d19      	adds	r1, r3, #4
 800926e:	6031      	str	r1, [r6, #0]
 8009270:	0606      	lsls	r6, r0, #24
 8009272:	d501      	bpl.n	8009278 <_printf_i+0xbc>
 8009274:	681d      	ldr	r5, [r3, #0]
 8009276:	e003      	b.n	8009280 <_printf_i+0xc4>
 8009278:	0645      	lsls	r5, r0, #25
 800927a:	d5fb      	bpl.n	8009274 <_printf_i+0xb8>
 800927c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009280:	2d00      	cmp	r5, #0
 8009282:	da03      	bge.n	800928c <_printf_i+0xd0>
 8009284:	232d      	movs	r3, #45	@ 0x2d
 8009286:	426d      	negs	r5, r5
 8009288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800928c:	4859      	ldr	r0, [pc, #356]	@ (80093f4 <_printf_i+0x238>)
 800928e:	230a      	movs	r3, #10
 8009290:	e011      	b.n	80092b6 <_printf_i+0xfa>
 8009292:	6821      	ldr	r1, [r4, #0]
 8009294:	6833      	ldr	r3, [r6, #0]
 8009296:	0608      	lsls	r0, r1, #24
 8009298:	f853 5b04 	ldr.w	r5, [r3], #4
 800929c:	d402      	bmi.n	80092a4 <_printf_i+0xe8>
 800929e:	0649      	lsls	r1, r1, #25
 80092a0:	bf48      	it	mi
 80092a2:	b2ad      	uxthmi	r5, r5
 80092a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80092a6:	4853      	ldr	r0, [pc, #332]	@ (80093f4 <_printf_i+0x238>)
 80092a8:	6033      	str	r3, [r6, #0]
 80092aa:	bf14      	ite	ne
 80092ac:	230a      	movne	r3, #10
 80092ae:	2308      	moveq	r3, #8
 80092b0:	2100      	movs	r1, #0
 80092b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092b6:	6866      	ldr	r6, [r4, #4]
 80092b8:	60a6      	str	r6, [r4, #8]
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	bfa2      	ittt	ge
 80092be:	6821      	ldrge	r1, [r4, #0]
 80092c0:	f021 0104 	bicge.w	r1, r1, #4
 80092c4:	6021      	strge	r1, [r4, #0]
 80092c6:	b90d      	cbnz	r5, 80092cc <_printf_i+0x110>
 80092c8:	2e00      	cmp	r6, #0
 80092ca:	d04b      	beq.n	8009364 <_printf_i+0x1a8>
 80092cc:	4616      	mov	r6, r2
 80092ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80092d2:	fb03 5711 	mls	r7, r3, r1, r5
 80092d6:	5dc7      	ldrb	r7, [r0, r7]
 80092d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092dc:	462f      	mov	r7, r5
 80092de:	42bb      	cmp	r3, r7
 80092e0:	460d      	mov	r5, r1
 80092e2:	d9f4      	bls.n	80092ce <_printf_i+0x112>
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d10b      	bne.n	8009300 <_printf_i+0x144>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	07df      	lsls	r7, r3, #31
 80092ec:	d508      	bpl.n	8009300 <_printf_i+0x144>
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6861      	ldr	r1, [r4, #4]
 80092f2:	4299      	cmp	r1, r3
 80092f4:	bfde      	ittt	le
 80092f6:	2330      	movle	r3, #48	@ 0x30
 80092f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009300:	1b92      	subs	r2, r2, r6
 8009302:	6122      	str	r2, [r4, #16]
 8009304:	f8cd a000 	str.w	sl, [sp]
 8009308:	464b      	mov	r3, r9
 800930a:	aa03      	add	r2, sp, #12
 800930c:	4621      	mov	r1, r4
 800930e:	4640      	mov	r0, r8
 8009310:	f7ff fee6 	bl	80090e0 <_printf_common>
 8009314:	3001      	adds	r0, #1
 8009316:	d14a      	bne.n	80093ae <_printf_i+0x1f2>
 8009318:	f04f 30ff 	mov.w	r0, #4294967295
 800931c:	b004      	add	sp, #16
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	f043 0320 	orr.w	r3, r3, #32
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	4833      	ldr	r0, [pc, #204]	@ (80093f8 <_printf_i+0x23c>)
 800932c:	2778      	movs	r7, #120	@ 0x78
 800932e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	6831      	ldr	r1, [r6, #0]
 8009336:	061f      	lsls	r7, r3, #24
 8009338:	f851 5b04 	ldr.w	r5, [r1], #4
 800933c:	d402      	bmi.n	8009344 <_printf_i+0x188>
 800933e:	065f      	lsls	r7, r3, #25
 8009340:	bf48      	it	mi
 8009342:	b2ad      	uxthmi	r5, r5
 8009344:	6031      	str	r1, [r6, #0]
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	bf44      	itt	mi
 800934a:	f043 0320 	orrmi.w	r3, r3, #32
 800934e:	6023      	strmi	r3, [r4, #0]
 8009350:	b11d      	cbz	r5, 800935a <_printf_i+0x19e>
 8009352:	2310      	movs	r3, #16
 8009354:	e7ac      	b.n	80092b0 <_printf_i+0xf4>
 8009356:	4827      	ldr	r0, [pc, #156]	@ (80093f4 <_printf_i+0x238>)
 8009358:	e7e9      	b.n	800932e <_printf_i+0x172>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	f023 0320 	bic.w	r3, r3, #32
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	e7f6      	b.n	8009352 <_printf_i+0x196>
 8009364:	4616      	mov	r6, r2
 8009366:	e7bd      	b.n	80092e4 <_printf_i+0x128>
 8009368:	6833      	ldr	r3, [r6, #0]
 800936a:	6825      	ldr	r5, [r4, #0]
 800936c:	6961      	ldr	r1, [r4, #20]
 800936e:	1d18      	adds	r0, r3, #4
 8009370:	6030      	str	r0, [r6, #0]
 8009372:	062e      	lsls	r6, r5, #24
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	d501      	bpl.n	800937c <_printf_i+0x1c0>
 8009378:	6019      	str	r1, [r3, #0]
 800937a:	e002      	b.n	8009382 <_printf_i+0x1c6>
 800937c:	0668      	lsls	r0, r5, #25
 800937e:	d5fb      	bpl.n	8009378 <_printf_i+0x1bc>
 8009380:	8019      	strh	r1, [r3, #0]
 8009382:	2300      	movs	r3, #0
 8009384:	6123      	str	r3, [r4, #16]
 8009386:	4616      	mov	r6, r2
 8009388:	e7bc      	b.n	8009304 <_printf_i+0x148>
 800938a:	6833      	ldr	r3, [r6, #0]
 800938c:	1d1a      	adds	r2, r3, #4
 800938e:	6032      	str	r2, [r6, #0]
 8009390:	681e      	ldr	r6, [r3, #0]
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	2100      	movs	r1, #0
 8009396:	4630      	mov	r0, r6
 8009398:	f7f6 ff22 	bl	80001e0 <memchr>
 800939c:	b108      	cbz	r0, 80093a2 <_printf_i+0x1e6>
 800939e:	1b80      	subs	r0, r0, r6
 80093a0:	6060      	str	r0, [r4, #4]
 80093a2:	6863      	ldr	r3, [r4, #4]
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	2300      	movs	r3, #0
 80093a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093ac:	e7aa      	b.n	8009304 <_printf_i+0x148>
 80093ae:	6923      	ldr	r3, [r4, #16]
 80093b0:	4632      	mov	r2, r6
 80093b2:	4649      	mov	r1, r9
 80093b4:	4640      	mov	r0, r8
 80093b6:	47d0      	blx	sl
 80093b8:	3001      	adds	r0, #1
 80093ba:	d0ad      	beq.n	8009318 <_printf_i+0x15c>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	079b      	lsls	r3, r3, #30
 80093c0:	d413      	bmi.n	80093ea <_printf_i+0x22e>
 80093c2:	68e0      	ldr	r0, [r4, #12]
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	4298      	cmp	r0, r3
 80093c8:	bfb8      	it	lt
 80093ca:	4618      	movlt	r0, r3
 80093cc:	e7a6      	b.n	800931c <_printf_i+0x160>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4632      	mov	r2, r6
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	47d0      	blx	sl
 80093d8:	3001      	adds	r0, #1
 80093da:	d09d      	beq.n	8009318 <_printf_i+0x15c>
 80093dc:	3501      	adds	r5, #1
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	9903      	ldr	r1, [sp, #12]
 80093e2:	1a5b      	subs	r3, r3, r1
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dcf2      	bgt.n	80093ce <_printf_i+0x212>
 80093e8:	e7eb      	b.n	80093c2 <_printf_i+0x206>
 80093ea:	2500      	movs	r5, #0
 80093ec:	f104 0619 	add.w	r6, r4, #25
 80093f0:	e7f5      	b.n	80093de <_printf_i+0x222>
 80093f2:	bf00      	nop
 80093f4:	0800991d 	.word	0x0800991d
 80093f8:	0800992e 	.word	0x0800992e

080093fc <__sflush_r>:
 80093fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	0716      	lsls	r6, r2, #28
 8009406:	4605      	mov	r5, r0
 8009408:	460c      	mov	r4, r1
 800940a:	d454      	bmi.n	80094b6 <__sflush_r+0xba>
 800940c:	684b      	ldr	r3, [r1, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	dc02      	bgt.n	8009418 <__sflush_r+0x1c>
 8009412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd48      	ble.n	80094aa <__sflush_r+0xae>
 8009418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800941a:	2e00      	cmp	r6, #0
 800941c:	d045      	beq.n	80094aa <__sflush_r+0xae>
 800941e:	2300      	movs	r3, #0
 8009420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009424:	682f      	ldr	r7, [r5, #0]
 8009426:	6a21      	ldr	r1, [r4, #32]
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	d030      	beq.n	800948e <__sflush_r+0x92>
 800942c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	0759      	lsls	r1, r3, #29
 8009432:	d505      	bpl.n	8009440 <__sflush_r+0x44>
 8009434:	6863      	ldr	r3, [r4, #4]
 8009436:	1ad2      	subs	r2, r2, r3
 8009438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800943a:	b10b      	cbz	r3, 8009440 <__sflush_r+0x44>
 800943c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	2300      	movs	r3, #0
 8009442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009444:	6a21      	ldr	r1, [r4, #32]
 8009446:	4628      	mov	r0, r5
 8009448:	47b0      	blx	r6
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	d106      	bne.n	800945e <__sflush_r+0x62>
 8009450:	6829      	ldr	r1, [r5, #0]
 8009452:	291d      	cmp	r1, #29
 8009454:	d82b      	bhi.n	80094ae <__sflush_r+0xb2>
 8009456:	4a2a      	ldr	r2, [pc, #168]	@ (8009500 <__sflush_r+0x104>)
 8009458:	410a      	asrs	r2, r1
 800945a:	07d6      	lsls	r6, r2, #31
 800945c:	d427      	bmi.n	80094ae <__sflush_r+0xb2>
 800945e:	2200      	movs	r2, #0
 8009460:	6062      	str	r2, [r4, #4]
 8009462:	04d9      	lsls	r1, r3, #19
 8009464:	6922      	ldr	r2, [r4, #16]
 8009466:	6022      	str	r2, [r4, #0]
 8009468:	d504      	bpl.n	8009474 <__sflush_r+0x78>
 800946a:	1c42      	adds	r2, r0, #1
 800946c:	d101      	bne.n	8009472 <__sflush_r+0x76>
 800946e:	682b      	ldr	r3, [r5, #0]
 8009470:	b903      	cbnz	r3, 8009474 <__sflush_r+0x78>
 8009472:	6560      	str	r0, [r4, #84]	@ 0x54
 8009474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009476:	602f      	str	r7, [r5, #0]
 8009478:	b1b9      	cbz	r1, 80094aa <__sflush_r+0xae>
 800947a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800947e:	4299      	cmp	r1, r3
 8009480:	d002      	beq.n	8009488 <__sflush_r+0x8c>
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fa9a 	bl	80089bc <_free_r>
 8009488:	2300      	movs	r3, #0
 800948a:	6363      	str	r3, [r4, #52]	@ 0x34
 800948c:	e00d      	b.n	80094aa <__sflush_r+0xae>
 800948e:	2301      	movs	r3, #1
 8009490:	4628      	mov	r0, r5
 8009492:	47b0      	blx	r6
 8009494:	4602      	mov	r2, r0
 8009496:	1c50      	adds	r0, r2, #1
 8009498:	d1c9      	bne.n	800942e <__sflush_r+0x32>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0c6      	beq.n	800942e <__sflush_r+0x32>
 80094a0:	2b1d      	cmp	r3, #29
 80094a2:	d001      	beq.n	80094a8 <__sflush_r+0xac>
 80094a4:	2b16      	cmp	r3, #22
 80094a6:	d11e      	bne.n	80094e6 <__sflush_r+0xea>
 80094a8:	602f      	str	r7, [r5, #0]
 80094aa:	2000      	movs	r0, #0
 80094ac:	e022      	b.n	80094f4 <__sflush_r+0xf8>
 80094ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b2:	b21b      	sxth	r3, r3
 80094b4:	e01b      	b.n	80094ee <__sflush_r+0xf2>
 80094b6:	690f      	ldr	r7, [r1, #16]
 80094b8:	2f00      	cmp	r7, #0
 80094ba:	d0f6      	beq.n	80094aa <__sflush_r+0xae>
 80094bc:	0793      	lsls	r3, r2, #30
 80094be:	680e      	ldr	r6, [r1, #0]
 80094c0:	bf08      	it	eq
 80094c2:	694b      	ldreq	r3, [r1, #20]
 80094c4:	600f      	str	r7, [r1, #0]
 80094c6:	bf18      	it	ne
 80094c8:	2300      	movne	r3, #0
 80094ca:	eba6 0807 	sub.w	r8, r6, r7
 80094ce:	608b      	str	r3, [r1, #8]
 80094d0:	f1b8 0f00 	cmp.w	r8, #0
 80094d4:	dde9      	ble.n	80094aa <__sflush_r+0xae>
 80094d6:	6a21      	ldr	r1, [r4, #32]
 80094d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80094da:	4643      	mov	r3, r8
 80094dc:	463a      	mov	r2, r7
 80094de:	4628      	mov	r0, r5
 80094e0:	47b0      	blx	r6
 80094e2:	2800      	cmp	r0, #0
 80094e4:	dc08      	bgt.n	80094f8 <__sflush_r+0xfc>
 80094e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	4407      	add	r7, r0
 80094fa:	eba8 0800 	sub.w	r8, r8, r0
 80094fe:	e7e7      	b.n	80094d0 <__sflush_r+0xd4>
 8009500:	dfbffffe 	.word	0xdfbffffe

08009504 <_fflush_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	b913      	cbnz	r3, 8009514 <_fflush_r+0x10>
 800950e:	2500      	movs	r5, #0
 8009510:	4628      	mov	r0, r5
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	b118      	cbz	r0, 800951e <_fflush_r+0x1a>
 8009516:	6a03      	ldr	r3, [r0, #32]
 8009518:	b90b      	cbnz	r3, 800951e <_fflush_r+0x1a>
 800951a:	f7ff f835 	bl	8008588 <__sinit>
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0f3      	beq.n	800950e <_fflush_r+0xa>
 8009526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009528:	07d0      	lsls	r0, r2, #31
 800952a:	d404      	bmi.n	8009536 <_fflush_r+0x32>
 800952c:	0599      	lsls	r1, r3, #22
 800952e:	d402      	bmi.n	8009536 <_fflush_r+0x32>
 8009530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009532:	f7ff fa40 	bl	80089b6 <__retarget_lock_acquire_recursive>
 8009536:	4628      	mov	r0, r5
 8009538:	4621      	mov	r1, r4
 800953a:	f7ff ff5f 	bl	80093fc <__sflush_r>
 800953e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009540:	07da      	lsls	r2, r3, #31
 8009542:	4605      	mov	r5, r0
 8009544:	d4e4      	bmi.n	8009510 <_fflush_r+0xc>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	059b      	lsls	r3, r3, #22
 800954a:	d4e1      	bmi.n	8009510 <_fflush_r+0xc>
 800954c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800954e:	f7ff fa33 	bl	80089b8 <__retarget_lock_release_recursive>
 8009552:	e7dd      	b.n	8009510 <_fflush_r+0xc>

08009554 <__swhatbuf_r>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	460c      	mov	r4, r1
 8009558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955c:	2900      	cmp	r1, #0
 800955e:	b096      	sub	sp, #88	@ 0x58
 8009560:	4615      	mov	r5, r2
 8009562:	461e      	mov	r6, r3
 8009564:	da0d      	bge.n	8009582 <__swhatbuf_r+0x2e>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800956c:	f04f 0100 	mov.w	r1, #0
 8009570:	bf14      	ite	ne
 8009572:	2340      	movne	r3, #64	@ 0x40
 8009574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009578:	2000      	movs	r0, #0
 800957a:	6031      	str	r1, [r6, #0]
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	b016      	add	sp, #88	@ 0x58
 8009580:	bd70      	pop	{r4, r5, r6, pc}
 8009582:	466a      	mov	r2, sp
 8009584:	f000 f862 	bl	800964c <_fstat_r>
 8009588:	2800      	cmp	r0, #0
 800958a:	dbec      	blt.n	8009566 <__swhatbuf_r+0x12>
 800958c:	9901      	ldr	r1, [sp, #4]
 800958e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009596:	4259      	negs	r1, r3
 8009598:	4159      	adcs	r1, r3
 800959a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800959e:	e7eb      	b.n	8009578 <__swhatbuf_r+0x24>

080095a0 <__smakebuf_r>:
 80095a0:	898b      	ldrh	r3, [r1, #12]
 80095a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095a4:	079d      	lsls	r5, r3, #30
 80095a6:	4606      	mov	r6, r0
 80095a8:	460c      	mov	r4, r1
 80095aa:	d507      	bpl.n	80095bc <__smakebuf_r+0x1c>
 80095ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	6123      	str	r3, [r4, #16]
 80095b4:	2301      	movs	r3, #1
 80095b6:	6163      	str	r3, [r4, #20]
 80095b8:	b003      	add	sp, #12
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095bc:	ab01      	add	r3, sp, #4
 80095be:	466a      	mov	r2, sp
 80095c0:	f7ff ffc8 	bl	8009554 <__swhatbuf_r>
 80095c4:	9f00      	ldr	r7, [sp, #0]
 80095c6:	4605      	mov	r5, r0
 80095c8:	4639      	mov	r1, r7
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff fa62 	bl	8008a94 <_malloc_r>
 80095d0:	b948      	cbnz	r0, 80095e6 <__smakebuf_r+0x46>
 80095d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d6:	059a      	lsls	r2, r3, #22
 80095d8:	d4ee      	bmi.n	80095b8 <__smakebuf_r+0x18>
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	f043 0302 	orr.w	r3, r3, #2
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	e7e2      	b.n	80095ac <__smakebuf_r+0xc>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	6020      	str	r0, [r4, #0]
 80095ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095f6:	b15b      	cbz	r3, 8009610 <__smakebuf_r+0x70>
 80095f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fc:	4630      	mov	r0, r6
 80095fe:	f000 f837 	bl	8009670 <_isatty_r>
 8009602:	b128      	cbz	r0, 8009610 <__smakebuf_r+0x70>
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	81a3      	strh	r3, [r4, #12]
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	431d      	orrs	r5, r3
 8009614:	81a5      	strh	r5, [r4, #12]
 8009616:	e7cf      	b.n	80095b8 <__smakebuf_r+0x18>

08009618 <memmove>:
 8009618:	4288      	cmp	r0, r1
 800961a:	b510      	push	{r4, lr}
 800961c:	eb01 0402 	add.w	r4, r1, r2
 8009620:	d902      	bls.n	8009628 <memmove+0x10>
 8009622:	4284      	cmp	r4, r0
 8009624:	4623      	mov	r3, r4
 8009626:	d807      	bhi.n	8009638 <memmove+0x20>
 8009628:	1e43      	subs	r3, r0, #1
 800962a:	42a1      	cmp	r1, r4
 800962c:	d008      	beq.n	8009640 <memmove+0x28>
 800962e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009636:	e7f8      	b.n	800962a <memmove+0x12>
 8009638:	4402      	add	r2, r0
 800963a:	4601      	mov	r1, r0
 800963c:	428a      	cmp	r2, r1
 800963e:	d100      	bne.n	8009642 <memmove+0x2a>
 8009640:	bd10      	pop	{r4, pc}
 8009642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800964a:	e7f7      	b.n	800963c <memmove+0x24>

0800964c <_fstat_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	@ (800966c <_fstat_r+0x20>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	4611      	mov	r1, r2
 8009658:	602b      	str	r3, [r5, #0]
 800965a:	f7f8 fb2a 	bl	8001cb2 <_fstat>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	d102      	bne.n	8009668 <_fstat_r+0x1c>
 8009662:	682b      	ldr	r3, [r5, #0]
 8009664:	b103      	cbz	r3, 8009668 <_fstat_r+0x1c>
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	bd38      	pop	{r3, r4, r5, pc}
 800966a:	bf00      	nop
 800966c:	20000548 	.word	0x20000548

08009670 <_isatty_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	@ (800968c <_isatty_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f8 fb29 	bl	8001cd2 <_isatty>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_isatty_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_isatty_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000548 	.word	0x20000548

08009690 <_sbrk_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d06      	ldr	r5, [pc, #24]	@ (80096ac <_sbrk_r+0x1c>)
 8009694:	2300      	movs	r3, #0
 8009696:	4604      	mov	r4, r0
 8009698:	4608      	mov	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7f8 fb32 	bl	8001d04 <_sbrk>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_sbrk_r+0x1a>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_sbrk_r+0x1a>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20000548 	.word	0x20000548

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c6:	4291      	cmp	r1, r2
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <_realloc_r>:
 80096cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096d0:	4680      	mov	r8, r0
 80096d2:	4615      	mov	r5, r2
 80096d4:	460c      	mov	r4, r1
 80096d6:	b921      	cbnz	r1, 80096e2 <_realloc_r+0x16>
 80096d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096dc:	4611      	mov	r1, r2
 80096de:	f7ff b9d9 	b.w	8008a94 <_malloc_r>
 80096e2:	b92a      	cbnz	r2, 80096f0 <_realloc_r+0x24>
 80096e4:	f7ff f96a 	bl	80089bc <_free_r>
 80096e8:	2400      	movs	r4, #0
 80096ea:	4620      	mov	r0, r4
 80096ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f0:	f000 f81a 	bl	8009728 <_malloc_usable_size_r>
 80096f4:	4285      	cmp	r5, r0
 80096f6:	4606      	mov	r6, r0
 80096f8:	d802      	bhi.n	8009700 <_realloc_r+0x34>
 80096fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096fe:	d8f4      	bhi.n	80096ea <_realloc_r+0x1e>
 8009700:	4629      	mov	r1, r5
 8009702:	4640      	mov	r0, r8
 8009704:	f7ff f9c6 	bl	8008a94 <_malloc_r>
 8009708:	4607      	mov	r7, r0
 800970a:	2800      	cmp	r0, #0
 800970c:	d0ec      	beq.n	80096e8 <_realloc_r+0x1c>
 800970e:	42b5      	cmp	r5, r6
 8009710:	462a      	mov	r2, r5
 8009712:	4621      	mov	r1, r4
 8009714:	bf28      	it	cs
 8009716:	4632      	movcs	r2, r6
 8009718:	f7ff ffca 	bl	80096b0 <memcpy>
 800971c:	4621      	mov	r1, r4
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff f94c 	bl	80089bc <_free_r>
 8009724:	463c      	mov	r4, r7
 8009726:	e7e0      	b.n	80096ea <_realloc_r+0x1e>

08009728 <_malloc_usable_size_r>:
 8009728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800972c:	1f18      	subs	r0, r3, #4
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfbc      	itt	lt
 8009732:	580b      	ldrlt	r3, [r1, r0]
 8009734:	18c0      	addlt	r0, r0, r3
 8009736:	4770      	bx	lr

08009738 <_init>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

08009744 <_fini>:
 8009744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009746:	bf00      	nop
 8009748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974a:	bc08      	pop	{r3}
 800974c:	469e      	mov	lr, r3
 800974e:	4770      	bx	lr
