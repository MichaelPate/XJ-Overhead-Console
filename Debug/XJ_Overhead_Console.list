
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800601c  0800601c  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  0800601c  0800601c  0000701c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006024  08006024  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006028  08006028  00007028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800602c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000068  08006094  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006094  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001290e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003271  00000000  00000000  0001a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001dc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0e  00000000  00000000  0001ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a39b  00000000  00000000  0001fa1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182cf  00000000  00000000  00039db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6b2  00000000  00000000  00052088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef73a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  000ef780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000f46cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d50 	.word	0x08005d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005d50 	.word	0x08005d50

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f001 f8c1 	bl	8001758 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fc84 	bl	8000ee8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f001 f8f5 	bl	80017e0 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fc74 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 feb9 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 fead 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f001 fb69 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f001 fb82 	bl	8001e0a <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a51      	ldr	r2, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b4f      	ldr	r3, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x164>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x164>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a4a      	ldr	r2, [pc, #296]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <MX_GPIO_Init+0x164>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a3c      	ldr	r2, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a35      	ldr	r2, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80007bc:	482f      	ldr	r0, [pc, #188]	@ (800087c <MX_GPIO_Init+0x168>)
 80007be:	f001 ffad 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2110      	movs	r1, #16
 80007c6:	482e      	ldr	r0, [pc, #184]	@ (8000880 <MX_GPIO_Init+0x16c>)
 80007c8:	f001 ffa8 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x170>)
 80007e4:	f001 fe16 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007e8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	481e      	ldr	r0, [pc, #120]	@ (800087c <MX_GPIO_Init+0x168>)
 8000802:	f001 fe07 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <MX_GPIO_Init+0x168>)
 800081c:	f001 fdfa 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000820:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4813      	ldr	r0, [pc, #76]	@ (8000884 <MX_GPIO_Init+0x170>)
 8000836:	f001 fded 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_GPIO_Init+0x174>)
 800084e:	f001 fde1 	bl	8002414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_GPIO_Init+0x16c>)
 800086a:	f001 fdd3 	bl	8002414 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_I2C1_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000898:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x58>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008ca:	f001 ff41 	bl	8002750 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 fb08 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40005400 	.word	0x40005400
 80008e4:	000186a0 	.word	0x000186a0

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	@ (800096c <HAL_I2C_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12c      	bne.n	8000964 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000926:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000938:	2304      	movs	r3, #4
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_I2C_MspInit+0x8c>)
 8000944:	f001 fd66 	bl	8002414 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40005400 	.word	0x40005400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000980:	1d39      	adds	r1, r7, #4
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	2201      	movs	r2, #1
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <__io_putchar+0x20>)
 800098a:	f003 fb66 	bl	800405a <HAL_UART_Transmit>
  return ch;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001e4 	.word	0x200001e4

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0a0      	sub	sp, #128	@ 0x80
 80009a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fe43 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 fa31 	bl	8000e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff feb3 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ae:	f7ff fe91 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009b2:	f000 fcd9 	bl	8001368 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009b6:	f7ff fddb 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009ba:	f7ff ff67 	bl	800088c <MX_I2C1_Init>
  MX_RTC_Init();
 80009be:	f000 fa9f 	bl	8000f00 <MX_RTC_Init>
  MX_SPI2_Init();
 80009c2:	f000 faef 	bl	8000fa4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009c6:	f000 fca5 	bl	8001314 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ca:	f000 fcf7 	bl	80013bc <MX_USART6_UART_Init>
  // whereas for getting user input (like above) we could just use blocking statements
   */

  // All UART RXs in this code expect a single "\n" control character
  // from the serial terminal, so give a warning to anyone trying to communicate
  printf("Send only newlines, not also carriage returns.\r\n");
 80009ce:	487e      	ldr	r0, [pc, #504]	@ (8000bc8 <main+0x22c>)
 80009d0:	f004 f950 	bl	8004c74 <puts>

  /* Add I2C and scan the bus for all addresses that respond */
  // TODO: Replace generic i2c scanner with a scanner that specifically looks for our modules only
  // 20x4 LCD: 0x27, TODO: get addresses for other modules
  printf("Scanning I2C bus.\r\n");
 80009d4:	487d      	ldr	r0, [pc, #500]	@ (8000bcc <main+0x230>)
 80009d6:	f004 f94d 	bl	8004c74 <puts>
  int ret = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	673b      	str	r3, [r7, #112]	@ 0x70
  char i2cBuffer[5] = {0};
 80009de:	2300      	movs	r3, #0
 80009e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  // Scan all 128 available i2c addresses
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 80009e8:	2301      	movs	r3, #1
 80009ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80009ee:	e026      	b.n	8000a3e <main+0xa2>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(testAddr<<1), 3, 5);
 80009f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b299      	uxth	r1, r3
 80009fa:	2305      	movs	r3, #5
 80009fc:	2203      	movs	r2, #3
 80009fe:	4874      	ldr	r0, [pc, #464]	@ (8000bd0 <main+0x234>)
 8000a00:	f001 ffea 	bl	80029d8 <HAL_I2C_IsDeviceReady>
 8000a04:	4603      	mov	r3, r0
 8000a06:	673b      	str	r3, [r7, #112]	@ 0x70
	  if (ret == HAL_OK) // If an ACK was received at address testAddr
 8000a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d112      	bne.n	8000a34 <main+0x98>
	  {
		  sprintf(i2cBuffer, "0x%X", testAddr);
 8000a0e:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8000a12:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a16:	496f      	ldr	r1, [pc, #444]	@ (8000bd4 <main+0x238>)
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 f933 	bl	8004c84 <siprintf>
		  printf("Device at: ");
 8000a1e:	486e      	ldr	r0, [pc, #440]	@ (8000bd8 <main+0x23c>)
 8000a20:	f004 f8b8 	bl	8004b94 <iprintf>
		  printf(i2cBuffer);
 8000a24:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 f8b3 	bl	8004b94 <iprintf>
		  printf("\r\n");
 8000a2e:	486b      	ldr	r0, [pc, #428]	@ (8000bdc <main+0x240>)
 8000a30:	f004 f920 	bl	8004c74 <puts>
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8000a34:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a38:	3301      	adds	r3, #1
 8000a3a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000a3e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dad4      	bge.n	80009f0 <main+0x54>
	  }
  }
  printf("Done.\r\n");
 8000a46:	4866      	ldr	r0, [pc, #408]	@ (8000be0 <main+0x244>)
 8000a48:	f004 f914 	bl	8004c74 <puts>


  /* Get and set the RTC module */
  // Setting RTC is done following the procedure in UM1725 section 57.2
  // Enable backup domain access for the RTC first (according to documentation UM1725 57.2.3)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a50:	4b64      	ldr	r3, [pc, #400]	@ (8000be4 <main+0x248>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	4a63      	ldr	r2, [pc, #396]	@ (8000be4 <main+0x248>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5c:	4b61      	ldr	r3, [pc, #388]	@ (8000be4 <main+0x248>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  HAL_PWR_EnableBkUpAccess();
 8000a68:	f002 f95e 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 8000a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000be4 <main+0x248>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	4a5c      	ldr	r2, [pc, #368]	@ (8000be4 <main+0x248>)
 8000a72:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8000a76:	6093      	str	r3, [r2, #8]
 8000a78:	4b5a      	ldr	r3, [pc, #360]	@ (8000be4 <main+0x248>)
 8000a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000a7c:	4a59      	ldr	r2, [pc, #356]	@ (8000be4 <main+0x248>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a82:	6713      	str	r3, [r2, #112]	@ 0x70
  __HAL_RCC_RTC_ENABLE();
 8000a84:	4b58      	ldr	r3, [pc, #352]	@ (8000be8 <main+0x24c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]

  char timeString[8];
  char dateString[8];
  uint8_t uartBuffer[10] = {0};
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000a8e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	809a      	strh	r2, [r3, #4]
  RTC_DateTypeDef dateRTC;
  RTC_TimeTypeDef timeRTC;

  printf("Current date and time: ");
 8000a98:	4854      	ldr	r0, [pc, #336]	@ (8000bec <main+0x250>)
 8000a9a:	f004 f87b 	bl	8004b94 <iprintf>
  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 8000a9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4852      	ldr	r0, [pc, #328]	@ (8000bf0 <main+0x254>)
 8000aa8:	f002 fff5 	bl	8003a96 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 8000aac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	484e      	ldr	r0, [pc, #312]	@ (8000bf0 <main+0x254>)
 8000ab6:	f003 f8d0 	bl	8003c5a <HAL_RTC_GetDate>

  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 8000aba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000aca:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	4948      	ldr	r1, [pc, #288]	@ (8000bf4 <main+0x258>)
 8000ad4:	f004 f8d6 	bl	8004c84 <siprintf>
  printf(timeString);
 8000ad8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 f859 	bl	8004b94 <iprintf>
  printf(" ");
 8000ae2:	2020      	movs	r0, #32
 8000ae4:	f004 f868 	bl	8004bb8 <putchar>
  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 8000ae8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000aec:	461a      	mov	r2, r3
 8000aee:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000af2:	4619      	mov	r1, r3
 8000af4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000af8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	460b      	mov	r3, r1
 8000b00:	493d      	ldr	r1, [pc, #244]	@ (8000bf8 <main+0x25c>)
 8000b02:	f004 f8bf 	bl	8004c84 <siprintf>
  printf(dateString);
 8000b06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 f842 	bl	8004b94 <iprintf>

  printf("\r\nSet the time? (y/n)\r\n");
 8000b10:	483a      	ldr	r0, [pc, #232]	@ (8000bfc <main+0x260>)
 8000b12:	f004 f8af 	bl	8004c74 <puts>
  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 8000b16:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	2202      	movs	r2, #2
 8000b20:	4837      	ldr	r0, [pc, #220]	@ (8000c00 <main+0x264>)
 8000b22:	f003 fb25 	bl	8004170 <HAL_UART_Receive>

  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y')
 8000b26:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b2a:	2b79      	cmp	r3, #121	@ 0x79
 8000b2c:	d004      	beq.n	8000b38 <main+0x19c>
 8000b2e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b32:	2b59      	cmp	r3, #89	@ 0x59
 8000b34:	f040 8118 	bne.w	8000d68 <main+0x3cc>
  {
	  // ask the user to set the time and date
	  printf("Enter the time in 24hr format (HH:MM)\r\n");
 8000b38:	4832      	ldr	r0, [pc, #200]	@ (8000c04 <main+0x268>)
 8000b3a:	f004 f89b 	bl	8004c74 <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 6, HAL_MAX_DELAY);
 8000b3e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	2206      	movs	r2, #6
 8000b48:	482d      	ldr	r0, [pc, #180]	@ (8000c00 <main+0x264>)
 8000b4a:	f003 fb11 	bl	8004170 <HAL_UART_Receive>

	  char charHrs[2] = {uartBuffer[0], uartBuffer[1]};
 8000b4e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b56:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000b5a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  char charMins[2] = {uartBuffer[3], uartBuffer[4]};
 8000b5e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000b62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000b66:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000b6a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	  timeRTC.Hours = atoi(charHrs);
 8000b6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fec4 	bl	8004900 <atoi>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	  timeRTC.Minutes = atoi(charMins);
 8000b80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 febb 	bl	8004900 <atoi>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	  uint8_t dst = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	  printf("Daylight savings time? (y/n)\r\n");
 8000b98:	481b      	ldr	r0, [pc, #108]	@ (8000c08 <main+0x26c>)
 8000b9a:	f004 f86b 	bl	8004c74 <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 8000b9e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	4815      	ldr	r0, [pc, #84]	@ (8000c00 <main+0x264>)
 8000baa:	f003 fae1 	bl	8004170 <HAL_UART_Receive>

	  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y') dst = RTC_DAYLIGHTSAVING_ADD1H;
 8000bae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000bb2:	2b79      	cmp	r3, #121	@ 0x79
 8000bb4:	d003      	beq.n	8000bbe <main+0x222>
 8000bb6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000bba:	2b59      	cmp	r3, #89	@ 0x59
 8000bbc:	d126      	bne.n	8000c0c <main+0x270>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8000bc4:	e025      	b.n	8000c12 <main+0x276>
 8000bc6:	bf00      	nop
 8000bc8:	08005d68 	.word	0x08005d68
 8000bcc:	08005d98 	.word	0x08005d98
 8000bd0:	200000cc 	.word	0x200000cc
 8000bd4:	08005dac 	.word	0x08005dac
 8000bd8:	08005db4 	.word	0x08005db4
 8000bdc:	08005dc0 	.word	0x08005dc0
 8000be0:	08005dc4 	.word	0x08005dc4
 8000be4:	40023800 	.word	0x40023800
 8000be8:	42470e3c 	.word	0x42470e3c
 8000bec:	08005dcc 	.word	0x08005dcc
 8000bf0:	20000120 	.word	0x20000120
 8000bf4:	08005de4 	.word	0x08005de4
 8000bf8:	08005df4 	.word	0x08005df4
 8000bfc:	08005e04 	.word	0x08005e04
 8000c00:	200001e4 	.word	0x200001e4
 8000c04:	08005e1c 	.word	0x08005e1c
 8000c08:	08005e44 	.word	0x08005e44
	  else dst = RTC_DAYLIGHTSAVING_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

	  // The daylight savings and store operation interfaces have been
	  // deprecated but we will worry about that later
	  // TODO: Update interface for RTC daylight savings time
	  timeRTC.Seconds = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  timeRTC.TimeFormat = RTC_HOURFORMAT12_PM;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  timeRTC.DayLightSaving = dst;
 8000c1e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8000c22:	643b      	str	r3, [r7, #64]	@ 0x40
	  timeRTC.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	647b      	str	r3, [r7, #68]	@ 0x44

	  if (HAL_RTC_SetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN) != HAL_OK)
 8000c28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	486c      	ldr	r0, [pc, #432]	@ (8000de4 <main+0x448>)
 8000c32:	f002 fe96 	bl	8003962 <HAL_RTC_SetTime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d004      	beq.n	8000c46 <main+0x2aa>
	  {
		printf("INVALID TIME.\r\n");
 8000c3c:	486a      	ldr	r0, [pc, #424]	@ (8000de8 <main+0x44c>)
 8000c3e:	f004 f819 	bl	8004c74 <puts>
		Error_Handler();
 8000c42:	f000 f951 	bl	8000ee8 <Error_Handler>
	  }

	  printf("Enter the date (MM-DD-YY)\r\n");
 8000c46:	4869      	ldr	r0, [pc, #420]	@ (8000dec <main+0x450>)
 8000c48:	f004 f814 	bl	8004c74 <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 8, HAL_MAX_DELAY);
 8000c4c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	2208      	movs	r2, #8
 8000c56:	4866      	ldr	r0, [pc, #408]	@ (8000df0 <main+0x454>)
 8000c58:	f003 fa8a 	bl	8004170 <HAL_UART_Receive>

	  char charMM[2] = {uartBuffer[0], uartBuffer[1]};
 8000c5c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000c60:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000c64:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000c68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  char charDD[2] = {uartBuffer[3], uartBuffer[4]};
 8000c6c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000c70:	f887 3020 	strb.w	r3, [r7, #32]
 8000c74:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000c78:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  char charYY[2] = {uartBuffer[6], uartBuffer[7]};
 8000c7c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000c80:	773b      	strb	r3, [r7, #28]
 8000c82:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8000c86:	777b      	strb	r3, [r7, #29]
	  dateRTC.Month = atoi(charMM);
 8000c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f003 fe37 	bl	8004900 <atoi>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	  dateRTC.Date = atoi(charDD);
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 fe2e 	bl	8004900 <atoi>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	  dateRTC.Year = atoi(charYY);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fe25 	bl	8004900 <atoi>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	  if (HAL_RTC_SetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN) != HAL_OK)
 8000cbe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4847      	ldr	r0, [pc, #284]	@ (8000de4 <main+0x448>)
 8000cc8:	f002 ff43 	bl	8003b52 <HAL_RTC_SetDate>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d004      	beq.n	8000cdc <main+0x340>
	  {
		  printf("INVALID DATE.\r\n");
 8000cd2:	4848      	ldr	r0, [pc, #288]	@ (8000df4 <main+0x458>)
 8000cd4:	f003 ffce 	bl	8004c74 <puts>
		  Error_Handler();
 8000cd8:	f000 f906 	bl	8000ee8 <Error_Handler>
	  }

	  // Update the backup register too as part of setting RTC
	  // from https://controllerstech.com/internal-rtc-in-stm32/
	  // The hex number was chosen randomly
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8000cdc:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4840      	ldr	r0, [pc, #256]	@ (8000de4 <main+0x448>)
 8000ce4:	f003 f8c6 	bl	8003e74 <HAL_RTCEx_BKUPWrite>

	  // We'll confirm the new date and time by reading it out
	  printf("Current date and time: ");
 8000ce8:	4843      	ldr	r0, [pc, #268]	@ (8000df8 <main+0x45c>)
 8000cea:	f003 ff53 	bl	8004b94 <iprintf>
	  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 8000cee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	483b      	ldr	r0, [pc, #236]	@ (8000de4 <main+0x448>)
 8000cf8:	f002 fecd 	bl	8003a96 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 8000cfc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4837      	ldr	r0, [pc, #220]	@ (8000de4 <main+0x448>)
 8000d06:	f002 ffa8 	bl	8003c5a <HAL_RTC_GetDate>

	  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 8000d0a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000d0e:	461a      	mov	r2, r3
 8000d10:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000d14:	4619      	mov	r1, r3
 8000d16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000d1a:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	460b      	mov	r3, r1
 8000d22:	4936      	ldr	r1, [pc, #216]	@ (8000dfc <main+0x460>)
 8000d24:	f003 ffae 	bl	8004c84 <siprintf>
	  printf(timeString);
 8000d28:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 ff31 	bl	8004b94 <iprintf>
	  printf(" ");
 8000d32:	2020      	movs	r0, #32
 8000d34:	f003 ff40 	bl	8004bb8 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 8000d38:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000d42:	4619      	mov	r1, r3
 8000d44:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d48:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	492b      	ldr	r1, [pc, #172]	@ (8000e00 <main+0x464>)
 8000d52:	f003 ff97 	bl	8004c84 <siprintf>
	  printf(dateString);
 8000d56:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 ff1a 	bl	8004b94 <iprintf>
	  printf("\r\n");
 8000d60:	4828      	ldr	r0, [pc, #160]	@ (8000e04 <main+0x468>)
 8000d62:	f003 ff87 	bl	8004c74 <puts>
  {
 8000d66:	e002      	b.n	8000d6e <main+0x3d2>
  }
  else printf("Skipping time set.\r\n");
 8000d68:	4827      	ldr	r0, [pc, #156]	@ (8000e08 <main+0x46c>)
 8000d6a:	f003 ff83 	bl	8004c74 <puts>
  while (1)
  {
	  // The goal for now is to transmit the now set time from the RTC, once a second.
	  RTC_DateTypeDef getDate;
	  RTC_TimeTypeDef getTime;
	  HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	481b      	ldr	r0, [pc, #108]	@ (8000de4 <main+0x448>)
 8000d76:	f002 fe8e 	bl	8003a96 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN);
 8000d7a:	f107 0318 	add.w	r3, r7, #24
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4818      	ldr	r0, [pc, #96]	@ (8000de4 <main+0x448>)
 8000d84:	f002 ff69 	bl	8003c5a <HAL_RTC_GetDate>
	  sprintf(timeString, "%02d:%02d:%02d", getTime.Hours, getTime.Minutes, getTime.Seconds);
 8000d88:	793b      	ldrb	r3, [r7, #4]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	797b      	ldrb	r3, [r7, #5]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	79bb      	ldrb	r3, [r7, #6]
 8000d92:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4918      	ldr	r1, [pc, #96]	@ (8000dfc <main+0x460>)
 8000d9c:	f003 ff72 	bl	8004c84 <siprintf>
	  printf(timeString);
 8000da0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000da4:	4618      	mov	r0, r3
 8000da6:	f003 fef5 	bl	8004b94 <iprintf>
	  printf(" ");
 8000daa:	2020      	movs	r0, #32
 8000dac:	f003 ff04 	bl	8004bb8 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", getDate.Month, getDate.Date, getDate.Year);
 8000db0:	7e7b      	ldrb	r3, [r7, #25]
 8000db2:	461a      	mov	r2, r3
 8000db4:	7ebb      	ldrb	r3, [r7, #26]
 8000db6:	4619      	mov	r1, r3
 8000db8:	7efb      	ldrb	r3, [r7, #27]
 8000dba:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	490f      	ldr	r1, [pc, #60]	@ (8000e00 <main+0x464>)
 8000dc4:	f003 ff5e 	bl	8004c84 <siprintf>
	  printf(dateString);
 8000dc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f003 fee1 	bl	8004b94 <iprintf>
	  printf("\r\n");
 8000dd2:	480c      	ldr	r0, [pc, #48]	@ (8000e04 <main+0x468>)
 8000dd4:	f003 ff4e 	bl	8004c74 <puts>
	  HAL_Delay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ddc:	f000 fc98 	bl	8001710 <HAL_Delay>
  {
 8000de0:	bf00      	nop
 8000de2:	e7c4      	b.n	8000d6e <main+0x3d2>
 8000de4:	20000120 	.word	0x20000120
 8000de8:	08005e64 	.word	0x08005e64
 8000dec:	08005e74 	.word	0x08005e74
 8000df0:	200001e4 	.word	0x200001e4
 8000df4:	08005e90 	.word	0x08005e90
 8000df8:	08005dcc 	.word	0x08005dcc
 8000dfc:	08005de4 	.word	0x08005de4
 8000e00:	08005df4 	.word	0x08005df4
 8000e04:	08005dc0 	.word	0x08005dc0
 8000e08:	08005ea0 	.word	0x08005ea0

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	@ 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	@ 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 f82a 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e38:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e40:	4b27      	ldr	r3, [pc, #156]	@ (8000ee0 <SystemClock_Config+0xd4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e58:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SystemClock_Config+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e80:	2300      	movs	r3, #0
 8000e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e84:	2310      	movs	r3, #16
 8000e86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e88:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e92:	2307      	movs	r3, #7
 8000e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e96:	f107 0320 	add.w	r3, r7, #32
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff58 	bl	8002d50 <HAL_RCC_OscConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea6:	f000 f81f 	bl	8000ee8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eaa:	230f      	movs	r3, #15
 8000eac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 f9ba 	bl	8003240 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ed2:	f000 f809 	bl	8000ee8 <Error_Handler>
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3750      	adds	r7, #80	@ 0x50
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eec:	b672      	cpsid	i
}
 8000eee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <Error_Handler+0x14>)
 8000ef2:	f003 fe4f 	bl	8004b94 <iprintf>
	  while (1);
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <Error_Handler+0xe>
 8000efa:	bf00      	nop
 8000efc:	08005eb4 	.word	0x08005eb4

08000f00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <MX_RTC_Init+0x48>)
 8000f08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f12:	227f      	movs	r2, #127	@ 0x7f
 8000f14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f18:	22ff      	movs	r2, #255	@ 0xff
 8000f1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_RTC_Init+0x44>)
 8000f30:	f002 fc94 	bl	800385c <HAL_RTC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f3a:	f7ff ffd5 	bl	8000ee8 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000120 	.word	0x20000120
 8000f48:	40002800 	.word	0x40002800

08000f4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0c      	ldr	r2, [pc, #48]	@ (8000f9c <HAL_RTC_MspInit+0x50>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d111      	bne.n	8000f92 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f76:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f002 fb7f 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f88:	f7ff ffae 	bl	8000ee8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <HAL_RTC_MspInit+0x54>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40002800 	.word	0x40002800
 8000fa0:	42470e3c 	.word	0x42470e3c

08000fa4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_SPI2_Init+0x68>)
 8000faa:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <MX_SPI2_Init+0x6c>)
 8000fac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fae:	4b17      	ldr	r3, [pc, #92]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000fbc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <MX_SPI2_Init+0x68>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <MX_SPI2_Init+0x68>)
 8000ff2:	220a      	movs	r2, #10
 8000ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	@ (800100c <MX_SPI2_Init+0x68>)
 8000ff8:	f002 ff56 	bl	8003ea8 <HAL_SPI_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001002:	f7ff ff71 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000140 	.word	0x20000140
 8001010:	40003800 	.word	0x40003800

08001014 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a28      	ldr	r2, [pc, #160]	@ (80010d4 <HAL_SPI_MspInit+0xc0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d14a      	bne.n	80010cc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b27      	ldr	r3, [pc, #156]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	4a26      	ldr	r2, [pc, #152]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001044:	6413      	str	r3, [r2, #64]	@ 0x40
 8001046:	4b24      	ldr	r3, [pc, #144]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a1f      	ldr	r2, [pc, #124]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800108a:	2308      	movs	r3, #8
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109a:	2305      	movs	r3, #5
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <HAL_SPI_MspInit+0xc8>)
 80010a6:	f001 f9b5 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010bc:	2305      	movs	r3, #5
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <HAL_SPI_MspInit+0xcc>)
 80010c8:	f001 f9a4 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	@ 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003800 	.word	0x40003800
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <HAL_MspInit+0x4c>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a08      	ldr	r2, [pc, #32]	@ (8001130 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001122:	2007      	movs	r0, #7
 8001124:	f000 fe4a 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 faa1 	bl	80016d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA1_Stream5_IRQHandler+0x10>)
 800119a:	f000 feff 	bl	8001f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000274 	.word	0x20000274

080011a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011ba:	f3af 8000 	nop.w
 80011be:	4601      	mov	r1, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf0      	blt.n	80011ba <_read+0x12>
  }

  return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e009      	b.n	8001208 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60ba      	str	r2, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fbbb 	bl	8000978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf1      	blt.n	80011f4 <_write+0x12>
  }
  return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001242:	605a      	str	r2, [r3, #4]
  return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_isatty>:

int _isatty(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	@ (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f003 fe2c 	bl	8004f10 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	@ (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20018000 	.word	0x20018000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20000198 	.word	0x20000198
 80012ec:	20000428 	.word	0x20000428

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <MX_USART1_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART1_UART_Init+0x4c>)
 800134c:	f002 fe35 	bl	8003fba <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f7ff fdc7 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000019c 	.word	0x2000019c
 8001364:	40011000 	.word	0x40011000

08001368 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART2_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f002 fe0b 	bl	8003fba <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f7ff fd9d 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001e4 	.word	0x200001e4
 80013b8:	40004400 	.word	0x40004400

080013bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <MX_USART6_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013f4:	f002 fde1 	bl	8003fba <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f7ff fd73 	bl	8000ee8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000022c 	.word	0x2000022c
 800140c:	40011400 	.word	0x40011400

08001410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a62      	ldr	r2, [pc, #392]	@ (80015b8 <HAL_UART_MspInit+0x1a8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12d      	bne.n	800148e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
 8001436:	4b61      	ldr	r3, [pc, #388]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143a:	4a60      	ldr	r2, [pc, #384]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6453      	str	r3, [r2, #68]	@ 0x44
 8001442:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	4b5a      	ldr	r3, [pc, #360]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a59      	ldr	r2, [pc, #356]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b57      	ldr	r3, [pc, #348]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800146a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147c:	2307      	movs	r3, #7
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	484e      	ldr	r0, [pc, #312]	@ (80015c0 <HAL_UART_MspInit+0x1b0>)
 8001488:	f000 ffc4 	bl	8002414 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800148c:	e090      	b.n	80015b0 <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART2)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a4c      	ldr	r2, [pc, #304]	@ (80015c4 <HAL_UART_MspInit+0x1b4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d15a      	bne.n	800154e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	4b47      	ldr	r3, [pc, #284]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a0:	4a46      	ldr	r2, [pc, #280]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a8:	4b44      	ldr	r3, [pc, #272]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b0:	61bb      	str	r3, [r7, #24]
 80014b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	4b40      	ldr	r3, [pc, #256]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014bc:	4a3f      	ldr	r2, [pc, #252]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c4:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014d0:	230c      	movs	r3, #12
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e0:	2307      	movs	r3, #7
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4835      	ldr	r0, [pc, #212]	@ (80015c0 <HAL_UART_MspInit+0x1b0>)
 80014ec:	f000 ff92 	bl	8002414 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014f0:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 80014f2:	4a36      	ldr	r2, [pc, #216]	@ (80015cc <HAL_UART_MspInit+0x1bc>)
 80014f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80014f6:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 80014f8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800150a:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 800150c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001510:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001512:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800151e:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001520:	2200      	movs	r2, #0
 8001522:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152a:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001530:	4825      	ldr	r0, [pc, #148]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001532:	f000 fc85 	bl	8001e40 <HAL_DMA_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800153c:	f7ff fcd4 	bl	8000ee8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a21      	ldr	r2, [pc, #132]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001544:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001546:	4a20      	ldr	r2, [pc, #128]	@ (80015c8 <HAL_UART_MspInit+0x1b8>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800154c:	e030      	b.n	80015b0 <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART6)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1f      	ldr	r2, [pc, #124]	@ (80015d0 <HAL_UART_MspInit+0x1c0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d12b      	bne.n	80015b0 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800155e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001560:	4a16      	ldr	r2, [pc, #88]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001562:	f043 0320 	orr.w	r3, r3, #32
 8001566:	6453      	str	r3, [r2, #68]	@ 0x44
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	4a0f      	ldr	r2, [pc, #60]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6313      	str	r3, [r2, #48]	@ 0x30
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_UART_MspInit+0x1ac>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001590:	23c0      	movs	r3, #192	@ 0xc0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015a0:	2308      	movs	r3, #8
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	480a      	ldr	r0, [pc, #40]	@ (80015d4 <HAL_UART_MspInit+0x1c4>)
 80015ac:	f000 ff32 	bl	8002414 <HAL_GPIO_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3738      	adds	r7, #56	@ 0x38
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40004400 	.word	0x40004400
 80015c8:	20000274 	.word	0x20000274
 80015cc:	40026088 	.word	0x40026088
 80015d0:	40011400 	.word	0x40011400
 80015d4:	40020800 	.word	0x40020800

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001610 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015dc:	f7ff fe88 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015e2:	490d      	ldr	r1, [pc, #52]	@ (8001618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001606:	f003 fc89 	bl	8004f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff f9c7 	bl	800099c <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001610:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800161c:	0800602c 	.word	0x0800602c
  ldr r2, =_sbss
 8001620:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001624:	20000424 	.word	0x20000424

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <HAL_Init+0x40>)
 8001636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800163a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <HAL_Init+0x40>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a07      	ldr	r2, [pc, #28]	@ (800166c <HAL_Init+0x40>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001654:	2003      	movs	r0, #3
 8001656:	f000 fbb1 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f808 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001660:	f7ff fd40 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_InitTick+0x54>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_InitTick+0x58>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	fbb3 f3f1 	udiv	r3, r3, r1
 800168a:	fbb2 f3f3 	udiv	r3, r2, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fbc9 	bl	8001e26 <HAL_SYSTICK_Config>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d80a      	bhi.n	80016ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a4:	2200      	movs	r2, #0
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f000 fb91 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b0:	4a06      	ldr	r2, [pc, #24]	@ (80016cc <HAL_InitTick+0x5c>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000008 	.word	0x20000008
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x20>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	461a      	mov	r2, r3
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_IncTick+0x24>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <HAL_IncTick+0x24>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	200002d4 	.word	0x200002d4

080016f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return uwTick;
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <HAL_GetTick+0x14>)
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200002d4 	.word	0x200002d4

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff ffee 	bl	80016f8 <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffde 	bl	80016f8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008

08001758 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e033      	b.n	80017d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	2b00      	cmp	r3, #0
 8001774:	d109      	bne.n	800178a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe ff4c 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d118      	bne.n	80017c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800179e:	f023 0302 	bic.w	r3, r3, #2
 80017a2:	f043 0202 	orr.w	r2, r3, #2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f93a 	bl	8001a24 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f023 0303 	bic.w	r3, r3, #3
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017c6:	e001      	b.n	80017cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x1c>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e105      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x228>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d925      	bls.n	8001858 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68d9      	ldr	r1, [r3, #12]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	3b1e      	subs	r3, #30
 8001822:	2207      	movs	r2, #7
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43da      	mvns	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	400a      	ands	r2, r1
 8001830:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68d9      	ldr	r1, [r3, #12]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	4603      	mov	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4403      	add	r3, r0
 800184a:	3b1e      	subs	r3, #30
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	e022      	b.n	800189e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	2207      	movs	r2, #7
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	400a      	ands	r2, r1
 800187a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6919      	ldr	r1, [r3, #16]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	4603      	mov	r3, r0
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4403      	add	r3, r0
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d824      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	3b05      	subs	r3, #5
 80018b8:	221f      	movs	r2, #31
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	400a      	ands	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	3b05      	subs	r3, #5
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ee:	e04c      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b23      	subs	r3, #35	@ 0x23
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b23      	subs	r3, #35	@ 0x23
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001940:	e023      	b.n	800198a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b41      	subs	r3, #65	@ 0x41
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	400a      	ands	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3b41      	subs	r3, #65	@ 0x41
 800197e:	fa00 f203 	lsl.w	r2, r0, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_ADC_ConfigChannel+0x234>)
 800198c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_ADC_ConfigChannel+0x238>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d109      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1cc>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b12      	cmp	r3, #18
 800199e:	d105      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a19      	ldr	r2, [pc, #100]	@ (8001a18 <HAL_ADC_ConfigChannel+0x238>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d123      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x21e>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b10      	cmp	r3, #16
 80019bc:	d003      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0x1e6>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b11      	cmp	r3, #17
 80019c4:	d11b      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b10      	cmp	r3, #16
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_ADC_ConfigChannel+0x23c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a10      	ldr	r2, [pc, #64]	@ (8001a20 <HAL_ADC_ConfigChannel+0x240>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9a      	lsrs	r2, r3, #18
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f0:	e002      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40012300 	.word	0x40012300
 8001a18:	40012000 	.word	0x40012000
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2c:	4b79      	ldr	r3, [pc, #484]	@ (8001c14 <ADC_Init+0x1f0>)
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	021a      	lsls	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	4a58      	ldr	r2, [pc, #352]	@ (8001c18 <ADC_Init+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e00f      	b.n	8001b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0202 	bic.w	r2, r2, #2
 8001b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	005a      	lsls	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b5e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	035a      	lsls	r2, r3, #13
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	e007      	b.n	8001b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b96:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	051a      	lsls	r2, r3, #20
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001bda:	025a      	lsls	r2, r3, #9
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	029a      	lsls	r2, r3, #10
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40012300 	.word	0x40012300
 8001c18:	0f000001 	.word	0x0f000001

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	@ (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	@ (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff fc54 	bl	80016f8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e099      	b.n	8001f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7c:	e00f      	b.n	8001e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7e:	f7ff fc3b 	bl	80016f8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d908      	bls.n	8001e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e078      	b.n	8001f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e8      	bne.n	8001e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <HAL_DMA_Init+0x158>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	4313      	orrs	r3, r2
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d117      	bne.n	8001f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f9e9 	bl	800231c <DMA_CheckFifoParam>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f9a0 	bl	80022b0 <DMA_CalcBaseAndBitshift>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	223f      	movs	r2, #63	@ 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	f010803f 	.word	0xf010803f

08001f9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fa8:	4b8e      	ldr	r3, [pc, #568]	@ (80021e4 <HAL_DMA_IRQHandler+0x248>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a8e      	ldr	r2, [pc, #568]	@ (80021e8 <HAL_DMA_IRQHandler+0x24c>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0a9b      	lsrs	r3, r3, #10
 8001fb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01a      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d013      	beq.n	8002008 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0204 	bic.w	r2, r2, #4
 8001fee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200c:	2201      	movs	r2, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d012      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002042:	2204      	movs	r2, #4
 8002044:	409a      	lsls	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	2204      	movs	r2, #4
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002078:	2210      	movs	r2, #16
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4013      	ands	r3, r2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d043      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03c      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002096:	2210      	movs	r2, #16
 8002098:	409a      	lsls	r2, r3
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d018      	beq.n	80020de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d024      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
 80020ca:	e01f      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
 80020dc:	e016      	b.n	800210c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0208 	bic.w	r2, r2, #8
 80020fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	2220      	movs	r2, #32
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 808f 	beq.w	800223c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8087 	beq.w	800223c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002132:	2220      	movs	r2, #32
 8002134:	409a      	lsls	r2, r3
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b05      	cmp	r3, #5
 8002144:	d136      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002164:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_IRQHandler+0x1da>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	223f      	movs	r2, #63	@ 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d07e      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	4798      	blx	r3
        }
        return;
 80021b2:	e079      	b.n	80022a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01d      	beq.n	80021fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d031      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e02c      	b.n	800223c <HAL_DMA_IRQHandler+0x2a0>
 80021e2:	bf00      	nop
 80021e4:	20000000 	.word	0x20000000
 80021e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	4798      	blx	r3
 80021fc:	e01e      	b.n	800223c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0210 	bic.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	2b00      	cmp	r3, #0
 8002242:	d032      	beq.n	80022aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d022      	beq.n	8002296 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2205      	movs	r2, #5
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3301      	adds	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d307      	bcc.n	8002284 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f2      	bne.n	8002268 <HAL_DMA_IRQHandler+0x2cc>
 8002282:	e000      	b.n	8002286 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002284:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
 80022a6:	e000      	b.n	80022aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80022a8:	bf00      	nop
    }
  }
}
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	3b10      	subs	r3, #16
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <DMA_CalcBaseAndBitshift+0x64>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ca:	4a13      	ldr	r2, [pc, #76]	@ (8002318 <DMA_CalcBaseAndBitshift+0x68>)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d909      	bls.n	80022f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	1d1a      	adds	r2, r3, #4
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f0:	e007      	b.n	8002302 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	aaaaaaab 	.word	0xaaaaaaab
 8002318:	08005ee0 	.word	0x08005ee0

0800231c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d11f      	bne.n	8002376 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d856      	bhi.n	80023ea <DMA_CheckFifoParam+0xce>
 800233c:	a201      	add	r2, pc, #4	@ (adr r2, 8002344 <DMA_CheckFifoParam+0x28>)
 800233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002342:	bf00      	nop
 8002344:	08002355 	.word	0x08002355
 8002348:	08002367 	.word	0x08002367
 800234c:	08002355 	.word	0x08002355
 8002350:	080023eb 	.word	0x080023eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d046      	beq.n	80023ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002364:	e043      	b.n	80023ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800236e:	d140      	bne.n	80023f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002374:	e03d      	b.n	80023f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237e:	d121      	bne.n	80023c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d837      	bhi.n	80023f6 <DMA_CheckFifoParam+0xda>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <DMA_CheckFifoParam+0x70>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	0800239d 	.word	0x0800239d
 8002390:	080023a3 	.word	0x080023a3
 8002394:	0800239d 	.word	0x0800239d
 8002398:	080023b5 	.word	0x080023b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
      break;
 80023a0:	e030      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d025      	beq.n	80023fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b2:	e022      	b.n	80023fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023bc:	d11f      	bne.n	80023fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023c2:	e01c      	b.n	80023fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d903      	bls.n	80023d2 <DMA_CheckFifoParam+0xb6>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d003      	beq.n	80023d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d0:	e018      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      break;
 80023d6:	e015      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
      break;
 80023e8:	e00b      	b.n	8002402 <DMA_CheckFifoParam+0xe6>
      break;
 80023ea:	bf00      	nop
 80023ec:	e00a      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023ee:	bf00      	nop
 80023f0:	e008      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f2:	bf00      	nop
 80023f4:	e006      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023f6:	bf00      	nop
 80023f8:	e004      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 80023fa:	bf00      	nop
 80023fc:	e002      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;   
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
    }
  } 
  
  return status; 
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a46      	ldr	r2, [pc, #280]	@ (8002710 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e12b      	b.n	80029ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f8b6 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	@ 0x24
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b4:	f000 ff3c 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a81      	ldr	r2, [pc, #516]	@ (80029c4 <HAL_I2C_Init+0x274>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d807      	bhi.n	80027d4 <HAL_I2C_Init+0x84>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a80      	ldr	r2, [pc, #512]	@ (80029c8 <HAL_I2C_Init+0x278>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e006      	b.n	80027e2 <HAL_I2C_Init+0x92>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a7d      	ldr	r2, [pc, #500]	@ (80029cc <HAL_I2C_Init+0x27c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0e7      	b.n	80029ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a78      	ldr	r2, [pc, #480]	@ (80029d0 <HAL_I2C_Init+0x280>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a6a      	ldr	r2, [pc, #424]	@ (80029c4 <HAL_I2C_Init+0x274>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d802      	bhi.n	8002824 <HAL_I2C_Init+0xd4>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	e009      	b.n	8002838 <HAL_I2C_Init+0xe8>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <HAL_I2C_Init+0x284>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	3301      	adds	r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	430b      	orrs	r3, r1
 800283e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800284a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	495c      	ldr	r1, [pc, #368]	@ (80029c4 <HAL_I2C_Init+0x274>)
 8002854:	428b      	cmp	r3, r1
 8002856:	d819      	bhi.n	800288c <HAL_I2C_Init+0x13c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e59      	subs	r1, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fbb1 f3f3 	udiv	r3, r1, r3
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800286c:	400b      	ands	r3, r1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_I2C_Init+0x138>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e59      	subs	r1, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002886:	e051      	b.n	800292c <HAL_I2C_Init+0x1dc>
 8002888:	2304      	movs	r3, #4
 800288a:	e04f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d111      	bne.n	80028b8 <HAL_I2C_Init+0x168>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e012      	b.n	80028de <HAL_I2C_Init+0x18e>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Init+0x196>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_I2C_Init+0x1dc>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_I2C_Init+0x1bc>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1e58      	subs	r0, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	440b      	add	r3, r1
 80028fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290a:	e00f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e58      	subs	r0, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	0099      	lsls	r1, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800295a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6911      	ldr	r1, [r2, #16]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	000186a0 	.word	0x000186a0
 80029c8:	001e847f 	.word	0x001e847f
 80029cc:	003d08ff 	.word	0x003d08ff
 80029d0:	431bde83 	.word	0x431bde83
 80029d4:	10624dd3 	.word	0x10624dd3

080029d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	460b      	mov	r3, r1
 80029e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7fe fe86 	bl	80016f8 <HAL_GetTick>
 80029ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	f040 8111 	bne.w	8002c22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2319      	movs	r3, #25
 8002a06:	2201      	movs	r2, #1
 8002a08:	4988      	ldr	r1, [pc, #544]	@ (8002c2c <HAL_I2C_IsDeviceReady+0x254>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f912 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a16:	2302      	movs	r3, #2
 8002a18:	e104      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_I2C_IsDeviceReady+0x50>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e0fd      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d007      	beq.n	8002a4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2224      	movs	r2, #36	@ 0x24
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a70      	ldr	r2, [pc, #448]	@ (8002c30 <HAL_I2C_IsDeviceReady+0x258>)
 8002a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8d0 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00d      	beq.n	8002ab6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa8:	d103      	bne.n	8002ab2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0b6      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ab6:	897b      	ldrh	r3, [r7, #10]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ac4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fe17 	bl	80016f8 <HAL_GetTick>
 8002aca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	bf0c      	ite	eq
 8002ada:	2301      	moveq	r3, #1
 8002adc:	2300      	movne	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af0:	bf0c      	ite	eq
 8002af2:	2301      	moveq	r3, #1
 8002af4:	2300      	movne	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002afa:	e025      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7fe fdfc 	bl	80016f8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d302      	bcc.n	8002b12 <HAL_I2C_IsDeviceReady+0x13a>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22a0      	movs	r2, #160	@ 0xa0
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b52:	d005      	beq.n	8002b60 <HAL_I2C_IsDeviceReady+0x188>
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <HAL_I2C_IsDeviceReady+0x188>
 8002b5a:	7dbb      	ldrb	r3, [r7, #22]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0cd      	beq.n	8002afc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d129      	bne.n	8002bca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2319      	movs	r3, #25
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4921      	ldr	r1, [pc, #132]	@ (8002c2c <HAL_I2C_IsDeviceReady+0x254>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f844 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e036      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e02c      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002be2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	2319      	movs	r3, #25
 8002bea:	2201      	movs	r2, #1
 8002bec:	490f      	ldr	r1, [pc, #60]	@ (8002c2c <HAL_I2C_IsDeviceReady+0x254>)
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f820 	bl	8002c34 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e012      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	f4ff af32 	bcc.w	8002a72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	00100002 	.word	0x00100002
 8002c30:	ffff0000 	.word	0xffff0000

08002c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c44:	e048      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d044      	beq.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fd53 	bl	80016f8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d139      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d10d      	bne.n	8002c8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	e00c      	b.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d116      	bne.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f043 0220 	orr.w	r2, r3, #32
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e023      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d093      	beq.n	8002c46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_PWR_EnableBkUpAccess+0x24>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002d3a:	687b      	ldr	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	420e0020 	.word	0x420e0020
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e267      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d075      	beq.n	8002e5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d6e:	4b88      	ldr	r3, [pc, #544]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d00c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7a:	4b85      	ldr	r3, [pc, #532]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d112      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b82      	ldr	r3, [pc, #520]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d92:	d10b      	bne.n	8002dac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	4b7e      	ldr	r3, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d157      	bne.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e242      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db4:	d106      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x74>
 8002db6:	4b76      	ldr	r3, [pc, #472]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a75      	ldr	r2, [pc, #468]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e01d      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x98>
 8002dce:	4b70      	ldr	r3, [pc, #448]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6f      	ldr	r2, [pc, #444]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6c      	ldr	r2, [pc, #432]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0xb0>
 8002de8:	4b69      	ldr	r3, [pc, #420]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a68      	ldr	r2, [pc, #416]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fc76 	bl	80016f8 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fc72 	bl	80016f8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	@ 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e207      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b5b      	ldr	r3, [pc, #364]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe fc62 	bl	80016f8 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fc5e 	bl	80016f8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e1f3      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4a:	4b51      	ldr	r3, [pc, #324]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d063      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e66:	4b4a      	ldr	r3, [pc, #296]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e72:	4b47      	ldr	r3, [pc, #284]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d11c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b44      	ldr	r3, [pc, #272]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8a:	4b41      	ldr	r3, [pc, #260]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e1c7      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4937      	ldr	r1, [pc, #220]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	e03a      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d020      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec0:	4b34      	ldr	r3, [pc, #208]	@ (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fc17 	bl	80016f8 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7fe fc13 	bl	80016f8 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e1a8      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f0      	beq.n	8002ece <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eec:	4b28      	ldr	r3, [pc, #160]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4925      	ldr	r1, [pc, #148]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f02:	4b24      	ldr	r3, [pc, #144]	@ (8002f94 <HAL_RCC_OscConfig+0x244>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fbf6 	bl	80016f8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe fbf2 	bl	80016f8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e187      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d036      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f42:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fbd6 	bl	80016f8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f50:	f7fe fbd2 	bl	80016f8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e167      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_OscConfig+0x240>)
 8002f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x200>
 8002f6e:	e01b      	b.n	8002fa8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCC_OscConfig+0x248>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fbbf 	bl	80016f8 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	e00e      	b.n	8002f9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7e:	f7fe fbbb 	bl	80016f8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d907      	bls.n	8002f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e150      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	42470000 	.word	0x42470000
 8002f98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	4b88      	ldr	r3, [pc, #544]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1ea      	bne.n	8002f7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8097 	beq.w	80030e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fba:	4b81      	ldr	r3, [pc, #516]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	4b7d      	ldr	r3, [pc, #500]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	4a7c      	ldr	r2, [pc, #496]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe6:	4b77      	ldr	r3, [pc, #476]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d118      	bne.n	8003024 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ff2:	4b74      	ldr	r3, [pc, #464]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a73      	ldr	r2, [pc, #460]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fb7b 	bl	80016f8 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003006:	f7fe fb77 	bl	80016f8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e10c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCC_OscConfig+0x474>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x2ea>
 800302c:	4b64      	ldr	r3, [pc, #400]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	4a63      	ldr	r2, [pc, #396]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	@ 0x70
 8003038:	e01c      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x30c>
 8003042:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003046:	4a5e      	ldr	r2, [pc, #376]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	6713      	str	r3, [r2, #112]	@ 0x70
 800304e:	4b5c      	ldr	r3, [pc, #368]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	4a5b      	ldr	r2, [pc, #364]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	@ 0x70
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0x324>
 800305c:	4b58      	ldr	r3, [pc, #352]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800305e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003060:	4a57      	ldr	r2, [pc, #348]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003062:	f023 0301 	bic.w	r3, r3, #1
 8003066:	6713      	str	r3, [r2, #112]	@ 0x70
 8003068:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	4a54      	ldr	r2, [pc, #336]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0304 	bic.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d015      	beq.n	80030a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fb3c 	bl	80016f8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fe fb38 	bl	80016f8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0cb      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	4b49      	ldr	r3, [pc, #292]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0ee      	beq.n	8003084 <HAL_RCC_OscConfig+0x334>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a8:	f7fe fb26 	bl	80016f8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b0:	f7fe fb22 	bl	80016f8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e0b5      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c6:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ee      	bne.n	80030b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d8:	4b39      	ldr	r3, [pc, #228]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	4a38      	ldr	r2, [pc, #224]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a1 	beq.w	8003230 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ee:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d05c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d141      	bne.n	8003186 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003102:	4b31      	ldr	r3, [pc, #196]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe faf6 	bl	80016f8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7fe faf2 	bl	80016f8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e087      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	3b01      	subs	r3, #1
 8003148:	041b      	lsls	r3, r3, #16
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	061b      	lsls	r3, r3, #24
 8003152:	491b      	ldr	r1, [pc, #108]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe facb 	bl	80016f8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fac7 	bl	80016f8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e05c      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x416>
 8003184:	e054      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b10      	ldr	r3, [pc, #64]	@ (80031c8 <HAL_RCC_OscConfig+0x478>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fab4 	bl	80016f8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fab0 	bl	80016f8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e045      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_RCC_OscConfig+0x470>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x444>
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e038      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x4ec>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d028      	beq.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d121      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d11a      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	3b01      	subs	r3, #1
 8003216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0cc      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d90c      	bls.n	800327c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b65      	ldr	r3, [pc, #404]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b63      	ldr	r3, [pc, #396]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0b8      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003294:	4b59      	ldr	r3, [pc, #356]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a58      	ldr	r2, [pc, #352]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800329e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032ac:	4b53      	ldr	r3, [pc, #332]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a52      	ldr	r2, [pc, #328]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b50      	ldr	r3, [pc, #320]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	494d      	ldr	r1, [pc, #308]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d044      	beq.n	8003360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032de:	4b47      	ldr	r3, [pc, #284]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b3f      	ldr	r3, [pc, #252]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e06f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330e:	4b3b      	ldr	r3, [pc, #236]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e067      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4934      	ldr	r1, [pc, #208]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003330:	f7fe f9e2 	bl	80016f8 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fe f9de 	bl	80016f8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e04f      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b2b      	ldr	r3, [pc, #172]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b25      	ldr	r3, [pc, #148]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d20c      	bcs.n	8003388 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b22      	ldr	r3, [pc, #136]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e032      	b.n	80033ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003394:	4b19      	ldr	r3, [pc, #100]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4916      	ldr	r1, [pc, #88]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b2:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	490e      	ldr	r1, [pc, #56]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c6:	f000 f821 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490a      	ldr	r1, [pc, #40]	@ (8003400 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	4a09      	ldr	r2, [pc, #36]	@ (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 80033e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe f942 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40023c00 	.word	0x40023c00
 80033fc:	40023800 	.word	0x40023800
 8003400:	08005ec8 	.word	0x08005ec8
 8003404:	20000000 	.word	0x20000000
 8003408:	20000004 	.word	0x20000004

0800340c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b094      	sub	sp, #80	@ 0x50
 8003412:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	647b      	str	r3, [r7, #68]	@ 0x44
 8003418:	2300      	movs	r3, #0
 800341a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800341c:	2300      	movs	r3, #0
 800341e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003424:	4b79      	ldr	r3, [pc, #484]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 030c 	and.w	r3, r3, #12
 800342c:	2b08      	cmp	r3, #8
 800342e:	d00d      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x40>
 8003430:	2b08      	cmp	r3, #8
 8003432:	f200 80e1 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x34>
 800343a:	2b04      	cmp	r3, #4
 800343c:	d003      	beq.n	8003446 <HAL_RCC_GetSysClockFreq+0x3a>
 800343e:	e0db      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b73      	ldr	r3, [pc, #460]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003444:	e0db      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003446:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x208>)
 8003448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800344a:	e0d8      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800344c:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003454:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003456:	4b6d      	ldr	r3, [pc, #436]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d063      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003462:	4b6a      	ldr	r3, [pc, #424]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	2200      	movs	r2, #0
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800346c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800346e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	633b      	str	r3, [r7, #48]	@ 0x30
 8003476:	2300      	movs	r3, #0
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
 800347a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800347e:	4622      	mov	r2, r4
 8003480:	462b      	mov	r3, r5
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4621      	mov	r1, r4
 8003498:	1a51      	subs	r1, r2, r1
 800349a:	6139      	str	r1, [r7, #16]
 800349c:	4629      	mov	r1, r5
 800349e:	eb63 0301 	sbc.w	r3, r3, r1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b0:	4659      	mov	r1, fp
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	4651      	mov	r1, sl
 80034b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ba:	4651      	mov	r1, sl
 80034bc:	018a      	lsls	r2, r1, #6
 80034be:	4651      	mov	r1, sl
 80034c0:	ebb2 0801 	subs.w	r8, r2, r1
 80034c4:	4659      	mov	r1, fp
 80034c6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	462b      	mov	r3, r5
 80034ec:	eb49 0303 	adc.w	r3, r9, r3
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034fe:	4629      	mov	r1, r5
 8003500:	024b      	lsls	r3, r1, #9
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003508:	4621      	mov	r1, r4
 800350a:	024a      	lsls	r2, r1, #9
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800351c:	f7fc feb0 	bl	8000280 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003528:	e058      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	2200      	movs	r2, #0
 8003532:	4618      	mov	r0, r3
 8003534:	4611      	mov	r1, r2
 8003536:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353a:	623b      	str	r3, [r7, #32]
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003540:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	f04f 0000 	mov.w	r0, #0
 800354c:	f04f 0100 	mov.w	r1, #0
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003556:	0150      	lsls	r0, r2, #5
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4641      	mov	r1, r8
 800355e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003562:	4649      	mov	r1, r9
 8003564:	eb63 0b01 	sbc.w	fp, r3, r1
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003574:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003578:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800357c:	ebb2 040a 	subs.w	r4, r2, sl
 8003580:	eb63 050b 	sbc.w	r5, r3, fp
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	00eb      	lsls	r3, r5, #3
 800358e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003592:	00e2      	lsls	r2, r4, #3
 8003594:	4614      	mov	r4, r2
 8003596:	461d      	mov	r5, r3
 8003598:	4643      	mov	r3, r8
 800359a:	18e3      	adds	r3, r4, r3
 800359c:	603b      	str	r3, [r7, #0]
 800359e:	464b      	mov	r3, r9
 80035a0:	eb45 0303 	adc.w	r3, r5, r3
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	61fa      	str	r2, [r7, #28]
 80035cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d0:	f7fc fe56 	bl	8000280 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_GetSysClockFreq+0x200>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003600:	4618      	mov	r0, r3
 8003602:	3750      	adds	r7, #80	@ 0x50
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	007a1200 	.word	0x007a1200

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08005ed8 	.word	0x08005ed8

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005ed8 	.word	0x08005ed8

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d035      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036a8:	4b67      	ldr	r3, [pc, #412]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ae:	f7fe f823 	bl	80016f8 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036b6:	f7fe f81f 	bl	80016f8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0ba      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c8:	4b60      	ldr	r3, [pc, #384]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	019a      	lsls	r2, r3, #6
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	071b      	lsls	r3, r3, #28
 80036e0:	495a      	ldr	r1, [pc, #360]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036e8:	4b57      	ldr	r3, [pc, #348]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ee:	f7fe f803 	bl	80016f8 <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80036f6:	f7fd ffff 	bl	80016f8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e09a      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8083 	beq.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b49      	ldr	r3, [pc, #292]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a48      	ldr	r2, [pc, #288]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b46      	ldr	r3, [pc, #280]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800373e:	4b44      	ldr	r3, [pc, #272]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800374a:	f7fd ffd5 	bl	80016f8 <HAL_GetTick>
 800374e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd ffd1 	bl	80016f8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e06c      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003764:	4b3a      	ldr	r3, [pc, #232]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003770:	4b36      	ldr	r3, [pc, #216]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003774:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d02f      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d028      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800378e:	4b2f      	ldr	r3, [pc, #188]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003798:	4b2e      	ldr	r3, [pc, #184]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037a4:	4a29      	ldr	r2, [pc, #164]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037aa:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d114      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fd ff9f 	bl	80016f8 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fd ff9b 	bl	80016f8 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e034      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ee      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ec:	d10d      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80037ee:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80037fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003802:	4912      	ldr	r1, [pc, #72]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]
 8003808:	e005      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4a0f      	ldr	r2, [pc, #60]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003810:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003814:	6093      	str	r3, [r2, #8]
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003818:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003822:	490a      	ldr	r1, [pc, #40]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003824:	4313      	orrs	r3, r2
 8003826:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7c1a      	ldrb	r2, [r3, #16]
 8003838:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800383a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	42470068 	.word	0x42470068
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	42470e40 	.word	0x42470e40
 8003858:	424711e0 	.word	0x424711e0

0800385c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e073      	b.n	800395a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7f5b      	ldrb	r3, [r3, #29]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fb62 	bl	8000f4c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d055      	beq.n	8003948 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ca      	movs	r2, #202	@ 0xca
 80038a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2253      	movs	r2, #83	@ 0x53
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa49 	bl	8003d44 <RTC_EnterInitMode>
 80038b2:	4603      	mov	r3, r0
 80038b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d12c      	bne.n	8003916 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80038ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68d2      	ldr	r2, [r2, #12]
 80038f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	041a      	lsls	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa50 	bl	8003db2 <RTC_ExitInitMode>
 8003912:	4603      	mov	r3, r0
 8003914:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d110      	bne.n	800393e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800392a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	22ff      	movs	r2, #255	@ 0xff
 8003944:	625a      	str	r2, [r3, #36]	@ 0x24
 8003946:	e001      	b.n	800394c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	7f1b      	ldrb	r3, [r3, #28]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_RTC_SetTime+0x1c>
 800397a:	2302      	movs	r3, #2
 800397c:	e087      	b.n	8003a8e <HAL_RTC_SetTime+0x12c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2202      	movs	r2, #2
 8003988:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d126      	bne.n	80039de <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fa27 	bl	8003dfc <RTC_ByteToBcd2>
 80039ae:	4603      	mov	r3, r0
 80039b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fa20 	bl	8003dfc <RTC_ByteToBcd2>
 80039bc:	4603      	mov	r3, r0
 80039be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	789b      	ldrb	r3, [r3, #2]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa18 	bl	8003dfc <RTC_ByteToBcd2>
 80039cc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80039ce:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	78db      	ldrb	r3, [r3, #3]
 80039d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	e018      	b.n	8003a10 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	785b      	ldrb	r3, [r3, #1]
 80039fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80039fe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a04:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	22ca      	movs	r2, #202	@ 0xca
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2253      	movs	r2, #83	@ 0x53
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f98f 	bl	8003d44 <RTC_EnterInitMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d120      	bne.n	8003a72 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003a3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6899      	ldr	r1, [r3, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f9a2 	bl	8003db2 <RTC_ExitInitMode>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	22ff      	movs	r2, #255	@ 0xff
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]

  return status;
 8003a8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003ac8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003acc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	0d9b      	lsrs	r3, r3, #22
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11a      	bne.n	8003b48 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f98e 	bl	8003e38 <RTC_Bcd2ToByte>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f985 	bl	8003e38 <RTC_Bcd2ToByte>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 f97c 	bl	8003e38 <RTC_Bcd2ToByte>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b52:	b590      	push	{r4, r7, lr}
 8003b54:	b087      	sub	sp, #28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	7f1b      	ldrb	r3, [r3, #28]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_RTC_SetDate+0x1c>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e071      	b.n	8003c52 <HAL_RTC_SetDate+0x100>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2202      	movs	r2, #2
 8003b78:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10e      	bne.n	8003b9e <HAL_RTC_SetDate+0x4c>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	f023 0310 	bic.w	r3, r3, #16
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	330a      	adds	r3, #10
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11c      	bne.n	8003bde <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	78db      	ldrb	r3, [r3, #3]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f927 	bl	8003dfc <RTC_ByteToBcd2>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f920 	bl	8003dfc <RTC_ByteToBcd2>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bc0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	789b      	ldrb	r3, [r3, #2]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f918 	bl	8003dfc <RTC_ByteToBcd2>
 8003bcc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00e      	b.n	8003bfc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	78db      	ldrb	r3, [r3, #3]
 8003be2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	22ca      	movs	r2, #202	@ 0xca
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2253      	movs	r2, #83	@ 0x53
 8003c0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f899 	bl	8003d44 <RTC_EnterInitMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f8c0 	bl	8003db2 <RTC_ExitInitMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	22ff      	movs	r2, #255	@ 0xff
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]

  return status;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd90      	pop	{r4, r7, pc}

08003c5a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	0c1b      	lsrs	r3, r3, #16
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	0b5b      	lsrs	r3, r3, #13
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d11a      	bne.n	8003cee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	78db      	ldrb	r3, [r3, #3]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 f8bb 	bl	8003e38 <RTC_Bcd2ToByte>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	785b      	ldrb	r3, [r3, #1]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 f8b2 	bl	8003e38 <RTC_Bcd2ToByte>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	789b      	ldrb	r3, [r3, #2]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f8a9 	bl	8003e38 <RTC_Bcd2ToByte>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <HAL_RTC_WaitForSynchro+0x48>)
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d0c:	f7fd fcf4 	bl	80016f8 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d12:	e009      	b.n	8003d28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d14:	f7fd fcf0 	bl	80016f8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d22:	d901      	bls.n	8003d28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e007      	b.n	8003d38 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ee      	beq.n	8003d14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	00013f5f 	.word	0x00013f5f

08003d44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d122      	bne.n	8003da8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d72:	f7fd fcc1 	bl	80016f8 <HAL_GetTick>
 8003d76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d78:	e00c      	b.n	8003d94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d7a:	f7fd fcbd 	bl	80016f8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d88:	d904      	bls.n	8003d94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <RTC_EnterInitMode+0x64>
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d1e8      	bne.n	8003d7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dcc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff ff8b 	bl	8003cf8 <HAL_RTC_WaitForSynchro>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2204      	movs	r2, #4
 8003dec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e0a:	e005      	b.n	8003e18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	3b0a      	subs	r3, #10
 8003e16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2b09      	cmp	r3, #9
 8003e1c:	d8f6      	bhi.n	8003e0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	b2db      	uxtb	r3, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3350      	adds	r3, #80	@ 0x50
 8003e8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	4413      	add	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e07b      	b.n	8003fb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eca:	d009      	beq.n	8003ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	61da      	str	r2, [r3, #28]
 8003ed2:	e005      	b.n	8003ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd f88a 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f64:	ea42 0103 	orr.w	r1, r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	0c1b      	lsrs	r3, r3, #16
 8003f7e:	f003 0104 	and.w	r1, r3, #4
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	f003 0210 	and.w	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e042      	b.n	8004052 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f7fd fa15 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2224      	movs	r2, #36	@ 0x24
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa0a 	bl	8004418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004012:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004022:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004032:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08a      	sub	sp, #40	@ 0x28
 800405e:	af02      	add	r7, sp, #8
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	d175      	bne.n	8004166 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_UART_Transmit+0x2c>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e06e      	b.n	8004168 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	@ 0x21
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004098:	f7fd fb2e 	bl	80016f8 <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	88fa      	ldrh	r2, [r7, #6]
 80040a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040b2:	d108      	bne.n	80040c6 <HAL_UART_Transmit+0x6c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d104      	bne.n	80040c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e003      	b.n	80040ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040ce:	e02e      	b.n	800412e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	@ 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f8df 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e03a      	b.n	8004168 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	3302      	adds	r3, #2
 800410c:	61bb      	str	r3, [r7, #24]
 800410e:	e007      	b.n	8004120 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1cb      	bne.n	80040d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f8ab 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e006      	b.n	8004168 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	4613      	mov	r3, r2
 800417e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	f040 8081 	bne.w	8004294 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_UART_Receive+0x2e>
 8004198:	88fb      	ldrh	r3, [r7, #6]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e079      	b.n	8004296 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2222      	movs	r2, #34	@ 0x22
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041b6:	f7fd fa9f 	bl	80016f8 <HAL_GetTick>
 80041ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	88fa      	ldrh	r2, [r7, #6]
 80041c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d0:	d108      	bne.n	80041e4 <HAL_UART_Receive+0x74>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	61bb      	str	r3, [r7, #24]
 80041e2:	e003      	b.n	80041ec <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80041ec:	e047      	b.n	800427e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2120      	movs	r1, #32
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f850 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e042      	b.n	8004296 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	b29a      	uxth	r2, r3
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	3302      	adds	r3, #2
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	e01f      	b.n	8004270 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004238:	d007      	beq.n	800424a <HAL_UART_Receive+0xda>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_UART_Receive+0xe8>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	b2da      	uxtb	r2, r3
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e008      	b.n	800426a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004264:	b2da      	uxtb	r2, r3
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3301      	adds	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1b2      	bne.n	80041ee <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	e03b      	b.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d037      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fd fa1e 	bl	80016f8 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <UART_WaitOnFlagUntilTimeout+0x30>
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e03a      	b.n	8004348 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b80      	cmp	r3, #128	@ 0x80
 80042e4:	d020      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d01d      	beq.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d116      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f81d 	bl	8004350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2208      	movs	r2, #8
 800431a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e00f      	b.n	8004348 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4013      	ands	r3, r2
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	429a      	cmp	r2, r3
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	79fb      	ldrb	r3, [r7, #7]
 8004342:	429a      	cmp	r2, r3
 8004344:	d0b4      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b095      	sub	sp, #84	@ 0x54
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800436e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004378:	643a      	str	r2, [r7, #64]	@ 0x40
 800437a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800437e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e5      	bne.n	8004358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d119      	bne.n	80043fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0310 	bic.w	r3, r3, #16
 80043de:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e8:	61ba      	str	r2, [r7, #24]
 80043ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e5      	bne.n	80043c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800440a:	bf00      	nop
 800440c:	3754      	adds	r7, #84	@ 0x54
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800441c:	b0c0      	sub	sp, #256	@ 0x100
 800441e:	af00      	add	r7, sp, #0
 8004420:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	68d9      	ldr	r1, [r3, #12]
 8004436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	ea40 0301 	orr.w	r3, r0, r1
 8004440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	431a      	orrs	r2, r3
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004470:	f021 010c 	bic.w	r1, r1, #12
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800447e:	430b      	orrs	r3, r1
 8004480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800448e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004492:	6999      	ldr	r1, [r3, #24]
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	ea40 0301 	orr.w	r3, r0, r1
 800449e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	4b8f      	ldr	r3, [pc, #572]	@ (80046e4 <UART_SetConfig+0x2cc>)
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d005      	beq.n	80044b8 <UART_SetConfig+0xa0>
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b8d      	ldr	r3, [pc, #564]	@ (80046e8 <UART_SetConfig+0x2d0>)
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d104      	bne.n	80044c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b8:	f7ff f8ce 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80044bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044c0:	e003      	b.n	80044ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044c2:	f7ff f8b5 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80044c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044d4:	f040 810c 	bne.w	80046f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044ea:	4622      	mov	r2, r4
 80044ec:	462b      	mov	r3, r5
 80044ee:	1891      	adds	r1, r2, r2
 80044f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044f2:	415b      	adcs	r3, r3
 80044f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044fa:	4621      	mov	r1, r4
 80044fc:	eb12 0801 	adds.w	r8, r2, r1
 8004500:	4629      	mov	r1, r5
 8004502:	eb43 0901 	adc.w	r9, r3, r1
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800451a:	4690      	mov	r8, r2
 800451c:	4699      	mov	r9, r3
 800451e:	4623      	mov	r3, r4
 8004520:	eb18 0303 	adds.w	r3, r8, r3
 8004524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004528:	462b      	mov	r3, r5
 800452a:	eb49 0303 	adc.w	r3, r9, r3
 800452e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800453e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004546:	460b      	mov	r3, r1
 8004548:	18db      	adds	r3, r3, r3
 800454a:	653b      	str	r3, [r7, #80]	@ 0x50
 800454c:	4613      	mov	r3, r2
 800454e:	eb42 0303 	adc.w	r3, r2, r3
 8004552:	657b      	str	r3, [r7, #84]	@ 0x54
 8004554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800455c:	f7fb fe90 	bl	8000280 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4b61      	ldr	r3, [pc, #388]	@ (80046ec <UART_SetConfig+0x2d4>)
 8004566:	fba3 2302 	umull	r2, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	011c      	lsls	r4, r3, #4
 800456e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004578:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800457c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004580:	4642      	mov	r2, r8
 8004582:	464b      	mov	r3, r9
 8004584:	1891      	adds	r1, r2, r2
 8004586:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004588:	415b      	adcs	r3, r3
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800458c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004590:	4641      	mov	r1, r8
 8004592:	eb12 0a01 	adds.w	sl, r2, r1
 8004596:	4649      	mov	r1, r9
 8004598:	eb43 0b01 	adc.w	fp, r3, r1
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045b0:	4692      	mov	sl, r2
 80045b2:	469b      	mov	fp, r3
 80045b4:	4643      	mov	r3, r8
 80045b6:	eb1a 0303 	adds.w	r3, sl, r3
 80045ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045be:	464b      	mov	r3, r9
 80045c0:	eb4b 0303 	adc.w	r3, fp, r3
 80045c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045dc:	460b      	mov	r3, r1
 80045de:	18db      	adds	r3, r3, r3
 80045e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e2:	4613      	mov	r3, r2
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045f2:	f7fb fe45 	bl	8000280 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	4b3b      	ldr	r3, [pc, #236]	@ (80046ec <UART_SetConfig+0x2d4>)
 80045fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2264      	movs	r2, #100	@ 0x64
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	1acb      	subs	r3, r1, r3
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004612:	4b36      	ldr	r3, [pc, #216]	@ (80046ec <UART_SetConfig+0x2d4>)
 8004614:	fba3 2302 	umull	r2, r3, r3, r2
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004620:	441c      	add	r4, r3
 8004622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004626:	2200      	movs	r2, #0
 8004628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800462c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004630:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004634:	4642      	mov	r2, r8
 8004636:	464b      	mov	r3, r9
 8004638:	1891      	adds	r1, r2, r2
 800463a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800463c:	415b      	adcs	r3, r3
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004644:	4641      	mov	r1, r8
 8004646:	1851      	adds	r1, r2, r1
 8004648:	6339      	str	r1, [r7, #48]	@ 0x30
 800464a:	4649      	mov	r1, r9
 800464c:	414b      	adcs	r3, r1
 800464e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800465c:	4659      	mov	r1, fp
 800465e:	00cb      	lsls	r3, r1, #3
 8004660:	4651      	mov	r1, sl
 8004662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004666:	4651      	mov	r1, sl
 8004668:	00ca      	lsls	r2, r1, #3
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	4603      	mov	r3, r0
 8004670:	4642      	mov	r2, r8
 8004672:	189b      	adds	r3, r3, r2
 8004674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004678:	464b      	mov	r3, r9
 800467a:	460a      	mov	r2, r1
 800467c:	eb42 0303 	adc.w	r3, r2, r3
 8004680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004690:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004698:	460b      	mov	r3, r1
 800469a:	18db      	adds	r3, r3, r3
 800469c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800469e:	4613      	mov	r3, r2
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80046ae:	f7fb fde7 	bl	8000280 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <UART_SetConfig+0x2d4>)
 80046b8:	fba3 1302 	umull	r1, r3, r3, r2
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	2164      	movs	r1, #100	@ 0x64
 80046c0:	fb01 f303 	mul.w	r3, r1, r3
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	3332      	adds	r3, #50	@ 0x32
 80046ca:	4a08      	ldr	r2, [pc, #32]	@ (80046ec <UART_SetConfig+0x2d4>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	f003 0207 	and.w	r2, r3, #7
 80046d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4422      	add	r2, r4
 80046de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046e0:	e106      	b.n	80048f0 <UART_SetConfig+0x4d8>
 80046e2:	bf00      	nop
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40011400 	.word	0x40011400
 80046ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004702:	4642      	mov	r2, r8
 8004704:	464b      	mov	r3, r9
 8004706:	1891      	adds	r1, r2, r2
 8004708:	6239      	str	r1, [r7, #32]
 800470a:	415b      	adcs	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	@ 0x24
 800470e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004712:	4641      	mov	r1, r8
 8004714:	1854      	adds	r4, r2, r1
 8004716:	4649      	mov	r1, r9
 8004718:	eb43 0501 	adc.w	r5, r3, r1
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	00eb      	lsls	r3, r5, #3
 8004726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800472a:	00e2      	lsls	r2, r4, #3
 800472c:	4614      	mov	r4, r2
 800472e:	461d      	mov	r5, r3
 8004730:	4643      	mov	r3, r8
 8004732:	18e3      	adds	r3, r4, r3
 8004734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004738:	464b      	mov	r3, r9
 800473a:	eb45 0303 	adc.w	r3, r5, r3
 800473e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800474e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800475e:	4629      	mov	r1, r5
 8004760:	008b      	lsls	r3, r1, #2
 8004762:	4621      	mov	r1, r4
 8004764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004768:	4621      	mov	r1, r4
 800476a:	008a      	lsls	r2, r1, #2
 800476c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004770:	f7fb fd86 	bl	8000280 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4b60      	ldr	r3, [pc, #384]	@ (80048fc <UART_SetConfig+0x4e4>)
 800477a:	fba3 2302 	umull	r2, r3, r3, r2
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	011c      	lsls	r4, r3, #4
 8004782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004786:	2200      	movs	r2, #0
 8004788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800478c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	1891      	adds	r1, r2, r2
 800479a:	61b9      	str	r1, [r7, #24]
 800479c:	415b      	adcs	r3, r3
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a4:	4641      	mov	r1, r8
 80047a6:	1851      	adds	r1, r2, r1
 80047a8:	6139      	str	r1, [r7, #16]
 80047aa:	4649      	mov	r1, r9
 80047ac:	414b      	adcs	r3, r1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047bc:	4659      	mov	r1, fp
 80047be:	00cb      	lsls	r3, r1, #3
 80047c0:	4651      	mov	r1, sl
 80047c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047c6:	4651      	mov	r1, sl
 80047c8:	00ca      	lsls	r2, r1, #3
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	4642      	mov	r2, r8
 80047d2:	189b      	adds	r3, r3, r2
 80047d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047d8:	464b      	mov	r3, r9
 80047da:	460a      	mov	r2, r1
 80047dc:	eb42 0303 	adc.w	r3, r2, r3
 80047e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047fc:	4649      	mov	r1, r9
 80047fe:	008b      	lsls	r3, r1, #2
 8004800:	4641      	mov	r1, r8
 8004802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004806:	4641      	mov	r1, r8
 8004808:	008a      	lsls	r2, r1, #2
 800480a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800480e:	f7fb fd37 	bl	8000280 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4611      	mov	r1, r2
 8004818:	4b38      	ldr	r3, [pc, #224]	@ (80048fc <UART_SetConfig+0x4e4>)
 800481a:	fba3 2301 	umull	r2, r3, r3, r1
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	2264      	movs	r2, #100	@ 0x64
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	1acb      	subs	r3, r1, r3
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	3332      	adds	r3, #50	@ 0x32
 800482c:	4a33      	ldr	r2, [pc, #204]	@ (80048fc <UART_SetConfig+0x4e4>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004838:	441c      	add	r4, r3
 800483a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800483e:	2200      	movs	r2, #0
 8004840:	673b      	str	r3, [r7, #112]	@ 0x70
 8004842:	677a      	str	r2, [r7, #116]	@ 0x74
 8004844:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	1891      	adds	r1, r2, r2
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	415b      	adcs	r3, r3
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004858:	4641      	mov	r1, r8
 800485a:	1851      	adds	r1, r2, r1
 800485c:	6039      	str	r1, [r7, #0]
 800485e:	4649      	mov	r1, r9
 8004860:	414b      	adcs	r3, r1
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004870:	4659      	mov	r1, fp
 8004872:	00cb      	lsls	r3, r1, #3
 8004874:	4651      	mov	r1, sl
 8004876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800487a:	4651      	mov	r1, sl
 800487c:	00ca      	lsls	r2, r1, #3
 800487e:	4610      	mov	r0, r2
 8004880:	4619      	mov	r1, r3
 8004882:	4603      	mov	r3, r0
 8004884:	4642      	mov	r2, r8
 8004886:	189b      	adds	r3, r3, r2
 8004888:	66bb      	str	r3, [r7, #104]	@ 0x68
 800488a:	464b      	mov	r3, r9
 800488c:	460a      	mov	r2, r1
 800488e:	eb42 0303 	adc.w	r3, r2, r3
 8004892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	663b      	str	r3, [r7, #96]	@ 0x60
 800489e:	667a      	str	r2, [r7, #100]	@ 0x64
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80048ac:	4649      	mov	r1, r9
 80048ae:	008b      	lsls	r3, r1, #2
 80048b0:	4641      	mov	r1, r8
 80048b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b6:	4641      	mov	r1, r8
 80048b8:	008a      	lsls	r2, r1, #2
 80048ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048be:	f7fb fcdf 	bl	8000280 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <UART_SetConfig+0x4e4>)
 80048c8:	fba3 1302 	umull	r1, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	2164      	movs	r1, #100	@ 0x64
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	3332      	adds	r3, #50	@ 0x32
 80048da:	4a08      	ldr	r2, [pc, #32]	@ (80048fc <UART_SetConfig+0x4e4>)
 80048dc:	fba2 2303 	umull	r2, r3, r2, r3
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	f003 020f 	and.w	r2, r3, #15
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4422      	add	r2, r4
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048f6:	46bd      	mov	sp, r7
 80048f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fc:	51eb851f 	.word	0x51eb851f

08004900 <atoi>:
 8004900:	220a      	movs	r2, #10
 8004902:	2100      	movs	r1, #0
 8004904:	f000 b87a 	b.w	80049fc <strtol>

08004908 <_strtol_l.constprop.0>:
 8004908:	2b24      	cmp	r3, #36	@ 0x24
 800490a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800490e:	4686      	mov	lr, r0
 8004910:	4690      	mov	r8, r2
 8004912:	d801      	bhi.n	8004918 <_strtol_l.constprop.0+0x10>
 8004914:	2b01      	cmp	r3, #1
 8004916:	d106      	bne.n	8004926 <_strtol_l.constprop.0+0x1e>
 8004918:	f000 fafa 	bl	8004f10 <__errno>
 800491c:	2316      	movs	r3, #22
 800491e:	6003      	str	r3, [r0, #0]
 8004920:	2000      	movs	r0, #0
 8004922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004926:	4834      	ldr	r0, [pc, #208]	@ (80049f8 <_strtol_l.constprop.0+0xf0>)
 8004928:	460d      	mov	r5, r1
 800492a:	462a      	mov	r2, r5
 800492c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004930:	5d06      	ldrb	r6, [r0, r4]
 8004932:	f016 0608 	ands.w	r6, r6, #8
 8004936:	d1f8      	bne.n	800492a <_strtol_l.constprop.0+0x22>
 8004938:	2c2d      	cmp	r4, #45	@ 0x2d
 800493a:	d12d      	bne.n	8004998 <_strtol_l.constprop.0+0x90>
 800493c:	782c      	ldrb	r4, [r5, #0]
 800493e:	2601      	movs	r6, #1
 8004940:	1c95      	adds	r5, r2, #2
 8004942:	f033 0210 	bics.w	r2, r3, #16
 8004946:	d109      	bne.n	800495c <_strtol_l.constprop.0+0x54>
 8004948:	2c30      	cmp	r4, #48	@ 0x30
 800494a:	d12a      	bne.n	80049a2 <_strtol_l.constprop.0+0x9a>
 800494c:	782a      	ldrb	r2, [r5, #0]
 800494e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004952:	2a58      	cmp	r2, #88	@ 0x58
 8004954:	d125      	bne.n	80049a2 <_strtol_l.constprop.0+0x9a>
 8004956:	786c      	ldrb	r4, [r5, #1]
 8004958:	2310      	movs	r3, #16
 800495a:	3502      	adds	r5, #2
 800495c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004960:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004964:	2200      	movs	r2, #0
 8004966:	fbbc f9f3 	udiv	r9, ip, r3
 800496a:	4610      	mov	r0, r2
 800496c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004970:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004974:	2f09      	cmp	r7, #9
 8004976:	d81b      	bhi.n	80049b0 <_strtol_l.constprop.0+0xa8>
 8004978:	463c      	mov	r4, r7
 800497a:	42a3      	cmp	r3, r4
 800497c:	dd27      	ble.n	80049ce <_strtol_l.constprop.0+0xc6>
 800497e:	1c57      	adds	r7, r2, #1
 8004980:	d007      	beq.n	8004992 <_strtol_l.constprop.0+0x8a>
 8004982:	4581      	cmp	r9, r0
 8004984:	d320      	bcc.n	80049c8 <_strtol_l.constprop.0+0xc0>
 8004986:	d101      	bne.n	800498c <_strtol_l.constprop.0+0x84>
 8004988:	45a2      	cmp	sl, r4
 800498a:	db1d      	blt.n	80049c8 <_strtol_l.constprop.0+0xc0>
 800498c:	fb00 4003 	mla	r0, r0, r3, r4
 8004990:	2201      	movs	r2, #1
 8004992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004996:	e7eb      	b.n	8004970 <_strtol_l.constprop.0+0x68>
 8004998:	2c2b      	cmp	r4, #43	@ 0x2b
 800499a:	bf04      	itt	eq
 800499c:	782c      	ldrbeq	r4, [r5, #0]
 800499e:	1c95      	addeq	r5, r2, #2
 80049a0:	e7cf      	b.n	8004942 <_strtol_l.constprop.0+0x3a>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1da      	bne.n	800495c <_strtol_l.constprop.0+0x54>
 80049a6:	2c30      	cmp	r4, #48	@ 0x30
 80049a8:	bf0c      	ite	eq
 80049aa:	2308      	moveq	r3, #8
 80049ac:	230a      	movne	r3, #10
 80049ae:	e7d5      	b.n	800495c <_strtol_l.constprop.0+0x54>
 80049b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80049b4:	2f19      	cmp	r7, #25
 80049b6:	d801      	bhi.n	80049bc <_strtol_l.constprop.0+0xb4>
 80049b8:	3c37      	subs	r4, #55	@ 0x37
 80049ba:	e7de      	b.n	800497a <_strtol_l.constprop.0+0x72>
 80049bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80049c0:	2f19      	cmp	r7, #25
 80049c2:	d804      	bhi.n	80049ce <_strtol_l.constprop.0+0xc6>
 80049c4:	3c57      	subs	r4, #87	@ 0x57
 80049c6:	e7d8      	b.n	800497a <_strtol_l.constprop.0+0x72>
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	e7e1      	b.n	8004992 <_strtol_l.constprop.0+0x8a>
 80049ce:	1c53      	adds	r3, r2, #1
 80049d0:	d108      	bne.n	80049e4 <_strtol_l.constprop.0+0xdc>
 80049d2:	2322      	movs	r3, #34	@ 0x22
 80049d4:	f8ce 3000 	str.w	r3, [lr]
 80049d8:	4660      	mov	r0, ip
 80049da:	f1b8 0f00 	cmp.w	r8, #0
 80049de:	d0a0      	beq.n	8004922 <_strtol_l.constprop.0+0x1a>
 80049e0:	1e69      	subs	r1, r5, #1
 80049e2:	e006      	b.n	80049f2 <_strtol_l.constprop.0+0xea>
 80049e4:	b106      	cbz	r6, 80049e8 <_strtol_l.constprop.0+0xe0>
 80049e6:	4240      	negs	r0, r0
 80049e8:	f1b8 0f00 	cmp.w	r8, #0
 80049ec:	d099      	beq.n	8004922 <_strtol_l.constprop.0+0x1a>
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	d1f6      	bne.n	80049e0 <_strtol_l.constprop.0+0xd8>
 80049f2:	f8c8 1000 	str.w	r1, [r8]
 80049f6:	e794      	b.n	8004922 <_strtol_l.constprop.0+0x1a>
 80049f8:	08005ee9 	.word	0x08005ee9

080049fc <strtol>:
 80049fc:	4613      	mov	r3, r2
 80049fe:	460a      	mov	r2, r1
 8004a00:	4601      	mov	r1, r0
 8004a02:	4802      	ldr	r0, [pc, #8]	@ (8004a0c <strtol+0x10>)
 8004a04:	6800      	ldr	r0, [r0, #0]
 8004a06:	f7ff bf7f 	b.w	8004908 <_strtol_l.constprop.0>
 8004a0a:	bf00      	nop
 8004a0c:	20000018 	.word	0x20000018

08004a10 <std>:
 8004a10:	2300      	movs	r3, #0
 8004a12:	b510      	push	{r4, lr}
 8004a14:	4604      	mov	r4, r0
 8004a16:	e9c0 3300 	strd	r3, r3, [r0]
 8004a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a1e:	6083      	str	r3, [r0, #8]
 8004a20:	8181      	strh	r1, [r0, #12]
 8004a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a24:	81c2      	strh	r2, [r0, #14]
 8004a26:	6183      	str	r3, [r0, #24]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	2208      	movs	r2, #8
 8004a2c:	305c      	adds	r0, #92	@ 0x5c
 8004a2e:	f000 fa21 	bl	8004e74 <memset>
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <std+0x58>)
 8004a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a36:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <std+0x5c>)
 8004a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a70 <std+0x60>)
 8004a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <std+0x64>)
 8004a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a42:	4b0d      	ldr	r3, [pc, #52]	@ (8004a78 <std+0x68>)
 8004a44:	6224      	str	r4, [r4, #32]
 8004a46:	429c      	cmp	r4, r3
 8004a48:	d006      	beq.n	8004a58 <std+0x48>
 8004a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a4e:	4294      	cmp	r4, r2
 8004a50:	d002      	beq.n	8004a58 <std+0x48>
 8004a52:	33d0      	adds	r3, #208	@ 0xd0
 8004a54:	429c      	cmp	r4, r3
 8004a56:	d105      	bne.n	8004a64 <std+0x54>
 8004a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a60:	f000 ba80 	b.w	8004f64 <__retarget_lock_init_recursive>
 8004a64:	bd10      	pop	{r4, pc}
 8004a66:	bf00      	nop
 8004a68:	08004cc5 	.word	0x08004cc5
 8004a6c:	08004ce7 	.word	0x08004ce7
 8004a70:	08004d1f 	.word	0x08004d1f
 8004a74:	08004d43 	.word	0x08004d43
 8004a78:	200002d8 	.word	0x200002d8

08004a7c <stdio_exit_handler>:
 8004a7c:	4a02      	ldr	r2, [pc, #8]	@ (8004a88 <stdio_exit_handler+0xc>)
 8004a7e:	4903      	ldr	r1, [pc, #12]	@ (8004a8c <stdio_exit_handler+0x10>)
 8004a80:	4803      	ldr	r0, [pc, #12]	@ (8004a90 <stdio_exit_handler+0x14>)
 8004a82:	f000 b869 	b.w	8004b58 <_fwalk_sglue>
 8004a86:	bf00      	nop
 8004a88:	2000000c 	.word	0x2000000c
 8004a8c:	08005ab5 	.word	0x08005ab5
 8004a90:	2000001c 	.word	0x2000001c

08004a94 <cleanup_stdio>:
 8004a94:	6841      	ldr	r1, [r0, #4]
 8004a96:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <cleanup_stdio+0x34>)
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	b510      	push	{r4, lr}
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	d001      	beq.n	8004aa4 <cleanup_stdio+0x10>
 8004aa0:	f001 f808 	bl	8005ab4 <_fflush_r>
 8004aa4:	68a1      	ldr	r1, [r4, #8]
 8004aa6:	4b09      	ldr	r3, [pc, #36]	@ (8004acc <cleanup_stdio+0x38>)
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d002      	beq.n	8004ab2 <cleanup_stdio+0x1e>
 8004aac:	4620      	mov	r0, r4
 8004aae:	f001 f801 	bl	8005ab4 <_fflush_r>
 8004ab2:	68e1      	ldr	r1, [r4, #12]
 8004ab4:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <cleanup_stdio+0x3c>)
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	d004      	beq.n	8004ac4 <cleanup_stdio+0x30>
 8004aba:	4620      	mov	r0, r4
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac0:	f000 bff8 	b.w	8005ab4 <_fflush_r>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200002d8 	.word	0x200002d8
 8004acc:	20000340 	.word	0x20000340
 8004ad0:	200003a8 	.word	0x200003a8

08004ad4 <global_stdio_init.part.0>:
 8004ad4:	b510      	push	{r4, lr}
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <global_stdio_init.part.0+0x30>)
 8004ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8004b08 <global_stdio_init.part.0+0x34>)
 8004ada:	4a0c      	ldr	r2, [pc, #48]	@ (8004b0c <global_stdio_init.part.0+0x38>)
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	4620      	mov	r0, r4
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	f7ff ff94 	bl	8004a10 <std>
 8004ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004aec:	2201      	movs	r2, #1
 8004aee:	2109      	movs	r1, #9
 8004af0:	f7ff ff8e 	bl	8004a10 <std>
 8004af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004af8:	2202      	movs	r2, #2
 8004afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004afe:	2112      	movs	r1, #18
 8004b00:	f7ff bf86 	b.w	8004a10 <std>
 8004b04:	20000410 	.word	0x20000410
 8004b08:	200002d8 	.word	0x200002d8
 8004b0c:	08004a7d 	.word	0x08004a7d

08004b10 <__sfp_lock_acquire>:
 8004b10:	4801      	ldr	r0, [pc, #4]	@ (8004b18 <__sfp_lock_acquire+0x8>)
 8004b12:	f000 ba28 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000419 	.word	0x20000419

08004b1c <__sfp_lock_release>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	@ (8004b24 <__sfp_lock_release+0x8>)
 8004b1e:	f000 ba23 	b.w	8004f68 <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000419 	.word	0x20000419

08004b28 <__sinit>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	f7ff fff0 	bl	8004b10 <__sfp_lock_acquire>
 8004b30:	6a23      	ldr	r3, [r4, #32]
 8004b32:	b11b      	cbz	r3, 8004b3c <__sinit+0x14>
 8004b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b38:	f7ff bff0 	b.w	8004b1c <__sfp_lock_release>
 8004b3c:	4b04      	ldr	r3, [pc, #16]	@ (8004b50 <__sinit+0x28>)
 8004b3e:	6223      	str	r3, [r4, #32]
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <__sinit+0x2c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f5      	bne.n	8004b34 <__sinit+0xc>
 8004b48:	f7ff ffc4 	bl	8004ad4 <global_stdio_init.part.0>
 8004b4c:	e7f2      	b.n	8004b34 <__sinit+0xc>
 8004b4e:	bf00      	nop
 8004b50:	08004a95 	.word	0x08004a95
 8004b54:	20000410 	.word	0x20000410

08004b58 <_fwalk_sglue>:
 8004b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	4688      	mov	r8, r1
 8004b60:	4614      	mov	r4, r2
 8004b62:	2600      	movs	r6, #0
 8004b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b68:	f1b9 0901 	subs.w	r9, r9, #1
 8004b6c:	d505      	bpl.n	8004b7a <_fwalk_sglue+0x22>
 8004b6e:	6824      	ldr	r4, [r4, #0]
 8004b70:	2c00      	cmp	r4, #0
 8004b72:	d1f7      	bne.n	8004b64 <_fwalk_sglue+0xc>
 8004b74:	4630      	mov	r0, r6
 8004b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d907      	bls.n	8004b90 <_fwalk_sglue+0x38>
 8004b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b84:	3301      	adds	r3, #1
 8004b86:	d003      	beq.n	8004b90 <_fwalk_sglue+0x38>
 8004b88:	4629      	mov	r1, r5
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	47c0      	blx	r8
 8004b8e:	4306      	orrs	r6, r0
 8004b90:	3568      	adds	r5, #104	@ 0x68
 8004b92:	e7e9      	b.n	8004b68 <_fwalk_sglue+0x10>

08004b94 <iprintf>:
 8004b94:	b40f      	push	{r0, r1, r2, r3}
 8004b96:	b507      	push	{r0, r1, r2, lr}
 8004b98:	4906      	ldr	r1, [pc, #24]	@ (8004bb4 <iprintf+0x20>)
 8004b9a:	ab04      	add	r3, sp, #16
 8004b9c:	6808      	ldr	r0, [r1, #0]
 8004b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ba2:	6881      	ldr	r1, [r0, #8]
 8004ba4:	9301      	str	r3, [sp, #4]
 8004ba6:	f000 fc5b 	bl	8005460 <_vfiprintf_r>
 8004baa:	b003      	add	sp, #12
 8004bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr
 8004bb4:	20000018 	.word	0x20000018

08004bb8 <putchar>:
 8004bb8:	4b02      	ldr	r3, [pc, #8]	@ (8004bc4 <putchar+0xc>)
 8004bba:	4601      	mov	r1, r0
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	6882      	ldr	r2, [r0, #8]
 8004bc0:	f001 b802 	b.w	8005bc8 <_putc_r>
 8004bc4:	20000018 	.word	0x20000018

08004bc8 <_puts_r>:
 8004bc8:	6a03      	ldr	r3, [r0, #32]
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	6884      	ldr	r4, [r0, #8]
 8004bce:	4605      	mov	r5, r0
 8004bd0:	460e      	mov	r6, r1
 8004bd2:	b90b      	cbnz	r3, 8004bd8 <_puts_r+0x10>
 8004bd4:	f7ff ffa8 	bl	8004b28 <__sinit>
 8004bd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d405      	bmi.n	8004bea <_puts_r+0x22>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	0598      	lsls	r0, r3, #22
 8004be2:	d402      	bmi.n	8004bea <_puts_r+0x22>
 8004be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004be6:	f000 f9be 	bl	8004f66 <__retarget_lock_acquire_recursive>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	0719      	lsls	r1, r3, #28
 8004bee:	d502      	bpl.n	8004bf6 <_puts_r+0x2e>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d135      	bne.n	8004c62 <_puts_r+0x9a>
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 f8e5 	bl	8004dc8 <__swsetup_r>
 8004bfe:	b380      	cbz	r0, 8004c62 <_puts_r+0x9a>
 8004c00:	f04f 35ff 	mov.w	r5, #4294967295
 8004c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c06:	07da      	lsls	r2, r3, #31
 8004c08:	d405      	bmi.n	8004c16 <_puts_r+0x4e>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	059b      	lsls	r3, r3, #22
 8004c0e:	d402      	bmi.n	8004c16 <_puts_r+0x4e>
 8004c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c12:	f000 f9a9 	bl	8004f68 <__retarget_lock_release_recursive>
 8004c16:	4628      	mov	r0, r5
 8004c18:	bd70      	pop	{r4, r5, r6, pc}
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	da04      	bge.n	8004c28 <_puts_r+0x60>
 8004c1e:	69a2      	ldr	r2, [r4, #24]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	dc17      	bgt.n	8004c54 <_puts_r+0x8c>
 8004c24:	290a      	cmp	r1, #10
 8004c26:	d015      	beq.n	8004c54 <_puts_r+0x8c>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	7019      	strb	r1, [r3, #0]
 8004c30:	68a3      	ldr	r3, [r4, #8]
 8004c32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c36:	3b01      	subs	r3, #1
 8004c38:	60a3      	str	r3, [r4, #8]
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	d1ed      	bne.n	8004c1a <_puts_r+0x52>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da11      	bge.n	8004c66 <_puts_r+0x9e>
 8004c42:	4622      	mov	r2, r4
 8004c44:	210a      	movs	r1, #10
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f87f 	bl	8004d4a <__swbuf_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d0d7      	beq.n	8004c00 <_puts_r+0x38>
 8004c50:	250a      	movs	r5, #10
 8004c52:	e7d7      	b.n	8004c04 <_puts_r+0x3c>
 8004c54:	4622      	mov	r2, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f877 	bl	8004d4a <__swbuf_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d1e7      	bne.n	8004c30 <_puts_r+0x68>
 8004c60:	e7ce      	b.n	8004c00 <_puts_r+0x38>
 8004c62:	3e01      	subs	r6, #1
 8004c64:	e7e4      	b.n	8004c30 <_puts_r+0x68>
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	220a      	movs	r2, #10
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e7ee      	b.n	8004c50 <_puts_r+0x88>
	...

08004c74 <puts>:
 8004c74:	4b02      	ldr	r3, [pc, #8]	@ (8004c80 <puts+0xc>)
 8004c76:	4601      	mov	r1, r0
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	f7ff bfa5 	b.w	8004bc8 <_puts_r>
 8004c7e:	bf00      	nop
 8004c80:	20000018 	.word	0x20000018

08004c84 <siprintf>:
 8004c84:	b40e      	push	{r1, r2, r3}
 8004c86:	b500      	push	{lr}
 8004c88:	b09c      	sub	sp, #112	@ 0x70
 8004c8a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c8c:	9002      	str	r0, [sp, #8]
 8004c8e:	9006      	str	r0, [sp, #24]
 8004c90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c94:	4809      	ldr	r0, [pc, #36]	@ (8004cbc <siprintf+0x38>)
 8004c96:	9107      	str	r1, [sp, #28]
 8004c98:	9104      	str	r1, [sp, #16]
 8004c9a:	4909      	ldr	r1, [pc, #36]	@ (8004cc0 <siprintf+0x3c>)
 8004c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ca0:	9105      	str	r1, [sp, #20]
 8004ca2:	6800      	ldr	r0, [r0, #0]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	a902      	add	r1, sp, #8
 8004ca8:	f000 fab4 	bl	8005214 <_svfiprintf_r>
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	b01c      	add	sp, #112	@ 0x70
 8004cb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cb8:	b003      	add	sp, #12
 8004cba:	4770      	bx	lr
 8004cbc:	20000018 	.word	0x20000018
 8004cc0:	ffff0208 	.word	0xffff0208

08004cc4 <__sread>:
 8004cc4:	b510      	push	{r4, lr}
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ccc:	f000 f8fc 	bl	8004ec8 <_read_r>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	bfab      	itete	ge
 8004cd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cd8:	181b      	addge	r3, r3, r0
 8004cda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cde:	bfac      	ite	ge
 8004ce0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ce2:	81a3      	strhlt	r3, [r4, #12]
 8004ce4:	bd10      	pop	{r4, pc}

08004ce6 <__swrite>:
 8004ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cea:	461f      	mov	r7, r3
 8004cec:	898b      	ldrh	r3, [r1, #12]
 8004cee:	05db      	lsls	r3, r3, #23
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	d505      	bpl.n	8004d04 <__swrite+0x1e>
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f000 f8d0 	bl	8004ea4 <_lseek_r>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0e:	81a3      	strh	r3, [r4, #12]
 8004d10:	4632      	mov	r2, r6
 8004d12:	463b      	mov	r3, r7
 8004d14:	4628      	mov	r0, r5
 8004d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	f000 b8e7 	b.w	8004eec <_write_r>

08004d1e <__sseek>:
 8004d1e:	b510      	push	{r4, lr}
 8004d20:	460c      	mov	r4, r1
 8004d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d26:	f000 f8bd 	bl	8004ea4 <_lseek_r>
 8004d2a:	1c43      	adds	r3, r0, #1
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	bf15      	itete	ne
 8004d30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d3a:	81a3      	strheq	r3, [r4, #12]
 8004d3c:	bf18      	it	ne
 8004d3e:	81a3      	strhne	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__sclose>:
 8004d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d46:	f000 b89d 	b.w	8004e84 <_close_r>

08004d4a <__swbuf_r>:
 8004d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	4614      	mov	r4, r2
 8004d50:	4605      	mov	r5, r0
 8004d52:	b118      	cbz	r0, 8004d5c <__swbuf_r+0x12>
 8004d54:	6a03      	ldr	r3, [r0, #32]
 8004d56:	b90b      	cbnz	r3, 8004d5c <__swbuf_r+0x12>
 8004d58:	f7ff fee6 	bl	8004b28 <__sinit>
 8004d5c:	69a3      	ldr	r3, [r4, #24]
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	071a      	lsls	r2, r3, #28
 8004d64:	d501      	bpl.n	8004d6a <__swbuf_r+0x20>
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	b943      	cbnz	r3, 8004d7c <__swbuf_r+0x32>
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f000 f82b 	bl	8004dc8 <__swsetup_r>
 8004d72:	b118      	cbz	r0, 8004d7c <__swbuf_r+0x32>
 8004d74:	f04f 37ff 	mov.w	r7, #4294967295
 8004d78:	4638      	mov	r0, r7
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	6922      	ldr	r2, [r4, #16]
 8004d80:	1a98      	subs	r0, r3, r2
 8004d82:	6963      	ldr	r3, [r4, #20]
 8004d84:	b2f6      	uxtb	r6, r6
 8004d86:	4283      	cmp	r3, r0
 8004d88:	4637      	mov	r7, r6
 8004d8a:	dc05      	bgt.n	8004d98 <__swbuf_r+0x4e>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fe90 	bl	8005ab4 <_fflush_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d1ed      	bne.n	8004d74 <__swbuf_r+0x2a>
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	6022      	str	r2, [r4, #0]
 8004da4:	701e      	strb	r6, [r3, #0]
 8004da6:	6962      	ldr	r2, [r4, #20]
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d004      	beq.n	8004db8 <__swbuf_r+0x6e>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	07db      	lsls	r3, r3, #31
 8004db2:	d5e1      	bpl.n	8004d78 <__swbuf_r+0x2e>
 8004db4:	2e0a      	cmp	r6, #10
 8004db6:	d1df      	bne.n	8004d78 <__swbuf_r+0x2e>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 fe7a 	bl	8005ab4 <_fflush_r>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d0d9      	beq.n	8004d78 <__swbuf_r+0x2e>
 8004dc4:	e7d6      	b.n	8004d74 <__swbuf_r+0x2a>
	...

08004dc8 <__swsetup_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <__swsetup_r+0xa8>)
 8004dcc:	4605      	mov	r5, r0
 8004dce:	6818      	ldr	r0, [r3, #0]
 8004dd0:	460c      	mov	r4, r1
 8004dd2:	b118      	cbz	r0, 8004ddc <__swsetup_r+0x14>
 8004dd4:	6a03      	ldr	r3, [r0, #32]
 8004dd6:	b90b      	cbnz	r3, 8004ddc <__swsetup_r+0x14>
 8004dd8:	f7ff fea6 	bl	8004b28 <__sinit>
 8004ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de0:	0719      	lsls	r1, r3, #28
 8004de2:	d422      	bmi.n	8004e2a <__swsetup_r+0x62>
 8004de4:	06da      	lsls	r2, r3, #27
 8004de6:	d407      	bmi.n	8004df8 <__swsetup_r+0x30>
 8004de8:	2209      	movs	r2, #9
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	e033      	b.n	8004e60 <__swsetup_r+0x98>
 8004df8:	0758      	lsls	r0, r3, #29
 8004dfa:	d512      	bpl.n	8004e22 <__swsetup_r+0x5a>
 8004dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dfe:	b141      	cbz	r1, 8004e12 <__swsetup_r+0x4a>
 8004e00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e04:	4299      	cmp	r1, r3
 8004e06:	d002      	beq.n	8004e0e <__swsetup_r+0x46>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 f8af 	bl	8004f6c <_free_r>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	6063      	str	r3, [r4, #4]
 8004e1e:	6923      	ldr	r3, [r4, #16]
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	6923      	ldr	r3, [r4, #16]
 8004e2c:	b94b      	cbnz	r3, 8004e42 <__swsetup_r+0x7a>
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e38:	d003      	beq.n	8004e42 <__swsetup_r+0x7a>
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f000 fe87 	bl	8005b50 <__smakebuf_r>
 8004e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e46:	f013 0201 	ands.w	r2, r3, #1
 8004e4a:	d00a      	beq.n	8004e62 <__swsetup_r+0x9a>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	60a2      	str	r2, [r4, #8]
 8004e50:	6962      	ldr	r2, [r4, #20]
 8004e52:	4252      	negs	r2, r2
 8004e54:	61a2      	str	r2, [r4, #24]
 8004e56:	6922      	ldr	r2, [r4, #16]
 8004e58:	b942      	cbnz	r2, 8004e6c <__swsetup_r+0xa4>
 8004e5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e5e:	d1c5      	bne.n	8004dec <__swsetup_r+0x24>
 8004e60:	bd38      	pop	{r3, r4, r5, pc}
 8004e62:	0799      	lsls	r1, r3, #30
 8004e64:	bf58      	it	pl
 8004e66:	6962      	ldrpl	r2, [r4, #20]
 8004e68:	60a2      	str	r2, [r4, #8]
 8004e6a:	e7f4      	b.n	8004e56 <__swsetup_r+0x8e>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e7f7      	b.n	8004e60 <__swsetup_r+0x98>
 8004e70:	20000018 	.word	0x20000018

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_close_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	@ (8004ea0 <_close_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fc f9c3 	bl	800121a <_close>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_close_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_close_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	20000414 	.word	0x20000414

08004ea4 <_lseek_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d07      	ldr	r5, [pc, #28]	@ (8004ec4 <_lseek_r+0x20>)
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	4608      	mov	r0, r1
 8004eac:	4611      	mov	r1, r2
 8004eae:	2200      	movs	r2, #0
 8004eb0:	602a      	str	r2, [r5, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f7fc f9d8 	bl	8001268 <_lseek>
 8004eb8:	1c43      	adds	r3, r0, #1
 8004eba:	d102      	bne.n	8004ec2 <_lseek_r+0x1e>
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	b103      	cbz	r3, 8004ec2 <_lseek_r+0x1e>
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	20000414 	.word	0x20000414

08004ec8 <_read_r>:
 8004ec8:	b538      	push	{r3, r4, r5, lr}
 8004eca:	4d07      	ldr	r5, [pc, #28]	@ (8004ee8 <_read_r+0x20>)
 8004ecc:	4604      	mov	r4, r0
 8004ece:	4608      	mov	r0, r1
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	602a      	str	r2, [r5, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f7fc f966 	bl	80011a8 <_read>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_read_r+0x1e>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_read_r+0x1e>
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	20000414 	.word	0x20000414

08004eec <_write_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4d07      	ldr	r5, [pc, #28]	@ (8004f0c <_write_r+0x20>)
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	4608      	mov	r0, r1
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	602a      	str	r2, [r5, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	f7fc f971 	bl	80011e2 <_write>
 8004f00:	1c43      	adds	r3, r0, #1
 8004f02:	d102      	bne.n	8004f0a <_write_r+0x1e>
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	b103      	cbz	r3, 8004f0a <_write_r+0x1e>
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	bd38      	pop	{r3, r4, r5, pc}
 8004f0c:	20000414 	.word	0x20000414

08004f10 <__errno>:
 8004f10:	4b01      	ldr	r3, [pc, #4]	@ (8004f18 <__errno+0x8>)
 8004f12:	6818      	ldr	r0, [r3, #0]
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000018 	.word	0x20000018

08004f1c <__libc_init_array>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8004f54 <__libc_init_array+0x38>)
 8004f20:	4c0d      	ldr	r4, [pc, #52]	@ (8004f58 <__libc_init_array+0x3c>)
 8004f22:	1b64      	subs	r4, r4, r5
 8004f24:	10a4      	asrs	r4, r4, #2
 8004f26:	2600      	movs	r6, #0
 8004f28:	42a6      	cmp	r6, r4
 8004f2a:	d109      	bne.n	8004f40 <__libc_init_array+0x24>
 8004f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8004f5c <__libc_init_array+0x40>)
 8004f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8004f60 <__libc_init_array+0x44>)
 8004f30:	f000 ff0e 	bl	8005d50 <_init>
 8004f34:	1b64      	subs	r4, r4, r5
 8004f36:	10a4      	asrs	r4, r4, #2
 8004f38:	2600      	movs	r6, #0
 8004f3a:	42a6      	cmp	r6, r4
 8004f3c:	d105      	bne.n	8004f4a <__libc_init_array+0x2e>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f44:	4798      	blx	r3
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7ee      	b.n	8004f28 <__libc_init_array+0xc>
 8004f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f4e:	4798      	blx	r3
 8004f50:	3601      	adds	r6, #1
 8004f52:	e7f2      	b.n	8004f3a <__libc_init_array+0x1e>
 8004f54:	08006024 	.word	0x08006024
 8004f58:	08006024 	.word	0x08006024
 8004f5c:	08006024 	.word	0x08006024
 8004f60:	08006028 	.word	0x08006028

08004f64 <__retarget_lock_init_recursive>:
 8004f64:	4770      	bx	lr

08004f66 <__retarget_lock_acquire_recursive>:
 8004f66:	4770      	bx	lr

08004f68 <__retarget_lock_release_recursive>:
 8004f68:	4770      	bx	lr
	...

08004f6c <_free_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4605      	mov	r5, r0
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d041      	beq.n	8004ff8 <_free_r+0x8c>
 8004f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f78:	1f0c      	subs	r4, r1, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfb8      	it	lt
 8004f7e:	18e4      	addlt	r4, r4, r3
 8004f80:	f000 f8e0 	bl	8005144 <__malloc_lock>
 8004f84:	4a1d      	ldr	r2, [pc, #116]	@ (8004ffc <_free_r+0x90>)
 8004f86:	6813      	ldr	r3, [r2, #0]
 8004f88:	b933      	cbnz	r3, 8004f98 <_free_r+0x2c>
 8004f8a:	6063      	str	r3, [r4, #4]
 8004f8c:	6014      	str	r4, [r2, #0]
 8004f8e:	4628      	mov	r0, r5
 8004f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f94:	f000 b8dc 	b.w	8005150 <__malloc_unlock>
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d908      	bls.n	8004fae <_free_r+0x42>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	1821      	adds	r1, r4, r0
 8004fa0:	428b      	cmp	r3, r1
 8004fa2:	bf01      	itttt	eq
 8004fa4:	6819      	ldreq	r1, [r3, #0]
 8004fa6:	685b      	ldreq	r3, [r3, #4]
 8004fa8:	1809      	addeq	r1, r1, r0
 8004faa:	6021      	streq	r1, [r4, #0]
 8004fac:	e7ed      	b.n	8004f8a <_free_r+0x1e>
 8004fae:	461a      	mov	r2, r3
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	b10b      	cbz	r3, 8004fb8 <_free_r+0x4c>
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	d9fa      	bls.n	8004fae <_free_r+0x42>
 8004fb8:	6811      	ldr	r1, [r2, #0]
 8004fba:	1850      	adds	r0, r2, r1
 8004fbc:	42a0      	cmp	r0, r4
 8004fbe:	d10b      	bne.n	8004fd8 <_free_r+0x6c>
 8004fc0:	6820      	ldr	r0, [r4, #0]
 8004fc2:	4401      	add	r1, r0
 8004fc4:	1850      	adds	r0, r2, r1
 8004fc6:	4283      	cmp	r3, r0
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	d1e0      	bne.n	8004f8e <_free_r+0x22>
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	6053      	str	r3, [r2, #4]
 8004fd2:	4408      	add	r0, r1
 8004fd4:	6010      	str	r0, [r2, #0]
 8004fd6:	e7da      	b.n	8004f8e <_free_r+0x22>
 8004fd8:	d902      	bls.n	8004fe0 <_free_r+0x74>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	e7d6      	b.n	8004f8e <_free_r+0x22>
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	1821      	adds	r1, r4, r0
 8004fe4:	428b      	cmp	r3, r1
 8004fe6:	bf04      	itt	eq
 8004fe8:	6819      	ldreq	r1, [r3, #0]
 8004fea:	685b      	ldreq	r3, [r3, #4]
 8004fec:	6063      	str	r3, [r4, #4]
 8004fee:	bf04      	itt	eq
 8004ff0:	1809      	addeq	r1, r1, r0
 8004ff2:	6021      	streq	r1, [r4, #0]
 8004ff4:	6054      	str	r4, [r2, #4]
 8004ff6:	e7ca      	b.n	8004f8e <_free_r+0x22>
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000420 	.word	0x20000420

08005000 <sbrk_aligned>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4e0f      	ldr	r6, [pc, #60]	@ (8005040 <sbrk_aligned+0x40>)
 8005004:	460c      	mov	r4, r1
 8005006:	6831      	ldr	r1, [r6, #0]
 8005008:	4605      	mov	r5, r0
 800500a:	b911      	cbnz	r1, 8005012 <sbrk_aligned+0x12>
 800500c:	f000 fe4c 	bl	8005ca8 <_sbrk_r>
 8005010:	6030      	str	r0, [r6, #0]
 8005012:	4621      	mov	r1, r4
 8005014:	4628      	mov	r0, r5
 8005016:	f000 fe47 	bl	8005ca8 <_sbrk_r>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	d103      	bne.n	8005026 <sbrk_aligned+0x26>
 800501e:	f04f 34ff 	mov.w	r4, #4294967295
 8005022:	4620      	mov	r0, r4
 8005024:	bd70      	pop	{r4, r5, r6, pc}
 8005026:	1cc4      	adds	r4, r0, #3
 8005028:	f024 0403 	bic.w	r4, r4, #3
 800502c:	42a0      	cmp	r0, r4
 800502e:	d0f8      	beq.n	8005022 <sbrk_aligned+0x22>
 8005030:	1a21      	subs	r1, r4, r0
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fe38 	bl	8005ca8 <_sbrk_r>
 8005038:	3001      	adds	r0, #1
 800503a:	d1f2      	bne.n	8005022 <sbrk_aligned+0x22>
 800503c:	e7ef      	b.n	800501e <sbrk_aligned+0x1e>
 800503e:	bf00      	nop
 8005040:	2000041c 	.word	0x2000041c

08005044 <_malloc_r>:
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005048:	1ccd      	adds	r5, r1, #3
 800504a:	f025 0503 	bic.w	r5, r5, #3
 800504e:	3508      	adds	r5, #8
 8005050:	2d0c      	cmp	r5, #12
 8005052:	bf38      	it	cc
 8005054:	250c      	movcc	r5, #12
 8005056:	2d00      	cmp	r5, #0
 8005058:	4606      	mov	r6, r0
 800505a:	db01      	blt.n	8005060 <_malloc_r+0x1c>
 800505c:	42a9      	cmp	r1, r5
 800505e:	d904      	bls.n	800506a <_malloc_r+0x26>
 8005060:	230c      	movs	r3, #12
 8005062:	6033      	str	r3, [r6, #0]
 8005064:	2000      	movs	r0, #0
 8005066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005140 <_malloc_r+0xfc>
 800506e:	f000 f869 	bl	8005144 <__malloc_lock>
 8005072:	f8d8 3000 	ldr.w	r3, [r8]
 8005076:	461c      	mov	r4, r3
 8005078:	bb44      	cbnz	r4, 80050cc <_malloc_r+0x88>
 800507a:	4629      	mov	r1, r5
 800507c:	4630      	mov	r0, r6
 800507e:	f7ff ffbf 	bl	8005000 <sbrk_aligned>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	4604      	mov	r4, r0
 8005086:	d158      	bne.n	800513a <_malloc_r+0xf6>
 8005088:	f8d8 4000 	ldr.w	r4, [r8]
 800508c:	4627      	mov	r7, r4
 800508e:	2f00      	cmp	r7, #0
 8005090:	d143      	bne.n	800511a <_malloc_r+0xd6>
 8005092:	2c00      	cmp	r4, #0
 8005094:	d04b      	beq.n	800512e <_malloc_r+0xea>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	4639      	mov	r1, r7
 800509a:	4630      	mov	r0, r6
 800509c:	eb04 0903 	add.w	r9, r4, r3
 80050a0:	f000 fe02 	bl	8005ca8 <_sbrk_r>
 80050a4:	4581      	cmp	r9, r0
 80050a6:	d142      	bne.n	800512e <_malloc_r+0xea>
 80050a8:	6821      	ldr	r1, [r4, #0]
 80050aa:	1a6d      	subs	r5, r5, r1
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ffa6 	bl	8005000 <sbrk_aligned>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d03a      	beq.n	800512e <_malloc_r+0xea>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	442b      	add	r3, r5
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	f8d8 3000 	ldr.w	r3, [r8]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	bb62      	cbnz	r2, 8005120 <_malloc_r+0xdc>
 80050c6:	f8c8 7000 	str.w	r7, [r8]
 80050ca:	e00f      	b.n	80050ec <_malloc_r+0xa8>
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	1b52      	subs	r2, r2, r5
 80050d0:	d420      	bmi.n	8005114 <_malloc_r+0xd0>
 80050d2:	2a0b      	cmp	r2, #11
 80050d4:	d917      	bls.n	8005106 <_malloc_r+0xc2>
 80050d6:	1961      	adds	r1, r4, r5
 80050d8:	42a3      	cmp	r3, r4
 80050da:	6025      	str	r5, [r4, #0]
 80050dc:	bf18      	it	ne
 80050de:	6059      	strne	r1, [r3, #4]
 80050e0:	6863      	ldr	r3, [r4, #4]
 80050e2:	bf08      	it	eq
 80050e4:	f8c8 1000 	streq.w	r1, [r8]
 80050e8:	5162      	str	r2, [r4, r5]
 80050ea:	604b      	str	r3, [r1, #4]
 80050ec:	4630      	mov	r0, r6
 80050ee:	f000 f82f 	bl	8005150 <__malloc_unlock>
 80050f2:	f104 000b 	add.w	r0, r4, #11
 80050f6:	1d23      	adds	r3, r4, #4
 80050f8:	f020 0007 	bic.w	r0, r0, #7
 80050fc:	1ac2      	subs	r2, r0, r3
 80050fe:	bf1c      	itt	ne
 8005100:	1a1b      	subne	r3, r3, r0
 8005102:	50a3      	strne	r3, [r4, r2]
 8005104:	e7af      	b.n	8005066 <_malloc_r+0x22>
 8005106:	6862      	ldr	r2, [r4, #4]
 8005108:	42a3      	cmp	r3, r4
 800510a:	bf0c      	ite	eq
 800510c:	f8c8 2000 	streq.w	r2, [r8]
 8005110:	605a      	strne	r2, [r3, #4]
 8005112:	e7eb      	b.n	80050ec <_malloc_r+0xa8>
 8005114:	4623      	mov	r3, r4
 8005116:	6864      	ldr	r4, [r4, #4]
 8005118:	e7ae      	b.n	8005078 <_malloc_r+0x34>
 800511a:	463c      	mov	r4, r7
 800511c:	687f      	ldr	r7, [r7, #4]
 800511e:	e7b6      	b.n	800508e <_malloc_r+0x4a>
 8005120:	461a      	mov	r2, r3
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	42a3      	cmp	r3, r4
 8005126:	d1fb      	bne.n	8005120 <_malloc_r+0xdc>
 8005128:	2300      	movs	r3, #0
 800512a:	6053      	str	r3, [r2, #4]
 800512c:	e7de      	b.n	80050ec <_malloc_r+0xa8>
 800512e:	230c      	movs	r3, #12
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	4630      	mov	r0, r6
 8005134:	f000 f80c 	bl	8005150 <__malloc_unlock>
 8005138:	e794      	b.n	8005064 <_malloc_r+0x20>
 800513a:	6005      	str	r5, [r0, #0]
 800513c:	e7d6      	b.n	80050ec <_malloc_r+0xa8>
 800513e:	bf00      	nop
 8005140:	20000420 	.word	0x20000420

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	@ (800514c <__malloc_lock+0x8>)
 8005146:	f7ff bf0e 	b.w	8004f66 <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	20000418 	.word	0x20000418

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	@ (8005158 <__malloc_unlock+0x8>)
 8005152:	f7ff bf09 	b.w	8004f68 <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	20000418 	.word	0x20000418

0800515c <__ssputs_r>:
 800515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005160:	688e      	ldr	r6, [r1, #8]
 8005162:	461f      	mov	r7, r3
 8005164:	42be      	cmp	r6, r7
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	4682      	mov	sl, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4690      	mov	r8, r2
 800516e:	d82d      	bhi.n	80051cc <__ssputs_r+0x70>
 8005170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005178:	d026      	beq.n	80051c8 <__ssputs_r+0x6c>
 800517a:	6965      	ldr	r5, [r4, #20]
 800517c:	6909      	ldr	r1, [r1, #16]
 800517e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005182:	eba3 0901 	sub.w	r9, r3, r1
 8005186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800518a:	1c7b      	adds	r3, r7, #1
 800518c:	444b      	add	r3, r9
 800518e:	106d      	asrs	r5, r5, #1
 8005190:	429d      	cmp	r5, r3
 8005192:	bf38      	it	cc
 8005194:	461d      	movcc	r5, r3
 8005196:	0553      	lsls	r3, r2, #21
 8005198:	d527      	bpl.n	80051ea <__ssputs_r+0x8e>
 800519a:	4629      	mov	r1, r5
 800519c:	f7ff ff52 	bl	8005044 <_malloc_r>
 80051a0:	4606      	mov	r6, r0
 80051a2:	b360      	cbz	r0, 80051fe <__ssputs_r+0xa2>
 80051a4:	6921      	ldr	r1, [r4, #16]
 80051a6:	464a      	mov	r2, r9
 80051a8:	f000 fd8e 	bl	8005cc8 <memcpy>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80051b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	6126      	str	r6, [r4, #16]
 80051ba:	6165      	str	r5, [r4, #20]
 80051bc:	444e      	add	r6, r9
 80051be:	eba5 0509 	sub.w	r5, r5, r9
 80051c2:	6026      	str	r6, [r4, #0]
 80051c4:	60a5      	str	r5, [r4, #8]
 80051c6:	463e      	mov	r6, r7
 80051c8:	42be      	cmp	r6, r7
 80051ca:	d900      	bls.n	80051ce <__ssputs_r+0x72>
 80051cc:	463e      	mov	r6, r7
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	4632      	mov	r2, r6
 80051d2:	4641      	mov	r1, r8
 80051d4:	f000 fd2c 	bl	8005c30 <memmove>
 80051d8:	68a3      	ldr	r3, [r4, #8]
 80051da:	1b9b      	subs	r3, r3, r6
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	4433      	add	r3, r6
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ea:	462a      	mov	r2, r5
 80051ec:	f000 fd7a 	bl	8005ce4 <_realloc_r>
 80051f0:	4606      	mov	r6, r0
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d1e0      	bne.n	80051b8 <__ssputs_r+0x5c>
 80051f6:	6921      	ldr	r1, [r4, #16]
 80051f8:	4650      	mov	r0, sl
 80051fa:	f7ff feb7 	bl	8004f6c <_free_r>
 80051fe:	230c      	movs	r3, #12
 8005200:	f8ca 3000 	str.w	r3, [sl]
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800520a:	81a3      	strh	r3, [r4, #12]
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	e7e9      	b.n	80051e6 <__ssputs_r+0x8a>
	...

08005214 <_svfiprintf_r>:
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005218:	4698      	mov	r8, r3
 800521a:	898b      	ldrh	r3, [r1, #12]
 800521c:	061b      	lsls	r3, r3, #24
 800521e:	b09d      	sub	sp, #116	@ 0x74
 8005220:	4607      	mov	r7, r0
 8005222:	460d      	mov	r5, r1
 8005224:	4614      	mov	r4, r2
 8005226:	d510      	bpl.n	800524a <_svfiprintf_r+0x36>
 8005228:	690b      	ldr	r3, [r1, #16]
 800522a:	b973      	cbnz	r3, 800524a <_svfiprintf_r+0x36>
 800522c:	2140      	movs	r1, #64	@ 0x40
 800522e:	f7ff ff09 	bl	8005044 <_malloc_r>
 8005232:	6028      	str	r0, [r5, #0]
 8005234:	6128      	str	r0, [r5, #16]
 8005236:	b930      	cbnz	r0, 8005246 <_svfiprintf_r+0x32>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	b01d      	add	sp, #116	@ 0x74
 8005242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005246:	2340      	movs	r3, #64	@ 0x40
 8005248:	616b      	str	r3, [r5, #20]
 800524a:	2300      	movs	r3, #0
 800524c:	9309      	str	r3, [sp, #36]	@ 0x24
 800524e:	2320      	movs	r3, #32
 8005250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005254:	f8cd 800c 	str.w	r8, [sp, #12]
 8005258:	2330      	movs	r3, #48	@ 0x30
 800525a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053f8 <_svfiprintf_r+0x1e4>
 800525e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005262:	f04f 0901 	mov.w	r9, #1
 8005266:	4623      	mov	r3, r4
 8005268:	469a      	mov	sl, r3
 800526a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800526e:	b10a      	cbz	r2, 8005274 <_svfiprintf_r+0x60>
 8005270:	2a25      	cmp	r2, #37	@ 0x25
 8005272:	d1f9      	bne.n	8005268 <_svfiprintf_r+0x54>
 8005274:	ebba 0b04 	subs.w	fp, sl, r4
 8005278:	d00b      	beq.n	8005292 <_svfiprintf_r+0x7e>
 800527a:	465b      	mov	r3, fp
 800527c:	4622      	mov	r2, r4
 800527e:	4629      	mov	r1, r5
 8005280:	4638      	mov	r0, r7
 8005282:	f7ff ff6b 	bl	800515c <__ssputs_r>
 8005286:	3001      	adds	r0, #1
 8005288:	f000 80a7 	beq.w	80053da <_svfiprintf_r+0x1c6>
 800528c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800528e:	445a      	add	r2, fp
 8005290:	9209      	str	r2, [sp, #36]	@ 0x24
 8005292:	f89a 3000 	ldrb.w	r3, [sl]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 809f 	beq.w	80053da <_svfiprintf_r+0x1c6>
 800529c:	2300      	movs	r3, #0
 800529e:	f04f 32ff 	mov.w	r2, #4294967295
 80052a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a6:	f10a 0a01 	add.w	sl, sl, #1
 80052aa:	9304      	str	r3, [sp, #16]
 80052ac:	9307      	str	r3, [sp, #28]
 80052ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80052b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80052b4:	4654      	mov	r4, sl
 80052b6:	2205      	movs	r2, #5
 80052b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052bc:	484e      	ldr	r0, [pc, #312]	@ (80053f8 <_svfiprintf_r+0x1e4>)
 80052be:	f7fa ff8f 	bl	80001e0 <memchr>
 80052c2:	9a04      	ldr	r2, [sp, #16]
 80052c4:	b9d8      	cbnz	r0, 80052fe <_svfiprintf_r+0xea>
 80052c6:	06d0      	lsls	r0, r2, #27
 80052c8:	bf44      	itt	mi
 80052ca:	2320      	movmi	r3, #32
 80052cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052d0:	0711      	lsls	r1, r2, #28
 80052d2:	bf44      	itt	mi
 80052d4:	232b      	movmi	r3, #43	@ 0x2b
 80052d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052da:	f89a 3000 	ldrb.w	r3, [sl]
 80052de:	2b2a      	cmp	r3, #42	@ 0x2a
 80052e0:	d015      	beq.n	800530e <_svfiprintf_r+0xfa>
 80052e2:	9a07      	ldr	r2, [sp, #28]
 80052e4:	4654      	mov	r4, sl
 80052e6:	2000      	movs	r0, #0
 80052e8:	f04f 0c0a 	mov.w	ip, #10
 80052ec:	4621      	mov	r1, r4
 80052ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052f2:	3b30      	subs	r3, #48	@ 0x30
 80052f4:	2b09      	cmp	r3, #9
 80052f6:	d94b      	bls.n	8005390 <_svfiprintf_r+0x17c>
 80052f8:	b1b0      	cbz	r0, 8005328 <_svfiprintf_r+0x114>
 80052fa:	9207      	str	r2, [sp, #28]
 80052fc:	e014      	b.n	8005328 <_svfiprintf_r+0x114>
 80052fe:	eba0 0308 	sub.w	r3, r0, r8
 8005302:	fa09 f303 	lsl.w	r3, r9, r3
 8005306:	4313      	orrs	r3, r2
 8005308:	9304      	str	r3, [sp, #16]
 800530a:	46a2      	mov	sl, r4
 800530c:	e7d2      	b.n	80052b4 <_svfiprintf_r+0xa0>
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	1d19      	adds	r1, r3, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	9103      	str	r1, [sp, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	bfbb      	ittet	lt
 800531a:	425b      	neglt	r3, r3
 800531c:	f042 0202 	orrlt.w	r2, r2, #2
 8005320:	9307      	strge	r3, [sp, #28]
 8005322:	9307      	strlt	r3, [sp, #28]
 8005324:	bfb8      	it	lt
 8005326:	9204      	strlt	r2, [sp, #16]
 8005328:	7823      	ldrb	r3, [r4, #0]
 800532a:	2b2e      	cmp	r3, #46	@ 0x2e
 800532c:	d10a      	bne.n	8005344 <_svfiprintf_r+0x130>
 800532e:	7863      	ldrb	r3, [r4, #1]
 8005330:	2b2a      	cmp	r3, #42	@ 0x2a
 8005332:	d132      	bne.n	800539a <_svfiprintf_r+0x186>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	9203      	str	r2, [sp, #12]
 800533c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005340:	3402      	adds	r4, #2
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005408 <_svfiprintf_r+0x1f4>
 8005348:	7821      	ldrb	r1, [r4, #0]
 800534a:	2203      	movs	r2, #3
 800534c:	4650      	mov	r0, sl
 800534e:	f7fa ff47 	bl	80001e0 <memchr>
 8005352:	b138      	cbz	r0, 8005364 <_svfiprintf_r+0x150>
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	eba0 000a 	sub.w	r0, r0, sl
 800535a:	2240      	movs	r2, #64	@ 0x40
 800535c:	4082      	lsls	r2, r0
 800535e:	4313      	orrs	r3, r2
 8005360:	3401      	adds	r4, #1
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005368:	4824      	ldr	r0, [pc, #144]	@ (80053fc <_svfiprintf_r+0x1e8>)
 800536a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800536e:	2206      	movs	r2, #6
 8005370:	f7fa ff36 	bl	80001e0 <memchr>
 8005374:	2800      	cmp	r0, #0
 8005376:	d036      	beq.n	80053e6 <_svfiprintf_r+0x1d2>
 8005378:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <_svfiprintf_r+0x1ec>)
 800537a:	bb1b      	cbnz	r3, 80053c4 <_svfiprintf_r+0x1b0>
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	3307      	adds	r3, #7
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	3308      	adds	r3, #8
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800538a:	4433      	add	r3, r6
 800538c:	9309      	str	r3, [sp, #36]	@ 0x24
 800538e:	e76a      	b.n	8005266 <_svfiprintf_r+0x52>
 8005390:	fb0c 3202 	mla	r2, ip, r2, r3
 8005394:	460c      	mov	r4, r1
 8005396:	2001      	movs	r0, #1
 8005398:	e7a8      	b.n	80052ec <_svfiprintf_r+0xd8>
 800539a:	2300      	movs	r3, #0
 800539c:	3401      	adds	r4, #1
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	4619      	mov	r1, r3
 80053a2:	f04f 0c0a 	mov.w	ip, #10
 80053a6:	4620      	mov	r0, r4
 80053a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ac:	3a30      	subs	r2, #48	@ 0x30
 80053ae:	2a09      	cmp	r2, #9
 80053b0:	d903      	bls.n	80053ba <_svfiprintf_r+0x1a6>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0c6      	beq.n	8005344 <_svfiprintf_r+0x130>
 80053b6:	9105      	str	r1, [sp, #20]
 80053b8:	e7c4      	b.n	8005344 <_svfiprintf_r+0x130>
 80053ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80053be:	4604      	mov	r4, r0
 80053c0:	2301      	movs	r3, #1
 80053c2:	e7f0      	b.n	80053a6 <_svfiprintf_r+0x192>
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <_svfiprintf_r+0x1f0>)
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	4638      	mov	r0, r7
 80053d0:	f3af 8000 	nop.w
 80053d4:	1c42      	adds	r2, r0, #1
 80053d6:	4606      	mov	r6, r0
 80053d8:	d1d6      	bne.n	8005388 <_svfiprintf_r+0x174>
 80053da:	89ab      	ldrh	r3, [r5, #12]
 80053dc:	065b      	lsls	r3, r3, #25
 80053de:	f53f af2d 	bmi.w	800523c <_svfiprintf_r+0x28>
 80053e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053e4:	e72c      	b.n	8005240 <_svfiprintf_r+0x2c>
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b05      	ldr	r3, [pc, #20]	@ (8005404 <_svfiprintf_r+0x1f0>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4638      	mov	r0, r7
 80053f2:	f000 f9bb 	bl	800576c <_printf_i>
 80053f6:	e7ed      	b.n	80053d4 <_svfiprintf_r+0x1c0>
 80053f8:	08005fe9 	.word	0x08005fe9
 80053fc:	08005ff3 	.word	0x08005ff3
 8005400:	00000000 	.word	0x00000000
 8005404:	0800515d 	.word	0x0800515d
 8005408:	08005fef 	.word	0x08005fef

0800540c <__sfputc_r>:
 800540c:	6893      	ldr	r3, [r2, #8]
 800540e:	3b01      	subs	r3, #1
 8005410:	2b00      	cmp	r3, #0
 8005412:	b410      	push	{r4}
 8005414:	6093      	str	r3, [r2, #8]
 8005416:	da08      	bge.n	800542a <__sfputc_r+0x1e>
 8005418:	6994      	ldr	r4, [r2, #24]
 800541a:	42a3      	cmp	r3, r4
 800541c:	db01      	blt.n	8005422 <__sfputc_r+0x16>
 800541e:	290a      	cmp	r1, #10
 8005420:	d103      	bne.n	800542a <__sfputc_r+0x1e>
 8005422:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005426:	f7ff bc90 	b.w	8004d4a <__swbuf_r>
 800542a:	6813      	ldr	r3, [r2, #0]
 800542c:	1c58      	adds	r0, r3, #1
 800542e:	6010      	str	r0, [r2, #0]
 8005430:	7019      	strb	r1, [r3, #0]
 8005432:	4608      	mov	r0, r1
 8005434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005438:	4770      	bx	lr

0800543a <__sfputs_r>:
 800543a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	4614      	mov	r4, r2
 8005442:	18d5      	adds	r5, r2, r3
 8005444:	42ac      	cmp	r4, r5
 8005446:	d101      	bne.n	800544c <__sfputs_r+0x12>
 8005448:	2000      	movs	r0, #0
 800544a:	e007      	b.n	800545c <__sfputs_r+0x22>
 800544c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005450:	463a      	mov	r2, r7
 8005452:	4630      	mov	r0, r6
 8005454:	f7ff ffda 	bl	800540c <__sfputc_r>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d1f3      	bne.n	8005444 <__sfputs_r+0xa>
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005460 <_vfiprintf_r>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	460d      	mov	r5, r1
 8005466:	b09d      	sub	sp, #116	@ 0x74
 8005468:	4614      	mov	r4, r2
 800546a:	4698      	mov	r8, r3
 800546c:	4606      	mov	r6, r0
 800546e:	b118      	cbz	r0, 8005478 <_vfiprintf_r+0x18>
 8005470:	6a03      	ldr	r3, [r0, #32]
 8005472:	b90b      	cbnz	r3, 8005478 <_vfiprintf_r+0x18>
 8005474:	f7ff fb58 	bl	8004b28 <__sinit>
 8005478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800547a:	07d9      	lsls	r1, r3, #31
 800547c:	d405      	bmi.n	800548a <_vfiprintf_r+0x2a>
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	059a      	lsls	r2, r3, #22
 8005482:	d402      	bmi.n	800548a <_vfiprintf_r+0x2a>
 8005484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005486:	f7ff fd6e 	bl	8004f66 <__retarget_lock_acquire_recursive>
 800548a:	89ab      	ldrh	r3, [r5, #12]
 800548c:	071b      	lsls	r3, r3, #28
 800548e:	d501      	bpl.n	8005494 <_vfiprintf_r+0x34>
 8005490:	692b      	ldr	r3, [r5, #16]
 8005492:	b99b      	cbnz	r3, 80054bc <_vfiprintf_r+0x5c>
 8005494:	4629      	mov	r1, r5
 8005496:	4630      	mov	r0, r6
 8005498:	f7ff fc96 	bl	8004dc8 <__swsetup_r>
 800549c:	b170      	cbz	r0, 80054bc <_vfiprintf_r+0x5c>
 800549e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054a0:	07dc      	lsls	r4, r3, #31
 80054a2:	d504      	bpl.n	80054ae <_vfiprintf_r+0x4e>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	b01d      	add	sp, #116	@ 0x74
 80054aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	0598      	lsls	r0, r3, #22
 80054b2:	d4f7      	bmi.n	80054a4 <_vfiprintf_r+0x44>
 80054b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054b6:	f7ff fd57 	bl	8004f68 <__retarget_lock_release_recursive>
 80054ba:	e7f3      	b.n	80054a4 <_vfiprintf_r+0x44>
 80054bc:	2300      	movs	r3, #0
 80054be:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c0:	2320      	movs	r3, #32
 80054c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ca:	2330      	movs	r3, #48	@ 0x30
 80054cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800567c <_vfiprintf_r+0x21c>
 80054d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054d4:	f04f 0901 	mov.w	r9, #1
 80054d8:	4623      	mov	r3, r4
 80054da:	469a      	mov	sl, r3
 80054dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054e0:	b10a      	cbz	r2, 80054e6 <_vfiprintf_r+0x86>
 80054e2:	2a25      	cmp	r2, #37	@ 0x25
 80054e4:	d1f9      	bne.n	80054da <_vfiprintf_r+0x7a>
 80054e6:	ebba 0b04 	subs.w	fp, sl, r4
 80054ea:	d00b      	beq.n	8005504 <_vfiprintf_r+0xa4>
 80054ec:	465b      	mov	r3, fp
 80054ee:	4622      	mov	r2, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff ffa1 	bl	800543a <__sfputs_r>
 80054f8:	3001      	adds	r0, #1
 80054fa:	f000 80a7 	beq.w	800564c <_vfiprintf_r+0x1ec>
 80054fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005500:	445a      	add	r2, fp
 8005502:	9209      	str	r2, [sp, #36]	@ 0x24
 8005504:	f89a 3000 	ldrb.w	r3, [sl]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 809f 	beq.w	800564c <_vfiprintf_r+0x1ec>
 800550e:	2300      	movs	r3, #0
 8005510:	f04f 32ff 	mov.w	r2, #4294967295
 8005514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005518:	f10a 0a01 	add.w	sl, sl, #1
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	9307      	str	r3, [sp, #28]
 8005520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005524:	931a      	str	r3, [sp, #104]	@ 0x68
 8005526:	4654      	mov	r4, sl
 8005528:	2205      	movs	r2, #5
 800552a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552e:	4853      	ldr	r0, [pc, #332]	@ (800567c <_vfiprintf_r+0x21c>)
 8005530:	f7fa fe56 	bl	80001e0 <memchr>
 8005534:	9a04      	ldr	r2, [sp, #16]
 8005536:	b9d8      	cbnz	r0, 8005570 <_vfiprintf_r+0x110>
 8005538:	06d1      	lsls	r1, r2, #27
 800553a:	bf44      	itt	mi
 800553c:	2320      	movmi	r3, #32
 800553e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005542:	0713      	lsls	r3, r2, #28
 8005544:	bf44      	itt	mi
 8005546:	232b      	movmi	r3, #43	@ 0x2b
 8005548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800554c:	f89a 3000 	ldrb.w	r3, [sl]
 8005550:	2b2a      	cmp	r3, #42	@ 0x2a
 8005552:	d015      	beq.n	8005580 <_vfiprintf_r+0x120>
 8005554:	9a07      	ldr	r2, [sp, #28]
 8005556:	4654      	mov	r4, sl
 8005558:	2000      	movs	r0, #0
 800555a:	f04f 0c0a 	mov.w	ip, #10
 800555e:	4621      	mov	r1, r4
 8005560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005564:	3b30      	subs	r3, #48	@ 0x30
 8005566:	2b09      	cmp	r3, #9
 8005568:	d94b      	bls.n	8005602 <_vfiprintf_r+0x1a2>
 800556a:	b1b0      	cbz	r0, 800559a <_vfiprintf_r+0x13a>
 800556c:	9207      	str	r2, [sp, #28]
 800556e:	e014      	b.n	800559a <_vfiprintf_r+0x13a>
 8005570:	eba0 0308 	sub.w	r3, r0, r8
 8005574:	fa09 f303 	lsl.w	r3, r9, r3
 8005578:	4313      	orrs	r3, r2
 800557a:	9304      	str	r3, [sp, #16]
 800557c:	46a2      	mov	sl, r4
 800557e:	e7d2      	b.n	8005526 <_vfiprintf_r+0xc6>
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	1d19      	adds	r1, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9103      	str	r1, [sp, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	bfbb      	ittet	lt
 800558c:	425b      	neglt	r3, r3
 800558e:	f042 0202 	orrlt.w	r2, r2, #2
 8005592:	9307      	strge	r3, [sp, #28]
 8005594:	9307      	strlt	r3, [sp, #28]
 8005596:	bfb8      	it	lt
 8005598:	9204      	strlt	r2, [sp, #16]
 800559a:	7823      	ldrb	r3, [r4, #0]
 800559c:	2b2e      	cmp	r3, #46	@ 0x2e
 800559e:	d10a      	bne.n	80055b6 <_vfiprintf_r+0x156>
 80055a0:	7863      	ldrb	r3, [r4, #1]
 80055a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80055a4:	d132      	bne.n	800560c <_vfiprintf_r+0x1ac>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	1d1a      	adds	r2, r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	9203      	str	r2, [sp, #12]
 80055ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055b2:	3402      	adds	r4, #2
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800568c <_vfiprintf_r+0x22c>
 80055ba:	7821      	ldrb	r1, [r4, #0]
 80055bc:	2203      	movs	r2, #3
 80055be:	4650      	mov	r0, sl
 80055c0:	f7fa fe0e 	bl	80001e0 <memchr>
 80055c4:	b138      	cbz	r0, 80055d6 <_vfiprintf_r+0x176>
 80055c6:	9b04      	ldr	r3, [sp, #16]
 80055c8:	eba0 000a 	sub.w	r0, r0, sl
 80055cc:	2240      	movs	r2, #64	@ 0x40
 80055ce:	4082      	lsls	r2, r0
 80055d0:	4313      	orrs	r3, r2
 80055d2:	3401      	adds	r4, #1
 80055d4:	9304      	str	r3, [sp, #16]
 80055d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055da:	4829      	ldr	r0, [pc, #164]	@ (8005680 <_vfiprintf_r+0x220>)
 80055dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055e0:	2206      	movs	r2, #6
 80055e2:	f7fa fdfd 	bl	80001e0 <memchr>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d03f      	beq.n	800566a <_vfiprintf_r+0x20a>
 80055ea:	4b26      	ldr	r3, [pc, #152]	@ (8005684 <_vfiprintf_r+0x224>)
 80055ec:	bb1b      	cbnz	r3, 8005636 <_vfiprintf_r+0x1d6>
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	3307      	adds	r3, #7
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	3308      	adds	r3, #8
 80055f8:	9303      	str	r3, [sp, #12]
 80055fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055fc:	443b      	add	r3, r7
 80055fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005600:	e76a      	b.n	80054d8 <_vfiprintf_r+0x78>
 8005602:	fb0c 3202 	mla	r2, ip, r2, r3
 8005606:	460c      	mov	r4, r1
 8005608:	2001      	movs	r0, #1
 800560a:	e7a8      	b.n	800555e <_vfiprintf_r+0xfe>
 800560c:	2300      	movs	r3, #0
 800560e:	3401      	adds	r4, #1
 8005610:	9305      	str	r3, [sp, #20]
 8005612:	4619      	mov	r1, r3
 8005614:	f04f 0c0a 	mov.w	ip, #10
 8005618:	4620      	mov	r0, r4
 800561a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800561e:	3a30      	subs	r2, #48	@ 0x30
 8005620:	2a09      	cmp	r2, #9
 8005622:	d903      	bls.n	800562c <_vfiprintf_r+0x1cc>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0c6      	beq.n	80055b6 <_vfiprintf_r+0x156>
 8005628:	9105      	str	r1, [sp, #20]
 800562a:	e7c4      	b.n	80055b6 <_vfiprintf_r+0x156>
 800562c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005630:	4604      	mov	r4, r0
 8005632:	2301      	movs	r3, #1
 8005634:	e7f0      	b.n	8005618 <_vfiprintf_r+0x1b8>
 8005636:	ab03      	add	r3, sp, #12
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	462a      	mov	r2, r5
 800563c:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <_vfiprintf_r+0x228>)
 800563e:	a904      	add	r1, sp, #16
 8005640:	4630      	mov	r0, r6
 8005642:	f3af 8000 	nop.w
 8005646:	4607      	mov	r7, r0
 8005648:	1c78      	adds	r0, r7, #1
 800564a:	d1d6      	bne.n	80055fa <_vfiprintf_r+0x19a>
 800564c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800564e:	07d9      	lsls	r1, r3, #31
 8005650:	d405      	bmi.n	800565e <_vfiprintf_r+0x1fe>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	059a      	lsls	r2, r3, #22
 8005656:	d402      	bmi.n	800565e <_vfiprintf_r+0x1fe>
 8005658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800565a:	f7ff fc85 	bl	8004f68 <__retarget_lock_release_recursive>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	065b      	lsls	r3, r3, #25
 8005662:	f53f af1f 	bmi.w	80054a4 <_vfiprintf_r+0x44>
 8005666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005668:	e71e      	b.n	80054a8 <_vfiprintf_r+0x48>
 800566a:	ab03      	add	r3, sp, #12
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	462a      	mov	r2, r5
 8005670:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <_vfiprintf_r+0x228>)
 8005672:	a904      	add	r1, sp, #16
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f879 	bl	800576c <_printf_i>
 800567a:	e7e4      	b.n	8005646 <_vfiprintf_r+0x1e6>
 800567c:	08005fe9 	.word	0x08005fe9
 8005680:	08005ff3 	.word	0x08005ff3
 8005684:	00000000 	.word	0x00000000
 8005688:	0800543b 	.word	0x0800543b
 800568c:	08005fef 	.word	0x08005fef

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4698      	mov	r8, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056dc:	6822      	ldr	r2, [r4, #0]
 80056de:	3b00      	subs	r3, #0
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056ec:	4641      	mov	r1, r8
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c8      	blx	r9
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	6922      	ldr	r2, [r4, #16]
 80056fa:	f003 0306 	and.w	r3, r3, #6
 80056fe:	2b04      	cmp	r3, #4
 8005700:	bf02      	ittt	eq
 8005702:	68e5      	ldreq	r5, [r4, #12]
 8005704:	6833      	ldreq	r3, [r6, #0]
 8005706:	1aed      	subeq	r5, r5, r3
 8005708:	68a3      	ldr	r3, [r4, #8]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4641      	mov	r1, r8
 800572c:	4638      	mov	r0, r7
 800572e:	47c8      	blx	r9
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	@ 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4641      	mov	r1, r8
 800575e:	4638      	mov	r0, r7
 8005760:	47c8      	blx	r9
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005774:	2f78      	cmp	r7, #120	@ 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	@ 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d2 	beq.w	8005932 <_printf_i+0x1c6>
 800578e:	2f58      	cmp	r7, #88	@ 0x58
 8005790:	f000 80b9 	beq.w	8005906 <_printf_i+0x19a>
 8005794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	@ (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005919 	.word	0x08005919
 80057dc:	08005843 	.word	0x08005843
 80057e0:	080058d3 	.word	0x080058d3
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	0800593b 	.word	0x0800593b
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005843 	.word	0x08005843
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	080058db 	.word	0x080058db
 8005804:	6833      	ldr	r3, [r6, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6032      	str	r2, [r6, #0]
 800580c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e09d      	b.n	8005954 <_printf_i+0x1e8>
 8005818:	6833      	ldr	r3, [r6, #0]
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	1d19      	adds	r1, r3, #4
 800581e:	6031      	str	r1, [r6, #0]
 8005820:	0606      	lsls	r6, r0, #24
 8005822:	d501      	bpl.n	8005828 <_printf_i+0xbc>
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	e003      	b.n	8005830 <_printf_i+0xc4>
 8005828:	0645      	lsls	r5, r0, #25
 800582a:	d5fb      	bpl.n	8005824 <_printf_i+0xb8>
 800582c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005830:	2d00      	cmp	r5, #0
 8005832:	da03      	bge.n	800583c <_printf_i+0xd0>
 8005834:	232d      	movs	r3, #45	@ 0x2d
 8005836:	426d      	negs	r5, r5
 8005838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800583c:	4859      	ldr	r0, [pc, #356]	@ (80059a4 <_printf_i+0x238>)
 800583e:	230a      	movs	r3, #10
 8005840:	e011      	b.n	8005866 <_printf_i+0xfa>
 8005842:	6821      	ldr	r1, [r4, #0]
 8005844:	6833      	ldr	r3, [r6, #0]
 8005846:	0608      	lsls	r0, r1, #24
 8005848:	f853 5b04 	ldr.w	r5, [r3], #4
 800584c:	d402      	bmi.n	8005854 <_printf_i+0xe8>
 800584e:	0649      	lsls	r1, r1, #25
 8005850:	bf48      	it	mi
 8005852:	b2ad      	uxthmi	r5, r5
 8005854:	2f6f      	cmp	r7, #111	@ 0x6f
 8005856:	4853      	ldr	r0, [pc, #332]	@ (80059a4 <_printf_i+0x238>)
 8005858:	6033      	str	r3, [r6, #0]
 800585a:	bf14      	ite	ne
 800585c:	230a      	movne	r3, #10
 800585e:	2308      	moveq	r3, #8
 8005860:	2100      	movs	r1, #0
 8005862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005866:	6866      	ldr	r6, [r4, #4]
 8005868:	60a6      	str	r6, [r4, #8]
 800586a:	2e00      	cmp	r6, #0
 800586c:	bfa2      	ittt	ge
 800586e:	6821      	ldrge	r1, [r4, #0]
 8005870:	f021 0104 	bicge.w	r1, r1, #4
 8005874:	6021      	strge	r1, [r4, #0]
 8005876:	b90d      	cbnz	r5, 800587c <_printf_i+0x110>
 8005878:	2e00      	cmp	r6, #0
 800587a:	d04b      	beq.n	8005914 <_printf_i+0x1a8>
 800587c:	4616      	mov	r6, r2
 800587e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005882:	fb03 5711 	mls	r7, r3, r1, r5
 8005886:	5dc7      	ldrb	r7, [r0, r7]
 8005888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800588c:	462f      	mov	r7, r5
 800588e:	42bb      	cmp	r3, r7
 8005890:	460d      	mov	r5, r1
 8005892:	d9f4      	bls.n	800587e <_printf_i+0x112>
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10b      	bne.n	80058b0 <_printf_i+0x144>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07df      	lsls	r7, r3, #31
 800589c:	d508      	bpl.n	80058b0 <_printf_i+0x144>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4299      	cmp	r1, r3
 80058a4:	bfde      	ittt	le
 80058a6:	2330      	movle	r3, #48	@ 0x30
 80058a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058b0:	1b92      	subs	r2, r2, r6
 80058b2:	6122      	str	r2, [r4, #16]
 80058b4:	f8cd a000 	str.w	sl, [sp]
 80058b8:	464b      	mov	r3, r9
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fee6 	bl	8005690 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14a      	bne.n	800595e <_printf_i+0x1f2>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	f043 0320 	orr.w	r3, r3, #32
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	4833      	ldr	r0, [pc, #204]	@ (80059a8 <_printf_i+0x23c>)
 80058dc:	2778      	movs	r7, #120	@ 0x78
 80058de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	6831      	ldr	r1, [r6, #0]
 80058e6:	061f      	lsls	r7, r3, #24
 80058e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80058ec:	d402      	bmi.n	80058f4 <_printf_i+0x188>
 80058ee:	065f      	lsls	r7, r3, #25
 80058f0:	bf48      	it	mi
 80058f2:	b2ad      	uxthmi	r5, r5
 80058f4:	6031      	str	r1, [r6, #0]
 80058f6:	07d9      	lsls	r1, r3, #31
 80058f8:	bf44      	itt	mi
 80058fa:	f043 0320 	orrmi.w	r3, r3, #32
 80058fe:	6023      	strmi	r3, [r4, #0]
 8005900:	b11d      	cbz	r5, 800590a <_printf_i+0x19e>
 8005902:	2310      	movs	r3, #16
 8005904:	e7ac      	b.n	8005860 <_printf_i+0xf4>
 8005906:	4827      	ldr	r0, [pc, #156]	@ (80059a4 <_printf_i+0x238>)
 8005908:	e7e9      	b.n	80058de <_printf_i+0x172>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	f023 0320 	bic.w	r3, r3, #32
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	e7f6      	b.n	8005902 <_printf_i+0x196>
 8005914:	4616      	mov	r6, r2
 8005916:	e7bd      	b.n	8005894 <_printf_i+0x128>
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	6825      	ldr	r5, [r4, #0]
 800591c:	6961      	ldr	r1, [r4, #20]
 800591e:	1d18      	adds	r0, r3, #4
 8005920:	6030      	str	r0, [r6, #0]
 8005922:	062e      	lsls	r6, r5, #24
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	d501      	bpl.n	800592c <_printf_i+0x1c0>
 8005928:	6019      	str	r1, [r3, #0]
 800592a:	e002      	b.n	8005932 <_printf_i+0x1c6>
 800592c:	0668      	lsls	r0, r5, #25
 800592e:	d5fb      	bpl.n	8005928 <_printf_i+0x1bc>
 8005930:	8019      	strh	r1, [r3, #0]
 8005932:	2300      	movs	r3, #0
 8005934:	6123      	str	r3, [r4, #16]
 8005936:	4616      	mov	r6, r2
 8005938:	e7bc      	b.n	80058b4 <_printf_i+0x148>
 800593a:	6833      	ldr	r3, [r6, #0]
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	6032      	str	r2, [r6, #0]
 8005940:	681e      	ldr	r6, [r3, #0]
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	2100      	movs	r1, #0
 8005946:	4630      	mov	r0, r6
 8005948:	f7fa fc4a 	bl	80001e0 <memchr>
 800594c:	b108      	cbz	r0, 8005952 <_printf_i+0x1e6>
 800594e:	1b80      	subs	r0, r0, r6
 8005950:	6060      	str	r0, [r4, #4]
 8005952:	6863      	ldr	r3, [r4, #4]
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	2300      	movs	r3, #0
 8005958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800595c:	e7aa      	b.n	80058b4 <_printf_i+0x148>
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	4632      	mov	r2, r6
 8005962:	4649      	mov	r1, r9
 8005964:	4640      	mov	r0, r8
 8005966:	47d0      	blx	sl
 8005968:	3001      	adds	r0, #1
 800596a:	d0ad      	beq.n	80058c8 <_printf_i+0x15c>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	079b      	lsls	r3, r3, #30
 8005970:	d413      	bmi.n	800599a <_printf_i+0x22e>
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	4298      	cmp	r0, r3
 8005978:	bfb8      	it	lt
 800597a:	4618      	movlt	r0, r3
 800597c:	e7a6      	b.n	80058cc <_printf_i+0x160>
 800597e:	2301      	movs	r3, #1
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d09d      	beq.n	80058c8 <_printf_i+0x15c>
 800598c:	3501      	adds	r5, #1
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	9903      	ldr	r1, [sp, #12]
 8005992:	1a5b      	subs	r3, r3, r1
 8005994:	42ab      	cmp	r3, r5
 8005996:	dcf2      	bgt.n	800597e <_printf_i+0x212>
 8005998:	e7eb      	b.n	8005972 <_printf_i+0x206>
 800599a:	2500      	movs	r5, #0
 800599c:	f104 0619 	add.w	r6, r4, #25
 80059a0:	e7f5      	b.n	800598e <_printf_i+0x222>
 80059a2:	bf00      	nop
 80059a4:	08005ffa 	.word	0x08005ffa
 80059a8:	0800600b 	.word	0x0800600b

080059ac <__sflush_r>:
 80059ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b4:	0716      	lsls	r6, r2, #28
 80059b6:	4605      	mov	r5, r0
 80059b8:	460c      	mov	r4, r1
 80059ba:	d454      	bmi.n	8005a66 <__sflush_r+0xba>
 80059bc:	684b      	ldr	r3, [r1, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dc02      	bgt.n	80059c8 <__sflush_r+0x1c>
 80059c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dd48      	ble.n	8005a5a <__sflush_r+0xae>
 80059c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d045      	beq.n	8005a5a <__sflush_r+0xae>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059d4:	682f      	ldr	r7, [r5, #0]
 80059d6:	6a21      	ldr	r1, [r4, #32]
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	d030      	beq.n	8005a3e <__sflush_r+0x92>
 80059dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	0759      	lsls	r1, r3, #29
 80059e2:	d505      	bpl.n	80059f0 <__sflush_r+0x44>
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059ea:	b10b      	cbz	r3, 80059f0 <__sflush_r+0x44>
 80059ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059ee:	1ad2      	subs	r2, r2, r3
 80059f0:	2300      	movs	r3, #0
 80059f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059f4:	6a21      	ldr	r1, [r4, #32]
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b0      	blx	r6
 80059fa:	1c43      	adds	r3, r0, #1
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	d106      	bne.n	8005a0e <__sflush_r+0x62>
 8005a00:	6829      	ldr	r1, [r5, #0]
 8005a02:	291d      	cmp	r1, #29
 8005a04:	d82b      	bhi.n	8005a5e <__sflush_r+0xb2>
 8005a06:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab0 <__sflush_r+0x104>)
 8005a08:	410a      	asrs	r2, r1
 8005a0a:	07d6      	lsls	r6, r2, #31
 8005a0c:	d427      	bmi.n	8005a5e <__sflush_r+0xb2>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	6062      	str	r2, [r4, #4]
 8005a12:	04d9      	lsls	r1, r3, #19
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	d504      	bpl.n	8005a24 <__sflush_r+0x78>
 8005a1a:	1c42      	adds	r2, r0, #1
 8005a1c:	d101      	bne.n	8005a22 <__sflush_r+0x76>
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	b903      	cbnz	r3, 8005a24 <__sflush_r+0x78>
 8005a22:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a26:	602f      	str	r7, [r5, #0]
 8005a28:	b1b9      	cbz	r1, 8005a5a <__sflush_r+0xae>
 8005a2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	d002      	beq.n	8005a38 <__sflush_r+0x8c>
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7ff fa9a 	bl	8004f6c <_free_r>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a3c:	e00d      	b.n	8005a5a <__sflush_r+0xae>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b0      	blx	r6
 8005a44:	4602      	mov	r2, r0
 8005a46:	1c50      	adds	r0, r2, #1
 8005a48:	d1c9      	bne.n	80059de <__sflush_r+0x32>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0c6      	beq.n	80059de <__sflush_r+0x32>
 8005a50:	2b1d      	cmp	r3, #29
 8005a52:	d001      	beq.n	8005a58 <__sflush_r+0xac>
 8005a54:	2b16      	cmp	r3, #22
 8005a56:	d11e      	bne.n	8005a96 <__sflush_r+0xea>
 8005a58:	602f      	str	r7, [r5, #0]
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	e022      	b.n	8005aa4 <__sflush_r+0xf8>
 8005a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	e01b      	b.n	8005a9e <__sflush_r+0xf2>
 8005a66:	690f      	ldr	r7, [r1, #16]
 8005a68:	2f00      	cmp	r7, #0
 8005a6a:	d0f6      	beq.n	8005a5a <__sflush_r+0xae>
 8005a6c:	0793      	lsls	r3, r2, #30
 8005a6e:	680e      	ldr	r6, [r1, #0]
 8005a70:	bf08      	it	eq
 8005a72:	694b      	ldreq	r3, [r1, #20]
 8005a74:	600f      	str	r7, [r1, #0]
 8005a76:	bf18      	it	ne
 8005a78:	2300      	movne	r3, #0
 8005a7a:	eba6 0807 	sub.w	r8, r6, r7
 8005a7e:	608b      	str	r3, [r1, #8]
 8005a80:	f1b8 0f00 	cmp.w	r8, #0
 8005a84:	dde9      	ble.n	8005a5a <__sflush_r+0xae>
 8005a86:	6a21      	ldr	r1, [r4, #32]
 8005a88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005a8a:	4643      	mov	r3, r8
 8005a8c:	463a      	mov	r2, r7
 8005a8e:	4628      	mov	r0, r5
 8005a90:	47b0      	blx	r6
 8005a92:	2800      	cmp	r0, #0
 8005a94:	dc08      	bgt.n	8005aa8 <__sflush_r+0xfc>
 8005a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa8:	4407      	add	r7, r0
 8005aaa:	eba8 0800 	sub.w	r8, r8, r0
 8005aae:	e7e7      	b.n	8005a80 <__sflush_r+0xd4>
 8005ab0:	dfbffffe 	.word	0xdfbffffe

08005ab4 <_fflush_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	690b      	ldr	r3, [r1, #16]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b913      	cbnz	r3, 8005ac4 <_fflush_r+0x10>
 8005abe:	2500      	movs	r5, #0
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	b118      	cbz	r0, 8005ace <_fflush_r+0x1a>
 8005ac6:	6a03      	ldr	r3, [r0, #32]
 8005ac8:	b90b      	cbnz	r3, 8005ace <_fflush_r+0x1a>
 8005aca:	f7ff f82d 	bl	8004b28 <__sinit>
 8005ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f3      	beq.n	8005abe <_fflush_r+0xa>
 8005ad6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ad8:	07d0      	lsls	r0, r2, #31
 8005ada:	d404      	bmi.n	8005ae6 <_fflush_r+0x32>
 8005adc:	0599      	lsls	r1, r3, #22
 8005ade:	d402      	bmi.n	8005ae6 <_fflush_r+0x32>
 8005ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ae2:	f7ff fa40 	bl	8004f66 <__retarget_lock_acquire_recursive>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f7ff ff5f 	bl	80059ac <__sflush_r>
 8005aee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005af0:	07da      	lsls	r2, r3, #31
 8005af2:	4605      	mov	r5, r0
 8005af4:	d4e4      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	059b      	lsls	r3, r3, #22
 8005afa:	d4e1      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005afe:	f7ff fa33 	bl	8004f68 <__retarget_lock_release_recursive>
 8005b02:	e7dd      	b.n	8005ac0 <_fflush_r+0xc>

08005b04 <__swhatbuf_r>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	460c      	mov	r4, r1
 8005b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	b096      	sub	sp, #88	@ 0x58
 8005b10:	4615      	mov	r5, r2
 8005b12:	461e      	mov	r6, r3
 8005b14:	da0d      	bge.n	8005b32 <__swhatbuf_r+0x2e>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	bf14      	ite	ne
 8005b22:	2340      	movne	r3, #64	@ 0x40
 8005b24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b28:	2000      	movs	r0, #0
 8005b2a:	6031      	str	r1, [r6, #0]
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	b016      	add	sp, #88	@ 0x58
 8005b30:	bd70      	pop	{r4, r5, r6, pc}
 8005b32:	466a      	mov	r2, sp
 8005b34:	f000 f896 	bl	8005c64 <_fstat_r>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	dbec      	blt.n	8005b16 <__swhatbuf_r+0x12>
 8005b3c:	9901      	ldr	r1, [sp, #4]
 8005b3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b46:	4259      	negs	r1, r3
 8005b48:	4159      	adcs	r1, r3
 8005b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b4e:	e7eb      	b.n	8005b28 <__swhatbuf_r+0x24>

08005b50 <__smakebuf_r>:
 8005b50:	898b      	ldrh	r3, [r1, #12]
 8005b52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b54:	079d      	lsls	r5, r3, #30
 8005b56:	4606      	mov	r6, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	d507      	bpl.n	8005b6c <__smakebuf_r+0x1c>
 8005b5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	6123      	str	r3, [r4, #16]
 8005b64:	2301      	movs	r3, #1
 8005b66:	6163      	str	r3, [r4, #20]
 8005b68:	b003      	add	sp, #12
 8005b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6c:	ab01      	add	r3, sp, #4
 8005b6e:	466a      	mov	r2, sp
 8005b70:	f7ff ffc8 	bl	8005b04 <__swhatbuf_r>
 8005b74:	9f00      	ldr	r7, [sp, #0]
 8005b76:	4605      	mov	r5, r0
 8005b78:	4639      	mov	r1, r7
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7ff fa62 	bl	8005044 <_malloc_r>
 8005b80:	b948      	cbnz	r0, 8005b96 <__smakebuf_r+0x46>
 8005b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b86:	059a      	lsls	r2, r3, #22
 8005b88:	d4ee      	bmi.n	8005b68 <__smakebuf_r+0x18>
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	81a3      	strh	r3, [r4, #12]
 8005b94:	e7e2      	b.n	8005b5c <__smakebuf_r+0xc>
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	6020      	str	r0, [r4, #0]
 8005b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9e:	81a3      	strh	r3, [r4, #12]
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ba6:	b15b      	cbz	r3, 8005bc0 <__smakebuf_r+0x70>
 8005ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 f86b 	bl	8005c88 <_isatty_r>
 8005bb2:	b128      	cbz	r0, 8005bc0 <__smakebuf_r+0x70>
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	f023 0303 	bic.w	r3, r3, #3
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	81a3      	strh	r3, [r4, #12]
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	431d      	orrs	r5, r3
 8005bc4:	81a5      	strh	r5, [r4, #12]
 8005bc6:	e7cf      	b.n	8005b68 <__smakebuf_r+0x18>

08005bc8 <_putc_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	460d      	mov	r5, r1
 8005bcc:	4614      	mov	r4, r2
 8005bce:	4606      	mov	r6, r0
 8005bd0:	b118      	cbz	r0, 8005bda <_putc_r+0x12>
 8005bd2:	6a03      	ldr	r3, [r0, #32]
 8005bd4:	b90b      	cbnz	r3, 8005bda <_putc_r+0x12>
 8005bd6:	f7fe ffa7 	bl	8004b28 <__sinit>
 8005bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bdc:	07d8      	lsls	r0, r3, #31
 8005bde:	d405      	bmi.n	8005bec <_putc_r+0x24>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	0599      	lsls	r1, r3, #22
 8005be4:	d402      	bmi.n	8005bec <_putc_r+0x24>
 8005be6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005be8:	f7ff f9bd 	bl	8004f66 <__retarget_lock_acquire_recursive>
 8005bec:	68a3      	ldr	r3, [r4, #8]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	60a3      	str	r3, [r4, #8]
 8005bf4:	da05      	bge.n	8005c02 <_putc_r+0x3a>
 8005bf6:	69a2      	ldr	r2, [r4, #24]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	db12      	blt.n	8005c22 <_putc_r+0x5a>
 8005bfc:	b2eb      	uxtb	r3, r5
 8005bfe:	2b0a      	cmp	r3, #10
 8005c00:	d00f      	beq.n	8005c22 <_putc_r+0x5a>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	6022      	str	r2, [r4, #0]
 8005c08:	701d      	strb	r5, [r3, #0]
 8005c0a:	b2ed      	uxtb	r5, r5
 8005c0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c0e:	07da      	lsls	r2, r3, #31
 8005c10:	d405      	bmi.n	8005c1e <_putc_r+0x56>
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	059b      	lsls	r3, r3, #22
 8005c16:	d402      	bmi.n	8005c1e <_putc_r+0x56>
 8005c18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c1a:	f7ff f9a5 	bl	8004f68 <__retarget_lock_release_recursive>
 8005c1e:	4628      	mov	r0, r5
 8005c20:	bd70      	pop	{r4, r5, r6, pc}
 8005c22:	4629      	mov	r1, r5
 8005c24:	4622      	mov	r2, r4
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff f88f 	bl	8004d4a <__swbuf_r>
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	e7ed      	b.n	8005c0c <_putc_r+0x44>

08005c30 <memmove>:
 8005c30:	4288      	cmp	r0, r1
 8005c32:	b510      	push	{r4, lr}
 8005c34:	eb01 0402 	add.w	r4, r1, r2
 8005c38:	d902      	bls.n	8005c40 <memmove+0x10>
 8005c3a:	4284      	cmp	r4, r0
 8005c3c:	4623      	mov	r3, r4
 8005c3e:	d807      	bhi.n	8005c50 <memmove+0x20>
 8005c40:	1e43      	subs	r3, r0, #1
 8005c42:	42a1      	cmp	r1, r4
 8005c44:	d008      	beq.n	8005c58 <memmove+0x28>
 8005c46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c4e:	e7f8      	b.n	8005c42 <memmove+0x12>
 8005c50:	4402      	add	r2, r0
 8005c52:	4601      	mov	r1, r0
 8005c54:	428a      	cmp	r2, r1
 8005c56:	d100      	bne.n	8005c5a <memmove+0x2a>
 8005c58:	bd10      	pop	{r4, pc}
 8005c5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c62:	e7f7      	b.n	8005c54 <memmove+0x24>

08005c64 <_fstat_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d07      	ldr	r5, [pc, #28]	@ (8005c84 <_fstat_r+0x20>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	f7fb fade 	bl	8001232 <_fstat>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	d102      	bne.n	8005c80 <_fstat_r+0x1c>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	b103      	cbz	r3, 8005c80 <_fstat_r+0x1c>
 8005c7e:	6023      	str	r3, [r4, #0]
 8005c80:	bd38      	pop	{r3, r4, r5, pc}
 8005c82:	bf00      	nop
 8005c84:	20000414 	.word	0x20000414

08005c88 <_isatty_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d06      	ldr	r5, [pc, #24]	@ (8005ca4 <_isatty_r+0x1c>)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	4608      	mov	r0, r1
 8005c92:	602b      	str	r3, [r5, #0]
 8005c94:	f7fb fadd 	bl	8001252 <_isatty>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_isatty_r+0x1a>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_isatty_r+0x1a>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	20000414 	.word	0x20000414

08005ca8 <_sbrk_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d06      	ldr	r5, [pc, #24]	@ (8005cc4 <_sbrk_r+0x1c>)
 8005cac:	2300      	movs	r3, #0
 8005cae:	4604      	mov	r4, r0
 8005cb0:	4608      	mov	r0, r1
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	f7fb fae6 	bl	8001284 <_sbrk>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d102      	bne.n	8005cc2 <_sbrk_r+0x1a>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	b103      	cbz	r3, 8005cc2 <_sbrk_r+0x1a>
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	bd38      	pop	{r3, r4, r5, pc}
 8005cc4:	20000414 	.word	0x20000414

08005cc8 <memcpy>:
 8005cc8:	440a      	add	r2, r1
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cd0:	d100      	bne.n	8005cd4 <memcpy+0xc>
 8005cd2:	4770      	bx	lr
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	d1f9      	bne.n	8005cd6 <memcpy+0xe>
 8005ce2:	bd10      	pop	{r4, pc}

08005ce4 <_realloc_r>:
 8005ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce8:	4680      	mov	r8, r0
 8005cea:	4615      	mov	r5, r2
 8005cec:	460c      	mov	r4, r1
 8005cee:	b921      	cbnz	r1, 8005cfa <_realloc_r+0x16>
 8005cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	f7ff b9a5 	b.w	8005044 <_malloc_r>
 8005cfa:	b92a      	cbnz	r2, 8005d08 <_realloc_r+0x24>
 8005cfc:	f7ff f936 	bl	8004f6c <_free_r>
 8005d00:	2400      	movs	r4, #0
 8005d02:	4620      	mov	r0, r4
 8005d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d08:	f000 f81a 	bl	8005d40 <_malloc_usable_size_r>
 8005d0c:	4285      	cmp	r5, r0
 8005d0e:	4606      	mov	r6, r0
 8005d10:	d802      	bhi.n	8005d18 <_realloc_r+0x34>
 8005d12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d16:	d8f4      	bhi.n	8005d02 <_realloc_r+0x1e>
 8005d18:	4629      	mov	r1, r5
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	f7ff f992 	bl	8005044 <_malloc_r>
 8005d20:	4607      	mov	r7, r0
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d0ec      	beq.n	8005d00 <_realloc_r+0x1c>
 8005d26:	42b5      	cmp	r5, r6
 8005d28:	462a      	mov	r2, r5
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	bf28      	it	cs
 8005d2e:	4632      	movcs	r2, r6
 8005d30:	f7ff ffca 	bl	8005cc8 <memcpy>
 8005d34:	4621      	mov	r1, r4
 8005d36:	4640      	mov	r0, r8
 8005d38:	f7ff f918 	bl	8004f6c <_free_r>
 8005d3c:	463c      	mov	r4, r7
 8005d3e:	e7e0      	b.n	8005d02 <_realloc_r+0x1e>

08005d40 <_malloc_usable_size_r>:
 8005d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d44:	1f18      	subs	r0, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfbc      	itt	lt
 8005d4a:	580b      	ldrlt	r3, [r1, r0]
 8005d4c:	18c0      	addlt	r0, r0, r3
 8005d4e:	4770      	bx	lr

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
