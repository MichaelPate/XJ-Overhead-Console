
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a8  080045a8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a8  080045a8  000055a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080045b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000068  08004618  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08004618  000063c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a28  00000000  00000000  00015c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00018650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b29  00000000  00000000  000194c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aae  00000000  00000000  00019ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014986  00000000  00000000  00033a9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cbe3  00000000  00000000  00048425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5008  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000e504c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e92c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004524 	.word	0x08004524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004524 	.word	0x08004524

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fe37 	bl	8001244 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa5c 	bl	8000a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fe6b 	bl	80012cc <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa4c 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 f919 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 f90d 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b52      	ldr	r3, [pc, #328]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a51      	ldr	r2, [pc, #324]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <MX_GPIO_Init+0x164>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a4a      	ldr	r2, [pc, #296]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a43      	ldr	r2, [pc, #268]	@ (8000838 <MX_GPIO_Init+0x164>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a3c      	ldr	r2, [pc, #240]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b3a      	ldr	r3, [pc, #232]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a35      	ldr	r2, [pc, #212]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <MX_GPIO_Init+0x164>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <MX_GPIO_Init+0x168>)
 800077e:	f001 fa2d 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	482e      	ldr	r0, [pc, #184]	@ (8000840 <MX_GPIO_Init+0x16c>)
 8000788:	f001 fa28 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4828      	ldr	r0, [pc, #160]	@ (8000844 <MX_GPIO_Init+0x170>)
 80007a4:	f001 f896 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007a8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481e      	ldr	r0, [pc, #120]	@ (800083c <MX_GPIO_Init+0x168>)
 80007c2:	f001 f887 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 80007c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_GPIO_Init+0x168>)
 80007dc:	f001 f87a 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 80007e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_GPIO_Init+0x170>)
 80007f6:	f001 f86d 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80007fa:	2304      	movs	r3, #4
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	@ (8000848 <MX_GPIO_Init+0x174>)
 800080e:	f001 f861 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000812:	2310      	movs	r3, #16
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x16c>)
 800082a:	f001 f853 	bl	80018d4 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 f9c1 	bl	8001c10 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f900 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_I2C_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23c0      	movs	r3, #192	@ 0xc0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f6:	2304      	movs	r3, #4
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <HAL_I2C_MspInit+0x8c>)
 8000902:	f000 ffe7 	bl	80018d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400

08000938 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <__io_putchar+0x20>)
 800094a:	f002 fa0a 	bl	8002d62 <HAL_UART_Transmit>
  return ch;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001e4 	.word	0x200001e4

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0f2      	sub	sp, #456	@ 0x1c8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fbfd 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f829 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f7ff feb3 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096e:	f000 fac7 	bl	8000f00 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000972:	f7ff fdfd 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000976:	f7ff ff69 	bl	800084c <MX_I2C1_Init>
  MX_RTC_Init();
 800097a:	f000 f899 	bl	8000ab0 <MX_RTC_Init>
  MX_SPI2_Init();
 800097e:	f000 f8e9 	bl	8000b54 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000982:	f000 fa93 	bl	8000eac <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000986:	f000 fae5 	bl	8000f54 <MX_USART6_UART_Init>

  int buffer[100];

  while (1)
  {
	  if (HAL_UART_Receive(&huart2, buffer, 1, 10) == HAL_OK)
 800098a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800098e:	230a      	movs	r3, #10
 8000990:	2201      	movs	r2, #1
 8000992:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <main+0x58>)
 8000994:	f002 fa70 	bl	8002e78 <HAL_UART_Receive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f5      	bne.n	800098a <main+0x2e>
	  {
		  printf("\r\n\n");
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <main+0x5c>)
 80009a0:	f002 ff5c 	bl	800385c <puts>
		  HAL_UART_Transmit(&huart2, buffer, 1, 10);
 80009a4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80009a8:	230a      	movs	r3, #10
 80009aa:	2201      	movs	r2, #1
 80009ac:	4801      	ldr	r0, [pc, #4]	@ (80009b4 <main+0x58>)
 80009ae:	f002 f9d8 	bl	8002d62 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart2, buffer, 1, 10) == HAL_OK)
 80009b2:	e7ea      	b.n	800098a <main+0x2e>
 80009b4:	200001e4 	.word	0x200001e4
 80009b8:	0800453c 	.word	0x0800453c

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	@ 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	@ 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 f826 	bl	8003a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a29      	ldr	r2, [pc, #164]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <SystemClock_Config+0xd4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a08:	4a22      	ldr	r2, [pc, #136]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <SystemClock_Config+0xd8>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a42:	2307      	movs	r3, #7
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fa24 	bl	8001e98 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f81f 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fc86 	bl	8002388 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a82:	f000 f809 	bl	8000a98 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	@ 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <Error_Handler+0x14>)
 8000aa2:	f002 fe73 	bl	800378c <iprintf>
	  while (1);
 8000aa6:	bf00      	nop
 8000aa8:	e7fd      	b.n	8000aa6 <Error_Handler+0xe>
 8000aaa:	bf00      	nop
 8000aac:	08004540 	.word	0x08004540

08000ab0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ab6:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <MX_RTC_Init+0x48>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ac2:	227f      	movs	r2, #127	@ 0x7f
 8000ac4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ac8:	22ff      	movs	r2, #255	@ 0xff
 8000aca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_RTC_Init+0x44>)
 8000ae0:	f001 ff60 	bl	80029a4 <HAL_RTC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000aea:	f7ff ffd5 	bl	8000a98 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000120 	.word	0x20000120
 8000af8:	40002800 	.word	0x40002800

08000afc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_RTC_MspInit+0x50>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d111      	bne.n	8000b42 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fe4b 	bl	80027c8 <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b38:	f7ff ffae 	bl	8000a98 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <HAL_RTC_MspInit+0x54>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3720      	adds	r7, #32
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40002800 	.word	0x40002800
 8000b50:	42470e3c 	.word	0x42470e3c

08000b54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b58:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b5a:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <MX_SPI2_Init+0x6c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b6c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000ba2:	220a      	movs	r2, #10
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <MX_SPI2_Init+0x68>)
 8000ba8:	f002 f802 	bl	8002bb0 <HAL_SPI_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000bb2:	f7ff ff71 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000140 	.word	0x20000140
 8000bc0:	40003800 	.word	0x40003800

08000bc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a28      	ldr	r2, [pc, #160]	@ (8000c84 <HAL_SPI_MspInit+0xc0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d14a      	bne.n	8000c7c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a26      	ldr	r2, [pc, #152]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_SPI_MspInit+0xc4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <HAL_SPI_MspInit+0xc8>)
 8000c56:	f000 fe3d 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6c:	2305      	movs	r3, #5
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <HAL_SPI_MspInit+0xcc>)
 8000c78:	f000 fe2c 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	@ 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40003800 	.word	0x40003800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020400 	.word	0x40020400

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f000 fdca 	bl	800186c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f000 fa63 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	e00a      	b.n	8000d6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d54:	f3af 8000 	nop.w
 8000d58:	4601      	mov	r1, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1c5a      	adds	r2, r3, #1
 8000d5e:	60ba      	str	r2, [r7, #8]
 8000d60:	b2ca      	uxtb	r2, r1
 8000d62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf0      	blt.n	8000d54 <_read+0x12>
  }

  return len;
 8000d72:	687b      	ldr	r3, [r7, #4]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e009      	b.n	8000da2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	60ba      	str	r2, [r7, #8]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fdce 	bl	8000938 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	dbf1      	blt.n	8000d8e <_write+0x12>
  }
  return len;
 8000daa:	687b      	ldr	r3, [r7, #4]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_close>:

int _close(int file)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ddc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dde:	2300      	movs	r3, #0
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <_isatty>:

int _isatty(int file)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df4:	2301      	movs	r3, #1
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	@ (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f002 fe34 	bl	8003ab8 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20018000 	.word	0x20018000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000198 	.word	0x20000198
 8000e84:	200003c8 	.word	0x200003c8

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <MX_USART1_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f001 feed 	bl	8002cc2 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f7ff fdd3 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000019c 	.word	0x2000019c
 8000efc:	40011000 	.word	0x40011000

08000f00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <MX_USART2_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	@ (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f38:	f001 fec3 	bl	8002cc2 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f7ff fda9 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001e4 	.word	0x200001e4
 8000f50:	40004400 	.word	0x40004400

08000f54 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <MX_USART6_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_USART6_UART_Init+0x4c>)
 8000f8c:	f001 fe99 	bl	8002cc2 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f7ff fd7f 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000022c 	.word	0x2000022c
 8000fa4:	40011400 	.word	0x40011400

08000fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08e      	sub	sp, #56	@ 0x38
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80010f4 <HAL_UART_MspInit+0x14c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12d      	bne.n	8001026 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a49      	ldr	r2, [pc, #292]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000fd4:	f043 0310 	orr.w	r3, r3, #16
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b47      	ldr	r3, [pc, #284]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f003 0310 	and.w	r3, r3, #16
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a42      	ldr	r2, [pc, #264]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001002:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001006:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001014:	2307      	movs	r3, #7
 8001016:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4837      	ldr	r0, [pc, #220]	@ (80010fc <HAL_UART_MspInit+0x154>)
 8001020:	f000 fc58 	bl	80018d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001024:	e062      	b.n	80010ec <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART2)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a35      	ldr	r2, [pc, #212]	@ (8001100 <HAL_UART_MspInit+0x158>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d12c      	bne.n	800108a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001038:	4a2f      	ldr	r2, [pc, #188]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	4a28      	ldr	r2, [pc, #160]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6313      	str	r3, [r2, #48]	@ 0x30
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001068:	230c      	movs	r3, #12
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001078:	2307      	movs	r3, #7
 800107a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	481e      	ldr	r0, [pc, #120]	@ (80010fc <HAL_UART_MspInit+0x154>)
 8001084:	f000 fc26 	bl	80018d4 <HAL_GPIO_Init>
}
 8001088:	e030      	b.n	80010ec <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a1d      	ldr	r2, [pc, #116]	@ (8001104 <HAL_UART_MspInit+0x15c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d12b      	bne.n	80010ec <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 800109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109c:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 800109e:	f043 0320 	orr.w	r3, r3, #32
 80010a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b8:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_UART_MspInit+0x150>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010cc:	23c0      	movs	r3, #192	@ 0xc0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010dc:	2308      	movs	r3, #8
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4808      	ldr	r0, [pc, #32]	@ (8001108 <HAL_UART_MspInit+0x160>)
 80010e8:	f000 fbf4 	bl	80018d4 <HAL_GPIO_Init>
}
 80010ec:	bf00      	nop
 80010ee:	3738      	adds	r7, #56	@ 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40004400 	.word	0x40004400
 8001104:	40011400 	.word	0x40011400
 8001108:	40020800 	.word	0x40020800

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001110:	f7ff feba 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopFillZerobss+0x22>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fcc3 	bl	8003ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fc0d 	bl	800095c <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001144:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001150:	080045b0 	.word	0x080045b0
  ldr r2, =_sbss
 8001154:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001158:	200003c4 	.word	0x200003c4

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 fb6f 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fd7e 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fb79 	bl	80018ba <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 fb4f 	bl	8001882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000274 	.word	0x20000274

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000274 	.word	0x20000274

08001244 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e033      	b.n	80012c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff f9d6 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d118      	bne.n	80012b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800128a:	f023 0302 	bic.w	r3, r3, #2
 800128e:	f043 0202 	orr.w	r2, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f93a 	bl	8001510 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b2:	e001      	b.n	80012b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e105      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x228>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d925      	bls.n	8001344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d9      	ldr	r1, [r3, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	3b1e      	subs	r3, #30
 800130e:	2207      	movs	r2, #7
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68d9      	ldr	r1, [r3, #12]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4403      	add	r3, r0
 8001336:	3b1e      	subs	r3, #30
 8001338:	409a      	lsls	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	e022      	b.n	800138a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	2207      	movs	r2, #7
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	4603      	mov	r3, r0
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4403      	add	r3, r0
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d824      	bhi.n	80013dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b05      	subs	r3, #5
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b05      	subs	r3, #5
 80013ce:	fa00 f203 	lsl.w	r2, r0, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013da:	e04c      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	d824      	bhi.n	800142e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b23      	subs	r3, #35	@ 0x23
 80013f6:	221f      	movs	r2, #31
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43da      	mvns	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b23      	subs	r3, #35	@ 0x23
 8001420:	fa00 f203 	lsl.w	r2, r0, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	631a      	str	r2, [r3, #48]	@ 0x30
 800142c:	e023      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b41      	subs	r3, #65	@ 0x41
 8001440:	221f      	movs	r2, #31
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b41      	subs	r3, #65	@ 0x41
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_ADC_ConfigChannel+0x234>)
 8001478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <HAL_ADC_ConfigChannel+0x238>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d109      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1cc>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b12      	cmp	r3, #18
 800148a:	d105      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <HAL_ADC_ConfigChannel+0x238>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d123      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x21e>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b10      	cmp	r3, #16
 80014a8:	d003      	beq.n	80014b2 <HAL_ADC_ConfigChannel+0x1e6>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b11      	cmp	r3, #17
 80014b0:	d11b      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d111      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <HAL_ADC_ConfigChannel+0x23c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a10      	ldr	r2, [pc, #64]	@ (800150c <HAL_ADC_ConfigChannel+0x240>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	0c9a      	lsrs	r2, r3, #18
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014dc:	e002      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f9      	bne.n	80014de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40012300 	.word	0x40012300
 8001504:	40012000 	.word	0x40012000
 8001508:	20000000 	.word	0x20000000
 800150c:	431bde83 	.word	0x431bde83

08001510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001518:	4b79      	ldr	r3, [pc, #484]	@ (8001700 <ADC_Init+0x1f0>)
 800151a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	431a      	orrs	r2, r3
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6859      	ldr	r1, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	021a      	lsls	r2, r3, #8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800158a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6899      	ldr	r1, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a2:	4a58      	ldr	r2, [pc, #352]	@ (8001704 <ADC_Init+0x1f4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d022      	beq.n	80015ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6899      	ldr	r1, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e00f      	b.n	800160e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800160c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0202 	bic.w	r2, r2, #2
 800161c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
 8001628:	005a      	lsls	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01b      	beq.n	8001674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800164a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800165a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	3b01      	subs	r3, #1
 8001668:	035a      	lsls	r2, r3, #13
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	e007      	b.n	8001684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001682:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	3b01      	subs	r3, #1
 80016a0:	051a      	lsls	r2, r3, #20
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016c6:	025a      	lsls	r2, r3, #9
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	029a      	lsls	r2, r3, #10
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	609a      	str	r2, [r3, #8]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40012300 	.word	0x40012300
 8001704:	0f000001 	.word	0x0f000001

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff47 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff5c 	bl	8001750 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffb0 	bl	8001828 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	e159      	b.n	8001ba4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	f040 8148 	bne.w	8001b9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d005      	beq.n	8001926 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001922:	2b02      	cmp	r3, #2
 8001924:	d130      	bne.n	8001988 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195c:	2201      	movs	r2, #1
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 0201 	and.w	r2, r3, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b03      	cmp	r3, #3
 8001992:	d017      	beq.n	80019c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d123      	bne.n	8001a18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	08da      	lsrs	r2, r3, #3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3208      	adds	r2, #8
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0203 	and.w	r2, r3, #3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 80a2 	beq.w	8001b9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	4b57      	ldr	r3, [pc, #348]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a56      	ldr	r2, [pc, #344]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b54      	ldr	r3, [pc, #336]	@ (8001bbc <HAL_GPIO_Init+0x2e8>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a76:	4a52      	ldr	r2, [pc, #328]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x2f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x202>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a48      	ldr	r2, [pc, #288]	@ (8001bc8 <HAL_GPIO_Init+0x2f4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1fe>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a47      	ldr	r2, [pc, #284]	@ (8001bcc <HAL_GPIO_Init+0x2f8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1fa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	@ (8001bd0 <HAL_GPIO_Init+0x2fc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1f6>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a45      	ldr	r2, [pc, #276]	@ (8001bd4 <HAL_GPIO_Init+0x300>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1f2>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x204>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	@ (8001bc0 <HAL_GPIO_Init+0x2ec>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a24      	ldr	r2, [pc, #144]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd8 <HAL_GPIO_Init+0x304>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f aea2 	bls.w	80018f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12b      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fe36 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c74:	f000 fd80 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d807      	bhi.n	8001c94 <HAL_I2C_Init+0x84>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a80      	ldr	r2, [pc, #512]	@ (8001e88 <HAL_I2C_Init+0x278>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e006      	b.n	8001ca2 <HAL_I2C_Init+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a7d      	ldr	r2, [pc, #500]	@ (8001e8c <HAL_I2C_Init+0x27c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a78      	ldr	r2, [pc, #480]	@ (8001e90 <HAL_I2C_Init+0x280>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xe8>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a69      	ldr	r2, [pc, #420]	@ (8001e94 <HAL_I2C_Init+0x284>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	495c      	ldr	r1, [pc, #368]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d819      	bhi.n	8001d4c <HAL_I2C_Init+0x13c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_Init+0x138>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	e051      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e04f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_I2C_Init+0x168>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Init+0x18e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x196>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_I2C_Init+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dca:	e00f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	000186a0 	.word	0x000186a0
 8001e88:	001e847f 	.word	0x001e847f
 8001e8c:	003d08ff 	.word	0x003d08ff
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e267      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b85      	ldr	r3, [pc, #532]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d112      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b82      	ldr	r3, [pc, #520]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b7e      	ldr	r3, [pc, #504]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e242      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b76      	ldr	r3, [pc, #472]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b70      	ldr	r3, [pc, #448]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6f      	ldr	r2, [pc, #444]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6d      	ldr	r3, [pc, #436]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6c      	ldr	r2, [pc, #432]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b69      	ldr	r3, [pc, #420]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a68      	ldr	r2, [pc, #416]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f96c 	bl	800122c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f968 	bl	800122c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e207      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f958 	bl	800122c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f954 	bl	800122c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1f3      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	4b4a      	ldr	r3, [pc, #296]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b47      	ldr	r3, [pc, #284]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c7      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4937      	ldr	r1, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f90d 	bl	800122c <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff f909 	bl	800122c <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a8      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4925      	ldr	r1, [pc, #148]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCC_OscConfig+0x244>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f8ec 	bl	800122c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff f8e8 	bl	800122c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e187      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d036      	beq.n	80020f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_RCC_OscConfig+0x248>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f8cc 	bl	800122c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff f8c8 	bl	800122c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e167      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_RCC_OscConfig+0x248>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff f8b5 	bl	800122c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00e      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff f8b1 	bl	800122c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d907      	bls.n	80020e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e150      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b88      	ldr	r3, [pc, #544]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ea      	bne.n	80020c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8097 	beq.w	800222c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b81      	ldr	r3, [pc, #516]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b7d      	ldr	r3, [pc, #500]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	4a7c      	ldr	r2, [pc, #496]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	@ 0x40
 800211e:	4b7a      	ldr	r3, [pc, #488]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b77      	ldr	r3, [pc, #476]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b74      	ldr	r3, [pc, #464]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a73      	ldr	r2, [pc, #460]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7ff f871 	bl	800122c <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7ff f86d 	bl	800122c <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e10c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_OscConfig+0x474>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x2ea>
 8002174:	4b64      	ldr	r3, [pc, #400]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a63      	ldr	r2, [pc, #396]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x30c>
 800218a:	4b5f      	ldr	r3, [pc, #380]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a5e      	ldr	r2, [pc, #376]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	4a5b      	ldr	r2, [pc, #364]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 80021a4:	4b58      	ldr	r3, [pc, #352]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a57      	ldr	r2, [pc, #348]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b0:	4b55      	ldr	r3, [pc, #340]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a54      	ldr	r2, [pc, #336]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7ff f832 	bl	800122c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7ff f82e 	bl	800122c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0cb      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7ff f81c 	bl	800122c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7ff f818 	bl	800122c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0b5      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b39      	ldr	r3, [pc, #228]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	4a38      	ldr	r2, [pc, #224]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a1 	beq.w	8002378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002236:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d05c      	beq.n	80022fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d141      	bne.n	80022ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ffec 	bl	800122c <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe ffe8 	bl	800122c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e087      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	491b      	ldr	r1, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe ffc1 	bl	800122c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe ffbd 	bl	800122c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e05c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x416>
 80022cc:	e054      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe ffaa 	bl	800122c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe ffa6 	bl	800122c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e045      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e038      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x4ec>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d028      	beq.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d121      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800234a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d111      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fed8 	bl	800122c <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fed4 	bl	800122c <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fe38 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08004554 	.word	0x08004554
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b094      	sub	sp, #80	@ 0x50
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002560:	2300      	movs	r3, #0
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	2300      	movs	r3, #0
 8002566:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256c:	4b79      	ldr	r3, [pc, #484]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00d      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 8002578:	2b08      	cmp	r3, #8
 800257a:	f200 80e1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x3a>
 8002586:	e0db      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 800258a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800258c:	e0db      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b73      	ldr	r3, [pc, #460]	@ (800275c <HAL_RCC_GetSysClockFreq+0x208>)
 8002590:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002592:	e0d8      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800259c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b6d      	ldr	r3, [pc, #436]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	2200      	movs	r2, #0
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4621      	mov	r1, r4
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	6139      	str	r1, [r7, #16]
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f8:	4659      	mov	r1, fp
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002602:	4651      	mov	r1, sl
 8002604:	018a      	lsls	r2, r1, #6
 8002606:	4651      	mov	r1, sl
 8002608:	ebb2 0801 	subs.w	r8, r2, r1
 800260c:	4659      	mov	r1, fp
 800260e:	eb63 0901 	sbc.w	r9, r3, r1
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
 800262a:	4623      	mov	r3, r4
 800262c:	eb18 0303 	adds.w	r3, r8, r3
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	462b      	mov	r3, r5
 8002634:	eb49 0303 	adc.w	r3, r9, r3
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002646:	4629      	mov	r1, r5
 8002648:	024b      	lsls	r3, r1, #9
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002650:	4621      	mov	r1, r4
 8002652:	024a      	lsls	r2, r1, #9
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002664:	f7fd fe0c 	bl	8000280 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002670:	e058      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002672:	4b38      	ldr	r3, [pc, #224]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2200      	movs	r2, #0
 800267a:	4618      	mov	r0, r3
 800267c:	4611      	mov	r1, r2
 800267e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
 8002688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	0159      	lsls	r1, r3, #5
 800269a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269e:	0150      	lsls	r0, r2, #5
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4641      	mov	r1, r8
 80026a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c4:	ebb2 040a 	subs.w	r4, r2, sl
 80026c8:	eb63 050b 	sbc.w	r5, r3, fp
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	00eb      	lsls	r3, r5, #3
 80026d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026da:	00e2      	lsls	r2, r4, #3
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	4643      	mov	r3, r8
 80026e2:	18e3      	adds	r3, r4, r3
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	464b      	mov	r3, r9
 80026e8:	eb45 0303 	adc.w	r3, r5, r3
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fa:	4629      	mov	r1, r5
 80026fc:	028b      	lsls	r3, r1, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002704:	4621      	mov	r1, r4
 8002706:	028a      	lsls	r2, r1, #10
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270e:	2200      	movs	r2, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	61fa      	str	r2, [r7, #28]
 8002714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002718:	f7fd fdb2 	bl	8000280 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002748:	4618      	mov	r0, r3
 800274a:	3750      	adds	r7, #80	@ 0x50
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <HAL_RCC_GetHCLKFreq+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000000 	.word	0x20000000

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff0 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	@ (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	08004564 	.word	0x08004564

080027a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a4:	f7ff ffdc 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 80027a8:	4602      	mov	r2, r0
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0b5b      	lsrs	r3, r3, #13
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	4903      	ldr	r1, [pc, #12]	@ (80027c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b6:	5ccb      	ldrb	r3, [r1, r3]
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40023800 	.word	0x40023800
 80027c4:	08004564 	.word	0x08004564

080027c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d035      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027f0:	4b67      	ldr	r3, [pc, #412]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fd19 	bl	800122c <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027fe:	f7fe fd15 	bl	800122c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0ba      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002810:	4b60      	ldr	r3, [pc, #384]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1f0      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	019a      	lsls	r2, r3, #6
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	071b      	lsls	r3, r3, #28
 8002828:	495a      	ldr	r1, [pc, #360]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002830:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002836:	f7fe fcf9 	bl	800122c <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800283e:	f7fe fcf5 	bl	800122c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e09a      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8083 	beq.w	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	4a48      	ldr	r2, [pc, #288]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	@ 0x40
 800287a:	4b46      	ldr	r3, [pc, #280]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002886:	4b44      	ldr	r3, [pc, #272]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a43      	ldr	r2, [pc, #268]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002890:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002892:	f7fe fccb 	bl	800122c <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800289a:	f7fe fcc7 	bl	800122c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e06c      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80028ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028b8:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02f      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d028      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028e6:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80028ec:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028f2:	4b28      	ldr	r3, [pc, #160]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d114      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc95 	bl	800122c <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002904:	e00a      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fc91 	bl	800122c <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d901      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e034      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ee      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002930:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002934:	d10d      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002936:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294a:	4912      	ldr	r1, [pc, #72]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
 8002950:	e005      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002952:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002958:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800295c:	6093      	str	r3, [r2, #8]
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002960:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	490a      	ldr	r1, [pc, #40]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7c1a      	ldrb	r2, [r3, #16]
 8002980:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002982:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	42470068 	.word	0x42470068
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000
 800299c:	42470e40 	.word	0x42470e40
 80029a0:	424711e0 	.word	0x424711e0

080029a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e073      	b.n	8002aa2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7f5b      	ldrb	r3, [r3, #29]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d105      	bne.n	80029d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f896 	bl	8000afc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d055      	beq.n	8002a90 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	22ca      	movs	r2, #202	@ 0xca
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2253      	movs	r2, #83	@ 0x53
 80029f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f87f 	bl	8002af8 <RTC_EnterInitMode>
 80029fa:	4603      	mov	r3, r0
 80029fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12c      	bne.n	8002a5e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a16:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68d2      	ldr	r2, [r2, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	041a      	lsls	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f886 	bl	8002b66 <RTC_ExitInitMode>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d110      	bne.n	8002a86 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	22ff      	movs	r2, #255	@ 0xff
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a8e:	e001      	b.n	8002a94 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d102      	bne.n	8002aa0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_RTC_WaitForSynchro+0x48>)
 8002abe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7fe fbb4 	bl	800122c <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ac6:	e009      	b.n	8002adc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ac8:	f7fe fbb0 	bl	800122c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ad6:	d901      	bls.n	8002adc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e007      	b.n	8002aec <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0ee      	beq.n	8002ac8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	00013f5f 	.word	0x00013f5f

08002af8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d122      	bne.n	8002b5c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b26:	f7fe fb81 	bl	800122c <HAL_GetTick>
 8002b2a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b2c:	e00c      	b.n	8002b48 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b2e:	f7fe fb7d 	bl	800122c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b3c:	d904      	bls.n	8002b48 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2204      	movs	r2, #4
 8002b42:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <RTC_EnterInitMode+0x64>
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d1e8      	bne.n	8002b2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b80:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0320 	and.w	r3, r3, #32
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff8b 	bl	8002aac <HAL_RTC_WaitForSynchro>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e07b      	b.n	8002cba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bd2:	d009      	beq.n	8002be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
 8002bda:	e005      	b.n	8002be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd ffde 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c6c:	ea42 0103 	orr.w	r1, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0104 	and.w	r1, r3, #4
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	f003 0210 	and.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e042      	b.n	8002d5a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fe f95d 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2224      	movs	r2, #36	@ 0x24
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa0a 	bl	8003120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691a      	ldr	r2, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b08a      	sub	sp, #40	@ 0x28
 8002d66:	af02      	add	r7, sp, #8
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d175      	bne.n	8002e6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <HAL_UART_Transmit+0x2c>
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06e      	b.n	8002e70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2221      	movs	r2, #33	@ 0x21
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fa44 	bl	800122c <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	88fa      	ldrh	r2, [r7, #6]
 8002daa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dba:	d108      	bne.n	8002dce <HAL_UART_Transmit+0x6c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	e003      	b.n	8002dd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dd6:	e02e      	b.n	8002e36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	2180      	movs	r1, #128	@ 0x80
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8df 	bl	8002fa6 <UART_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e03a      	b.n	8002e70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	3302      	adds	r3, #2
 8002e14:	61bb      	str	r3, [r7, #24]
 8002e16:	e007      	b.n	8002e28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1cb      	bne.n	8002dd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	2140      	movs	r1, #64	@ 0x40
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f8ab 	bl	8002fa6 <UART_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e006      	b.n	8002e70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 8081 	bne.w	8002f9c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_UART_Receive+0x2e>
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e079      	b.n	8002f9e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2222      	movs	r2, #34	@ 0x22
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe f9b5 	bl	800122c <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed8:	d108      	bne.n	8002eec <HAL_UART_Receive+0x74>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002ef4:	e047      	b.n	8002f86 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	2120      	movs	r1, #32
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 f850 	bl	8002fa6 <UART_WaitOnFlagUntilTimeout>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e042      	b.n	8002f9e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10c      	bne.n	8002f38 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	3302      	adds	r3, #2
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e01f      	b.n	8002f78 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f40:	d007      	beq.n	8002f52 <HAL_UART_Receive+0xda>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_UART_Receive+0xe8>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e008      	b.n	8002f72 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3301      	adds	r3, #1
 8002f76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1b2      	bne.n	8002ef6 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb6:	e03b      	b.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d037      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe f934 	bl	800122c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e03a      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b80      	cmp	r3, #128	@ 0x80
 8002fec:	d020      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b40      	cmp	r3, #64	@ 0x40
 8002ff2:	d01d      	beq.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d116      	bne.n	8003030 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f81d 	bl	8003058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2208      	movs	r2, #8
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e00f      	b.n	8003050 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d0b4      	beq.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003058:	b480      	push	{r7}
 800305a:	b095      	sub	sp, #84	@ 0x54
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306a:	e853 3f00 	ldrex	r3, [r3]
 800306e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003080:	643a      	str	r2, [r7, #64]	@ 0x40
 8003082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003084:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003088:	e841 2300 	strex	r3, r2, [r1]
 800308c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3314      	adds	r3, #20
 800309a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030bc:	e841 2300 	strex	r3, r2, [r1]
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e5      	bne.n	8003094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d119      	bne.n	8003104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f023 0310 	bic.w	r3, r3, #16
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030f0:	61ba      	str	r2, [r7, #24]
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6979      	ldr	r1, [r7, #20]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	613b      	str	r3, [r7, #16]
   return(result);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003112:	bf00      	nop
 8003114:	3754      	adds	r7, #84	@ 0x54
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b0c0      	sub	sp, #256	@ 0x100
 8003126:	af00      	add	r7, sp, #0
 8003128:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313c:	68d9      	ldr	r1, [r3, #12]
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	ea40 0301 	orr.w	r3, r0, r1
 8003148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	431a      	orrs	r2, r3
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	431a      	orrs	r2, r3
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003178:	f021 010c 	bic.w	r1, r1, #12
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003186:	430b      	orrs	r3, r1
 8003188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	ea40 0301 	orr.w	r3, r0, r1
 80031a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b8f      	ldr	r3, [pc, #572]	@ (80033ec <UART_SetConfig+0x2cc>)
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d005      	beq.n	80031c0 <UART_SetConfig+0xa0>
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b8d      	ldr	r3, [pc, #564]	@ (80033f0 <UART_SetConfig+0x2d0>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d104      	bne.n	80031ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7ff faee 	bl	80027a0 <HAL_RCC_GetPCLK2Freq>
 80031c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031c8:	e003      	b.n	80031d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ca:	f7ff fad5 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 80031ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031dc:	f040 810c 	bne.w	80033f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031f2:	4622      	mov	r2, r4
 80031f4:	462b      	mov	r3, r5
 80031f6:	1891      	adds	r1, r2, r2
 80031f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031fa:	415b      	adcs	r3, r3
 80031fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003202:	4621      	mov	r1, r4
 8003204:	eb12 0801 	adds.w	r8, r2, r1
 8003208:	4629      	mov	r1, r5
 800320a:	eb43 0901 	adc.w	r9, r3, r1
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003222:	4690      	mov	r8, r2
 8003224:	4699      	mov	r9, r3
 8003226:	4623      	mov	r3, r4
 8003228:	eb18 0303 	adds.w	r3, r8, r3
 800322c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003230:	462b      	mov	r3, r5
 8003232:	eb49 0303 	adc.w	r3, r9, r3
 8003236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800323a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003246:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800324a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800324e:	460b      	mov	r3, r1
 8003250:	18db      	adds	r3, r3, r3
 8003252:	653b      	str	r3, [r7, #80]	@ 0x50
 8003254:	4613      	mov	r3, r2
 8003256:	eb42 0303 	adc.w	r3, r2, r3
 800325a:	657b      	str	r3, [r7, #84]	@ 0x54
 800325c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003264:	f7fd f80c 	bl	8000280 <__aeabi_uldivmod>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <UART_SetConfig+0x2d4>)
 800326e:	fba3 2302 	umull	r2, r3, r3, r2
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	011c      	lsls	r4, r3, #4
 8003276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800327a:	2200      	movs	r2, #0
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003280:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003288:	4642      	mov	r2, r8
 800328a:	464b      	mov	r3, r9
 800328c:	1891      	adds	r1, r2, r2
 800328e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003290:	415b      	adcs	r3, r3
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003298:	4641      	mov	r1, r8
 800329a:	eb12 0a01 	adds.w	sl, r2, r1
 800329e:	4649      	mov	r1, r9
 80032a0:	eb43 0b01 	adc.w	fp, r3, r1
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b8:	4692      	mov	sl, r2
 80032ba:	469b      	mov	fp, r3
 80032bc:	4643      	mov	r3, r8
 80032be:	eb1a 0303 	adds.w	r3, sl, r3
 80032c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032c6:	464b      	mov	r3, r9
 80032c8:	eb4b 0303 	adc.w	r3, fp, r3
 80032cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032e4:	460b      	mov	r3, r1
 80032e6:	18db      	adds	r3, r3, r3
 80032e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ea:	4613      	mov	r3, r2
 80032ec:	eb42 0303 	adc.w	r3, r2, r3
 80032f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032fa:	f7fc ffc1 	bl	8000280 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4611      	mov	r1, r2
 8003304:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <UART_SetConfig+0x2d4>)
 8003306:	fba3 2301 	umull	r2, r3, r3, r1
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2264      	movs	r2, #100	@ 0x64
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	1acb      	subs	r3, r1, r3
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800331a:	4b36      	ldr	r3, [pc, #216]	@ (80033f4 <UART_SetConfig+0x2d4>)
 800331c:	fba3 2302 	umull	r2, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003328:	441c      	add	r4, r3
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003334:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	1891      	adds	r1, r2, r2
 8003342:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003344:	415b      	adcs	r3, r3
 8003346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800334c:	4641      	mov	r1, r8
 800334e:	1851      	adds	r1, r2, r1
 8003350:	6339      	str	r1, [r7, #48]	@ 0x30
 8003352:	4649      	mov	r1, r9
 8003354:	414b      	adcs	r3, r1
 8003356:	637b      	str	r3, [r7, #52]	@ 0x34
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003364:	4659      	mov	r1, fp
 8003366:	00cb      	lsls	r3, r1, #3
 8003368:	4651      	mov	r1, sl
 800336a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336e:	4651      	mov	r1, sl
 8003370:	00ca      	lsls	r2, r1, #3
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	4603      	mov	r3, r0
 8003378:	4642      	mov	r2, r8
 800337a:	189b      	adds	r3, r3, r2
 800337c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003380:	464b      	mov	r3, r9
 8003382:	460a      	mov	r2, r1
 8003384:	eb42 0303 	adc.w	r3, r2, r3
 8003388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003398:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800339c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033a0:	460b      	mov	r3, r1
 80033a2:	18db      	adds	r3, r3, r3
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033a6:	4613      	mov	r3, r2
 80033a8:	eb42 0303 	adc.w	r3, r2, r3
 80033ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033b6:	f7fc ff63 	bl	8000280 <__aeabi_uldivmod>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <UART_SetConfig+0x2d4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	@ 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	3332      	adds	r3, #50	@ 0x32
 80033d2:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <UART_SetConfig+0x2d4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 0207 	and.w	r2, r3, #7
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4422      	add	r2, r4
 80033e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033e8:	e106      	b.n	80035f8 <UART_SetConfig+0x4d8>
 80033ea:	bf00      	nop
 80033ec:	40011000 	.word	0x40011000
 80033f0:	40011400 	.word	0x40011400
 80033f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003402:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800340a:	4642      	mov	r2, r8
 800340c:	464b      	mov	r3, r9
 800340e:	1891      	adds	r1, r2, r2
 8003410:	6239      	str	r1, [r7, #32]
 8003412:	415b      	adcs	r3, r3
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
 8003416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341a:	4641      	mov	r1, r8
 800341c:	1854      	adds	r4, r2, r1
 800341e:	4649      	mov	r1, r9
 8003420:	eb43 0501 	adc.w	r5, r3, r1
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	00eb      	lsls	r3, r5, #3
 800342e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003432:	00e2      	lsls	r2, r4, #3
 8003434:	4614      	mov	r4, r2
 8003436:	461d      	mov	r5, r3
 8003438:	4643      	mov	r3, r8
 800343a:	18e3      	adds	r3, r4, r3
 800343c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003440:	464b      	mov	r3, r9
 8003442:	eb45 0303 	adc.w	r3, r5, r3
 8003446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003456:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003466:	4629      	mov	r1, r5
 8003468:	008b      	lsls	r3, r1, #2
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003470:	4621      	mov	r1, r4
 8003472:	008a      	lsls	r2, r1, #2
 8003474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003478:	f7fc ff02 	bl	8000280 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4b60      	ldr	r3, [pc, #384]	@ (8003604 <UART_SetConfig+0x4e4>)
 8003482:	fba3 2302 	umull	r2, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	011c      	lsls	r4, r3, #4
 800348a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003494:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	61b9      	str	r1, [r7, #24]
 80034a4:	415b      	adcs	r3, r3
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ac:	4641      	mov	r1, r8
 80034ae:	1851      	adds	r1, r2, r1
 80034b0:	6139      	str	r1, [r7, #16]
 80034b2:	4649      	mov	r1, r9
 80034b4:	414b      	adcs	r3, r1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c4:	4659      	mov	r1, fp
 80034c6:	00cb      	lsls	r3, r1, #3
 80034c8:	4651      	mov	r1, sl
 80034ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ce:	4651      	mov	r1, sl
 80034d0:	00ca      	lsls	r2, r1, #3
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	4642      	mov	r2, r8
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034e0:	464b      	mov	r3, r9
 80034e2:	460a      	mov	r2, r1
 80034e4:	eb42 0303 	adc.w	r3, r2, r3
 80034e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003504:	4649      	mov	r1, r9
 8003506:	008b      	lsls	r3, r1, #2
 8003508:	4641      	mov	r1, r8
 800350a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800350e:	4641      	mov	r1, r8
 8003510:	008a      	lsls	r2, r1, #2
 8003512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003516:	f7fc feb3 	bl	8000280 <__aeabi_uldivmod>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4611      	mov	r1, r2
 8003520:	4b38      	ldr	r3, [pc, #224]	@ (8003604 <UART_SetConfig+0x4e4>)
 8003522:	fba3 2301 	umull	r2, r3, r3, r1
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2264      	movs	r2, #100	@ 0x64
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	1acb      	subs	r3, r1, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	@ 0x32
 8003534:	4a33      	ldr	r2, [pc, #204]	@ (8003604 <UART_SetConfig+0x4e4>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003540:	441c      	add	r4, r3
 8003542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003546:	2200      	movs	r2, #0
 8003548:	673b      	str	r3, [r7, #112]	@ 0x70
 800354a:	677a      	str	r2, [r7, #116]	@ 0x74
 800354c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	415b      	adcs	r3, r3
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003592:	464b      	mov	r3, r9
 8003594:	460a      	mov	r2, r1
 8003596:	eb42 0303 	adc.w	r3, r2, r3
 800359a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035b4:	4649      	mov	r1, r9
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	4641      	mov	r1, r8
 80035ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035be:	4641      	mov	r1, r8
 80035c0:	008a      	lsls	r2, r1, #2
 80035c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035c6:	f7fc fe5b 	bl	8000280 <__aeabi_uldivmod>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <UART_SetConfig+0x4e4>)
 80035d0:	fba3 1302 	umull	r1, r3, r3, r2
 80035d4:	095b      	lsrs	r3, r3, #5
 80035d6:	2164      	movs	r1, #100	@ 0x64
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	3332      	adds	r3, #50	@ 0x32
 80035e2:	4a08      	ldr	r2, [pc, #32]	@ (8003604 <UART_SetConfig+0x4e4>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	f003 020f 	and.w	r2, r3, #15
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4422      	add	r2, r4
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035fe:	46bd      	mov	sp, r7
 8003600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003604:	51eb851f 	.word	0x51eb851f

08003608 <std>:
 8003608:	2300      	movs	r3, #0
 800360a:	b510      	push	{r4, lr}
 800360c:	4604      	mov	r4, r0
 800360e:	e9c0 3300 	strd	r3, r3, [r0]
 8003612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003616:	6083      	str	r3, [r0, #8]
 8003618:	8181      	strh	r1, [r0, #12]
 800361a:	6643      	str	r3, [r0, #100]	@ 0x64
 800361c:	81c2      	strh	r2, [r0, #14]
 800361e:	6183      	str	r3, [r0, #24]
 8003620:	4619      	mov	r1, r3
 8003622:	2208      	movs	r2, #8
 8003624:	305c      	adds	r0, #92	@ 0x5c
 8003626:	f000 f9f9 	bl	8003a1c <memset>
 800362a:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <std+0x58>)
 800362c:	6263      	str	r3, [r4, #36]	@ 0x24
 800362e:	4b0d      	ldr	r3, [pc, #52]	@ (8003664 <std+0x5c>)
 8003630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003632:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <std+0x60>)
 8003634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003636:	4b0d      	ldr	r3, [pc, #52]	@ (800366c <std+0x64>)
 8003638:	6323      	str	r3, [r4, #48]	@ 0x30
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <std+0x68>)
 800363c:	6224      	str	r4, [r4, #32]
 800363e:	429c      	cmp	r4, r3
 8003640:	d006      	beq.n	8003650 <std+0x48>
 8003642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003646:	4294      	cmp	r4, r2
 8003648:	d002      	beq.n	8003650 <std+0x48>
 800364a:	33d0      	adds	r3, #208	@ 0xd0
 800364c:	429c      	cmp	r4, r3
 800364e:	d105      	bne.n	800365c <std+0x54>
 8003650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003658:	f000 ba58 	b.w	8003b0c <__retarget_lock_init_recursive>
 800365c:	bd10      	pop	{r4, pc}
 800365e:	bf00      	nop
 8003660:	0800386d 	.word	0x0800386d
 8003664:	0800388f 	.word	0x0800388f
 8003668:	080038c7 	.word	0x080038c7
 800366c:	080038eb 	.word	0x080038eb
 8003670:	20000278 	.word	0x20000278

08003674 <stdio_exit_handler>:
 8003674:	4a02      	ldr	r2, [pc, #8]	@ (8003680 <stdio_exit_handler+0xc>)
 8003676:	4903      	ldr	r1, [pc, #12]	@ (8003684 <stdio_exit_handler+0x10>)
 8003678:	4803      	ldr	r0, [pc, #12]	@ (8003688 <stdio_exit_handler+0x14>)
 800367a:	f000 b869 	b.w	8003750 <_fwalk_sglue>
 800367e:	bf00      	nop
 8003680:	2000000c 	.word	0x2000000c
 8003684:	080043ad 	.word	0x080043ad
 8003688:	2000001c 	.word	0x2000001c

0800368c <cleanup_stdio>:
 800368c:	6841      	ldr	r1, [r0, #4]
 800368e:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <cleanup_stdio+0x34>)
 8003690:	4299      	cmp	r1, r3
 8003692:	b510      	push	{r4, lr}
 8003694:	4604      	mov	r4, r0
 8003696:	d001      	beq.n	800369c <cleanup_stdio+0x10>
 8003698:	f000 fe88 	bl	80043ac <_fflush_r>
 800369c:	68a1      	ldr	r1, [r4, #8]
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <cleanup_stdio+0x38>)
 80036a0:	4299      	cmp	r1, r3
 80036a2:	d002      	beq.n	80036aa <cleanup_stdio+0x1e>
 80036a4:	4620      	mov	r0, r4
 80036a6:	f000 fe81 	bl	80043ac <_fflush_r>
 80036aa:	68e1      	ldr	r1, [r4, #12]
 80036ac:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <cleanup_stdio+0x3c>)
 80036ae:	4299      	cmp	r1, r3
 80036b0:	d004      	beq.n	80036bc <cleanup_stdio+0x30>
 80036b2:	4620      	mov	r0, r4
 80036b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036b8:	f000 be78 	b.w	80043ac <_fflush_r>
 80036bc:	bd10      	pop	{r4, pc}
 80036be:	bf00      	nop
 80036c0:	20000278 	.word	0x20000278
 80036c4:	200002e0 	.word	0x200002e0
 80036c8:	20000348 	.word	0x20000348

080036cc <global_stdio_init.part.0>:
 80036cc:	b510      	push	{r4, lr}
 80036ce:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <global_stdio_init.part.0+0x30>)
 80036d0:	4c0b      	ldr	r4, [pc, #44]	@ (8003700 <global_stdio_init.part.0+0x34>)
 80036d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003704 <global_stdio_init.part.0+0x38>)
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	4620      	mov	r0, r4
 80036d8:	2200      	movs	r2, #0
 80036da:	2104      	movs	r1, #4
 80036dc:	f7ff ff94 	bl	8003608 <std>
 80036e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80036e4:	2201      	movs	r2, #1
 80036e6:	2109      	movs	r1, #9
 80036e8:	f7ff ff8e 	bl	8003608 <std>
 80036ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80036f0:	2202      	movs	r2, #2
 80036f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f6:	2112      	movs	r1, #18
 80036f8:	f7ff bf86 	b.w	8003608 <std>
 80036fc:	200003b0 	.word	0x200003b0
 8003700:	20000278 	.word	0x20000278
 8003704:	08003675 	.word	0x08003675

08003708 <__sfp_lock_acquire>:
 8003708:	4801      	ldr	r0, [pc, #4]	@ (8003710 <__sfp_lock_acquire+0x8>)
 800370a:	f000 ba00 	b.w	8003b0e <__retarget_lock_acquire_recursive>
 800370e:	bf00      	nop
 8003710:	200003b9 	.word	0x200003b9

08003714 <__sfp_lock_release>:
 8003714:	4801      	ldr	r0, [pc, #4]	@ (800371c <__sfp_lock_release+0x8>)
 8003716:	f000 b9fb 	b.w	8003b10 <__retarget_lock_release_recursive>
 800371a:	bf00      	nop
 800371c:	200003b9 	.word	0x200003b9

08003720 <__sinit>:
 8003720:	b510      	push	{r4, lr}
 8003722:	4604      	mov	r4, r0
 8003724:	f7ff fff0 	bl	8003708 <__sfp_lock_acquire>
 8003728:	6a23      	ldr	r3, [r4, #32]
 800372a:	b11b      	cbz	r3, 8003734 <__sinit+0x14>
 800372c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003730:	f7ff bff0 	b.w	8003714 <__sfp_lock_release>
 8003734:	4b04      	ldr	r3, [pc, #16]	@ (8003748 <__sinit+0x28>)
 8003736:	6223      	str	r3, [r4, #32]
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <__sinit+0x2c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f5      	bne.n	800372c <__sinit+0xc>
 8003740:	f7ff ffc4 	bl	80036cc <global_stdio_init.part.0>
 8003744:	e7f2      	b.n	800372c <__sinit+0xc>
 8003746:	bf00      	nop
 8003748:	0800368d 	.word	0x0800368d
 800374c:	200003b0 	.word	0x200003b0

08003750 <_fwalk_sglue>:
 8003750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003754:	4607      	mov	r7, r0
 8003756:	4688      	mov	r8, r1
 8003758:	4614      	mov	r4, r2
 800375a:	2600      	movs	r6, #0
 800375c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003760:	f1b9 0901 	subs.w	r9, r9, #1
 8003764:	d505      	bpl.n	8003772 <_fwalk_sglue+0x22>
 8003766:	6824      	ldr	r4, [r4, #0]
 8003768:	2c00      	cmp	r4, #0
 800376a:	d1f7      	bne.n	800375c <_fwalk_sglue+0xc>
 800376c:	4630      	mov	r0, r6
 800376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d907      	bls.n	8003788 <_fwalk_sglue+0x38>
 8003778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800377c:	3301      	adds	r3, #1
 800377e:	d003      	beq.n	8003788 <_fwalk_sglue+0x38>
 8003780:	4629      	mov	r1, r5
 8003782:	4638      	mov	r0, r7
 8003784:	47c0      	blx	r8
 8003786:	4306      	orrs	r6, r0
 8003788:	3568      	adds	r5, #104	@ 0x68
 800378a:	e7e9      	b.n	8003760 <_fwalk_sglue+0x10>

0800378c <iprintf>:
 800378c:	b40f      	push	{r0, r1, r2, r3}
 800378e:	b507      	push	{r0, r1, r2, lr}
 8003790:	4906      	ldr	r1, [pc, #24]	@ (80037ac <iprintf+0x20>)
 8003792:	ab04      	add	r3, sp, #16
 8003794:	6808      	ldr	r0, [r1, #0]
 8003796:	f853 2b04 	ldr.w	r2, [r3], #4
 800379a:	6881      	ldr	r1, [r0, #8]
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	f000 fadb 	bl	8003d58 <_vfiprintf_r>
 80037a2:	b003      	add	sp, #12
 80037a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037a8:	b004      	add	sp, #16
 80037aa:	4770      	bx	lr
 80037ac:	20000018 	.word	0x20000018

080037b0 <_puts_r>:
 80037b0:	6a03      	ldr	r3, [r0, #32]
 80037b2:	b570      	push	{r4, r5, r6, lr}
 80037b4:	6884      	ldr	r4, [r0, #8]
 80037b6:	4605      	mov	r5, r0
 80037b8:	460e      	mov	r6, r1
 80037ba:	b90b      	cbnz	r3, 80037c0 <_puts_r+0x10>
 80037bc:	f7ff ffb0 	bl	8003720 <__sinit>
 80037c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037c2:	07db      	lsls	r3, r3, #31
 80037c4:	d405      	bmi.n	80037d2 <_puts_r+0x22>
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	0598      	lsls	r0, r3, #22
 80037ca:	d402      	bmi.n	80037d2 <_puts_r+0x22>
 80037cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ce:	f000 f99e 	bl	8003b0e <__retarget_lock_acquire_recursive>
 80037d2:	89a3      	ldrh	r3, [r4, #12]
 80037d4:	0719      	lsls	r1, r3, #28
 80037d6:	d502      	bpl.n	80037de <_puts_r+0x2e>
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d135      	bne.n	800384a <_puts_r+0x9a>
 80037de:	4621      	mov	r1, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f8c5 	bl	8003970 <__swsetup_r>
 80037e6:	b380      	cbz	r0, 800384a <_puts_r+0x9a>
 80037e8:	f04f 35ff 	mov.w	r5, #4294967295
 80037ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037ee:	07da      	lsls	r2, r3, #31
 80037f0:	d405      	bmi.n	80037fe <_puts_r+0x4e>
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	059b      	lsls	r3, r3, #22
 80037f6:	d402      	bmi.n	80037fe <_puts_r+0x4e>
 80037f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037fa:	f000 f989 	bl	8003b10 <__retarget_lock_release_recursive>
 80037fe:	4628      	mov	r0, r5
 8003800:	bd70      	pop	{r4, r5, r6, pc}
 8003802:	2b00      	cmp	r3, #0
 8003804:	da04      	bge.n	8003810 <_puts_r+0x60>
 8003806:	69a2      	ldr	r2, [r4, #24]
 8003808:	429a      	cmp	r2, r3
 800380a:	dc17      	bgt.n	800383c <_puts_r+0x8c>
 800380c:	290a      	cmp	r1, #10
 800380e:	d015      	beq.n	800383c <_puts_r+0x8c>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	6022      	str	r2, [r4, #0]
 8003816:	7019      	strb	r1, [r3, #0]
 8003818:	68a3      	ldr	r3, [r4, #8]
 800381a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800381e:	3b01      	subs	r3, #1
 8003820:	60a3      	str	r3, [r4, #8]
 8003822:	2900      	cmp	r1, #0
 8003824:	d1ed      	bne.n	8003802 <_puts_r+0x52>
 8003826:	2b00      	cmp	r3, #0
 8003828:	da11      	bge.n	800384e <_puts_r+0x9e>
 800382a:	4622      	mov	r2, r4
 800382c:	210a      	movs	r1, #10
 800382e:	4628      	mov	r0, r5
 8003830:	f000 f85f 	bl	80038f2 <__swbuf_r>
 8003834:	3001      	adds	r0, #1
 8003836:	d0d7      	beq.n	80037e8 <_puts_r+0x38>
 8003838:	250a      	movs	r5, #10
 800383a:	e7d7      	b.n	80037ec <_puts_r+0x3c>
 800383c:	4622      	mov	r2, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f857 	bl	80038f2 <__swbuf_r>
 8003844:	3001      	adds	r0, #1
 8003846:	d1e7      	bne.n	8003818 <_puts_r+0x68>
 8003848:	e7ce      	b.n	80037e8 <_puts_r+0x38>
 800384a:	3e01      	subs	r6, #1
 800384c:	e7e4      	b.n	8003818 <_puts_r+0x68>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	6022      	str	r2, [r4, #0]
 8003854:	220a      	movs	r2, #10
 8003856:	701a      	strb	r2, [r3, #0]
 8003858:	e7ee      	b.n	8003838 <_puts_r+0x88>
	...

0800385c <puts>:
 800385c:	4b02      	ldr	r3, [pc, #8]	@ (8003868 <puts+0xc>)
 800385e:	4601      	mov	r1, r0
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	f7ff bfa5 	b.w	80037b0 <_puts_r>
 8003866:	bf00      	nop
 8003868:	20000018 	.word	0x20000018

0800386c <__sread>:
 800386c:	b510      	push	{r4, lr}
 800386e:	460c      	mov	r4, r1
 8003870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003874:	f000 f8fc 	bl	8003a70 <_read_r>
 8003878:	2800      	cmp	r0, #0
 800387a:	bfab      	itete	ge
 800387c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800387e:	89a3      	ldrhlt	r3, [r4, #12]
 8003880:	181b      	addge	r3, r3, r0
 8003882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003886:	bfac      	ite	ge
 8003888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800388a:	81a3      	strhlt	r3, [r4, #12]
 800388c:	bd10      	pop	{r4, pc}

0800388e <__swrite>:
 800388e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003892:	461f      	mov	r7, r3
 8003894:	898b      	ldrh	r3, [r1, #12]
 8003896:	05db      	lsls	r3, r3, #23
 8003898:	4605      	mov	r5, r0
 800389a:	460c      	mov	r4, r1
 800389c:	4616      	mov	r6, r2
 800389e:	d505      	bpl.n	80038ac <__swrite+0x1e>
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	2302      	movs	r3, #2
 80038a6:	2200      	movs	r2, #0
 80038a8:	f000 f8d0 	bl	8003a4c <_lseek_r>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038b6:	81a3      	strh	r3, [r4, #12]
 80038b8:	4632      	mov	r2, r6
 80038ba:	463b      	mov	r3, r7
 80038bc:	4628      	mov	r0, r5
 80038be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	f000 b8e7 	b.w	8003a94 <_write_r>

080038c6 <__sseek>:
 80038c6:	b510      	push	{r4, lr}
 80038c8:	460c      	mov	r4, r1
 80038ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ce:	f000 f8bd 	bl	8003a4c <_lseek_r>
 80038d2:	1c43      	adds	r3, r0, #1
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	bf15      	itete	ne
 80038d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038e2:	81a3      	strheq	r3, [r4, #12]
 80038e4:	bf18      	it	ne
 80038e6:	81a3      	strhne	r3, [r4, #12]
 80038e8:	bd10      	pop	{r4, pc}

080038ea <__sclose>:
 80038ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ee:	f000 b89d 	b.w	8003a2c <_close_r>

080038f2 <__swbuf_r>:
 80038f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f4:	460e      	mov	r6, r1
 80038f6:	4614      	mov	r4, r2
 80038f8:	4605      	mov	r5, r0
 80038fa:	b118      	cbz	r0, 8003904 <__swbuf_r+0x12>
 80038fc:	6a03      	ldr	r3, [r0, #32]
 80038fe:	b90b      	cbnz	r3, 8003904 <__swbuf_r+0x12>
 8003900:	f7ff ff0e 	bl	8003720 <__sinit>
 8003904:	69a3      	ldr	r3, [r4, #24]
 8003906:	60a3      	str	r3, [r4, #8]
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	071a      	lsls	r2, r3, #28
 800390c:	d501      	bpl.n	8003912 <__swbuf_r+0x20>
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	b943      	cbnz	r3, 8003924 <__swbuf_r+0x32>
 8003912:	4621      	mov	r1, r4
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f82b 	bl	8003970 <__swsetup_r>
 800391a:	b118      	cbz	r0, 8003924 <__swbuf_r+0x32>
 800391c:	f04f 37ff 	mov.w	r7, #4294967295
 8003920:	4638      	mov	r0, r7
 8003922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	1a98      	subs	r0, r3, r2
 800392a:	6963      	ldr	r3, [r4, #20]
 800392c:	b2f6      	uxtb	r6, r6
 800392e:	4283      	cmp	r3, r0
 8003930:	4637      	mov	r7, r6
 8003932:	dc05      	bgt.n	8003940 <__swbuf_r+0x4e>
 8003934:	4621      	mov	r1, r4
 8003936:	4628      	mov	r0, r5
 8003938:	f000 fd38 	bl	80043ac <_fflush_r>
 800393c:	2800      	cmp	r0, #0
 800393e:	d1ed      	bne.n	800391c <__swbuf_r+0x2a>
 8003940:	68a3      	ldr	r3, [r4, #8]
 8003942:	3b01      	subs	r3, #1
 8003944:	60a3      	str	r3, [r4, #8]
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	6022      	str	r2, [r4, #0]
 800394c:	701e      	strb	r6, [r3, #0]
 800394e:	6962      	ldr	r2, [r4, #20]
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	429a      	cmp	r2, r3
 8003954:	d004      	beq.n	8003960 <__swbuf_r+0x6e>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	07db      	lsls	r3, r3, #31
 800395a:	d5e1      	bpl.n	8003920 <__swbuf_r+0x2e>
 800395c:	2e0a      	cmp	r6, #10
 800395e:	d1df      	bne.n	8003920 <__swbuf_r+0x2e>
 8003960:	4621      	mov	r1, r4
 8003962:	4628      	mov	r0, r5
 8003964:	f000 fd22 	bl	80043ac <_fflush_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	d0d9      	beq.n	8003920 <__swbuf_r+0x2e>
 800396c:	e7d6      	b.n	800391c <__swbuf_r+0x2a>
	...

08003970 <__swsetup_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <__swsetup_r+0xa8>)
 8003974:	4605      	mov	r5, r0
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	460c      	mov	r4, r1
 800397a:	b118      	cbz	r0, 8003984 <__swsetup_r+0x14>
 800397c:	6a03      	ldr	r3, [r0, #32]
 800397e:	b90b      	cbnz	r3, 8003984 <__swsetup_r+0x14>
 8003980:	f7ff fece 	bl	8003720 <__sinit>
 8003984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003988:	0719      	lsls	r1, r3, #28
 800398a:	d422      	bmi.n	80039d2 <__swsetup_r+0x62>
 800398c:	06da      	lsls	r2, r3, #27
 800398e:	d407      	bmi.n	80039a0 <__swsetup_r+0x30>
 8003990:	2209      	movs	r2, #9
 8003992:	602a      	str	r2, [r5, #0]
 8003994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	f04f 30ff 	mov.w	r0, #4294967295
 800399e:	e033      	b.n	8003a08 <__swsetup_r+0x98>
 80039a0:	0758      	lsls	r0, r3, #29
 80039a2:	d512      	bpl.n	80039ca <__swsetup_r+0x5a>
 80039a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039a6:	b141      	cbz	r1, 80039ba <__swsetup_r+0x4a>
 80039a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039ac:	4299      	cmp	r1, r3
 80039ae:	d002      	beq.n	80039b6 <__swsetup_r+0x46>
 80039b0:	4628      	mov	r0, r5
 80039b2:	f000 f8af 	bl	8003b14 <_free_r>
 80039b6:	2300      	movs	r3, #0
 80039b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039c0:	81a3      	strh	r3, [r4, #12]
 80039c2:	2300      	movs	r3, #0
 80039c4:	6063      	str	r3, [r4, #4]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f043 0308 	orr.w	r3, r3, #8
 80039d0:	81a3      	strh	r3, [r4, #12]
 80039d2:	6923      	ldr	r3, [r4, #16]
 80039d4:	b94b      	cbnz	r3, 80039ea <__swsetup_r+0x7a>
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039e0:	d003      	beq.n	80039ea <__swsetup_r+0x7a>
 80039e2:	4621      	mov	r1, r4
 80039e4:	4628      	mov	r0, r5
 80039e6:	f000 fd2f 	bl	8004448 <__smakebuf_r>
 80039ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ee:	f013 0201 	ands.w	r2, r3, #1
 80039f2:	d00a      	beq.n	8003a0a <__swsetup_r+0x9a>
 80039f4:	2200      	movs	r2, #0
 80039f6:	60a2      	str	r2, [r4, #8]
 80039f8:	6962      	ldr	r2, [r4, #20]
 80039fa:	4252      	negs	r2, r2
 80039fc:	61a2      	str	r2, [r4, #24]
 80039fe:	6922      	ldr	r2, [r4, #16]
 8003a00:	b942      	cbnz	r2, 8003a14 <__swsetup_r+0xa4>
 8003a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a06:	d1c5      	bne.n	8003994 <__swsetup_r+0x24>
 8003a08:	bd38      	pop	{r3, r4, r5, pc}
 8003a0a:	0799      	lsls	r1, r3, #30
 8003a0c:	bf58      	it	pl
 8003a0e:	6962      	ldrpl	r2, [r4, #20]
 8003a10:	60a2      	str	r2, [r4, #8]
 8003a12:	e7f4      	b.n	80039fe <__swsetup_r+0x8e>
 8003a14:	2000      	movs	r0, #0
 8003a16:	e7f7      	b.n	8003a08 <__swsetup_r+0x98>
 8003a18:	20000018 	.word	0x20000018

08003a1c <memset>:
 8003a1c:	4402      	add	r2, r0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d100      	bne.n	8003a26 <memset+0xa>
 8003a24:	4770      	bx	lr
 8003a26:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2a:	e7f9      	b.n	8003a20 <memset+0x4>

08003a2c <_close_r>:
 8003a2c:	b538      	push	{r3, r4, r5, lr}
 8003a2e:	4d06      	ldr	r5, [pc, #24]	@ (8003a48 <_close_r+0x1c>)
 8003a30:	2300      	movs	r3, #0
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	f7fd f9bc 	bl	8000db4 <_close>
 8003a3c:	1c43      	adds	r3, r0, #1
 8003a3e:	d102      	bne.n	8003a46 <_close_r+0x1a>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	b103      	cbz	r3, 8003a46 <_close_r+0x1a>
 8003a44:	6023      	str	r3, [r4, #0]
 8003a46:	bd38      	pop	{r3, r4, r5, pc}
 8003a48:	200003b4 	.word	0x200003b4

08003a4c <_lseek_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d07      	ldr	r5, [pc, #28]	@ (8003a6c <_lseek_r+0x20>)
 8003a50:	4604      	mov	r4, r0
 8003a52:	4608      	mov	r0, r1
 8003a54:	4611      	mov	r1, r2
 8003a56:	2200      	movs	r2, #0
 8003a58:	602a      	str	r2, [r5, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f7fd f9d1 	bl	8000e02 <_lseek>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	d102      	bne.n	8003a6a <_lseek_r+0x1e>
 8003a64:	682b      	ldr	r3, [r5, #0]
 8003a66:	b103      	cbz	r3, 8003a6a <_lseek_r+0x1e>
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
 8003a6c:	200003b4 	.word	0x200003b4

08003a70 <_read_r>:
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4d07      	ldr	r5, [pc, #28]	@ (8003a90 <_read_r+0x20>)
 8003a74:	4604      	mov	r4, r0
 8003a76:	4608      	mov	r0, r1
 8003a78:	4611      	mov	r1, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	602a      	str	r2, [r5, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f7fd f95f 	bl	8000d42 <_read>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d102      	bne.n	8003a8e <_read_r+0x1e>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	b103      	cbz	r3, 8003a8e <_read_r+0x1e>
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	200003b4 	.word	0x200003b4

08003a94 <_write_r>:
 8003a94:	b538      	push	{r3, r4, r5, lr}
 8003a96:	4d07      	ldr	r5, [pc, #28]	@ (8003ab4 <_write_r+0x20>)
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4608      	mov	r0, r1
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	602a      	str	r2, [r5, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	f7fd f96a 	bl	8000d7c <_write>
 8003aa8:	1c43      	adds	r3, r0, #1
 8003aaa:	d102      	bne.n	8003ab2 <_write_r+0x1e>
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	b103      	cbz	r3, 8003ab2 <_write_r+0x1e>
 8003ab0:	6023      	str	r3, [r4, #0]
 8003ab2:	bd38      	pop	{r3, r4, r5, pc}
 8003ab4:	200003b4 	.word	0x200003b4

08003ab8 <__errno>:
 8003ab8:	4b01      	ldr	r3, [pc, #4]	@ (8003ac0 <__errno+0x8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000018 	.word	0x20000018

08003ac4 <__libc_init_array>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8003afc <__libc_init_array+0x38>)
 8003ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8003b00 <__libc_init_array+0x3c>)
 8003aca:	1b64      	subs	r4, r4, r5
 8003acc:	10a4      	asrs	r4, r4, #2
 8003ace:	2600      	movs	r6, #0
 8003ad0:	42a6      	cmp	r6, r4
 8003ad2:	d109      	bne.n	8003ae8 <__libc_init_array+0x24>
 8003ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8003b04 <__libc_init_array+0x40>)
 8003ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8003b08 <__libc_init_array+0x44>)
 8003ad8:	f000 fd24 	bl	8004524 <_init>
 8003adc:	1b64      	subs	r4, r4, r5
 8003ade:	10a4      	asrs	r4, r4, #2
 8003ae0:	2600      	movs	r6, #0
 8003ae2:	42a6      	cmp	r6, r4
 8003ae4:	d105      	bne.n	8003af2 <__libc_init_array+0x2e>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}
 8003ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aec:	4798      	blx	r3
 8003aee:	3601      	adds	r6, #1
 8003af0:	e7ee      	b.n	8003ad0 <__libc_init_array+0xc>
 8003af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af6:	4798      	blx	r3
 8003af8:	3601      	adds	r6, #1
 8003afa:	e7f2      	b.n	8003ae2 <__libc_init_array+0x1e>
 8003afc:	080045a8 	.word	0x080045a8
 8003b00:	080045a8 	.word	0x080045a8
 8003b04:	080045a8 	.word	0x080045a8
 8003b08:	080045ac 	.word	0x080045ac

08003b0c <__retarget_lock_init_recursive>:
 8003b0c:	4770      	bx	lr

08003b0e <__retarget_lock_acquire_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <__retarget_lock_release_recursive>:
 8003b10:	4770      	bx	lr
	...

08003b14 <_free_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	4605      	mov	r5, r0
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	d041      	beq.n	8003ba0 <_free_r+0x8c>
 8003b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b20:	1f0c      	subs	r4, r1, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	bfb8      	it	lt
 8003b26:	18e4      	addlt	r4, r4, r3
 8003b28:	f000 f8e0 	bl	8003cec <__malloc_lock>
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <_free_r+0x90>)
 8003b2e:	6813      	ldr	r3, [r2, #0]
 8003b30:	b933      	cbnz	r3, 8003b40 <_free_r+0x2c>
 8003b32:	6063      	str	r3, [r4, #4]
 8003b34:	6014      	str	r4, [r2, #0]
 8003b36:	4628      	mov	r0, r5
 8003b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b3c:	f000 b8dc 	b.w	8003cf8 <__malloc_unlock>
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	d908      	bls.n	8003b56 <_free_r+0x42>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	1821      	adds	r1, r4, r0
 8003b48:	428b      	cmp	r3, r1
 8003b4a:	bf01      	itttt	eq
 8003b4c:	6819      	ldreq	r1, [r3, #0]
 8003b4e:	685b      	ldreq	r3, [r3, #4]
 8003b50:	1809      	addeq	r1, r1, r0
 8003b52:	6021      	streq	r1, [r4, #0]
 8003b54:	e7ed      	b.n	8003b32 <_free_r+0x1e>
 8003b56:	461a      	mov	r2, r3
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	b10b      	cbz	r3, 8003b60 <_free_r+0x4c>
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	d9fa      	bls.n	8003b56 <_free_r+0x42>
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	1850      	adds	r0, r2, r1
 8003b64:	42a0      	cmp	r0, r4
 8003b66:	d10b      	bne.n	8003b80 <_free_r+0x6c>
 8003b68:	6820      	ldr	r0, [r4, #0]
 8003b6a:	4401      	add	r1, r0
 8003b6c:	1850      	adds	r0, r2, r1
 8003b6e:	4283      	cmp	r3, r0
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	d1e0      	bne.n	8003b36 <_free_r+0x22>
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	6053      	str	r3, [r2, #4]
 8003b7a:	4408      	add	r0, r1
 8003b7c:	6010      	str	r0, [r2, #0]
 8003b7e:	e7da      	b.n	8003b36 <_free_r+0x22>
 8003b80:	d902      	bls.n	8003b88 <_free_r+0x74>
 8003b82:	230c      	movs	r3, #12
 8003b84:	602b      	str	r3, [r5, #0]
 8003b86:	e7d6      	b.n	8003b36 <_free_r+0x22>
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	1821      	adds	r1, r4, r0
 8003b8c:	428b      	cmp	r3, r1
 8003b8e:	bf04      	itt	eq
 8003b90:	6819      	ldreq	r1, [r3, #0]
 8003b92:	685b      	ldreq	r3, [r3, #4]
 8003b94:	6063      	str	r3, [r4, #4]
 8003b96:	bf04      	itt	eq
 8003b98:	1809      	addeq	r1, r1, r0
 8003b9a:	6021      	streq	r1, [r4, #0]
 8003b9c:	6054      	str	r4, [r2, #4]
 8003b9e:	e7ca      	b.n	8003b36 <_free_r+0x22>
 8003ba0:	bd38      	pop	{r3, r4, r5, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200003c0 	.word	0x200003c0

08003ba8 <sbrk_aligned>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4e0f      	ldr	r6, [pc, #60]	@ (8003be8 <sbrk_aligned+0x40>)
 8003bac:	460c      	mov	r4, r1
 8003bae:	6831      	ldr	r1, [r6, #0]
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	b911      	cbnz	r1, 8003bba <sbrk_aligned+0x12>
 8003bb4:	f000 fca6 	bl	8004504 <_sbrk_r>
 8003bb8:	6030      	str	r0, [r6, #0]
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f000 fca1 	bl	8004504 <_sbrk_r>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d103      	bne.n	8003bce <sbrk_aligned+0x26>
 8003bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003bca:	4620      	mov	r0, r4
 8003bcc:	bd70      	pop	{r4, r5, r6, pc}
 8003bce:	1cc4      	adds	r4, r0, #3
 8003bd0:	f024 0403 	bic.w	r4, r4, #3
 8003bd4:	42a0      	cmp	r0, r4
 8003bd6:	d0f8      	beq.n	8003bca <sbrk_aligned+0x22>
 8003bd8:	1a21      	subs	r1, r4, r0
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f000 fc92 	bl	8004504 <_sbrk_r>
 8003be0:	3001      	adds	r0, #1
 8003be2:	d1f2      	bne.n	8003bca <sbrk_aligned+0x22>
 8003be4:	e7ef      	b.n	8003bc6 <sbrk_aligned+0x1e>
 8003be6:	bf00      	nop
 8003be8:	200003bc 	.word	0x200003bc

08003bec <_malloc_r>:
 8003bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf0:	1ccd      	adds	r5, r1, #3
 8003bf2:	f025 0503 	bic.w	r5, r5, #3
 8003bf6:	3508      	adds	r5, #8
 8003bf8:	2d0c      	cmp	r5, #12
 8003bfa:	bf38      	it	cc
 8003bfc:	250c      	movcc	r5, #12
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	4606      	mov	r6, r0
 8003c02:	db01      	blt.n	8003c08 <_malloc_r+0x1c>
 8003c04:	42a9      	cmp	r1, r5
 8003c06:	d904      	bls.n	8003c12 <_malloc_r+0x26>
 8003c08:	230c      	movs	r3, #12
 8003c0a:	6033      	str	r3, [r6, #0]
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ce8 <_malloc_r+0xfc>
 8003c16:	f000 f869 	bl	8003cec <__malloc_lock>
 8003c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c1e:	461c      	mov	r4, r3
 8003c20:	bb44      	cbnz	r4, 8003c74 <_malloc_r+0x88>
 8003c22:	4629      	mov	r1, r5
 8003c24:	4630      	mov	r0, r6
 8003c26:	f7ff ffbf 	bl	8003ba8 <sbrk_aligned>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	d158      	bne.n	8003ce2 <_malloc_r+0xf6>
 8003c30:	f8d8 4000 	ldr.w	r4, [r8]
 8003c34:	4627      	mov	r7, r4
 8003c36:	2f00      	cmp	r7, #0
 8003c38:	d143      	bne.n	8003cc2 <_malloc_r+0xd6>
 8003c3a:	2c00      	cmp	r4, #0
 8003c3c:	d04b      	beq.n	8003cd6 <_malloc_r+0xea>
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	4639      	mov	r1, r7
 8003c42:	4630      	mov	r0, r6
 8003c44:	eb04 0903 	add.w	r9, r4, r3
 8003c48:	f000 fc5c 	bl	8004504 <_sbrk_r>
 8003c4c:	4581      	cmp	r9, r0
 8003c4e:	d142      	bne.n	8003cd6 <_malloc_r+0xea>
 8003c50:	6821      	ldr	r1, [r4, #0]
 8003c52:	1a6d      	subs	r5, r5, r1
 8003c54:	4629      	mov	r1, r5
 8003c56:	4630      	mov	r0, r6
 8003c58:	f7ff ffa6 	bl	8003ba8 <sbrk_aligned>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d03a      	beq.n	8003cd6 <_malloc_r+0xea>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	442b      	add	r3, r5
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	f8d8 3000 	ldr.w	r3, [r8]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	bb62      	cbnz	r2, 8003cc8 <_malloc_r+0xdc>
 8003c6e:	f8c8 7000 	str.w	r7, [r8]
 8003c72:	e00f      	b.n	8003c94 <_malloc_r+0xa8>
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	1b52      	subs	r2, r2, r5
 8003c78:	d420      	bmi.n	8003cbc <_malloc_r+0xd0>
 8003c7a:	2a0b      	cmp	r2, #11
 8003c7c:	d917      	bls.n	8003cae <_malloc_r+0xc2>
 8003c7e:	1961      	adds	r1, r4, r5
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	6025      	str	r5, [r4, #0]
 8003c84:	bf18      	it	ne
 8003c86:	6059      	strne	r1, [r3, #4]
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	bf08      	it	eq
 8003c8c:	f8c8 1000 	streq.w	r1, [r8]
 8003c90:	5162      	str	r2, [r4, r5]
 8003c92:	604b      	str	r3, [r1, #4]
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f82f 	bl	8003cf8 <__malloc_unlock>
 8003c9a:	f104 000b 	add.w	r0, r4, #11
 8003c9e:	1d23      	adds	r3, r4, #4
 8003ca0:	f020 0007 	bic.w	r0, r0, #7
 8003ca4:	1ac2      	subs	r2, r0, r3
 8003ca6:	bf1c      	itt	ne
 8003ca8:	1a1b      	subne	r3, r3, r0
 8003caa:	50a3      	strne	r3, [r4, r2]
 8003cac:	e7af      	b.n	8003c0e <_malloc_r+0x22>
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	bf0c      	ite	eq
 8003cb4:	f8c8 2000 	streq.w	r2, [r8]
 8003cb8:	605a      	strne	r2, [r3, #4]
 8003cba:	e7eb      	b.n	8003c94 <_malloc_r+0xa8>
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	6864      	ldr	r4, [r4, #4]
 8003cc0:	e7ae      	b.n	8003c20 <_malloc_r+0x34>
 8003cc2:	463c      	mov	r4, r7
 8003cc4:	687f      	ldr	r7, [r7, #4]
 8003cc6:	e7b6      	b.n	8003c36 <_malloc_r+0x4a>
 8003cc8:	461a      	mov	r2, r3
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	d1fb      	bne.n	8003cc8 <_malloc_r+0xdc>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6053      	str	r3, [r2, #4]
 8003cd4:	e7de      	b.n	8003c94 <_malloc_r+0xa8>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	6033      	str	r3, [r6, #0]
 8003cda:	4630      	mov	r0, r6
 8003cdc:	f000 f80c 	bl	8003cf8 <__malloc_unlock>
 8003ce0:	e794      	b.n	8003c0c <_malloc_r+0x20>
 8003ce2:	6005      	str	r5, [r0, #0]
 8003ce4:	e7d6      	b.n	8003c94 <_malloc_r+0xa8>
 8003ce6:	bf00      	nop
 8003ce8:	200003c0 	.word	0x200003c0

08003cec <__malloc_lock>:
 8003cec:	4801      	ldr	r0, [pc, #4]	@ (8003cf4 <__malloc_lock+0x8>)
 8003cee:	f7ff bf0e 	b.w	8003b0e <__retarget_lock_acquire_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	200003b8 	.word	0x200003b8

08003cf8 <__malloc_unlock>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	@ (8003d00 <__malloc_unlock+0x8>)
 8003cfa:	f7ff bf09 	b.w	8003b10 <__retarget_lock_release_recursive>
 8003cfe:	bf00      	nop
 8003d00:	200003b8 	.word	0x200003b8

08003d04 <__sfputc_r>:
 8003d04:	6893      	ldr	r3, [r2, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	b410      	push	{r4}
 8003d0c:	6093      	str	r3, [r2, #8]
 8003d0e:	da08      	bge.n	8003d22 <__sfputc_r+0x1e>
 8003d10:	6994      	ldr	r4, [r2, #24]
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	db01      	blt.n	8003d1a <__sfputc_r+0x16>
 8003d16:	290a      	cmp	r1, #10
 8003d18:	d103      	bne.n	8003d22 <__sfputc_r+0x1e>
 8003d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d1e:	f7ff bde8 	b.w	80038f2 <__swbuf_r>
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	1c58      	adds	r0, r3, #1
 8003d26:	6010      	str	r0, [r2, #0]
 8003d28:	7019      	strb	r1, [r3, #0]
 8003d2a:	4608      	mov	r0, r1
 8003d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <__sfputs_r>:
 8003d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d34:	4606      	mov	r6, r0
 8003d36:	460f      	mov	r7, r1
 8003d38:	4614      	mov	r4, r2
 8003d3a:	18d5      	adds	r5, r2, r3
 8003d3c:	42ac      	cmp	r4, r5
 8003d3e:	d101      	bne.n	8003d44 <__sfputs_r+0x12>
 8003d40:	2000      	movs	r0, #0
 8003d42:	e007      	b.n	8003d54 <__sfputs_r+0x22>
 8003d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d48:	463a      	mov	r2, r7
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7ff ffda 	bl	8003d04 <__sfputc_r>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d1f3      	bne.n	8003d3c <__sfputs_r+0xa>
 8003d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d58 <_vfiprintf_r>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	460d      	mov	r5, r1
 8003d5e:	b09d      	sub	sp, #116	@ 0x74
 8003d60:	4614      	mov	r4, r2
 8003d62:	4698      	mov	r8, r3
 8003d64:	4606      	mov	r6, r0
 8003d66:	b118      	cbz	r0, 8003d70 <_vfiprintf_r+0x18>
 8003d68:	6a03      	ldr	r3, [r0, #32]
 8003d6a:	b90b      	cbnz	r3, 8003d70 <_vfiprintf_r+0x18>
 8003d6c:	f7ff fcd8 	bl	8003720 <__sinit>
 8003d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d72:	07d9      	lsls	r1, r3, #31
 8003d74:	d405      	bmi.n	8003d82 <_vfiprintf_r+0x2a>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	059a      	lsls	r2, r3, #22
 8003d7a:	d402      	bmi.n	8003d82 <_vfiprintf_r+0x2a>
 8003d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d7e:	f7ff fec6 	bl	8003b0e <__retarget_lock_acquire_recursive>
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	071b      	lsls	r3, r3, #28
 8003d86:	d501      	bpl.n	8003d8c <_vfiprintf_r+0x34>
 8003d88:	692b      	ldr	r3, [r5, #16]
 8003d8a:	b99b      	cbnz	r3, 8003db4 <_vfiprintf_r+0x5c>
 8003d8c:	4629      	mov	r1, r5
 8003d8e:	4630      	mov	r0, r6
 8003d90:	f7ff fdee 	bl	8003970 <__swsetup_r>
 8003d94:	b170      	cbz	r0, 8003db4 <_vfiprintf_r+0x5c>
 8003d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d98:	07dc      	lsls	r4, r3, #31
 8003d9a:	d504      	bpl.n	8003da6 <_vfiprintf_r+0x4e>
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	b01d      	add	sp, #116	@ 0x74
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da6:	89ab      	ldrh	r3, [r5, #12]
 8003da8:	0598      	lsls	r0, r3, #22
 8003daa:	d4f7      	bmi.n	8003d9c <_vfiprintf_r+0x44>
 8003dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dae:	f7ff feaf 	bl	8003b10 <__retarget_lock_release_recursive>
 8003db2:	e7f3      	b.n	8003d9c <_vfiprintf_r+0x44>
 8003db4:	2300      	movs	r3, #0
 8003db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003db8:	2320      	movs	r3, #32
 8003dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc2:	2330      	movs	r3, #48	@ 0x30
 8003dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003f74 <_vfiprintf_r+0x21c>
 8003dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dcc:	f04f 0901 	mov.w	r9, #1
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	469a      	mov	sl, r3
 8003dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd8:	b10a      	cbz	r2, 8003dde <_vfiprintf_r+0x86>
 8003dda:	2a25      	cmp	r2, #37	@ 0x25
 8003ddc:	d1f9      	bne.n	8003dd2 <_vfiprintf_r+0x7a>
 8003dde:	ebba 0b04 	subs.w	fp, sl, r4
 8003de2:	d00b      	beq.n	8003dfc <_vfiprintf_r+0xa4>
 8003de4:	465b      	mov	r3, fp
 8003de6:	4622      	mov	r2, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff ffa1 	bl	8003d32 <__sfputs_r>
 8003df0:	3001      	adds	r0, #1
 8003df2:	f000 80a7 	beq.w	8003f44 <_vfiprintf_r+0x1ec>
 8003df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003df8:	445a      	add	r2, fp
 8003dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 809f 	beq.w	8003f44 <_vfiprintf_r+0x1ec>
 8003e06:	2300      	movs	r3, #0
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e10:	f10a 0a01 	add.w	sl, sl, #1
 8003e14:	9304      	str	r3, [sp, #16]
 8003e16:	9307      	str	r3, [sp, #28]
 8003e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e1e:	4654      	mov	r4, sl
 8003e20:	2205      	movs	r2, #5
 8003e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e26:	4853      	ldr	r0, [pc, #332]	@ (8003f74 <_vfiprintf_r+0x21c>)
 8003e28:	f7fc f9da 	bl	80001e0 <memchr>
 8003e2c:	9a04      	ldr	r2, [sp, #16]
 8003e2e:	b9d8      	cbnz	r0, 8003e68 <_vfiprintf_r+0x110>
 8003e30:	06d1      	lsls	r1, r2, #27
 8003e32:	bf44      	itt	mi
 8003e34:	2320      	movmi	r3, #32
 8003e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e3a:	0713      	lsls	r3, r2, #28
 8003e3c:	bf44      	itt	mi
 8003e3e:	232b      	movmi	r3, #43	@ 0x2b
 8003e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e44:	f89a 3000 	ldrb.w	r3, [sl]
 8003e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4a:	d015      	beq.n	8003e78 <_vfiprintf_r+0x120>
 8003e4c:	9a07      	ldr	r2, [sp, #28]
 8003e4e:	4654      	mov	r4, sl
 8003e50:	2000      	movs	r0, #0
 8003e52:	f04f 0c0a 	mov.w	ip, #10
 8003e56:	4621      	mov	r1, r4
 8003e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5c:	3b30      	subs	r3, #48	@ 0x30
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d94b      	bls.n	8003efa <_vfiprintf_r+0x1a2>
 8003e62:	b1b0      	cbz	r0, 8003e92 <_vfiprintf_r+0x13a>
 8003e64:	9207      	str	r2, [sp, #28]
 8003e66:	e014      	b.n	8003e92 <_vfiprintf_r+0x13a>
 8003e68:	eba0 0308 	sub.w	r3, r0, r8
 8003e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8003e70:	4313      	orrs	r3, r2
 8003e72:	9304      	str	r3, [sp, #16]
 8003e74:	46a2      	mov	sl, r4
 8003e76:	e7d2      	b.n	8003e1e <_vfiprintf_r+0xc6>
 8003e78:	9b03      	ldr	r3, [sp, #12]
 8003e7a:	1d19      	adds	r1, r3, #4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	9103      	str	r1, [sp, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bfbb      	ittet	lt
 8003e84:	425b      	neglt	r3, r3
 8003e86:	f042 0202 	orrlt.w	r2, r2, #2
 8003e8a:	9307      	strge	r3, [sp, #28]
 8003e8c:	9307      	strlt	r3, [sp, #28]
 8003e8e:	bfb8      	it	lt
 8003e90:	9204      	strlt	r2, [sp, #16]
 8003e92:	7823      	ldrb	r3, [r4, #0]
 8003e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e96:	d10a      	bne.n	8003eae <_vfiprintf_r+0x156>
 8003e98:	7863      	ldrb	r3, [r4, #1]
 8003e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9c:	d132      	bne.n	8003f04 <_vfiprintf_r+0x1ac>
 8003e9e:	9b03      	ldr	r3, [sp, #12]
 8003ea0:	1d1a      	adds	r2, r3, #4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	9203      	str	r2, [sp, #12]
 8003ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003eaa:	3402      	adds	r4, #2
 8003eac:	9305      	str	r3, [sp, #20]
 8003eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003f84 <_vfiprintf_r+0x22c>
 8003eb2:	7821      	ldrb	r1, [r4, #0]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f7fc f992 	bl	80001e0 <memchr>
 8003ebc:	b138      	cbz	r0, 8003ece <_vfiprintf_r+0x176>
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	eba0 000a 	sub.w	r0, r0, sl
 8003ec4:	2240      	movs	r2, #64	@ 0x40
 8003ec6:	4082      	lsls	r2, r0
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	3401      	adds	r4, #1
 8003ecc:	9304      	str	r3, [sp, #16]
 8003ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed2:	4829      	ldr	r0, [pc, #164]	@ (8003f78 <_vfiprintf_r+0x220>)
 8003ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ed8:	2206      	movs	r2, #6
 8003eda:	f7fc f981 	bl	80001e0 <memchr>
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	d03f      	beq.n	8003f62 <_vfiprintf_r+0x20a>
 8003ee2:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <_vfiprintf_r+0x224>)
 8003ee4:	bb1b      	cbnz	r3, 8003f2e <_vfiprintf_r+0x1d6>
 8003ee6:	9b03      	ldr	r3, [sp, #12]
 8003ee8:	3307      	adds	r3, #7
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	3308      	adds	r3, #8
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef4:	443b      	add	r3, r7
 8003ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef8:	e76a      	b.n	8003dd0 <_vfiprintf_r+0x78>
 8003efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003efe:	460c      	mov	r4, r1
 8003f00:	2001      	movs	r0, #1
 8003f02:	e7a8      	b.n	8003e56 <_vfiprintf_r+0xfe>
 8003f04:	2300      	movs	r3, #0
 8003f06:	3401      	adds	r4, #1
 8003f08:	9305      	str	r3, [sp, #20]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f04f 0c0a 	mov.w	ip, #10
 8003f10:	4620      	mov	r0, r4
 8003f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f16:	3a30      	subs	r2, #48	@ 0x30
 8003f18:	2a09      	cmp	r2, #9
 8003f1a:	d903      	bls.n	8003f24 <_vfiprintf_r+0x1cc>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0c6      	beq.n	8003eae <_vfiprintf_r+0x156>
 8003f20:	9105      	str	r1, [sp, #20]
 8003f22:	e7c4      	b.n	8003eae <_vfiprintf_r+0x156>
 8003f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f28:	4604      	mov	r4, r0
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e7f0      	b.n	8003f10 <_vfiprintf_r+0x1b8>
 8003f2e:	ab03      	add	r3, sp, #12
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	462a      	mov	r2, r5
 8003f34:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <_vfiprintf_r+0x228>)
 8003f36:	a904      	add	r1, sp, #16
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f3af 8000 	nop.w
 8003f3e:	4607      	mov	r7, r0
 8003f40:	1c78      	adds	r0, r7, #1
 8003f42:	d1d6      	bne.n	8003ef2 <_vfiprintf_r+0x19a>
 8003f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f46:	07d9      	lsls	r1, r3, #31
 8003f48:	d405      	bmi.n	8003f56 <_vfiprintf_r+0x1fe>
 8003f4a:	89ab      	ldrh	r3, [r5, #12]
 8003f4c:	059a      	lsls	r2, r3, #22
 8003f4e:	d402      	bmi.n	8003f56 <_vfiprintf_r+0x1fe>
 8003f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f52:	f7ff fddd 	bl	8003b10 <__retarget_lock_release_recursive>
 8003f56:	89ab      	ldrh	r3, [r5, #12]
 8003f58:	065b      	lsls	r3, r3, #25
 8003f5a:	f53f af1f 	bmi.w	8003d9c <_vfiprintf_r+0x44>
 8003f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f60:	e71e      	b.n	8003da0 <_vfiprintf_r+0x48>
 8003f62:	ab03      	add	r3, sp, #12
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	462a      	mov	r2, r5
 8003f68:	4b05      	ldr	r3, [pc, #20]	@ (8003f80 <_vfiprintf_r+0x228>)
 8003f6a:	a904      	add	r1, sp, #16
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 f879 	bl	8004064 <_printf_i>
 8003f72:	e7e4      	b.n	8003f3e <_vfiprintf_r+0x1e6>
 8003f74:	0800456c 	.word	0x0800456c
 8003f78:	08004576 	.word	0x08004576
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	08003d33 	.word	0x08003d33
 8003f84:	08004572 	.word	0x08004572

08003f88 <_printf_common>:
 8003f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	4616      	mov	r6, r2
 8003f8e:	4698      	mov	r8, r3
 8003f90:	688a      	ldr	r2, [r1, #8]
 8003f92:	690b      	ldr	r3, [r1, #16]
 8003f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	bfb8      	it	lt
 8003f9c:	4613      	movlt	r3, r2
 8003f9e:	6033      	str	r3, [r6, #0]
 8003fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fa4:	4607      	mov	r7, r0
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	b10a      	cbz	r2, 8003fae <_printf_common+0x26>
 8003faa:	3301      	adds	r3, #1
 8003fac:	6033      	str	r3, [r6, #0]
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	0699      	lsls	r1, r3, #26
 8003fb2:	bf42      	ittt	mi
 8003fb4:	6833      	ldrmi	r3, [r6, #0]
 8003fb6:	3302      	addmi	r3, #2
 8003fb8:	6033      	strmi	r3, [r6, #0]
 8003fba:	6825      	ldr	r5, [r4, #0]
 8003fbc:	f015 0506 	ands.w	r5, r5, #6
 8003fc0:	d106      	bne.n	8003fd0 <_printf_common+0x48>
 8003fc2:	f104 0a19 	add.w	sl, r4, #25
 8003fc6:	68e3      	ldr	r3, [r4, #12]
 8003fc8:	6832      	ldr	r2, [r6, #0]
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ab      	cmp	r3, r5
 8003fce:	dc26      	bgt.n	800401e <_printf_common+0x96>
 8003fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	3b00      	subs	r3, #0
 8003fd8:	bf18      	it	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	0692      	lsls	r2, r2, #26
 8003fde:	d42b      	bmi.n	8004038 <_printf_common+0xb0>
 8003fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	4638      	mov	r0, r7
 8003fe8:	47c8      	blx	r9
 8003fea:	3001      	adds	r0, #1
 8003fec:	d01e      	beq.n	800402c <_printf_common+0xa4>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6922      	ldr	r2, [r4, #16]
 8003ff2:	f003 0306 	and.w	r3, r3, #6
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	bf02      	ittt	eq
 8003ffa:	68e5      	ldreq	r5, [r4, #12]
 8003ffc:	6833      	ldreq	r3, [r6, #0]
 8003ffe:	1aed      	subeq	r5, r5, r3
 8004000:	68a3      	ldr	r3, [r4, #8]
 8004002:	bf0c      	ite	eq
 8004004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004008:	2500      	movne	r5, #0
 800400a:	4293      	cmp	r3, r2
 800400c:	bfc4      	itt	gt
 800400e:	1a9b      	subgt	r3, r3, r2
 8004010:	18ed      	addgt	r5, r5, r3
 8004012:	2600      	movs	r6, #0
 8004014:	341a      	adds	r4, #26
 8004016:	42b5      	cmp	r5, r6
 8004018:	d11a      	bne.n	8004050 <_printf_common+0xc8>
 800401a:	2000      	movs	r0, #0
 800401c:	e008      	b.n	8004030 <_printf_common+0xa8>
 800401e:	2301      	movs	r3, #1
 8004020:	4652      	mov	r2, sl
 8004022:	4641      	mov	r1, r8
 8004024:	4638      	mov	r0, r7
 8004026:	47c8      	blx	r9
 8004028:	3001      	adds	r0, #1
 800402a:	d103      	bne.n	8004034 <_printf_common+0xac>
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004034:	3501      	adds	r5, #1
 8004036:	e7c6      	b.n	8003fc6 <_printf_common+0x3e>
 8004038:	18e1      	adds	r1, r4, r3
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	2030      	movs	r0, #48	@ 0x30
 800403e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004042:	4422      	add	r2, r4
 8004044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800404c:	3302      	adds	r3, #2
 800404e:	e7c7      	b.n	8003fe0 <_printf_common+0x58>
 8004050:	2301      	movs	r3, #1
 8004052:	4622      	mov	r2, r4
 8004054:	4641      	mov	r1, r8
 8004056:	4638      	mov	r0, r7
 8004058:	47c8      	blx	r9
 800405a:	3001      	adds	r0, #1
 800405c:	d0e6      	beq.n	800402c <_printf_common+0xa4>
 800405e:	3601      	adds	r6, #1
 8004060:	e7d9      	b.n	8004016 <_printf_common+0x8e>
	...

08004064 <_printf_i>:
 8004064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	7e0f      	ldrb	r7, [r1, #24]
 800406a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800406c:	2f78      	cmp	r7, #120	@ 0x78
 800406e:	4691      	mov	r9, r2
 8004070:	4680      	mov	r8, r0
 8004072:	460c      	mov	r4, r1
 8004074:	469a      	mov	sl, r3
 8004076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800407a:	d807      	bhi.n	800408c <_printf_i+0x28>
 800407c:	2f62      	cmp	r7, #98	@ 0x62
 800407e:	d80a      	bhi.n	8004096 <_printf_i+0x32>
 8004080:	2f00      	cmp	r7, #0
 8004082:	f000 80d2 	beq.w	800422a <_printf_i+0x1c6>
 8004086:	2f58      	cmp	r7, #88	@ 0x58
 8004088:	f000 80b9 	beq.w	80041fe <_printf_i+0x19a>
 800408c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004094:	e03a      	b.n	800410c <_printf_i+0xa8>
 8004096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800409a:	2b15      	cmp	r3, #21
 800409c:	d8f6      	bhi.n	800408c <_printf_i+0x28>
 800409e:	a101      	add	r1, pc, #4	@ (adr r1, 80040a4 <_printf_i+0x40>)
 80040a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040a4:	080040fd 	.word	0x080040fd
 80040a8:	08004111 	.word	0x08004111
 80040ac:	0800408d 	.word	0x0800408d
 80040b0:	0800408d 	.word	0x0800408d
 80040b4:	0800408d 	.word	0x0800408d
 80040b8:	0800408d 	.word	0x0800408d
 80040bc:	08004111 	.word	0x08004111
 80040c0:	0800408d 	.word	0x0800408d
 80040c4:	0800408d 	.word	0x0800408d
 80040c8:	0800408d 	.word	0x0800408d
 80040cc:	0800408d 	.word	0x0800408d
 80040d0:	08004211 	.word	0x08004211
 80040d4:	0800413b 	.word	0x0800413b
 80040d8:	080041cb 	.word	0x080041cb
 80040dc:	0800408d 	.word	0x0800408d
 80040e0:	0800408d 	.word	0x0800408d
 80040e4:	08004233 	.word	0x08004233
 80040e8:	0800408d 	.word	0x0800408d
 80040ec:	0800413b 	.word	0x0800413b
 80040f0:	0800408d 	.word	0x0800408d
 80040f4:	0800408d 	.word	0x0800408d
 80040f8:	080041d3 	.word	0x080041d3
 80040fc:	6833      	ldr	r3, [r6, #0]
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6032      	str	r2, [r6, #0]
 8004104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800410c:	2301      	movs	r3, #1
 800410e:	e09d      	b.n	800424c <_printf_i+0x1e8>
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	1d19      	adds	r1, r3, #4
 8004116:	6031      	str	r1, [r6, #0]
 8004118:	0606      	lsls	r6, r0, #24
 800411a:	d501      	bpl.n	8004120 <_printf_i+0xbc>
 800411c:	681d      	ldr	r5, [r3, #0]
 800411e:	e003      	b.n	8004128 <_printf_i+0xc4>
 8004120:	0645      	lsls	r5, r0, #25
 8004122:	d5fb      	bpl.n	800411c <_printf_i+0xb8>
 8004124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004128:	2d00      	cmp	r5, #0
 800412a:	da03      	bge.n	8004134 <_printf_i+0xd0>
 800412c:	232d      	movs	r3, #45	@ 0x2d
 800412e:	426d      	negs	r5, r5
 8004130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004134:	4859      	ldr	r0, [pc, #356]	@ (800429c <_printf_i+0x238>)
 8004136:	230a      	movs	r3, #10
 8004138:	e011      	b.n	800415e <_printf_i+0xfa>
 800413a:	6821      	ldr	r1, [r4, #0]
 800413c:	6833      	ldr	r3, [r6, #0]
 800413e:	0608      	lsls	r0, r1, #24
 8004140:	f853 5b04 	ldr.w	r5, [r3], #4
 8004144:	d402      	bmi.n	800414c <_printf_i+0xe8>
 8004146:	0649      	lsls	r1, r1, #25
 8004148:	bf48      	it	mi
 800414a:	b2ad      	uxthmi	r5, r5
 800414c:	2f6f      	cmp	r7, #111	@ 0x6f
 800414e:	4853      	ldr	r0, [pc, #332]	@ (800429c <_printf_i+0x238>)
 8004150:	6033      	str	r3, [r6, #0]
 8004152:	bf14      	ite	ne
 8004154:	230a      	movne	r3, #10
 8004156:	2308      	moveq	r3, #8
 8004158:	2100      	movs	r1, #0
 800415a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800415e:	6866      	ldr	r6, [r4, #4]
 8004160:	60a6      	str	r6, [r4, #8]
 8004162:	2e00      	cmp	r6, #0
 8004164:	bfa2      	ittt	ge
 8004166:	6821      	ldrge	r1, [r4, #0]
 8004168:	f021 0104 	bicge.w	r1, r1, #4
 800416c:	6021      	strge	r1, [r4, #0]
 800416e:	b90d      	cbnz	r5, 8004174 <_printf_i+0x110>
 8004170:	2e00      	cmp	r6, #0
 8004172:	d04b      	beq.n	800420c <_printf_i+0x1a8>
 8004174:	4616      	mov	r6, r2
 8004176:	fbb5 f1f3 	udiv	r1, r5, r3
 800417a:	fb03 5711 	mls	r7, r3, r1, r5
 800417e:	5dc7      	ldrb	r7, [r0, r7]
 8004180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004184:	462f      	mov	r7, r5
 8004186:	42bb      	cmp	r3, r7
 8004188:	460d      	mov	r5, r1
 800418a:	d9f4      	bls.n	8004176 <_printf_i+0x112>
 800418c:	2b08      	cmp	r3, #8
 800418e:	d10b      	bne.n	80041a8 <_printf_i+0x144>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	07df      	lsls	r7, r3, #31
 8004194:	d508      	bpl.n	80041a8 <_printf_i+0x144>
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	6861      	ldr	r1, [r4, #4]
 800419a:	4299      	cmp	r1, r3
 800419c:	bfde      	ittt	le
 800419e:	2330      	movle	r3, #48	@ 0x30
 80041a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041a8:	1b92      	subs	r2, r2, r6
 80041aa:	6122      	str	r2, [r4, #16]
 80041ac:	f8cd a000 	str.w	sl, [sp]
 80041b0:	464b      	mov	r3, r9
 80041b2:	aa03      	add	r2, sp, #12
 80041b4:	4621      	mov	r1, r4
 80041b6:	4640      	mov	r0, r8
 80041b8:	f7ff fee6 	bl	8003f88 <_printf_common>
 80041bc:	3001      	adds	r0, #1
 80041be:	d14a      	bne.n	8004256 <_printf_i+0x1f2>
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295
 80041c4:	b004      	add	sp, #16
 80041c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	f043 0320 	orr.w	r3, r3, #32
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	4833      	ldr	r0, [pc, #204]	@ (80042a0 <_printf_i+0x23c>)
 80041d4:	2778      	movs	r7, #120	@ 0x78
 80041d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	6831      	ldr	r1, [r6, #0]
 80041de:	061f      	lsls	r7, r3, #24
 80041e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80041e4:	d402      	bmi.n	80041ec <_printf_i+0x188>
 80041e6:	065f      	lsls	r7, r3, #25
 80041e8:	bf48      	it	mi
 80041ea:	b2ad      	uxthmi	r5, r5
 80041ec:	6031      	str	r1, [r6, #0]
 80041ee:	07d9      	lsls	r1, r3, #31
 80041f0:	bf44      	itt	mi
 80041f2:	f043 0320 	orrmi.w	r3, r3, #32
 80041f6:	6023      	strmi	r3, [r4, #0]
 80041f8:	b11d      	cbz	r5, 8004202 <_printf_i+0x19e>
 80041fa:	2310      	movs	r3, #16
 80041fc:	e7ac      	b.n	8004158 <_printf_i+0xf4>
 80041fe:	4827      	ldr	r0, [pc, #156]	@ (800429c <_printf_i+0x238>)
 8004200:	e7e9      	b.n	80041d6 <_printf_i+0x172>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	f023 0320 	bic.w	r3, r3, #32
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	e7f6      	b.n	80041fa <_printf_i+0x196>
 800420c:	4616      	mov	r6, r2
 800420e:	e7bd      	b.n	800418c <_printf_i+0x128>
 8004210:	6833      	ldr	r3, [r6, #0]
 8004212:	6825      	ldr	r5, [r4, #0]
 8004214:	6961      	ldr	r1, [r4, #20]
 8004216:	1d18      	adds	r0, r3, #4
 8004218:	6030      	str	r0, [r6, #0]
 800421a:	062e      	lsls	r6, r5, #24
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	d501      	bpl.n	8004224 <_printf_i+0x1c0>
 8004220:	6019      	str	r1, [r3, #0]
 8004222:	e002      	b.n	800422a <_printf_i+0x1c6>
 8004224:	0668      	lsls	r0, r5, #25
 8004226:	d5fb      	bpl.n	8004220 <_printf_i+0x1bc>
 8004228:	8019      	strh	r1, [r3, #0]
 800422a:	2300      	movs	r3, #0
 800422c:	6123      	str	r3, [r4, #16]
 800422e:	4616      	mov	r6, r2
 8004230:	e7bc      	b.n	80041ac <_printf_i+0x148>
 8004232:	6833      	ldr	r3, [r6, #0]
 8004234:	1d1a      	adds	r2, r3, #4
 8004236:	6032      	str	r2, [r6, #0]
 8004238:	681e      	ldr	r6, [r3, #0]
 800423a:	6862      	ldr	r2, [r4, #4]
 800423c:	2100      	movs	r1, #0
 800423e:	4630      	mov	r0, r6
 8004240:	f7fb ffce 	bl	80001e0 <memchr>
 8004244:	b108      	cbz	r0, 800424a <_printf_i+0x1e6>
 8004246:	1b80      	subs	r0, r0, r6
 8004248:	6060      	str	r0, [r4, #4]
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	6123      	str	r3, [r4, #16]
 800424e:	2300      	movs	r3, #0
 8004250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004254:	e7aa      	b.n	80041ac <_printf_i+0x148>
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	4632      	mov	r2, r6
 800425a:	4649      	mov	r1, r9
 800425c:	4640      	mov	r0, r8
 800425e:	47d0      	blx	sl
 8004260:	3001      	adds	r0, #1
 8004262:	d0ad      	beq.n	80041c0 <_printf_i+0x15c>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	079b      	lsls	r3, r3, #30
 8004268:	d413      	bmi.n	8004292 <_printf_i+0x22e>
 800426a:	68e0      	ldr	r0, [r4, #12]
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	4298      	cmp	r0, r3
 8004270:	bfb8      	it	lt
 8004272:	4618      	movlt	r0, r3
 8004274:	e7a6      	b.n	80041c4 <_printf_i+0x160>
 8004276:	2301      	movs	r3, #1
 8004278:	4632      	mov	r2, r6
 800427a:	4649      	mov	r1, r9
 800427c:	4640      	mov	r0, r8
 800427e:	47d0      	blx	sl
 8004280:	3001      	adds	r0, #1
 8004282:	d09d      	beq.n	80041c0 <_printf_i+0x15c>
 8004284:	3501      	adds	r5, #1
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	9903      	ldr	r1, [sp, #12]
 800428a:	1a5b      	subs	r3, r3, r1
 800428c:	42ab      	cmp	r3, r5
 800428e:	dcf2      	bgt.n	8004276 <_printf_i+0x212>
 8004290:	e7eb      	b.n	800426a <_printf_i+0x206>
 8004292:	2500      	movs	r5, #0
 8004294:	f104 0619 	add.w	r6, r4, #25
 8004298:	e7f5      	b.n	8004286 <_printf_i+0x222>
 800429a:	bf00      	nop
 800429c:	0800457d 	.word	0x0800457d
 80042a0:	0800458e 	.word	0x0800458e

080042a4 <__sflush_r>:
 80042a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	0716      	lsls	r6, r2, #28
 80042ae:	4605      	mov	r5, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	d454      	bmi.n	800435e <__sflush_r+0xba>
 80042b4:	684b      	ldr	r3, [r1, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	dc02      	bgt.n	80042c0 <__sflush_r+0x1c>
 80042ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	dd48      	ble.n	8004352 <__sflush_r+0xae>
 80042c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	d045      	beq.n	8004352 <__sflush_r+0xae>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042cc:	682f      	ldr	r7, [r5, #0]
 80042ce:	6a21      	ldr	r1, [r4, #32]
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	d030      	beq.n	8004336 <__sflush_r+0x92>
 80042d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	0759      	lsls	r1, r3, #29
 80042da:	d505      	bpl.n	80042e8 <__sflush_r+0x44>
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80042e2:	b10b      	cbz	r3, 80042e8 <__sflush_r+0x44>
 80042e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80042e6:	1ad2      	subs	r2, r2, r3
 80042e8:	2300      	movs	r3, #0
 80042ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ec:	6a21      	ldr	r1, [r4, #32]
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b0      	blx	r6
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	d106      	bne.n	8004306 <__sflush_r+0x62>
 80042f8:	6829      	ldr	r1, [r5, #0]
 80042fa:	291d      	cmp	r1, #29
 80042fc:	d82b      	bhi.n	8004356 <__sflush_r+0xb2>
 80042fe:	4a2a      	ldr	r2, [pc, #168]	@ (80043a8 <__sflush_r+0x104>)
 8004300:	410a      	asrs	r2, r1
 8004302:	07d6      	lsls	r6, r2, #31
 8004304:	d427      	bmi.n	8004356 <__sflush_r+0xb2>
 8004306:	2200      	movs	r2, #0
 8004308:	6062      	str	r2, [r4, #4]
 800430a:	04d9      	lsls	r1, r3, #19
 800430c:	6922      	ldr	r2, [r4, #16]
 800430e:	6022      	str	r2, [r4, #0]
 8004310:	d504      	bpl.n	800431c <__sflush_r+0x78>
 8004312:	1c42      	adds	r2, r0, #1
 8004314:	d101      	bne.n	800431a <__sflush_r+0x76>
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	b903      	cbnz	r3, 800431c <__sflush_r+0x78>
 800431a:	6560      	str	r0, [r4, #84]	@ 0x54
 800431c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800431e:	602f      	str	r7, [r5, #0]
 8004320:	b1b9      	cbz	r1, 8004352 <__sflush_r+0xae>
 8004322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004326:	4299      	cmp	r1, r3
 8004328:	d002      	beq.n	8004330 <__sflush_r+0x8c>
 800432a:	4628      	mov	r0, r5
 800432c:	f7ff fbf2 	bl	8003b14 <_free_r>
 8004330:	2300      	movs	r3, #0
 8004332:	6363      	str	r3, [r4, #52]	@ 0x34
 8004334:	e00d      	b.n	8004352 <__sflush_r+0xae>
 8004336:	2301      	movs	r3, #1
 8004338:	4628      	mov	r0, r5
 800433a:	47b0      	blx	r6
 800433c:	4602      	mov	r2, r0
 800433e:	1c50      	adds	r0, r2, #1
 8004340:	d1c9      	bne.n	80042d6 <__sflush_r+0x32>
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0c6      	beq.n	80042d6 <__sflush_r+0x32>
 8004348:	2b1d      	cmp	r3, #29
 800434a:	d001      	beq.n	8004350 <__sflush_r+0xac>
 800434c:	2b16      	cmp	r3, #22
 800434e:	d11e      	bne.n	800438e <__sflush_r+0xea>
 8004350:	602f      	str	r7, [r5, #0]
 8004352:	2000      	movs	r0, #0
 8004354:	e022      	b.n	800439c <__sflush_r+0xf8>
 8004356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800435a:	b21b      	sxth	r3, r3
 800435c:	e01b      	b.n	8004396 <__sflush_r+0xf2>
 800435e:	690f      	ldr	r7, [r1, #16]
 8004360:	2f00      	cmp	r7, #0
 8004362:	d0f6      	beq.n	8004352 <__sflush_r+0xae>
 8004364:	0793      	lsls	r3, r2, #30
 8004366:	680e      	ldr	r6, [r1, #0]
 8004368:	bf08      	it	eq
 800436a:	694b      	ldreq	r3, [r1, #20]
 800436c:	600f      	str	r7, [r1, #0]
 800436e:	bf18      	it	ne
 8004370:	2300      	movne	r3, #0
 8004372:	eba6 0807 	sub.w	r8, r6, r7
 8004376:	608b      	str	r3, [r1, #8]
 8004378:	f1b8 0f00 	cmp.w	r8, #0
 800437c:	dde9      	ble.n	8004352 <__sflush_r+0xae>
 800437e:	6a21      	ldr	r1, [r4, #32]
 8004380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004382:	4643      	mov	r3, r8
 8004384:	463a      	mov	r2, r7
 8004386:	4628      	mov	r0, r5
 8004388:	47b0      	blx	r6
 800438a:	2800      	cmp	r0, #0
 800438c:	dc08      	bgt.n	80043a0 <__sflush_r+0xfc>
 800438e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a0:	4407      	add	r7, r0
 80043a2:	eba8 0800 	sub.w	r8, r8, r0
 80043a6:	e7e7      	b.n	8004378 <__sflush_r+0xd4>
 80043a8:	dfbffffe 	.word	0xdfbffffe

080043ac <_fflush_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	b913      	cbnz	r3, 80043bc <_fflush_r+0x10>
 80043b6:	2500      	movs	r5, #0
 80043b8:	4628      	mov	r0, r5
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	b118      	cbz	r0, 80043c6 <_fflush_r+0x1a>
 80043be:	6a03      	ldr	r3, [r0, #32]
 80043c0:	b90b      	cbnz	r3, 80043c6 <_fflush_r+0x1a>
 80043c2:	f7ff f9ad 	bl	8003720 <__sinit>
 80043c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f3      	beq.n	80043b6 <_fflush_r+0xa>
 80043ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043d0:	07d0      	lsls	r0, r2, #31
 80043d2:	d404      	bmi.n	80043de <_fflush_r+0x32>
 80043d4:	0599      	lsls	r1, r3, #22
 80043d6:	d402      	bmi.n	80043de <_fflush_r+0x32>
 80043d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043da:	f7ff fb98 	bl	8003b0e <__retarget_lock_acquire_recursive>
 80043de:	4628      	mov	r0, r5
 80043e0:	4621      	mov	r1, r4
 80043e2:	f7ff ff5f 	bl	80042a4 <__sflush_r>
 80043e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043e8:	07da      	lsls	r2, r3, #31
 80043ea:	4605      	mov	r5, r0
 80043ec:	d4e4      	bmi.n	80043b8 <_fflush_r+0xc>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	059b      	lsls	r3, r3, #22
 80043f2:	d4e1      	bmi.n	80043b8 <_fflush_r+0xc>
 80043f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043f6:	f7ff fb8b 	bl	8003b10 <__retarget_lock_release_recursive>
 80043fa:	e7dd      	b.n	80043b8 <_fflush_r+0xc>

080043fc <__swhatbuf_r>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	460c      	mov	r4, r1
 8004400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004404:	2900      	cmp	r1, #0
 8004406:	b096      	sub	sp, #88	@ 0x58
 8004408:	4615      	mov	r5, r2
 800440a:	461e      	mov	r6, r3
 800440c:	da0d      	bge.n	800442a <__swhatbuf_r+0x2e>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004414:	f04f 0100 	mov.w	r1, #0
 8004418:	bf14      	ite	ne
 800441a:	2340      	movne	r3, #64	@ 0x40
 800441c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004420:	2000      	movs	r0, #0
 8004422:	6031      	str	r1, [r6, #0]
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	b016      	add	sp, #88	@ 0x58
 8004428:	bd70      	pop	{r4, r5, r6, pc}
 800442a:	466a      	mov	r2, sp
 800442c:	f000 f848 	bl	80044c0 <_fstat_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	dbec      	blt.n	800440e <__swhatbuf_r+0x12>
 8004434:	9901      	ldr	r1, [sp, #4]
 8004436:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800443a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800443e:	4259      	negs	r1, r3
 8004440:	4159      	adcs	r1, r3
 8004442:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004446:	e7eb      	b.n	8004420 <__swhatbuf_r+0x24>

08004448 <__smakebuf_r>:
 8004448:	898b      	ldrh	r3, [r1, #12]
 800444a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444c:	079d      	lsls	r5, r3, #30
 800444e:	4606      	mov	r6, r0
 8004450:	460c      	mov	r4, r1
 8004452:	d507      	bpl.n	8004464 <__smakebuf_r+0x1c>
 8004454:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	6123      	str	r3, [r4, #16]
 800445c:	2301      	movs	r3, #1
 800445e:	6163      	str	r3, [r4, #20]
 8004460:	b003      	add	sp, #12
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	ab01      	add	r3, sp, #4
 8004466:	466a      	mov	r2, sp
 8004468:	f7ff ffc8 	bl	80043fc <__swhatbuf_r>
 800446c:	9f00      	ldr	r7, [sp, #0]
 800446e:	4605      	mov	r5, r0
 8004470:	4639      	mov	r1, r7
 8004472:	4630      	mov	r0, r6
 8004474:	f7ff fbba 	bl	8003bec <_malloc_r>
 8004478:	b948      	cbnz	r0, 800448e <__smakebuf_r+0x46>
 800447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800447e:	059a      	lsls	r2, r3, #22
 8004480:	d4ee      	bmi.n	8004460 <__smakebuf_r+0x18>
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	f043 0302 	orr.w	r3, r3, #2
 800448a:	81a3      	strh	r3, [r4, #12]
 800448c:	e7e2      	b.n	8004454 <__smakebuf_r+0xc>
 800448e:	89a3      	ldrh	r3, [r4, #12]
 8004490:	6020      	str	r0, [r4, #0]
 8004492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	9b01      	ldr	r3, [sp, #4]
 800449a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800449e:	b15b      	cbz	r3, 80044b8 <__smakebuf_r+0x70>
 80044a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f81d 	bl	80044e4 <_isatty_r>
 80044aa:	b128      	cbz	r0, 80044b8 <__smakebuf_r+0x70>
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	81a3      	strh	r3, [r4, #12]
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	431d      	orrs	r5, r3
 80044bc:	81a5      	strh	r5, [r4, #12]
 80044be:	e7cf      	b.n	8004460 <__smakebuf_r+0x18>

080044c0 <_fstat_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d07      	ldr	r5, [pc, #28]	@ (80044e0 <_fstat_r+0x20>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	f7fc fc7d 	bl	8000dcc <_fstat>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	d102      	bne.n	80044dc <_fstat_r+0x1c>
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	b103      	cbz	r3, 80044dc <_fstat_r+0x1c>
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	bd38      	pop	{r3, r4, r5, pc}
 80044de:	bf00      	nop
 80044e0:	200003b4 	.word	0x200003b4

080044e4 <_isatty_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4d06      	ldr	r5, [pc, #24]	@ (8004500 <_isatty_r+0x1c>)
 80044e8:	2300      	movs	r3, #0
 80044ea:	4604      	mov	r4, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	f7fc fc7c 	bl	8000dec <_isatty>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_isatty_r+0x1a>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_isatty_r+0x1a>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	200003b4 	.word	0x200003b4

08004504 <_sbrk_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	@ (8004520 <_sbrk_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fc84 	bl	8000e1c <_sbrk>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_sbrk_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_sbrk_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	200003b4 	.word	0x200003b4

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
