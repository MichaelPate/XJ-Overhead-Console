
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  08009450  08009450  0000a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009718  08009718  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009718  08009718  0000a718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009720  08009720  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009720  08009720  0000a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009724  08009724  0000a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009728  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  08009790  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08009790  0000b544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018875  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cbe  00000000  00000000  0002390d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  000275d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011c5  00000000  00000000  00028ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b9c0  00000000  00000000  00029e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ece3  00000000  00000000  0004582d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a66e2  00000000  00000000  00064510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010abf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006958  00000000  00000000  0010ac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00111590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009438 	.word	0x08009438

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08009438 	.word	0x08009438

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f001 fcd3 	bl	8001f7c <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 ffe6 	bl	80015ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f001 fd07 	bl	8002004 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 ffd6 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f002 fbfd 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f002 fbf1 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a13      	ldr	r2, [pc, #76]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_DMA_Init+0x5c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200b      	movs	r0, #11
 80006fc:	f001 ff7b 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000700:	200b      	movs	r0, #11
 8000702:	f001 ff94 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f001 ff73 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f001 ff8c 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f001 ff6b 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000720:	2011      	movs	r0, #17
 8000722:	f001 ff84 	bl	800262e <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b52      	ldr	r3, [pc, #328]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a51      	ldr	r2, [pc, #324]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b4f      	ldr	r3, [pc, #316]	@ (8000898 <MX_GPIO_Init+0x164>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b4b      	ldr	r3, [pc, #300]	@ (8000898 <MX_GPIO_Init+0x164>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a4a      	ldr	r2, [pc, #296]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b48      	ldr	r3, [pc, #288]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b44      	ldr	r3, [pc, #272]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a43      	ldr	r2, [pc, #268]	@ (8000898 <MX_GPIO_Init+0x164>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b41      	ldr	r3, [pc, #260]	@ (8000898 <MX_GPIO_Init+0x164>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a3c      	ldr	r2, [pc, #240]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a35      	ldr	r2, [pc, #212]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <MX_GPIO_Init+0x164>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f641 0122 	movw	r1, #6178	@ 0x1822
 80007dc:	482f      	ldr	r0, [pc, #188]	@ (800089c <MX_GPIO_Init+0x168>)
 80007de:	f002 fce1 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2110      	movs	r1, #16
 80007e6:	482e      	ldr	r0, [pc, #184]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 80007e8:	f002 fcdc 	bl	80031a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4828      	ldr	r0, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0x170>)
 8000804:	f002 fb4a 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TIM1_Output_Pin|LD2_Pin|LED2_Pin|LED1_Pin;
 8000808:	f641 0322 	movw	r3, #6178	@ 0x1822
 800080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	481e      	ldr	r0, [pc, #120]	@ (800089c <MX_GPIO_Init+0x168>)
 8000822:	f002 fb3b 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4818      	ldr	r0, [pc, #96]	@ (800089c <MX_GPIO_Init+0x168>)
 800083c:	f002 fb2e 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000840:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4813      	ldr	r0, [pc, #76]	@ (80008a4 <MX_GPIO_Init+0x170>)
 8000856:	f002 fb21 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x174>)
 800086e:	f002 fb15 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000872:	2310      	movs	r3, #16
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_GPIO_Init+0x16c>)
 800088a:	f002 fb07 	bl	8002e9c <HAL_GPIO_Init>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	@ 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00

080008ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008b2:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <MX_I2C1_Init+0x54>)
 80008b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008b8:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_I2C1_Init+0x58>)
 80008ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_I2C1_Init+0x50>)
 80008ea:	f002 fc75 	bl	80031d8 <HAL_I2C_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f4:	f000 fe5a 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	40005400 	.word	0x40005400
 8000904:	000186a0 	.word	0x000186a0

08000908 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a50      	ldr	r2, [pc, #320]	@ (8000a68 <HAL_I2C_MspInit+0x160>)
 8000926:	4293      	cmp	r3, r2
 8000928:	f040 8099 	bne.w	8000a5e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a4d      	ldr	r2, [pc, #308]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
 800093c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000948:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095a:	2304      	movs	r3, #4
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4842      	ldr	r0, [pc, #264]	@ (8000a70 <HAL_I2C_MspInit+0x168>)
 8000966:	f002 fa99 	bl	8002e9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a3e      	ldr	r2, [pc, #248]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 8000974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a6c <HAL_I2C_MspInit+0x164>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000986:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 8000988:	4a3b      	ldr	r2, [pc, #236]	@ (8000a78 <HAL_I2C_MspInit+0x170>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800098c:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 800098e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000992:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000994:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 8000996:	2240      	movs	r2, #64	@ 0x40
 8000998:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a8:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009c6:	482b      	ldr	r0, [pc, #172]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009c8:	f001 fe4c 	bl	8002664 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80009d2:	f000 fdeb 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a26      	ldr	r2, [pc, #152]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009da:	635a      	str	r2, [r3, #52]	@ 0x34
 80009dc:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <HAL_I2C_MspInit+0x16c>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009e4:	4a26      	ldr	r2, [pc, #152]	@ (8000a80 <HAL_I2C_MspInit+0x178>)
 80009e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 80009fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a02:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a22:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a24:	f001 fe1e 	bl	8002664 <HAL_DMA_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000a2e:	f000 fdbd 	bl	80015ac <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a36:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a38:	4a10      	ldr	r2, [pc, #64]	@ (8000a7c <HAL_I2C_MspInit+0x174>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	201f      	movs	r0, #31
 8000a44:	f001 fdd7 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a48:	201f      	movs	r0, #31
 8000a4a:	f001 fdf0 	bl	800262e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2020      	movs	r0, #32
 8000a54:	f001 fdcf 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a58:	2020      	movs	r0, #32
 8000a5a:	f001 fde8 	bl	800262e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	20000120 	.word	0x20000120
 8000a78:	400260a0 	.word	0x400260a0
 8000a7c:	20000180 	.word	0x20000180
 8000a80:	40026010 	.word	0x40026010

08000a84 <LCD_Init>:
 * @param  	rows    Number of rows of display
 * @param  	columns Number of columns of display
 * @return         	True if success, false if HAL error
 */
bool LCD_Init(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t rows, uint8_t cols)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	70fb      	strb	r3, [r7, #3]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70bb      	strb	r3, [r7, #2]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	707b      	strb	r3, [r7, #1]
	uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]

	lcd1.hi2c = hi2c;
 8000aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8000c10 <LCD_Init+0x18c>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
	lcd1.address = address << 1;	// typical address is 0x27
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b58      	ldr	r3, [pc, #352]	@ (8000c10 <LCD_Init+0x18c>)
 8000ab0:	711a      	strb	r2, [r3, #4]
	lcd1.rows = rows;
 8000ab2:	4a57      	ldr	r2, [pc, #348]	@ (8000c10 <LCD_Init+0x18c>)
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	7153      	strb	r3, [r2, #5]
	lcd1.cols = cols;
 8000ab8:	4a55      	ldr	r2, [pc, #340]	@ (8000c10 <LCD_Init+0x18c>)
 8000aba:	787b      	ldrb	r3, [r7, #1]
 8000abc:	7193      	strb	r3, [r2, #6]
	lcd1.backlight = LCD_BIT_BACKLIGHT_ON;
 8000abe:	4b54      	ldr	r3, [pc, #336]	@ (8000c10 <LCD_Init+0x18c>)
 8000ac0:	2208      	movs	r2, #8
 8000ac2:	71da      	strb	r2, [r3, #7]


    lcd1_CommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000ac4:	4b53      	ldr	r3, [pc, #332]	@ (8000c14 <LCD_Init+0x190>)
 8000ac6:	2234      	movs	r2, #52	@ 0x34
 8000ac8:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];
 8000aca:	4b52      	ldr	r3, [pc, #328]	@ (8000c14 <LCD_Init+0x190>)
 8000acc:	781a      	ldrb	r2, [r3, #0]
 8000ace:	4b51      	ldr	r3, [pc, #324]	@ (8000c14 <LCD_Init+0x190>)
 8000ad0:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = (0x03 << 4);
 8000ad2:	4b50      	ldr	r3, [pc, #320]	@ (8000c14 <LCD_Init+0x190>)
 8000ad4:	2230      	movs	r2, #48	@ 0x30
 8000ad6:	709a      	strb	r2, [r3, #2]

    // The first 3 steps of initialization are the same
    for (uint8_t i = 0; i < 3; i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e033      	b.n	8000b46 <LCD_Init+0xc2>
    {
    	//while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);

        if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 3) != HAL_OK)
 8000ade:	4b4c      	ldr	r3, [pc, #304]	@ (8000c10 <LCD_Init+0x18c>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8000c10 <LCD_Init+0x18c>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4a4a      	ldr	r2, [pc, #296]	@ (8000c14 <LCD_Init+0x190>)
 8000aec:	f002 fcce 	bl	800348c <HAL_I2C_Master_Transmit_DMA>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <LCD_Init+0x76>
        {
            return false;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e085      	b.n	8000c06 <LCD_Init+0x182>
        }

        // Wait for the LCD to ack
        while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000afa:	bf00      	nop
 8000afc:	4b44      	ldr	r3, [pc, #272]	@ (8000c10 <LCD_Init+0x18c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f977 	bl	8003df4 <HAL_I2C_GetState>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b20      	cmp	r3, #32
 8000b0a:	d1f7      	bne.n	8000afc <LCD_Init+0x78>

        if (i == 2)
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d10a      	bne.n	8000b28 <LCD_Init+0xa4>
        {
        	// The final cycle requires a 100us delay from the datasheet
        	// these steps come from https://controllerstech.com/create-1-microsecond-delay-stm32/
        	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b12:	4b41      	ldr	r3, [pc, #260]	@ (8000c18 <LCD_Init+0x194>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
        	while (__HAL_TIM_GET_COUNTER(&htim1) < 100);
 8000b1a:	bf00      	nop
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c18 <LCD_Init+0x194>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	2b63      	cmp	r3, #99	@ 0x63
 8000b24:	d9fa      	bls.n	8000b1c <LCD_Init+0x98>
 8000b26:	e00b      	b.n	8000b40 <LCD_Init+0xbc>

        }
        else
        {
        	// The first two cycles require a 4100us delay from the datasheet
        	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b28:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <LCD_Init+0x194>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24
        	while (__HAL_TIM_GET_COUNTER(&htim1) < 4100);
 8000b30:	bf00      	nop
 8000b32:	4b39      	ldr	r3, [pc, #228]	@ (8000c18 <LCD_Init+0x194>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d9f8      	bls.n	8000b32 <LCD_Init+0xae>
    for (uint8_t i = 0; i < 3; i++)
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	3301      	adds	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d9c8      	bls.n	8000ade <LCD_Init+0x5a>
        }
    }

    // Now we need to set 4 bit operation
    lcd1_CommandBuffer[0] = LCD_BIT_BACKLIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000b4c:	4b31      	ldr	r3, [pc, #196]	@ (8000c14 <LCD_Init+0x190>)
 8000b4e:	222c      	movs	r2, #44	@ 0x2c
 8000b50:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];
 8000b52:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <LCD_Init+0x190>)
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	4b2f      	ldr	r3, [pc, #188]	@ (8000c14 <LCD_Init+0x190>)
 8000b58:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = LCD_BIT_BACKLIGHT_ON | (LCD_MODE_4BITS << 4);
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <LCD_Init+0x190>)
 8000b5c:	2228      	movs	r2, #40	@ 0x28
 8000b5e:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 3) != HAL_OK)
 8000b60:	4b2b      	ldr	r3, [pc, #172]	@ (8000c10 <LCD_Init+0x18c>)
 8000b62:	6818      	ldr	r0, [r3, #0]
 8000b64:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <LCD_Init+0x18c>)
 8000b66:	791b      	ldrb	r3, [r3, #4]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	4a29      	ldr	r2, [pc, #164]	@ (8000c14 <LCD_Init+0x190>)
 8000b6e:	f002 fc8d 	bl	800348c <HAL_I2C_Master_Transmit_DMA>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <LCD_Init+0xf8>
    {
        return false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e044      	b.n	8000c06 <LCD_Init+0x182>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000b7c:	bf00      	nop
 8000b7e:	4b24      	ldr	r3, [pc, #144]	@ (8000c10 <LCD_Init+0x18c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f003 f936 	bl	8003df4 <HAL_I2C_GetState>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b20      	cmp	r3, #32
 8000b8c:	d1f7      	bne.n	8000b7e <LCD_Init+0xfa>

    // Set display parameters
    lcdData |= LCD_MODE_4BITS;
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	73bb      	strb	r3, [r7, #14]

    if (lcd1.rows == 1)
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <LCD_Init+0x18c>)
 8000b9a:	795b      	ldrb	r3, [r3, #5]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d102      	bne.n	8000ba6 <LCD_Init+0x122>
    {
    	lcdData |= LCD_BIT_1LINE;
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	73bb      	strb	r3, [r7, #14]
 8000ba4:	e018      	b.n	8000bd8 <LCD_Init+0x154>
    }
    else if (lcd1.rows == 2)
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <LCD_Init+0x18c>)
 8000ba8:	795b      	ldrb	r3, [r3, #5]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d105      	bne.n	8000bba <LCD_Init+0x136>
    {
    	lcdData |= LCD_BIT_2LINE;
 8000bae:	7bbb      	ldrb	r3, [r7, #14]
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	e00e      	b.n	8000bd8 <LCD_Init+0x154>
    }
    else if (lcd1.rows == 4)
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <LCD_Init+0x18c>)
 8000bbc:	795b      	ldrb	r3, [r3, #5]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d105      	bne.n	8000bce <LCD_Init+0x14a>
    {
    	lcdData |= LCD_BIT_4LINE;
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	73bb      	strb	r3, [r7, #14]
 8000bcc:	e004      	b.n	8000bd8 <LCD_Init+0x154>
    }
    else
    {
    	lcdData |= LCD_BIT_2LINE;
 8000bce:	7bbb      	ldrb	r3, [r7, #14]
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73bb      	strb	r3, [r7, #14]
    }

    LCD_WriteByte((uint8_t)0x00, &lcdData);
 8000bd8:	f107 030e 	add.w	r3, r7, #14
 8000bdc:	4619      	mov	r1, r3
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f97e 	bl	8000ee0 <LCD_WriteByte>

    // For the last init step, turn display, cursor, and blink all on
    LCD_DisplayOn();
 8000be4:	2101      	movs	r1, #1
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 f818 	bl	8000c1c <LCD_Command>

    // Specify moving cursor to the right
    LCD_CursorDirToRight();
 8000bec:	2101      	movs	r1, #1
 8000bee:	2007      	movs	r0, #7
 8000bf0:	f000 f814 	bl	8000c1c <LCD_Command>

    // Clear display and home cursor
    LCD_DisplayClear();
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 f810 	bl	8000c1c <LCD_Command>
    LCD_CursorHome();
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2005      	movs	r0, #5
 8000c00:	f000 f80c 	bl	8000c1c <LCD_Command>

    return true;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001e0 	.word	0x200001e0
 8000c14:	200001ec 	.word	0x200001ec
 8000c18:	20000274 	.word	0x20000274

08000c1c <LCD_Command>:
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          True on success, false on HAL error
 */
bool LCD_Command(LCDCommands command, LCDParamsActions action)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	71bb      	strb	r3, [r7, #6]
	uint8_t lcdData = 0x00;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]

	if (action == LCD_PARAM_SET)
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d169      	bne.n	8000d0a <LCD_Command+0xee>
	{
		switch (command)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	2b07      	cmp	r3, #7
 8000c3c:	d863      	bhi.n	8000d06 <LCD_Command+0xea>
 8000c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8000c44 <LCD_Command+0x28>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000c65 	.word	0x08000c65
 8000c48:	08000c95 	.word	0x08000c95
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	08000c85 	.word	0x08000c85
 8000c54:	08000cb9 	.word	0x08000cb9
 8000c58:	08000ced 	.word	0x08000ced
 8000c5c:	08000cdd 	.word	0x08000cdd
 8000c60:	08000cf7 	.word	0x08000cf7
		{
			case LCD_DISPLAY:
				lcd1.modeWord |= LCD_BIT_DISPLAY_ON;
 8000c64:	4b62      	ldr	r3, [pc, #392]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c66:	7a1b      	ldrb	r3, [r3, #8]
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b60      	ldr	r3, [pc, #384]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c70:	721a      	strb	r2, [r3, #8]
				break;
 8000c72:	e096      	b.n	8000da2 <LCD_Command+0x186>

			case LCD_CURSOR:
				lcd1.modeWord |= LCD_BIT_CURSOR_ON;
 8000c74:	4b5e      	ldr	r3, [pc, #376]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c76:	7a1b      	ldrb	r3, [r3, #8]
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c80:	721a      	strb	r2, [r3, #8]
				break;
 8000c82:	e08e      	b.n	8000da2 <LCD_Command+0x186>

			case LCD_CURSOR_BLINK:
				lcd1.modeWord |= LCD_BIT_BLINK_ON;
 8000c84:	4b5a      	ldr	r3, [pc, #360]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c86:	7a1b      	ldrb	r3, [r3, #8]
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b58      	ldr	r3, [pc, #352]	@ (8000df0 <LCD_Command+0x1d4>)
 8000c90:	721a      	strb	r2, [r3, #8]
				break;
 8000c92:	e086      	b.n	8000da2 <LCD_Command+0x186>

			case LCD_CLEAR:
				lcdData = LCD_BIT_DISP_CLEAR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]

				if (LCD_WriteByte((uint8_t)0x00, &lcdData) == false)
 8000c98:	f107 030f 	add.w	r3, r7, #15
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f91e 	bl	8000ee0 <LCD_WriteByte>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d101      	bne.n	8000cae <LCD_Command+0x92>
				{
					return false;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e09b      	b.n	8000de6 <LCD_Command+0x1ca>
				}
				else
				{
					HAL_Delay(2);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f001 f940 	bl	8001f34 <HAL_Delay>
					return true;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e096      	b.n	8000de6 <LCD_Command+0x1ca>
				}
				break;

			case LCD_CURSOR_HOME:
				lcdData = LCD_BIT_CURSOR_HOME;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	73fb      	strb	r3, [r7, #15]

				if (LCD_WriteByte((uint8_t)0x00, &lcdData) == false)
 8000cbc:	f107 030f 	add.w	r3, r7, #15
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f90c 	bl	8000ee0 <LCD_WriteByte>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <LCD_Command+0xb6>
				{
					return false;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e089      	b.n	8000de6 <LCD_Command+0x1ca>
				}
				else
				{
					HAL_Delay(2);
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f001 f92e 	bl	8001f34 <HAL_Delay>
					return true;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e084      	b.n	8000de6 <LCD_Command+0x1ca>
				}
				break;

			case LCD_CURSOR_DIR_RIGHT:
				lcd1.entryWord |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000cdc:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <LCD_Command+0x1d4>)
 8000cde:	7a5b      	ldrb	r3, [r3, #9]
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b42      	ldr	r3, [pc, #264]	@ (8000df0 <LCD_Command+0x1d4>)
 8000ce8:	725a      	strb	r2, [r3, #9]
				break;
 8000cea:	e05a      	b.n	8000da2 <LCD_Command+0x186>

			case LCD_CURSOR_DIR_LEFT:
				lcd1.entryWord |= LCD_BIT_CURSOR_DIR_LEFT;
 8000cec:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <LCD_Command+0x1d4>)
 8000cee:	7a5a      	ldrb	r2, [r3, #9]
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8000df0 <LCD_Command+0x1d4>)
 8000cf2:	725a      	strb	r2, [r3, #9]
				break;
 8000cf4:	e055      	b.n	8000da2 <LCD_Command+0x186>

			case LCD_DISPLAY_SHIFT:
				lcd1.entryWord |= LCD_BIT_DISPLAY_SHIFT;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <LCD_Command+0x1d4>)
 8000cf8:	7a5b      	ldrb	r3, [r3, #9]
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b3b      	ldr	r3, [pc, #236]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d02:	725a      	strb	r2, [r3, #9]
				break;
 8000d04:	e04d      	b.n	8000da2 <LCD_Command+0x186>

			default:
				return false;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e06d      	b.n	8000de6 <LCD_Command+0x1ca>
				break;
		}
	}
	else if (action == LCD_PARAM_UNSET)
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d146      	bne.n	8000d9e <LCD_Command+0x182>
	{
		switch (command)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	2b07      	cmp	r3, #7
 8000d16:	d840      	bhi.n	8000d9a <LCD_Command+0x17e>
 8000d18:	a201      	add	r2, pc, #4	@ (adr r2, 8000d20 <LCD_Command+0x104>)
 8000d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1e:	bf00      	nop
 8000d20:	08000d41 	.word	0x08000d41
 8000d24:	08000d9b 	.word	0x08000d9b
 8000d28:	08000d51 	.word	0x08000d51
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000d9b 	.word	0x08000d9b
 8000d34:	08000d81 	.word	0x08000d81
 8000d38:	08000d71 	.word	0x08000d71
 8000d3c:	08000d8b 	.word	0x08000d8b
		{
			case LCD_DISPLAY:
				lcd1.modeWord &= ~LCD_BIT_DISPLAY_ON;
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d42:	7a1b      	ldrb	r3, [r3, #8]
 8000d44:	f023 0304 	bic.w	r3, r3, #4
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b29      	ldr	r3, [pc, #164]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d4c:	721a      	strb	r2, [r3, #8]
				break;
 8000d4e:	e028      	b.n	8000da2 <LCD_Command+0x186>

            case LCD_CURSOR:
                lcd1.modeWord &= ~LCD_BIT_CURSOR_ON;
 8000d50:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d52:	7a1b      	ldrb	r3, [r3, #8]
 8000d54:	f023 0302 	bic.w	r3, r3, #2
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d5c:	721a      	strb	r2, [r3, #8]
                break;
 8000d5e:	e020      	b.n	8000da2 <LCD_Command+0x186>

            case LCD_CURSOR_BLINK:
                lcd1.modeWord &= ~LCD_BIT_BLINK_ON;
 8000d60:	4b23      	ldr	r3, [pc, #140]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d62:	7a1b      	ldrb	r3, [r3, #8]
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d6c:	721a      	strb	r2, [r3, #8]
                break;
 8000d6e:	e018      	b.n	8000da2 <LCD_Command+0x186>

            case LCD_CURSOR_DIR_RIGHT:
                lcd1.entryWord &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000d70:	4b1f      	ldr	r3, [pc, #124]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d72:	7a5b      	ldrb	r3, [r3, #9]
 8000d74:	f023 0302 	bic.w	r3, r3, #2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d7c:	725a      	strb	r2, [r3, #9]
                break;
 8000d7e:	e010      	b.n	8000da2 <LCD_Command+0x186>

            case LCD_CURSOR_DIR_LEFT:
                lcd1.entryWord &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d82:	7a5a      	ldrb	r2, [r3, #9]
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d86:	725a      	strb	r2, [r3, #9]
                break;
 8000d88:	e00b      	b.n	8000da2 <LCD_Command+0x186>

            case LCD_DISPLAY_SHIFT:
                lcd1.entryWord &= ~LCD_BIT_DISPLAY_SHIFT;
 8000d8a:	4b19      	ldr	r3, [pc, #100]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d8c:	7a5b      	ldrb	r3, [r3, #9]
 8000d8e:	f023 0301 	bic.w	r3, r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <LCD_Command+0x1d4>)
 8000d96:	725a      	strb	r2, [r3, #9]
                break;
 8000d98:	e003      	b.n	8000da2 <LCD_Command+0x186>

            default:
            	return false;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e023      	b.n	8000de6 <LCD_Command+0x1ca>
            	break;
		}
	}
	else
	{
		return false;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e021      	b.n	8000de6 <LCD_Command+0x1ca>
	}

	// Now we can send the command
    switch (command)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	dc16      	bgt.n	8000dd6 <LCD_Command+0x1ba>
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	da0d      	bge.n	8000dc8 <LCD_Command+0x1ac>
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d004      	beq.n	8000dba <LCD_Command+0x19e>
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	dd10      	ble.n	8000dd6 <LCD_Command+0x1ba>
 8000db4:	3b03      	subs	r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d80d      	bhi.n	8000dd6 <LCD_Command+0x1ba>
    {
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcd1.modeWord;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <LCD_Command+0x1d4>)
 8000dbc:	7a1b      	ldrb	r3, [r3, #8]
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	73fb      	strb	r3, [r7, #15]
            break;
 8000dc6:	e007      	b.n	8000dd8 <LCD_Command+0x1bc>
        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcd1.entryWord;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <LCD_Command+0x1d4>)
 8000dca:	7a5b      	ldrb	r3, [r3, #9]
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	73fb      	strb	r3, [r7, #15]
            break;
 8000dd4:	e000      	b.n	8000dd8 <LCD_Command+0x1bc>

        default:
            break;
 8000dd6:	bf00      	nop
    }

    return LCD_WriteByte((uint8_t)0x00, &lcdData);
 8000dd8:	f107 030f 	add.w	r3, r7, #15
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f87e 	bl	8000ee0 <LCD_WriteByte>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001e0 	.word	0x200001e0

08000df4 <LCD_Backlight>:
 * @param  command LCD_BIT_BACKIGHT_ON to turn display backlight on
 *                 LCD_BIT_BACKIGHT_OFF (or 0x00) to turn display backlight off
 * @return         True if success or false if HAL error
 */
bool LCD_Backlight(uint8_t command)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
    lcd1.backlight = command;
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8000e3c <LCD_Backlight+0x48>)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	71d3      	strb	r3, [r2, #7]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, &lcd1.backlight, 1) != HAL_OK)
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <LCD_Backlight+0x48>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <LCD_Backlight+0x48>)
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	2301      	movs	r3, #1
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <LCD_Backlight+0x4c>)
 8000e12:	f002 fb3b 	bl	800348c <HAL_I2C_Master_Transmit_DMA>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <LCD_Backlight+0x2c>
    {
        return false;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e009      	b.n	8000e34 <LCD_Backlight+0x40>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000e20:	bf00      	nop
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <LCD_Backlight+0x48>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 ffe4 	bl	8003df4 <HAL_I2C_GetState>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b20      	cmp	r3, #32
 8000e30:	d1f7      	bne.n	8000e22 <LCD_Backlight+0x2e>

    return true;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200001e0 	.word	0x200001e0
 8000e40:	200001e7 	.word	0x200001e7

08000e44 <LCD_SetCursorPosition>:
 * @param  column counting from 0
 * @param  row    counting from 0
 * @return        True if sucess or false if HAL error
 */
bool LCD_SetCursorPosition(uint8_t column, uint8_t row)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if (row >= lcd1.rows)
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <LCD_SetCursorPosition+0x50>)
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	79ba      	ldrb	r2, [r7, #6]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d303      	bcc.n	8000e66 <LCD_SetCursorPosition+0x22>
    {
        row = lcd1.rows - 1;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <LCD_SetCursorPosition+0x50>)
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[row]);
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	@ (8000e98 <LCD_SetCursorPosition+0x54>)
 8000e6a:	5cd2      	ldrb	r2, [r2, r3]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]

    return LCD_WriteByte(0x00, &lcdCommand);
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	4619      	mov	r1, r3
 8000e84:	2000      	movs	r0, #0
 8000e86:	f000 f82b 	bl	8000ee0 <LCD_WriteByte>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200001e0 	.word	0x200001e0
 8000e98:	080095c0 	.word	0x080095c0

08000e9c <LCD_PrintString>:
 * @param  data   Pointer to string
 * @param  length Size of data
 * @return        True on success, false on HAL error
 */
bool LCD_PrintString(uint8_t * data, uint8_t length)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e00e      	b.n	8000ecc <LCD_PrintString+0x30>
    {
        if (LCD_WriteByte(LCD_BIT_RS, &data[i]) == false)
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f000 f812 	bl	8000ee0 <LCD_WriteByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <LCD_PrintString+0x2a>
        {
            return false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e007      	b.n	8000ed6 <LCD_PrintString+0x3a>
    for (uint8_t i = 0; i < length; ++i)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3ec      	bcc.n	8000eae <LCD_PrintString+0x12>
        }
    }

    return true;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <LCD_WriteByte>:
 * @param  rsBits   State of RS and R/W bits
 * @param  data     Pointer to data to be sent
 * @return          True if success, false on HAL error
 */
static bool LCD_WriteByte(uint8_t rsBits, uint8_t *data)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
    // High 4 bits
    lcd1_CommandBuffer[0] = rsBits | LCD_BIT_E | lcd1.backlight | (*data & 0xF0);  // Send data and set strobe
 8000eec:	4b32      	ldr	r3, [pc, #200]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000eee:	79da      	ldrb	r2, [r3, #7]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	f023 030f 	bic.w	r3, r3, #15
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f0c:	701a      	strb	r2, [r3, #0]
    lcd1_CommandBuffer[1] = lcd1_CommandBuffer[0];                                          // Strobe turned on
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f14:	705a      	strb	r2, [r3, #1]
    lcd1_CommandBuffer[2] = rsBits | lcd1.backlight | (*data & 0xF0);              // Turning strobe off
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f18:	79da      	ldrb	r2, [r3, #7]
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	b25a      	sxtb	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	f023 030f 	bic.w	r3, r3, #15
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f36:	709a      	strb	r2, [r3, #2]

    // Low 4 bits
    lcd1_CommandBuffer[3] = rsBits | LCD_BIT_E | lcd1.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f3a:	79da      	ldrb	r2, [r3, #7]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f56:	70da      	strb	r2, [r3, #3]
    lcd1_CommandBuffer[4] = lcd1_CommandBuffer[3];                                                 // Strobe turned on
 8000f58:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f5a:	78da      	ldrb	r2, [r3, #3]
 8000f5c:	4b17      	ldr	r3, [pc, #92]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f5e:	711a      	strb	r2, [r3, #4]
    lcd1_CommandBuffer[5] = rsBits | lcd1.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f62:	79da      	ldrb	r2, [r3, #7]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	b25a      	sxtb	r2, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b25b      	sxtb	r3, r3
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f7c:	715a      	strb	r2, [r3, #5]

    if (HAL_I2C_Master_Transmit_DMA(lcd1.hi2c, lcd1.address, (uint8_t*)lcd1_CommandBuffer, 6) != HAL_OK)
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f80:	6818      	ldr	r0, [r3, #0]
 8000f82:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f84:	791b      	ldrb	r3, [r3, #4]
 8000f86:	4619      	mov	r1, r3
 8000f88:	2306      	movs	r3, #6
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000fbc <LCD_WriteByte+0xdc>)
 8000f8c:	f002 fa7e 	bl	800348c <HAL_I2C_Master_Transmit_DMA>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <LCD_WriteByte+0xba>
    {
        return false;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e009      	b.n	8000fae <LCD_WriteByte+0xce>
    }

    while (HAL_I2C_GetState(lcd1.hi2c) != HAL_I2C_STATE_READY);
 8000f9a:	bf00      	nop
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <LCD_WriteByte+0xd8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 ff27 	bl	8003df4 <HAL_I2C_GetState>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b20      	cmp	r3, #32
 8000faa:	d1f7      	bne.n	8000f9c <LCD_WriteByte+0xbc>

    return true;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001e0 	.word	0x200001e0
 8000fbc:	200001ec 	.word	0x200001ec

08000fc0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fc8:	1d39      	adds	r1, r7, #4
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <__io_putchar+0x20>)
 8000fd2:	f005 ffcb 	bl	8006f6c <HAL_UART_Transmit>
  return ch;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000304 	.word	0x20000304

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0a2      	sub	sp, #136	@ 0x88
 8000fe8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f000 ff31 	bl	8001e50 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 fa5f 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f7ff fb9f 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ff6:	f7ff fb6d 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffa:	f000 fdbf 	bl	8001b7c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ffe:	f7ff fab7 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001002:	f7ff fc53 	bl	80008ac <MX_I2C1_Init>
  MX_RTC_Init();
 8001006:	f000 fadd 	bl	80015c4 <MX_RTC_Init>
  MX_SPI2_Init();
 800100a:	f000 fb2d 	bl	8001668 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800100e:	f000 fd8b 	bl	8001b28 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001012:	f000 fddd 	bl	8001bd0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001016:	f000 fd11 	bl	8001a3c <MX_TIM1_Init>
  // whereas for getting user input (like above) we could just use blocking statements
   */

  // All UART RXs in this code expect a single "\n" control character
  // from the serial terminal, so give a warning to anyone trying to communicate
  printf("Send only newlines, not also carriage returns.\r\n");
 800101a:	4888      	ldr	r0, [pc, #544]	@ (800123c <main+0x258>)
 800101c:	f007 f99e 	bl	800835c <puts>

  /* Add I2C and scan the bus for all addresses that respond */
  // TODO: Replace generic i2c scanner with a scanner that specifically looks for our modules only
  // 20x4 LCD: 0x27, TODO: get addresses for other modules
  printf("Scanning I2C bus.\r\n");
 8001020:	4887      	ldr	r0, [pc, #540]	@ (8001240 <main+0x25c>)
 8001022:	f007 f99b 	bl	800835c <puts>
  int ret = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	67bb      	str	r3, [r7, #120]	@ 0x78
  char i2cBuffer[5] = {0};
 800102a:	2300      	movs	r3, #0
 800102c:	673b      	str	r3, [r7, #112]	@ 0x70
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
  // Scan all 128 available i2c addresses
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8001034:	2301      	movs	r3, #1
 8001036:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800103a:	e026      	b.n	800108a <main+0xa6>
  {
	  ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(testAddr<<1), 3, 5);
 800103c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001040:	b29b      	uxth	r3, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b299      	uxth	r1, r3
 8001046:	2305      	movs	r3, #5
 8001048:	2203      	movs	r2, #3
 800104a:	487e      	ldr	r0, [pc, #504]	@ (8001244 <main+0x260>)
 800104c:	f002 fb4a 	bl	80036e4 <HAL_I2C_IsDeviceReady>
 8001050:	4603      	mov	r3, r0
 8001052:	67bb      	str	r3, [r7, #120]	@ 0x78
	  if (ret == HAL_OK) // If an ACK was received at address testAddr
 8001054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001056:	2b00      	cmp	r3, #0
 8001058:	d112      	bne.n	8001080 <main+0x9c>
	  {
		  sprintf(i2cBuffer, "0x%X", testAddr);
 800105a:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 800105e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001062:	4979      	ldr	r1, [pc, #484]	@ (8001248 <main+0x264>)
 8001064:	4618      	mov	r0, r3
 8001066:	f007 f981 	bl	800836c <siprintf>
		  printf("Device at: ");
 800106a:	4878      	ldr	r0, [pc, #480]	@ (800124c <main+0x268>)
 800106c:	f007 f906 	bl	800827c <iprintf>
		  printf(i2cBuffer);
 8001070:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001074:	4618      	mov	r0, r3
 8001076:	f007 f901 	bl	800827c <iprintf>
		  printf("\r\n");
 800107a:	4875      	ldr	r0, [pc, #468]	@ (8001250 <main+0x26c>)
 800107c:	f007 f96e 	bl	800835c <puts>
  for (uint8_t testAddr = 1; testAddr < 128; testAddr++)
 8001080:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001084:	3301      	adds	r3, #1
 8001086:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800108a:	f997 307f 	ldrsb.w	r3, [r7, #127]	@ 0x7f
 800108e:	2b00      	cmp	r3, #0
 8001090:	dad4      	bge.n	800103c <main+0x58>
	  }
  }
  printf("Done.\r\n");
 8001092:	4870      	ldr	r0, [pc, #448]	@ (8001254 <main+0x270>)
 8001094:	f007 f962 	bl	800835c <puts>


  /* Display a splash screen on the LCD */
  LCD_Init(&hi2c1, (uint8_t)0x27, 4, 20);	// from scanning, LCD I2C addr is 0x27
 8001098:	2314      	movs	r3, #20
 800109a:	2204      	movs	r2, #4
 800109c:	2127      	movs	r1, #39	@ 0x27
 800109e:	4869      	ldr	r0, [pc, #420]	@ (8001244 <main+0x260>)
 80010a0:	f7ff fcf0 	bl	8000a84 <LCD_Init>
  LCD_PrintString((uint8_t*)"Hello,", 6);
 80010a4:	2106      	movs	r1, #6
 80010a6:	486c      	ldr	r0, [pc, #432]	@ (8001258 <main+0x274>)
 80010a8:	f7ff fef8 	bl	8000e9c <LCD_PrintString>
  LCD_SetCursorPosition(0, 1);
 80010ac:	2101      	movs	r1, #1
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fec8 	bl	8000e44 <LCD_SetCursorPosition>
  LCD_PrintString((uint8_t*)"World!", 6);
 80010b4:	2106      	movs	r1, #6
 80010b6:	4869      	ldr	r0, [pc, #420]	@ (800125c <main+0x278>)
 80010b8:	f7ff fef0 	bl	8000e9c <LCD_PrintString>
  LCD_Backlight(LCD_BIT_BACKLIGHT_ON);
 80010bc:	2008      	movs	r0, #8
 80010be:	f7ff fe99 	bl	8000df4 <LCD_Backlight>


  /* Get and set the RTC module */
  // Setting RTC is done following the procedure in UM1725 section 57.2
  // Enable backup domain access for the RTC first (according to documentation UM1725 57.2.3)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80010c6:	4b66      	ldr	r3, [pc, #408]	@ (8001260 <main+0x27c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	4a65      	ldr	r2, [pc, #404]	@ (8001260 <main+0x27c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d2:	4b63      	ldr	r3, [pc, #396]	@ (8001260 <main+0x27c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
 80010dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  HAL_PWR_EnableBkUpAccess();
 80010de:	f004 faa7 	bl	8005630 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <main+0x27c>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001260 <main+0x27c>)
 80010e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80010ec:	6093      	str	r3, [r2, #8]
 80010ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001260 <main+0x27c>)
 80010f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80010f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001260 <main+0x27c>)
 80010f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f8:	6713      	str	r3, [r2, #112]	@ 0x70
  __HAL_RCC_RTC_ENABLE();
 80010fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001264 <main+0x280>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

  char timeString[9];
  char dateString[9];
  uint8_t uartBuffer[10] = {0};
 8001100:	2300      	movs	r3, #0
 8001102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001104:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	809a      	strh	r2, [r3, #4]
  RTC_DateTypeDef dateRTC;
  RTC_TimeTypeDef timeRTC;

  printf("Current date and time: ");
 800110e:	4856      	ldr	r0, [pc, #344]	@ (8001268 <main+0x284>)
 8001110:	f007 f8b4 	bl	800827c <iprintf>
  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 8001114:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4853      	ldr	r0, [pc, #332]	@ (800126c <main+0x288>)
 800111e:	f005 f93e 	bl	800639e <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 8001122:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4850      	ldr	r0, [pc, #320]	@ (800126c <main+0x288>)
 800112c:	f005 fa19 	bl	8006562 <HAL_RTC_GetDate>

  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 8001130:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001134:	461a      	mov	r2, r3
 8001136:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800113a:	4619      	mov	r1, r3
 800113c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001140:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	460b      	mov	r3, r1
 8001148:	4949      	ldr	r1, [pc, #292]	@ (8001270 <main+0x28c>)
 800114a:	f007 f90f 	bl	800836c <siprintf>
  printf(timeString);
 800114e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001152:	4618      	mov	r0, r3
 8001154:	f007 f892 	bl	800827c <iprintf>
  printf(" ");
 8001158:	2020      	movs	r0, #32
 800115a:	f007 f8a1 	bl	80082a0 <putchar>
  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 800115e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001162:	461a      	mov	r2, r3
 8001164:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001168:	4619      	mov	r1, r3
 800116a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800116e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	460b      	mov	r3, r1
 8001176:	493f      	ldr	r1, [pc, #252]	@ (8001274 <main+0x290>)
 8001178:	f007 f8f8 	bl	800836c <siprintf>
  printf(dateString);
 800117c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001180:	4618      	mov	r0, r3
 8001182:	f007 f87b 	bl	800827c <iprintf>

  printf("\r\nSet the time? (y/n)\r\n");
 8001186:	483c      	ldr	r0, [pc, #240]	@ (8001278 <main+0x294>)
 8001188:	f007 f8e8 	bl	800835c <puts>
  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 800118c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	2202      	movs	r2, #2
 8001196:	4839      	ldr	r0, [pc, #228]	@ (800127c <main+0x298>)
 8001198:	f005 ff73 	bl	8007082 <HAL_UART_Receive>

  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y')
 800119c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011a0:	2b79      	cmp	r3, #121	@ 0x79
 80011a2:	d004      	beq.n	80011ae <main+0x1ca>
 80011a4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011a8:	2b59      	cmp	r3, #89	@ 0x59
 80011aa:	f040 811b 	bne.w	80013e4 <main+0x400>
  {
	  // ask the user to set the time and date
	  printf("Enter the time in 24hr format (HH:MM)\r\n");
 80011ae:	4834      	ldr	r0, [pc, #208]	@ (8001280 <main+0x29c>)
 80011b0:	f007 f8d4 	bl	800835c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 6, HAL_MAX_DELAY);
 80011b4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	2206      	movs	r2, #6
 80011be:	482f      	ldr	r0, [pc, #188]	@ (800127c <main+0x298>)
 80011c0:	f005 ff5f 	bl	8007082 <HAL_UART_Receive>

	  char charHrs[2] = {uartBuffer[0], uartBuffer[1]};
 80011c4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80011c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80011cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80011d0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	  char charMins[2] = {uartBuffer[3], uartBuffer[4]};
 80011d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80011d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80011dc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80011e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	  timeRTC.Hours = atoi(charHrs);
 80011e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e8:	4618      	mov	r0, r3
 80011ea:	f006 fefd 	bl	8007fe8 <atoi>
 80011ee:	4603      	mov	r3, r0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	  timeRTC.Minutes = atoi(charMins);
 80011f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 fef4 	bl	8007fe8 <atoi>
 8001200:	4603      	mov	r3, r0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

	  uint8_t dst = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	  printf("Daylight savings time? (y/n)\r\n");
 800120e:	481d      	ldr	r0, [pc, #116]	@ (8001284 <main+0x2a0>)
 8001210:	f007 f8a4 	bl	800835c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 2, HAL_MAX_DELAY);
 8001214:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	2202      	movs	r2, #2
 800121e:	4817      	ldr	r0, [pc, #92]	@ (800127c <main+0x298>)
 8001220:	f005 ff2f 	bl	8007082 <HAL_UART_Receive>

	  if (uartBuffer[0] == 'y' || uartBuffer[0] == 'Y') dst = RTC_DAYLIGHTSAVING_ADD1H;
 8001224:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001228:	2b79      	cmp	r3, #121	@ 0x79
 800122a:	d003      	beq.n	8001234 <main+0x250>
 800122c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001230:	2b59      	cmp	r3, #89	@ 0x59
 8001232:	d129      	bne.n	8001288 <main+0x2a4>
 8001234:	2300      	movs	r3, #0
 8001236:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800123a:	e028      	b.n	800128e <main+0x2aa>
 800123c:	08009450 	.word	0x08009450
 8001240:	08009480 	.word	0x08009480
 8001244:	200000cc 	.word	0x200000cc
 8001248:	08009494 	.word	0x08009494
 800124c:	0800949c 	.word	0x0800949c
 8001250:	080094a8 	.word	0x080094a8
 8001254:	080094ac 	.word	0x080094ac
 8001258:	080094b4 	.word	0x080094b4
 800125c:	080094bc 	.word	0x080094bc
 8001260:	40023800 	.word	0x40023800
 8001264:	42470e3c 	.word	0x42470e3c
 8001268:	080094c4 	.word	0x080094c4
 800126c:	200001f8 	.word	0x200001f8
 8001270:	080094dc 	.word	0x080094dc
 8001274:	080094ec 	.word	0x080094ec
 8001278:	080094fc 	.word	0x080094fc
 800127c:	20000304 	.word	0x20000304
 8001280:	08009514 	.word	0x08009514
 8001284:	0800953c 	.word	0x0800953c
	  else dst = RTC_DAYLIGHTSAVING_NONE;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

	  // The daylight savings and store operation interfaces have been
	  // deprecated but we will worry about that later
	  // TODO: Update interface for RTC daylight savings time
	  timeRTC.Seconds = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	  timeRTC.TimeFormat = RTC_HOURFORMAT12_PM;
 8001294:	2301      	movs	r3, #1
 8001296:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  timeRTC.DayLightSaving = dst;
 800129a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
	  timeRTC.StoreOperation = RTC_STOREOPERATION_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44

	  if (HAL_RTC_SetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN) != HAL_OK)
 80012a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4876      	ldr	r0, [pc, #472]	@ (8001488 <main+0x4a4>)
 80012ae:	f004 ffdc 	bl	800626a <HAL_RTC_SetTime>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d004      	beq.n	80012c2 <main+0x2de>
	  {
		printf("INVALID TIME.\r\n");
 80012b8:	4874      	ldr	r0, [pc, #464]	@ (800148c <main+0x4a8>)
 80012ba:	f007 f84f 	bl	800835c <puts>
		Error_Handler();
 80012be:	f000 f975 	bl	80015ac <Error_Handler>
	  }

	  printf("Enter the date (MM-DD-YY)\r\n");
 80012c2:	4873      	ldr	r0, [pc, #460]	@ (8001490 <main+0x4ac>)
 80012c4:	f007 f84a 	bl	800835c <puts>
	  HAL_UART_Receive(&huart2, uartBuffer, 8, HAL_MAX_DELAY);
 80012c8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	2208      	movs	r2, #8
 80012d2:	4870      	ldr	r0, [pc, #448]	@ (8001494 <main+0x4b0>)
 80012d4:	f005 fed5 	bl	8007082 <HAL_UART_Receive>

	  char charMM[2] = {uartBuffer[0], uartBuffer[1]};
 80012d8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80012dc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80012e0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80012e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  char charDD[2] = {uartBuffer[3], uartBuffer[4]};
 80012e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80012ec:	f887 3020 	strb.w	r3, [r7, #32]
 80012f0:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80012f4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	  char charYY[2] = {uartBuffer[6], uartBuffer[7]};
 80012f8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80012fc:	773b      	strb	r3, [r7, #28]
 80012fe:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001302:	777b      	strb	r3, [r7, #29]
	  dateRTC.Month = atoi(charMM);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	4618      	mov	r0, r3
 800130a:	f006 fe6d 	bl	8007fe8 <atoi>
 800130e:	4603      	mov	r3, r0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	  dateRTC.Date = atoi(charDD);
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4618      	mov	r0, r3
 800131c:	f006 fe64 	bl	8007fe8 <atoi>
 8001320:	4603      	mov	r3, r0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	  dateRTC.Year = atoi(charYY);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4618      	mov	r0, r3
 800132e:	f006 fe5b 	bl	8007fe8 <atoi>
 8001332:	4603      	mov	r3, r0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	  if (HAL_RTC_SetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN) != HAL_OK)
 800133a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	4851      	ldr	r0, [pc, #324]	@ (8001488 <main+0x4a4>)
 8001344:	f005 f889 	bl	800645a <HAL_RTC_SetDate>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <main+0x374>
	  {
		  printf("INVALID DATE.\r\n");
 800134e:	4852      	ldr	r0, [pc, #328]	@ (8001498 <main+0x4b4>)
 8001350:	f007 f804 	bl	800835c <puts>
		  Error_Handler();
 8001354:	f000 f92a 	bl	80015ac <Error_Handler>
	  }

	  // Update the backup register too as part of setting RTC
	  // from https://controllerstech.com/internal-rtc-in-stm32/
	  // The hex number was chosen randomly
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001358:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 800135c:	2101      	movs	r1, #1
 800135e:	484a      	ldr	r0, [pc, #296]	@ (8001488 <main+0x4a4>)
 8001360:	f005 fa0c 	bl	800677c <HAL_RTCEx_BKUPWrite>

	  // We'll confirm the new date and time by reading it out
	  printf("Current date and time: ");
 8001364:	484d      	ldr	r0, [pc, #308]	@ (800149c <main+0x4b8>)
 8001366:	f006 ff89 	bl	800827c <iprintf>
	  HAL_RTC_GetTime(&hrtc, &timeRTC, RTC_FORMAT_BIN);
 800136a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	4845      	ldr	r0, [pc, #276]	@ (8001488 <main+0x4a4>)
 8001374:	f005 f813 	bl	800639e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &dateRTC, RTC_FORMAT_BIN);
 8001378:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800137c:	2200      	movs	r2, #0
 800137e:	4619      	mov	r1, r3
 8001380:	4841      	ldr	r0, [pc, #260]	@ (8001488 <main+0x4a4>)
 8001382:	f005 f8ee 	bl	8006562 <HAL_RTC_GetDate>

	  sprintf(timeString, "%02d:%02d:%02d", timeRTC.Hours, timeRTC.Minutes, timeRTC.Seconds);
 8001386:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800138a:	461a      	mov	r2, r3
 800138c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001390:	4619      	mov	r1, r3
 8001392:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001396:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	460b      	mov	r3, r1
 800139e:	4940      	ldr	r1, [pc, #256]	@ (80014a0 <main+0x4bc>)
 80013a0:	f006 ffe4 	bl	800836c <siprintf>
	  printf(timeString);
 80013a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013a8:	4618      	mov	r0, r3
 80013aa:	f006 ff67 	bl	800827c <iprintf>
	  printf(" ");
 80013ae:	2020      	movs	r0, #32
 80013b0:	f006 ff76 	bl	80082a0 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", dateRTC.Month, dateRTC.Date, dateRTC.Year);
 80013b4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80013b8:	461a      	mov	r2, r3
 80013ba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80013be:	4619      	mov	r1, r3
 80013c0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013c4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	460b      	mov	r3, r1
 80013cc:	4935      	ldr	r1, [pc, #212]	@ (80014a4 <main+0x4c0>)
 80013ce:	f006 ffcd 	bl	800836c <siprintf>
	  printf(dateString);
 80013d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 ff50 	bl	800827c <iprintf>
	  printf("\r\n");
 80013dc:	4832      	ldr	r0, [pc, #200]	@ (80014a8 <main+0x4c4>)
 80013de:	f006 ffbd 	bl	800835c <puts>
  {
 80013e2:	e002      	b.n	80013ea <main+0x406>
  }
  else printf("Skipping time set.\r\n");
 80013e4:	4831      	ldr	r0, [pc, #196]	@ (80014ac <main+0x4c8>)
 80013e6:	f006 ffb9 	bl	800835c <puts>
  while (1)
  {
	  // The goal for now is to transmit the now set time from the RTC, once a second.
	  RTC_DateTypeDef getDate;
	  RTC_TimeTypeDef getTime;
	  HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN);
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2200      	movs	r2, #0
 80013ee:	4619      	mov	r1, r3
 80013f0:	4825      	ldr	r0, [pc, #148]	@ (8001488 <main+0x4a4>)
 80013f2:	f004 ffd4 	bl	800639e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN);
 80013f6:	f107 0318 	add.w	r3, r7, #24
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4822      	ldr	r0, [pc, #136]	@ (8001488 <main+0x4a4>)
 8001400:	f005 f8af 	bl	8006562 <HAL_RTC_GetDate>
	  sprintf(timeString, "%02d:%02d:%02d", getTime.Hours, getTime.Minutes, getTime.Seconds);
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	461a      	mov	r2, r3
 8001408:	797b      	ldrb	r3, [r7, #5]
 800140a:	4619      	mov	r1, r3
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	460b      	mov	r3, r1
 8001416:	4922      	ldr	r1, [pc, #136]	@ (80014a0 <main+0x4bc>)
 8001418:	f006 ffa8 	bl	800836c <siprintf>
	  printf(timeString);
 800141c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001420:	4618      	mov	r0, r3
 8001422:	f006 ff2b 	bl	800827c <iprintf>
	  printf(" ");
 8001426:	2020      	movs	r0, #32
 8001428:	f006 ff3a 	bl	80082a0 <putchar>
	  sprintf(dateString, "%02d/%02d/%02d", getDate.Month, getDate.Date, getDate.Year);
 800142c:	7e7b      	ldrb	r3, [r7, #25]
 800142e:	461a      	mov	r2, r3
 8001430:	7ebb      	ldrb	r3, [r7, #26]
 8001432:	4619      	mov	r1, r3
 8001434:	7efb      	ldrb	r3, [r7, #27]
 8001436:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	460b      	mov	r3, r1
 800143e:	4919      	ldr	r1, [pc, #100]	@ (80014a4 <main+0x4c0>)
 8001440:	f006 ff94 	bl	800836c <siprintf>
	  printf(dateString);
 8001444:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001448:	4618      	mov	r0, r3
 800144a:	f006 ff17 	bl	800827c <iprintf>
	  printf("\r\n");
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <main+0x4c4>)
 8001450:	f006 ff84 	bl	800835c <puts>

	  LCD_SetCursorPosition(0,2);
 8001454:	2102      	movs	r1, #2
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fcf4 	bl	8000e44 <LCD_SetCursorPosition>
	  LCD_PrintString((uint8_t*)timeString, 8);
 800145c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001460:	2108      	movs	r1, #8
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd1a 	bl	8000e9c <LCD_PrintString>
	  LCD_SetCursorPosition(0,3);
 8001468:	2103      	movs	r1, #3
 800146a:	2000      	movs	r0, #0
 800146c:	f7ff fcea 	bl	8000e44 <LCD_SetCursorPosition>
	  LCD_PrintString((uint8_t*)dateString, 8);
 8001470:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001474:	2108      	movs	r1, #8
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fd10 	bl	8000e9c <LCD_PrintString>
	  HAL_Delay(1000);
 800147c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001480:	f000 fd58 	bl	8001f34 <HAL_Delay>
  {
 8001484:	bf00      	nop
 8001486:	e7b0      	b.n	80013ea <main+0x406>
 8001488:	200001f8 	.word	0x200001f8
 800148c:	0800955c 	.word	0x0800955c
 8001490:	0800956c 	.word	0x0800956c
 8001494:	20000304 	.word	0x20000304
 8001498:	08009588 	.word	0x08009588
 800149c:	080094c4 	.word	0x080094c4
 80014a0:	080094dc 	.word	0x080094dc
 80014a4:	080094ec 	.word	0x080094ec
 80014a8:	080094a8 	.word	0x080094a8
 80014ac:	08009598 	.word	0x08009598

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2230      	movs	r2, #48	@ 0x30
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f84c 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <SystemClock_Config+0xd4>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a29      	ldr	r2, [pc, #164]	@ (8001584 <SystemClock_Config+0xd4>)
 80014de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <SystemClock_Config+0xd4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <SystemClock_Config+0xd8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014fc:	4a22      	ldr	r2, [pc, #136]	@ (8001588 <SystemClock_Config+0xd8>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <SystemClock_Config+0xd8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001510:	230a      	movs	r3, #10
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001520:	2302      	movs	r3, #2
 8001522:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001524:	2300      	movs	r3, #0
 8001526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001528:	2310      	movs	r3, #16
 800152a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800152c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001532:	2304      	movs	r3, #4
 8001534:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001536:	2307      	movs	r3, #7
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f88a 	bl	8005658 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800154a:	f000 f82f 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2102      	movs	r1, #2
 800156a:	4618      	mov	r0, r3
 800156c:	f004 faec 	bl	8005b48 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001576:	f000 f819 	bl	80015ac <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3750      	adds	r7, #80	@ 0x50
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	gpv_UART2_DMA_RX_Complete = 1;
 8001594:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <HAL_UART_RxCpltCallback+0x1c>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]
	// this function from https://deepbluembedded.com/how-to-receive-uart-serial-data-with-stm32-dma-interrupt-polling/
    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200001f4 	.word	0x200001f4

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <Error_Handler+0x14>)
 80015b6:	f006 fe61 	bl	800827c <iprintf>
	  while (1);
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <Error_Handler+0xe>
 80015be:	bf00      	nop
 80015c0:	080095ac 	.word	0x080095ac

080015c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_RTC_Init+0x44>)
 80015ca:	4a10      	ldr	r2, [pc, #64]	@ (800160c <MX_RTC_Init+0x48>)
 80015cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_RTC_Init+0x44>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_RTC_Init+0x44>)
 80015d6:	227f      	movs	r2, #127	@ 0x7f
 80015d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <MX_RTC_Init+0x44>)
 80015dc:	22ff      	movs	r2, #255	@ 0xff
 80015de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_RTC_Init+0x44>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <MX_RTC_Init+0x44>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_RTC_Init+0x44>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <MX_RTC_Init+0x44>)
 80015f4:	f004 fdb6 	bl	8006164 <HAL_RTC_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80015fe:	f7ff ffd5 	bl	80015ac <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200001f8 	.word	0x200001f8
 800160c:	40002800 	.word	0x40002800

08001610 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_RTC_MspInit+0x50>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d111      	bne.n	8001656 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001632:	2302      	movs	r3, #2
 8001634:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001636:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800163a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fca1 	bl	8005f88 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800164c:	f7ff ffae 	bl	80015ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <HAL_RTC_MspInit+0x54>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40002800 	.word	0x40002800
 8001664:	42470e3c 	.word	0x42470e3c

08001668 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_SPI2_Init+0x68>)
 800166e:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <MX_SPI2_Init+0x6c>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b17      	ldr	r3, [pc, #92]	@ (80016d0 <MX_SPI2_Init+0x68>)
 8001674:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <MX_SPI2_Init+0x68>)
 800167c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001680:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_SPI2_Init+0x68>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_SPI2_Init+0x68>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <MX_SPI2_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_SPI2_Init+0x68>)
 8001696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800169a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_SPI2_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_SPI2_Init+0x68>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_SPI2_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_SPI2_Init+0x68>)
 80016b6:	220a      	movs	r2, #10
 80016b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_SPI2_Init+0x68>)
 80016bc:	f005 f878 	bl	80067b0 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016c6:	f7ff ff71 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000218 	.word	0x20000218
 80016d4:	40003800 	.word	0x40003800

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a28      	ldr	r2, [pc, #160]	@ (8001798 <HAL_SPI_MspInit+0xc0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d14a      	bne.n	8001790 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4a26      	ldr	r2, [pc, #152]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a1f      	ldr	r2, [pc, #124]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a18      	ldr	r2, [pc, #96]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_SPI_MspInit+0xc4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174e:	2308      	movs	r3, #8
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <HAL_SPI_MspInit+0xc8>)
 800176a:	f001 fb97 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800176e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001780:	2305      	movs	r3, #5
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <HAL_SPI_MspInit+0xcc>)
 800178c:	f001 fb86 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	@ 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40003800 	.word	0x40003800
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	4a08      	ldr	r2, [pc, #32]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017e6:	2007      	movs	r0, #7
 80017e8:	f000 fefa 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 fb51 	bl	8001ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA1_Stream0_IRQHandler+0x10>)
 800185e:	f001 f899 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000180 	.word	0x20000180

0800186c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <DMA1_Stream5_IRQHandler+0x10>)
 8001872:	f001 f88f 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000394 	.word	0x20000394

08001880 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <DMA1_Stream6_IRQHandler+0x10>)
 8001886:	f001 f885 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000120 	.word	0x20000120

08001894 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <I2C1_EV_IRQHandler+0x10>)
 800189a:	f002 f851 	bl	8003940 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000cc 	.word	0x200000cc

080018a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <I2C1_ER_IRQHandler+0x10>)
 80018ae:	f002 f99a 	bl	8003be6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000cc 	.word	0x200000cc

080018bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <USART2_IRQHandler+0x10>)
 80018c2:	f005 fc75 	bl	80071b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000304 	.word	0x20000304

080018d0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
  }

  return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fb4b 	bl	8000fc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
  }
  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800196a:	605a      	str	r2, [r3, #4]
  return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	@ (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f006 fe0c 	bl	80085f8 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20018000 	.word	0x20018000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	20000270 	.word	0x20000270
 8001a14:	20000548 	.word	0x20000548

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	463b      	mov	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <MX_TIM1_Init+0xa4>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a60:	2253      	movs	r2, #83	@ 0x53
 8001a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a6c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a84:	4815      	ldr	r0, [pc, #84]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001a86:	f004 ff1c 	bl	80068c2 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a90:	f7ff fd8c 	bl	80015ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480e      	ldr	r0, [pc, #56]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001aa2:	f004 ffb7 	bl	8006a14 <HAL_TIM_ConfigClockSource>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001aac:	f7ff fd7e 	bl	80015ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4619      	mov	r1, r3
 8001abc:	4807      	ldr	r0, [pc, #28]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001abe:	f005 f997 	bl	8006df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ac8:	f7ff fd70 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  // This timer is used for making microsecond delays
  HAL_TIM_Base_Start(&htim1);
 8001acc:	4803      	ldr	r0, [pc, #12]	@ (8001adc <MX_TIM1_Init+0xa0>)
 8001ace:	f004 ff47 	bl	8006960 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000274 	.word	0x20000274
 8001ae0:	40010000 	.word	0x40010000

08001ae4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_TIM_Base_MspInit+0x3c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a09      	ldr	r2, [pc, #36]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <HAL_TIM_Base_MspInit+0x40>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40010000 	.word	0x40010000
 8001b24:	40023800 	.word	0x40023800

08001b28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <MX_USART1_UART_Init+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b60:	f005 f9b4 	bl	8006ecc <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b6a:	f7ff fd1f 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002bc 	.word	0x200002bc
 8001b78:	40011000 	.word	0x40011000

08001b7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	@ (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f005 f98a 	bl	8006ecc <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f7ff fcf5 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000304 	.word	0x20000304
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART6_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART6_UART_Init+0x4c>)
 8001c08:	f005 f960 	bl	8006ecc <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f7ff fccb 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000034c 	.word	0x2000034c
 8001c20:	40011400 	.word	0x40011400

08001c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08e      	sub	sp, #56	@ 0x38
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a66      	ldr	r2, [pc, #408]	@ (8001ddc <HAL_UART_MspInit+0x1b8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12d      	bne.n	8001ca2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	4b65      	ldr	r3, [pc, #404]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	4a64      	ldr	r2, [pc, #400]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c50:	f043 0310 	orr.w	r3, r3, #16
 8001c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c56:	4b62      	ldr	r3, [pc, #392]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b5b      	ldr	r3, [pc, #364]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c90:	2307      	movs	r3, #7
 8001c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4852      	ldr	r0, [pc, #328]	@ (8001de4 <HAL_UART_MspInit+0x1c0>)
 8001c9c:	f001 f8fe 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001ca0:	e098      	b.n	8001dd4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a50      	ldr	r2, [pc, #320]	@ (8001de8 <HAL_UART_MspInit+0x1c4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d162      	bne.n	8001d72 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cbc:	4b48      	ldr	r3, [pc, #288]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	4a43      	ldr	r2, [pc, #268]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4839      	ldr	r0, [pc, #228]	@ (8001de4 <HAL_UART_MspInit+0x1c0>)
 8001d00:	f001 f8cc 	bl	8002e9c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001d04:	4b39      	ldr	r3, [pc, #228]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d06:	4a3a      	ldr	r2, [pc, #232]	@ (8001df0 <HAL_UART_MspInit+0x1cc>)
 8001d08:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001d0a:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d0c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d26:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d32:	4b2e      	ldr	r3, [pc, #184]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d44:	4829      	ldr	r0, [pc, #164]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d46:	f000 fc8d 	bl	8002664 <HAL_DMA_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001d50:	f7ff fc2c 	bl	80015ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d5a:	4a24      	ldr	r2, [pc, #144]	@ (8001dec <HAL_UART_MspInit+0x1c8>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	2026      	movs	r0, #38	@ 0x26
 8001d66:	f000 fc46 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d6a:	2026      	movs	r0, #38	@ 0x26
 8001d6c:	f000 fc5f 	bl	800262e <HAL_NVIC_EnableIRQ>
}
 8001d70:	e030      	b.n	8001dd4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART6)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_UART_MspInit+0x1d0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d84:	4a16      	ldr	r2, [pc, #88]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d86:	f043 0320 	orr.w	r3, r3, #32
 8001d8a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	4a0f      	ldr	r2, [pc, #60]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da8:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_UART_MspInit+0x1bc>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db4:	23c0      	movs	r3, #192	@ 0xc0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	480a      	ldr	r0, [pc, #40]	@ (8001df8 <HAL_UART_MspInit+0x1d4>)
 8001dd0:	f001 f864 	bl	8002e9c <HAL_GPIO_Init>
}
 8001dd4:	bf00      	nop
 8001dd6:	3738      	adds	r7, #56	@ 0x38
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40004400 	.word	0x40004400
 8001dec:	20000394 	.word	0x20000394
 8001df0:	40026088 	.word	0x40026088
 8001df4:	40011400 	.word	0x40011400
 8001df8:	40020800 	.word	0x40020800

08001dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e00:	f7ff fe0a 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e06:	490d      	ldr	r1, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f006 fbeb 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2e:	f7ff f8d9 	bl	8000fe4 <main>
  bx  lr    
 8001e32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e40:	08009728 	.word	0x08009728
  ldr r2, =_sbss
 8001e44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e48:	20000544 	.word	0x20000544

08001e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e54:	4b0e      	ldr	r3, [pc, #56]	@ (8001e90 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	@ (8001e90 <HAL_Init+0x40>)
 8001e5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e60:	4b0b      	ldr	r3, [pc, #44]	@ (8001e90 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_Init+0x40>)
 8001e66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e6c:	4b08      	ldr	r3, [pc, #32]	@ (8001e90 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a07      	ldr	r2, [pc, #28]	@ (8001e90 <HAL_Init+0x40>)
 8001e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f000 fbb1 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f000 f808 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e84:	f7ff fc90 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <HAL_InitTick+0x54>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_InitTick+0x58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fbc9 	bl	800264a <HAL_SYSTICK_Config>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00e      	b.n	8001ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d80a      	bhi.n	8001ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f000 fb91 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	@ (8001ef0 <HAL_InitTick+0x5c>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000004 	.word	0x20000004

08001ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_IncTick+0x20>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_IncTick+0x24>)
 8001f06:	6013      	str	r3, [r2, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008
 8001f18:	200003f4 	.word	0x200003f4

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	200003f4 	.word	0x200003f4

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d005      	beq.n	8001f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_Delay+0x44>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5a:	bf00      	nop
 8001f5c:	f7ff ffde 	bl	8001f1c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d8f7      	bhi.n	8001f5c <HAL_Delay+0x28>
  {
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008

08001f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e033      	b.n	8001ffa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fb3a 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f93a 	bl	8002248 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fea:	e001      	b.n	8001ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e105      	b.n	800222c <HAL_ADC_ConfigChannel+0x228>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d925      	bls.n	800207c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68d9      	ldr	r1, [r3, #12]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	4603      	mov	r3, r0
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4403      	add	r3, r0
 800206e:	3b1e      	subs	r3, #30
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e022      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	2207      	movs	r2, #7
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4403      	add	r3, r0
 80020b8:	409a      	lsls	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d824      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b05      	subs	r3, #5
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b05      	subs	r3, #5
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	@ 0x34
 8002112:	e04c      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d824      	bhi.n	8002166 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b23      	subs	r3, #35	@ 0x23
 800212e:	221f      	movs	r2, #31
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	@ 0x23
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
 8002164:	e023      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b41      	subs	r3, #65	@ 0x41
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b41      	subs	r3, #65	@ 0x41
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <HAL_ADC_ConfigChannel+0x234>)
 80021b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <HAL_ADC_ConfigChannel+0x238>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1cc>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_ADC_ConfigChannel+0x238>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d123      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b10      	cmp	r3, #16
 80021e0:	d003      	beq.n	80021ea <HAL_ADC_ConfigChannel+0x1e6>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b11      	cmp	r3, #17
 80021e8:	d11b      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d111      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021fe:	4b10      	ldr	r3, [pc, #64]	@ (8002240 <HAL_ADC_ConfigChannel+0x23c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_ADC_ConfigChannel+0x240>)
 8002204:	fba2 2303 	umull	r2, r3, r2, r3
 8002208:	0c9a      	lsrs	r2, r3, #18
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40012300 	.word	0x40012300
 800223c:	40012000 	.word	0x40012000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002250:	4b79      	ldr	r3, [pc, #484]	@ (8002438 <ADC_Init+0x1f0>)
 8002252:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800227c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6859      	ldr	r1, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	021a      	lsls	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6899      	ldr	r1, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	4a58      	ldr	r2, [pc, #352]	@ (800243c <ADC_Init+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d022      	beq.n	8002326 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6899      	ldr	r1, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e00f      	b.n	8002346 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0202 	bic.w	r2, r2, #2
 8002354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7e1b      	ldrb	r3, [r3, #24]
 8002360:	005a      	lsls	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002382:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	3b01      	subs	r3, #1
 80023a0:	035a      	lsls	r2, r3, #13
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	e007      	b.n	80023bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	051a      	lsls	r2, r3, #20
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023fe:	025a      	lsls	r2, r3, #9
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6899      	ldr	r1, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	029a      	lsls	r2, r3, #10
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40012300 	.word	0x40012300
 800243c:	0f000001 	.word	0x0f000001

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	@ (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff3e 	bl	8002488 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff8e 	bl	8002534 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5d 	bl	80024e0 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff31 	bl	80024a4 <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff fc54 	bl	8001f1c <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e099      	b.n	80027b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a0:	e00f      	b.n	80026c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026a2:	f7ff fc3b 	bl	8001f1c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d908      	bls.n	80026c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2203      	movs	r2, #3
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e078      	b.n	80027b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e8      	bne.n	80026a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4b38      	ldr	r3, [pc, #224]	@ (80027bc <HAL_DMA_Init+0x158>)
 80026dc:	4013      	ands	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0307 	bic.w	r3, r3, #7
 8002742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	2b04      	cmp	r3, #4
 8002754:	d117      	bne.n	8002786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fb1b 	bl	8002da4 <DMA_CheckFifoParam>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2240      	movs	r2, #64	@ 0x40
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002782:	2301      	movs	r3, #1
 8002784:	e016      	b.n	80027b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fad2 	bl	8002d38 <DMA_CalcBaseAndBitshift>
 8002794:	4603      	mov	r3, r0
 8002796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	223f      	movs	r2, #63	@ 0x3f
 800279e:	409a      	lsls	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	f010803f 	.word	0xf010803f

080027c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_DMA_Start_IT+0x26>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e040      	b.n	8002868 <HAL_DMA_Start_IT+0xa8>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d12f      	bne.n	800285a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2202      	movs	r2, #2
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fa64 	bl	8002cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	223f      	movs	r2, #63	@ 0x3f
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0216 	orr.w	r2, r2, #22
 800282e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0208 	orr.w	r2, r2, #8
 8002846:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e005      	b.n	8002866 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800287e:	f7ff fb4d 	bl	8001f1c <HAL_GetTick>
 8002882:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d008      	beq.n	80028a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e052      	b.n	8002948 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0216 	bic.w	r2, r2, #22
 80028b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_DMA_Abort+0x62>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0208 	bic.w	r2, r2, #8
 80028e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f2:	e013      	b.n	800291c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f4:	f7ff fb12 	bl	8001f1c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d90c      	bls.n	800291c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2203      	movs	r2, #3
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e015      	b.n	8002948 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e4      	bne.n	80028f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	223f      	movs	r2, #63	@ 0x3f
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d004      	beq.n	800296e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2280      	movs	r2, #128	@ 0x80
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00c      	b.n	8002988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2205      	movs	r2, #5
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029a0:	4b8e      	ldr	r3, [pc, #568]	@ (8002bdc <HAL_DMA_IRQHandler+0x248>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a8e      	ldr	r2, [pc, #568]	@ (8002be0 <HAL_DMA_IRQHandler+0x24c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	2208      	movs	r2, #8
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01a      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ec:	2208      	movs	r2, #8
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	2204      	movs	r2, #4
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	2210      	movs	r2, #16
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d043      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03c      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a8e:	2210      	movs	r2, #16
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e01f      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
 8002ad4:	e016      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0208 	bic.w	r2, r2, #8
 8002af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b08:	2220      	movs	r2, #32
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 808f 	beq.w	8002c34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8087 	beq.w	8002c34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d136      	bne.n	8002bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x1da>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	223f      	movs	r2, #63	@ 0x3f
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d07e      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
        }
        return;
 8002baa:	e079      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10d      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d031      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e02c      	b.n	8002c34 <HAL_DMA_IRQHandler+0x2a0>
 8002bda:	bf00      	nop
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d023      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e01e      	b.n	8002c34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10f      	bne.n	8002c24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0210 	bic.w	r2, r2, #16
 8002c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d032      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d307      	bcc.n	8002c7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f2      	bne.n	8002c60 <HAL_DMA_IRQHandler+0x2cc>
 8002c7a:	e000      	b.n	8002c7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
 8002c9e:	e000      	b.n	8002ca2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ca0:	bf00      	nop
    }
  }
}
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b40      	cmp	r3, #64	@ 0x40
 8002d08:	d108      	bne.n	8002d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d1a:	e007      	b.n	8002d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3b10      	subs	r3, #16
 8002d48:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <DMA_CalcBaseAndBitshift+0x64>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4413      	add	r3, r2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d909      	bls.n	8002d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d6e:	f023 0303 	bic.w	r3, r3, #3
 8002d72:	1d1a      	adds	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d78:	e007      	b.n	8002d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	aaaaaaab 	.word	0xaaaaaaab
 8002da0:	080095dc 	.word	0x080095dc

08002da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d11f      	bne.n	8002dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d856      	bhi.n	8002e72 <DMA_CheckFifoParam+0xce>
 8002dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002dcc <DMA_CheckFifoParam+0x28>)
 8002dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dca:	bf00      	nop
 8002dcc:	08002ddd 	.word	0x08002ddd
 8002dd0:	08002def 	.word	0x08002def
 8002dd4:	08002ddd 	.word	0x08002ddd
 8002dd8:	08002e73 	.word	0x08002e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d046      	beq.n	8002e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e043      	b.n	8002e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002df6:	d140      	bne.n	8002e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dfc:	e03d      	b.n	8002e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e06:	d121      	bne.n	8002e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d837      	bhi.n	8002e7e <DMA_CheckFifoParam+0xda>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <DMA_CheckFifoParam+0x70>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e2b 	.word	0x08002e2b
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002e3d 	.word	0x08002e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e030      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d025      	beq.n	8002e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e3a:	e022      	b.n	8002e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e44:	d11f      	bne.n	8002e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e4a:	e01c      	b.n	8002e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d903      	bls.n	8002e5a <DMA_CheckFifoParam+0xb6>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d003      	beq.n	8002e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e58:	e018      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e5e:	e015      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00e      	beq.n	8002e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e00b      	b.n	8002e8a <DMA_CheckFifoParam+0xe6>
      break;
 8002e72:	bf00      	nop
 8002e74:	e00a      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e76:	bf00      	nop
 8002e78:	e008      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
 8002e7c:	e006      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7e:	bf00      	nop
 8002e80:	e004      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e82:	bf00      	nop
 8002e84:	e002      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <DMA_CheckFifoParam+0xe8>
      break;
 8002e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e159      	b.n	800316c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8148 	bne.w	8003166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80a2 	beq.w	8003166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b57      	ldr	r3, [pc, #348]	@ (8003184 <HAL_GPIO_Init+0x2e8>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4a56      	ldr	r2, [pc, #344]	@ (8003184 <HAL_GPIO_Init+0x2e8>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003030:	6453      	str	r3, [r2, #68]	@ 0x44
 8003032:	4b54      	ldr	r3, [pc, #336]	@ (8003184 <HAL_GPIO_Init+0x2e8>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a52      	ldr	r2, [pc, #328]	@ (8003188 <HAL_GPIO_Init+0x2ec>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a49      	ldr	r2, [pc, #292]	@ (800318c <HAL_GPIO_Init+0x2f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_Init+0x202>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a48      	ldr	r2, [pc, #288]	@ (8003190 <HAL_GPIO_Init+0x2f4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0x1fe>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a47      	ldr	r2, [pc, #284]	@ (8003194 <HAL_GPIO_Init+0x2f8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_Init+0x1fa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a46      	ldr	r2, [pc, #280]	@ (8003198 <HAL_GPIO_Init+0x2fc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_Init+0x1f6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a45      	ldr	r2, [pc, #276]	@ (800319c <HAL_GPIO_Init+0x300>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_Init+0x1f2>
 800308a:	2304      	movs	r3, #4
 800308c:	e008      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800308e:	2307      	movs	r3, #7
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 8003092:	2303      	movs	r3, #3
 8003094:	e004      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 8003096:	2302      	movs	r3, #2
 8003098:	e002      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_GPIO_Init+0x204>
 800309e:	2300      	movs	r3, #0
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f002 0203 	and.w	r2, r2, #3
 80030a6:	0092      	lsls	r2, r2, #2
 80030a8:	4093      	lsls	r3, r2
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b0:	4935      	ldr	r1, [pc, #212]	@ (8003188 <HAL_GPIO_Init+0x2ec>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	3302      	adds	r3, #2
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b38      	ldr	r3, [pc, #224]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a2f      	ldr	r2, [pc, #188]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b2d      	ldr	r3, [pc, #180]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a24      	ldr	r2, [pc, #144]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003112:	4b23      	ldr	r3, [pc, #140]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003136:	4a1a      	ldr	r2, [pc, #104]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313c:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003160:	4a0f      	ldr	r2, [pc, #60]	@ (80031a0 <HAL_GPIO_Init+0x304>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	f67f aea2 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3724      	adds	r7, #36	@ 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	40013800 	.word	0x40013800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400
 8003194:	40020800 	.word	0x40020800
 8003198:	40020c00 	.word	0x40020c00
 800319c:	40021000 	.word	0x40021000
 80031a0:	40013c00 	.word	0x40013c00

080031a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
 80031b0:	4613      	mov	r3, r2
 80031b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b4:	787b      	ldrb	r3, [r7, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ba:	887a      	ldrh	r2, [r7, #2]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c0:	e003      	b.n	80031ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	041a      	lsls	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	619a      	str	r2, [r3, #24]
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e12b      	b.n	8003442 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fb82 	bl	8000908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	@ 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800322a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800323a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800323c:	f002 fe7c 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8003240:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4a81      	ldr	r2, [pc, #516]	@ (800344c <HAL_I2C_Init+0x274>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <HAL_I2C_Init+0x84>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a80      	ldr	r2, [pc, #512]	@ (8003450 <HAL_I2C_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	bf94      	ite	ls
 8003254:	2301      	movls	r3, #1
 8003256:	2300      	movhi	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e006      	b.n	800326a <HAL_I2C_Init+0x92>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a7d      	ldr	r2, [pc, #500]	@ (8003454 <HAL_I2C_Init+0x27c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0e7      	b.n	8003442 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a78      	ldr	r2, [pc, #480]	@ (8003458 <HAL_I2C_Init+0x280>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9b      	lsrs	r3, r3, #18
 800327c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a6a      	ldr	r2, [pc, #424]	@ (800344c <HAL_I2C_Init+0x274>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d802      	bhi.n	80032ac <HAL_I2C_Init+0xd4>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	3301      	adds	r3, #1
 80032aa:	e009      	b.n	80032c0 <HAL_I2C_Init+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a69      	ldr	r2, [pc, #420]	@ (800345c <HAL_I2C_Init+0x284>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	430b      	orrs	r3, r1
 80032c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	495c      	ldr	r1, [pc, #368]	@ (800344c <HAL_I2C_Init+0x274>)
 80032dc:	428b      	cmp	r3, r1
 80032de:	d819      	bhi.n	8003314 <HAL_I2C_Init+0x13c>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e59      	subs	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032f4:	400b      	ands	r3, r1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_I2C_Init+0x138>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1e59      	subs	r1, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fbb1 f3f3 	udiv	r3, r1, r3
 8003308:	3301      	adds	r3, #1
 800330a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330e:	e051      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003310:	2304      	movs	r3, #4
 8003312:	e04f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d111      	bne.n	8003340 <HAL_I2C_Init+0x168>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e012      	b.n	8003366 <HAL_I2C_Init+0x18e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1e58      	subs	r0, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	0099      	lsls	r1, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Init+0x196>
 800336a:	2301      	movs	r3, #1
 800336c:	e022      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <HAL_I2C_Init+0x1bc>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e58      	subs	r0, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	440b      	add	r3, r1
 8003384:	fbb0 f3f3 	udiv	r3, r0, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003392:	e00f      	b.n	80033b4 <HAL_I2C_Init+0x1dc>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1e58      	subs	r0, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	0099      	lsls	r1, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	6809      	ldr	r1, [r1, #0]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6911      	ldr	r1, [r2, #16]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68d2      	ldr	r2, [r2, #12]
 80033ee:	4311      	orrs	r1, r2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	430b      	orrs	r3, r1
 80033f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	000186a0 	.word	0x000186a0
 8003450:	001e847f 	.word	0x001e847f
 8003454:	003d08ff 	.word	0x003d08ff
 8003458:	431bde83 	.word	0x431bde83
 800345c:	10624dd3 	.word	0x10624dd3

08003460 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d103      	bne.n	800347e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  }
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	461a      	mov	r2, r3
 8003498:	460b      	mov	r3, r1
 800349a:	817b      	strh	r3, [r7, #10]
 800349c:	4613      	mov	r3, r2
 800349e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	f040 8109 	bne.w	80036c4 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80034b2:	4b87      	ldr	r3, [pc, #540]	@ (80036d0 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	08db      	lsrs	r3, r3, #3
 80034b8:	4a86      	ldr	r2, [pc, #536]	@ (80036d4 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0a1a      	lsrs	r2, r3, #8
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d112      	bne.n	80034fe <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e0e3      	b.n	80036c6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d0df      	beq.n	80034cc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2C_Master_Transmit_DMA+0x8e>
 8003516:	2302      	movs	r3, #2
 8003518:	e0d5      	b.n	80036c6 <HAL_I2C_Master_Transmit_DMA+0x23a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d007      	beq.n	8003540 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2221      	movs	r2, #33	@ 0x21
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2210      	movs	r2, #16
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	893a      	ldrh	r2, [r7, #8]
 8003570:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003580:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003582:	897a      	ldrh	r2, [r7, #10]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d07b      	beq.n	8003688 <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003594:	2b00      	cmp	r3, #0
 8003596:	d02a      	beq.n	80035ee <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359c:	4a4f      	ldr	r2, [pc, #316]	@ (80036dc <HAL_I2C_Master_Transmit_DMA+0x250>)
 800359e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a4:	4a4e      	ldr	r2, [pc, #312]	@ (80036e0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80035a6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ac:	2200      	movs	r2, #0
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	2200      	movs	r2, #0
 80035be:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c4:	2200      	movs	r2, #0
 80035c6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	4619      	mov	r1, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	3310      	adds	r3, #16
 80035d8:	461a      	mov	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	f7ff f8ef 	bl	80027c0 <HAL_DMA_Start_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d139      	bne.n	8003660 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 80035ec:	e013      	b.n	8003616 <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e057      	b.n	80036c6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800362c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800363c:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800364c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e02f      	b.n	80036c0 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0210 	orr.w	r2, r3, #16
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01e      	b.n	80036c6 <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003696:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80036be:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000
 80036d4:	14f8b589 	.word	0x14f8b589
 80036d8:	ffff0000 	.word	0xffff0000
 80036dc:	08005119 	.word	0x08005119
 80036e0:	080052d7 	.word	0x080052d7

080036e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08a      	sub	sp, #40	@ 0x28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	460b      	mov	r3, r1
 80036f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80036f4:	f7fe fc12 	bl	8001f1c <HAL_GetTick>
 80036f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	f040 8111 	bne.w	800392e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2319      	movs	r3, #25
 8003712:	2201      	movs	r2, #1
 8003714:	4988      	ldr	r1, [pc, #544]	@ (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 fec2 	bl	80054a0 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
 8003724:	e104      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_I2C_IsDeviceReady+0x50>
 8003730:	2302      	movs	r3, #2
 8003732:	e0fd      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d007      	beq.n	800375a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2224      	movs	r2, #36	@ 0x24
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a70      	ldr	r2, [pc, #448]	@ (800393c <HAL_I2C_IsDeviceReady+0x258>)
 800377c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800378c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f001 fe80 	bl	80054a0 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b4:	d103      	bne.n	80037be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0b6      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037d2:	f7fe fba3 	bl	8001f1c <HAL_GetTick>
 80037d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003806:	e025      	b.n	8003854 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe fb88 	bl	8001f1c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <HAL_I2C_IsDeviceReady+0x13a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22a0      	movs	r2, #160	@ 0xa0
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2ba0      	cmp	r3, #160	@ 0xa0
 800385e:	d005      	beq.n	800386c <HAL_I2C_IsDeviceReady+0x188>
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_I2C_IsDeviceReady+0x188>
 8003866:	7dbb      	ldrb	r3, [r7, #22]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0cd      	beq.n	8003808 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d129      	bne.n	80038d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003890:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	4921      	ldr	r1, [pc, #132]	@ (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f001 fdf4 	bl	80054a0 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e036      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e02c      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2319      	movs	r3, #25
 80038f6:	2201      	movs	r2, #1
 80038f8:	490f      	ldr	r1, [pc, #60]	@ (8003938 <HAL_I2C_IsDeviceReady+0x254>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f001 fdd0 	bl	80054a0 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e012      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3301      	adds	r3, #1
 800390e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	f4ff af32 	bcc.w	800377e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000

08003940 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003960:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003968:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b10      	cmp	r3, #16
 800396e:	d003      	beq.n	8003978 <HAL_I2C_EV_IRQHandler+0x38>
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b40      	cmp	r3, #64	@ 0x40
 8003974:	f040 80b1 	bne.w	8003ada <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_I2C_EV_IRQHandler+0x6e>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003998:	d003      	beq.n	80039a2 <HAL_I2C_EV_IRQHandler+0x62>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80039a0:	d101      	bne.n	80039a6 <HAL_I2C_EV_IRQHandler+0x66>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x68>
 80039a6:	2300      	movs	r3, #0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f000 8114 	beq.w	8003bd6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x90>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 fe18 	bl	80055f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fd88 	bl	80044de <I2C_Master_SB>
 80039ce:	e083      	b.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xac>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fe00 	bl	80045ea <I2C_Master_ADD10>
 80039ea:	e075      	b.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0xc8>
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fe1c 	bl	800463e <I2C_Master_ADDR>
 8003a06:	e067      	b.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d036      	beq.n	8003a80 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a20:	f000 80db 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x10a>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x10a>
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9e4 	bl	8003e10 <I2C_MasterTransmit_TXE>
 8003a48:	e046      	b.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80c2 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80bc 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a62:	7bbb      	ldrb	r3, [r7, #14]
 8003a64:	2b21      	cmp	r3, #33	@ 0x21
 8003a66:	d103      	bne.n	8003a70 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa6d 	bl	8003f48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6e:	e0b4      	b.n	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
 8003a72:	2b40      	cmp	r3, #64	@ 0x40
 8003a74:	f040 80b1 	bne.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fadb 	bl	8004034 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	e0ac      	b.n	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a8e:	f000 80a4 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <HAL_I2C_EV_IRQHandler+0x178>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <HAL_I2C_EV_IRQHandler+0x178>
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fb57 	bl	8004164 <I2C_MasterReceive_RXNE>
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 808b 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 8085 	beq.w	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fc0f 	bl	80042f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad6:	e080      	b.n	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
 8003ad8:	e07f      	b.n	8003bda <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e007      	b.n	8003afc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d011      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x1ea>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00c      	beq.n	8003b2a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 ffda 	bl	8004adc <I2C_Slave_ADDR>
 8003b28:	e05a      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x206>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f001 f814 	bl	8004b6c <I2C_Slave_STOPF>
 8003b44:	e04c      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b46:	7bbb      	ldrb	r3, [r7, #14]
 8003b48:	2b21      	cmp	r3, #33	@ 0x21
 8003b4a:	d002      	beq.n	8003b52 <HAL_I2C_EV_IRQHandler+0x212>
 8003b4c:	7bbb      	ldrb	r3, [r7, #14]
 8003b4e:	2b29      	cmp	r3, #41	@ 0x29
 8003b50:	d120      	bne.n	8003b94 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_I2C_EV_IRQHandler+0x238>
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <HAL_I2C_EV_IRQHandler+0x238>
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fef5 	bl	8004960 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b76:	e032      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d02d      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0x29e>
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d028      	beq.n	8003bde <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 ff24 	bl	80049da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b92:	e024      	b.n	8003bde <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x27a>
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0x27a>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ff32 	bl	8004a1c <I2C_SlaveReceive_RXNE>
 8003bb8:	e012      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d008      	beq.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 ff62 	bl	8004a98 <I2C_SlaveReceive_BTF>
 8003bd4:	e004      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bde:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08a      	sub	sp, #40	@ 0x28
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c08:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_I2C_ER_IRQHandler+0x4a>
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c2e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x70>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	f043 0302 	orr.w	r3, r3, #2
 8003c4a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003c54:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03e      	beq.n	8003cde <HAL_I2C_ER_IRQHandler+0xf8>
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d039      	beq.n	8003cde <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003c6a:	7efb      	ldrb	r3, [r7, #27]
 8003c6c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c7c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003c84:	7ebb      	ldrb	r3, [r7, #26]
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d112      	bne.n	8003cb0 <HAL_I2C_ER_IRQHandler+0xca>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_I2C_ER_IRQHandler+0xca>
 8003c90:	7cfb      	ldrb	r3, [r7, #19]
 8003c92:	2b21      	cmp	r3, #33	@ 0x21
 8003c94:	d008      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c96:	7cfb      	ldrb	r3, [r7, #19]
 8003c98:	2b29      	cmp	r3, #41	@ 0x29
 8003c9a:	d005      	beq.n	8003ca8 <HAL_I2C_ER_IRQHandler+0xc2>
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b28      	cmp	r3, #40	@ 0x28
 8003ca0:	d106      	bne.n	8003cb0 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b21      	cmp	r3, #33	@ 0x21
 8003ca6:	d103      	bne.n	8003cb0 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f001 f88f 	bl	8004dcc <I2C_Slave_AF>
 8003cae:	e016      	b.n	8003cde <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cc2:	7efb      	ldrb	r3, [r7, #27]
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d002      	beq.n	8003cce <HAL_I2C_ER_IRQHandler+0xe8>
 8003cc8:	7efb      	ldrb	r3, [r7, #27]
 8003cca:	2b40      	cmp	r3, #64	@ 0x40
 8003ccc:	d107      	bne.n	8003cde <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cdc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00d      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x11e>
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003d02:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 f8cc 	bl	8004eb4 <I2C_ITError>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3728      	adds	r7, #40	@ 0x28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
 8003d80:	4613      	mov	r3, r2
 8003d82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	b2db      	uxtb	r3, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d150      	bne.n	8003ed8 <I2C_MasterTransmit_TXE+0xc8>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b21      	cmp	r3, #33	@ 0x21
 8003e3a:	d14d      	bne.n	8003ed8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d01d      	beq.n	8003e7e <I2C_MasterTransmit_TXE+0x6e>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d01a      	beq.n	8003e7e <I2C_MasterTransmit_TXE+0x6e>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e4e:	d016      	beq.n	8003e7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2211      	movs	r2, #17
 8003e64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff ff54 	bl	8003d24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e7c:	e060      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	d107      	bne.n	8003ec8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff6f 	bl	8003da4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ec6:	e03b      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff27 	bl	8003d24 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ed6:	e033      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b21      	cmp	r3, #33	@ 0x21
 8003edc:	d005      	beq.n	8003eea <I2C_MasterTransmit_TXE+0xda>
 8003ede:	7bbb      	ldrb	r3, [r7, #14]
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d12d      	bne.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	2b22      	cmp	r3, #34	@ 0x22
 8003ee8:	d12a      	bne.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d108      	bne.n	8003f06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f04:	e01c      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b40      	cmp	r3, #64	@ 0x40
 8003f10:	d103      	bne.n	8003f1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f88e 	bl	8004034 <I2C_MemoryTransmit_TXE_BTF>
}
 8003f18:	e012      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f3e:	e7ff      	b.n	8003f40 <I2C_MasterTransmit_TXE+0x130>
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b21      	cmp	r3, #33	@ 0x21
 8003f60:	d164      	bne.n	800402c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d012      	beq.n	8003f92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f70:	781a      	ldrb	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f90:	e04c      	b.n	800402c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d01d      	beq.n	8003fd4 <I2C_MasterTransmit_BTF+0x8c>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d01a      	beq.n	8003fd4 <I2C_MasterTransmit_BTF+0x8c>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa4:	d016      	beq.n	8003fd4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fb4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2211      	movs	r2, #17
 8003fba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fea9 	bl	8003d24 <HAL_I2C_MasterTxCpltCallback>
}
 8003fd2:	e02b      	b.n	800402c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fe2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b40      	cmp	r3, #64	@ 0x40
 800400c:	d107      	bne.n	800401e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fec4 	bl	8003da4 <HAL_I2C_MemTxCpltCallback>
}
 800401c:	e006      	b.n	800402c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fe7c 	bl	8003d24 <HAL_I2C_MasterTxCpltCallback>
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004042:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004048:	2b00      	cmp	r3, #0
 800404a:	d11d      	bne.n	8004088 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10b      	bne.n	800406c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	b2da      	uxtb	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800406a:	e077      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004070:	b29b      	uxth	r3, r3
 8004072:	121b      	asrs	r3, r3, #8
 8004074:	b2da      	uxtb	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004086:	e069      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10b      	bne.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040a6:	e059      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d152      	bne.n	8004156 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b22      	cmp	r3, #34	@ 0x22
 80040b4:	d10d      	bne.n	80040d2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040d0:	e044      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b21      	cmp	r3, #33	@ 0x21
 80040e0:	d112      	bne.n	8004108 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	781a      	ldrb	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004106:	e029      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d124      	bne.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b21      	cmp	r3, #33	@ 0x21
 8004116:	d121      	bne.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004126:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004136:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff fe28 	bl	8003da4 <HAL_I2C_MemTxCpltCallback>
}
 8004154:	e002      	b.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff f982 	bl	8003460 <I2C_Flush_DR>
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b22      	cmp	r3, #34	@ 0x22
 8004176:	f040 80b9 	bne.w	80042ec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d921      	bls.n	80041d2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	f040 8096 	bne.w	80042ec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80041d0:	e08c      	b.n	80042ec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d07f      	beq.n	80042da <I2C_MasterReceive_RXNE+0x176>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d002      	beq.n	80041e6 <I2C_MasterReceive_RXNE+0x82>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d179      	bne.n	80042da <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f001 f9d4 	bl	8005594 <I2C_WaitOnSTOPRequestThroughIT>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d14c      	bne.n	800428c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004200:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004210:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b40      	cmp	r3, #64	@ 0x40
 800424a:	d10a      	bne.n	8004262 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fdac 	bl	8003db8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004260:	e044      	b.n	80042ec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d002      	beq.n	8004276 <I2C_MasterReceive_RXNE+0x112>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b20      	cmp	r3, #32
 8004274:	d103      	bne.n	800427e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30
 800427c:	e002      	b.n	8004284 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2212      	movs	r2, #18
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fd57 	bl	8003d38 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800428a:	e02f      	b.n	80042ec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800429a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fd7a 	bl	8003dcc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80042d8:	e008      	b.n	80042ec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e8:	605a      	str	r2, [r3, #4]
}
 80042ea:	e7ff      	b.n	80042ec <I2C_MasterReceive_RXNE+0x188>
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004342:	e0c8      	b.n	80044d6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b03      	cmp	r3, #3
 800434c:	d129      	bne.n	80043a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800435c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b04      	cmp	r3, #4
 8004362:	d00a      	beq.n	800437a <I2C_MasterReceive_BTF+0x86>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d007      	beq.n	800437a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004378:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043a0:	e099      	b.n	80044d6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	f040 8081 	bne.w	80044b0 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <I2C_MasterReceive_BTF+0xc6>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d108      	bne.n	80043cc <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e019      	b.n	8004400 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d002      	beq.n	80043d8 <I2C_MasterReceive_BTF+0xe4>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d108      	bne.n	80043ea <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e00a      	b.n	8004400 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d007      	beq.n	8004400 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800445a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d10a      	bne.n	8004486 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff fc9a 	bl	8003db8 <HAL_I2C_MemRxCpltCallback>
}
 8004484:	e027      	b.n	80044d6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d002      	beq.n	800449a <I2C_MasterReceive_BTF+0x1a6>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b20      	cmp	r3, #32
 8004498:	d103      	bne.n	80044a2 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
 80044a0:	e002      	b.n	80044a8 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2212      	movs	r2, #18
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fc45 	bl	8003d38 <HAL_I2C_MasterRxCpltCallback>
}
 80044ae:	e012      	b.n	80044d6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d117      	bne.n	8004522 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	461a      	mov	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800450a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800450c:	e067      	b.n	80045de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	b2da      	uxtb	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]
}
 8004520:	e05d      	b.n	80045de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800452a:	d133      	bne.n	8004594 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b21      	cmp	r3, #33	@ 0x21
 8004536:	d109      	bne.n	800454c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004548:	611a      	str	r2, [r3, #16]
 800454a:	e008      	b.n	800455e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004562:	2b00      	cmp	r3, #0
 8004564:	d004      	beq.n	8004570 <I2C_Master_SB+0x92>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d108      	bne.n	8004582 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d032      	beq.n	80045de <I2C_Master_SB+0x100>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d02d      	beq.n	80045de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004590:	605a      	str	r2, [r3, #4]
}
 8004592:	e024      	b.n	80045de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10e      	bne.n	80045ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	11db      	asrs	r3, r3, #7
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0306 	and.w	r3, r3, #6
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f063 030f 	orn	r3, r3, #15
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]
}
 80045b8:	e011      	b.n	80045de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10d      	bne.n	80045de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	11db      	asrs	r3, r3, #7
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0306 	and.w	r3, r3, #6
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f063 030e 	orn	r3, r3, #14
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004602:	2b00      	cmp	r3, #0
 8004604:	d004      	beq.n	8004610 <I2C_Master_ADD10+0x26>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00c      	beq.n	8004632 <I2C_Master_ADD10+0x48>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004630:	605a      	str	r2, [r3, #4]
  }
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800463e:	b480      	push	{r7}
 8004640:	b091      	sub	sp, #68	@ 0x44
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800464c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b22      	cmp	r3, #34	@ 0x22
 8004666:	f040 8169 	bne.w	800493c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10f      	bne.n	8004692 <I2C_Master_ADDR+0x54>
 8004672:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004676:	2b40      	cmp	r3, #64	@ 0x40
 8004678:	d10b      	bne.n	8004692 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467a:	2300      	movs	r3, #0
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	633b      	str	r3, [r7, #48]	@ 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	633b      	str	r3, [r7, #48]	@ 0x30
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	e160      	b.n	8004954 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11d      	bne.n	80046d6 <I2C_Master_ADDR+0x98>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80046a2:	d118      	bne.n	80046d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a4:	2300      	movs	r3, #0
 80046a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80046d4:	e13e      	b.n	8004954 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d113      	bne.n	8004708 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	e115      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 808a 	bne.w	8004828 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800471a:	d137      	bne.n	800478c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800472a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d113      	bne.n	8004764 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	e0e7      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004764:	2300      	movs	r3, #0
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e0d3      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	2b08      	cmp	r3, #8
 8004790:	d02e      	beq.n	80047f0 <I2C_Master_ADDR+0x1b2>
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	2b20      	cmp	r3, #32
 8004796:	d02b      	beq.n	80047f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800479a:	2b12      	cmp	r3, #18
 800479c:	d102      	bne.n	80047a4 <I2C_Master_ADDR+0x166>
 800479e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d125      	bne.n	80047f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d00e      	beq.n	80047c8 <I2C_Master_ADDR+0x18a>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d00b      	beq.n	80047c8 <I2C_Master_ADDR+0x18a>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d008      	beq.n	80047c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e007      	b.n	80047d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	e0a1      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e085      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d14d      	bne.n	80048ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	2b04      	cmp	r3, #4
 8004836:	d016      	beq.n	8004866 <I2C_Master_ADDR+0x228>
 8004838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483a:	2b02      	cmp	r3, #2
 800483c:	d013      	beq.n	8004866 <I2C_Master_ADDR+0x228>
 800483e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004840:	2b10      	cmp	r3, #16
 8004842:	d010      	beq.n	8004866 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004852:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e007      	b.n	8004876 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004874:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004884:	d117      	bne.n	80048b6 <I2C_Master_ADDR+0x278>
 8004886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800488c:	d00b      	beq.n	80048a6 <I2C_Master_ADDR+0x268>
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	2b01      	cmp	r3, #1
 8004892:	d008      	beq.n	80048a6 <I2C_Master_ADDR+0x268>
 8004894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004896:	2b08      	cmp	r3, #8
 8004898:	d005      	beq.n	80048a6 <I2C_Master_ADDR+0x268>
 800489a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489c:	2b10      	cmp	r3, #16
 800489e:	d002      	beq.n	80048a6 <I2C_Master_ADDR+0x268>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d107      	bne.n	80048b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80048b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	e032      	b.n	8004934 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d117      	bne.n	800491e <I2C_Master_ADDR+0x2e0>
 80048ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048f4:	d00b      	beq.n	800490e <I2C_Master_ADDR+0x2d0>
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d008      	beq.n	800490e <I2C_Master_ADDR+0x2d0>
 80048fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d005      	beq.n	800490e <I2C_Master_ADDR+0x2d0>
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2b10      	cmp	r3, #16
 8004906:	d002      	beq.n	800490e <I2C_Master_ADDR+0x2d0>
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2b20      	cmp	r3, #32
 800490c:	d107      	bne.n	800491e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800491c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800493a:	e00b      	b.n	8004954 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
}
 8004952:	e7ff      	b.n	8004954 <I2C_Master_ADDR+0x316>
 8004954:	bf00      	nop
 8004956:	3744      	adds	r7, #68	@ 0x44
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02b      	beq.n	80049d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d114      	bne.n	80049d2 <I2C_SlaveTransmit_TXE+0x72>
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b29      	cmp	r3, #41	@ 0x29
 80049ac:	d111      	bne.n	80049d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2221      	movs	r2, #33	@ 0x21
 80049c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2228      	movs	r2, #40	@ 0x28
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff f9bd 	bl	8003d4c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d011      	beq.n	8004a10 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02c      	beq.n	8004a90 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d114      	bne.n	8004a90 <I2C_SlaveReceive_RXNE+0x74>
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a6a:	d111      	bne.n	8004a90 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2222      	movs	r2, #34	@ 0x22
 8004a80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2228      	movs	r2, #40	@ 0x28
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff f968 	bl	8003d60 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d012      	beq.n	8004ad0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004af6:	2b28      	cmp	r3, #40	@ 0x28
 8004af8:	d125      	bne.n	8004b46 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	81bb      	strh	r3, [r7, #12]
 8004b28:	e002      	b.n	8004b30 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b38:	89ba      	ldrh	r2, [r7, #12]
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff f918 	bl	8003d74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b44:	e00e      	b.n	8004b64 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bc8:	d172      	bne.n	8004cb0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b22      	cmp	r3, #34	@ 0x22
 8004bce:	d002      	beq.n	8004bd6 <I2C_Slave_STOPF+0x6a>
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bd4:	d135      	bne.n	8004c42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf2:	f043 0204 	orr.w	r2, r3, #4
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe f84a 	bl	8002ca8 <HAL_DMA_GetState>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d049      	beq.n	8004cae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	4a69      	ldr	r2, [pc, #420]	@ (8004dc4 <I2C_Slave_STOPF+0x258>)
 8004c20:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd fe92 	bl	8002950 <HAL_DMA_Abort_IT>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d03d      	beq.n	8004cae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c40:	e035      	b.n	8004cae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe f814 	bl	8002ca8 <HAL_DMA_GetState>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d014      	beq.n	8004cb0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8a:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc4 <I2C_Slave_STOPF+0x258>)
 8004c8c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fd fe5c 	bl	8002950 <HAL_DMA_Abort_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
 8004cac:	e000      	b.n	8004cb0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d03e      	beq.n	8004d38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d112      	bne.n	8004cee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b40      	cmp	r3, #64	@ 0x40
 8004cfa:	d112      	bne.n	8004d22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d005      	beq.n	8004d38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f043 0204 	orr.w	r2, r3, #4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f8b7 	bl	8004eb4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d46:	e039      	b.n	8004dbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d4c:	d109      	bne.n	8004d62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2228      	movs	r2, #40	@ 0x28
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fe ffff 	bl	8003d60 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b28      	cmp	r3, #40	@ 0x28
 8004d6c:	d111      	bne.n	8004d92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a15      	ldr	r2, [pc, #84]	@ (8004dc8 <I2C_Slave_STOPF+0x25c>)
 8004d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff f800 	bl	8003d90 <HAL_I2C_ListenCpltCallback>
}
 8004d90:	e014      	b.n	8004dbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	2b22      	cmp	r3, #34	@ 0x22
 8004d98:	d002      	beq.n	8004da0 <I2C_Slave_STOPF+0x234>
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	2b22      	cmp	r3, #34	@ 0x22
 8004d9e:	d10d      	bne.n	8004dbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7fe ffd2 	bl	8003d60 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	08005351 	.word	0x08005351
 8004dc8:	ffff0000 	.word	0xffff0000

08004dcc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d002      	beq.n	8004dee <I2C_Slave_AF+0x22>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d129      	bne.n	8004e42 <I2C_Slave_AF+0x76>
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b28      	cmp	r3, #40	@ 0x28
 8004df2:	d126      	bne.n	8004e42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb0 <I2C_Slave_AF+0xe4>)
 8004df8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fe ffa8 	bl	8003d90 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e40:	e031      	b.n	8004ea6 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
 8004e44:	2b21      	cmp	r3, #33	@ 0x21
 8004e46:	d129      	bne.n	8004e9c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a19      	ldr	r2, [pc, #100]	@ (8004eb0 <I2C_Slave_AF+0xe4>)
 8004e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2221      	movs	r2, #33	@ 0x21
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fe fae6 	bl	8003460 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7fe ff59 	bl	8003d4c <HAL_I2C_SlaveTxCpltCallback>
}
 8004e9a:	e004      	b.n	8004ea6 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ea4:	615a      	str	r2, [r3, #20]
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	ffff0000 	.word	0xffff0000

08004eb4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ecc:	7bbb      	ldrb	r3, [r7, #14]
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d002      	beq.n	8004ed8 <I2C_ITError+0x24>
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b40      	cmp	r3, #64	@ 0x40
 8004ed6:	d10a      	bne.n	8004eee <I2C_ITError+0x3a>
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b22      	cmp	r3, #34	@ 0x22
 8004edc:	d107      	bne.n	8004eee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ef4:	2b28      	cmp	r3, #40	@ 0x28
 8004ef6:	d107      	bne.n	8004f08 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2228      	movs	r2, #40	@ 0x28
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f06:	e015      	b.n	8004f34 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f16:	d00a      	beq.n	8004f2e <I2C_ITError+0x7a>
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b60      	cmp	r3, #96	@ 0x60
 8004f1c:	d007      	beq.n	8004f2e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f42:	d162      	bne.n	800500a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f52:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d020      	beq.n	8004fa4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f66:	4a6a      	ldr	r2, [pc, #424]	@ (8005110 <I2C_ITError+0x25c>)
 8004f68:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fcee 	bl	8002950 <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8089 	beq.w	800508e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4798      	blx	r3
 8004fa2:	e074      	b.n	800508e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	4a59      	ldr	r2, [pc, #356]	@ (8005110 <I2C_ITError+0x25c>)
 8004faa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd fccd 	bl	8002950 <HAL_DMA_Abort_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d068      	beq.n	800508e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc6:	2b40      	cmp	r3, #64	@ 0x40
 8004fc8:	d10b      	bne.n	8004fe2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0201 	bic.w	r2, r2, #1
 8004ff0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
 8005008:	e041      	b.n	800508e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b60      	cmp	r3, #96	@ 0x60
 8005014:	d125      	bne.n	8005062 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502e:	2b40      	cmp	r3, #64	@ 0x40
 8005030:	d10b      	bne.n	800504a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0201 	bic.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe fec0 	bl	8003de0 <HAL_I2C_AbortCpltCallback>
 8005060:	e015      	b.n	800508e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506c:	2b40      	cmp	r3, #64	@ 0x40
 800506e:	d10b      	bne.n	8005088 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fe fe9f 	bl	8003dcc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10e      	bne.n	80050bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d113      	bne.n	8005108 <I2C_ITError+0x254>
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b28      	cmp	r3, #40	@ 0x28
 80050e4:	d110      	bne.n	8005108 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005114 <I2C_ITError+0x260>)
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fe fe44 	bl	8003d90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	08005351 	.word	0x08005351
 8005114:	ffff0000 	.word	0xffff0000

08005118 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005134:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800514a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	2200      	movs	r2, #0
 800516a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005172:	2b21      	cmp	r3, #33	@ 0x21
 8005174:	d007      	beq.n	8005186 <I2C_DMAXferCplt+0x6e>
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800517c:	2b22      	cmp	r3, #34	@ 0x22
 800517e:	d131      	bne.n	80051e4 <I2C_DMAXferCplt+0xcc>
 8005180:	7cbb      	ldrb	r3, [r7, #18]
 8005182:	2b20      	cmp	r3, #32
 8005184:	d12e      	bne.n	80051e4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005194:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800519c:	7cfb      	ldrb	r3, [r7, #19]
 800519e:	2b29      	cmp	r3, #41	@ 0x29
 80051a0:	d10a      	bne.n	80051b8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2221      	movs	r2, #33	@ 0x21
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2228      	movs	r2, #40	@ 0x28
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051b0:	6978      	ldr	r0, [r7, #20]
 80051b2:	f7fe fdcb 	bl	8003d4c <HAL_I2C_SlaveTxCpltCallback>
 80051b6:	e00c      	b.n	80051d2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80051bc:	d109      	bne.n	80051d2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2222      	movs	r2, #34	@ 0x22
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	2228      	movs	r2, #40	@ 0x28
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051cc:	6978      	ldr	r0, [r7, #20]
 80051ce:	f7fe fdc7 	bl	8003d60 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051e0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80051e2:	e074      	b.n	80052ce <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d06e      	beq.n	80052ce <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d107      	bne.n	800520a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005218:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005220:	d009      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d006      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800522e:	d002      	beq.n	8005236 <I2C_DMAXferCplt+0x11e>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b20      	cmp	r3, #32
 8005234:	d107      	bne.n	8005246 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005244:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005254:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005264:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005274:	6978      	ldr	r0, [r7, #20]
 8005276:	f7fe fda9 	bl	8003dcc <HAL_I2C_ErrorCallback>
}
 800527a:	e028      	b.n	80052ce <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b40      	cmp	r3, #64	@ 0x40
 800528e:	d10a      	bne.n	80052a6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7fe fd8a 	bl	8003db8 <HAL_I2C_MemRxCpltCallback>
}
 80052a4:	e013      	b.n	80052ce <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d002      	beq.n	80052ba <I2C_DMAXferCplt+0x1a2>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d103      	bne.n	80052c2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30
 80052c0:	e002      	b.n	80052c8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2212      	movs	r2, #18
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7fe fd35 	bl	8003d38 <HAL_I2C_MasterRxCpltCallback>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	2200      	movs	r2, #0
 80052f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	2200      	movs	r2, #0
 8005302:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fd fcdd 	bl	8002cc4 <HAL_DMA_GetError>
 800530a:	4603      	mov	r3, r0
 800530c:	2b02      	cmp	r3, #2
 800530e:	d01b      	beq.n	8005348 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800531e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533a:	f043 0210 	orr.w	r2, r3, #16
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7fe fd42 	bl	8003dcc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005360:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005368:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800536a:	4b4b      	ldr	r3, [pc, #300]	@ (8005498 <I2C_DMAAbort+0x148>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	4a4a      	ldr	r2, [pc, #296]	@ (800549c <I2C_DMAAbort+0x14c>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	0a1a      	lsrs	r2, r3, #8
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	00da      	lsls	r2, r3, #3
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	f043 0220 	orr.w	r2, r3, #32
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005396:	e00a      	b.n	80053ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b01      	subs	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ac:	d0ea      	beq.n	8005384 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ba:	2200      	movs	r2, #0
 80053bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	2200      	movs	r2, #0
 80053cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f0:	2200      	movs	r2, #0
 80053f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005400:	2200      	movs	r2, #0
 8005402:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b60      	cmp	r3, #96	@ 0x60
 800541e:	d10e      	bne.n	800543e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2200      	movs	r2, #0
 8005434:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005436:	6978      	ldr	r0, [r7, #20]
 8005438:	f7fe fcd2 	bl	8003de0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800543c:	e027      	b.n	800548e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005444:	2b28      	cmp	r3, #40	@ 0x28
 8005446:	d117      	bne.n	8005478 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005466:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2228      	movs	r2, #40	@ 0x28
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005476:	e007      	b.n	8005488 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f7fe fc9f 	bl	8003dcc <HAL_I2C_ErrorCallback>
}
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000000 	.word	0x20000000
 800549c:	14f8b589 	.word	0x14f8b589

080054a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b0:	e048      	b.n	8005544 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d044      	beq.n	8005544 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc fd2f 	bl	8001f1c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d139      	bne.n	8005544 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	0c1b      	lsrs	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10d      	bne.n	80054f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	43da      	mvns	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4013      	ands	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	461a      	mov	r2, r3
 80054f4:	e00c      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x70>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	429a      	cmp	r2, r3
 8005514:	d116      	bne.n	8005544 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	f043 0220 	orr.w	r2, r3, #32
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e023      	b.n	800558c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	0c1b      	lsrs	r3, r3, #16
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d10d      	bne.n	800556a <I2C_WaitOnFlagUntilTimeout+0xca>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	43da      	mvns	r2, r3
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	b29b      	uxth	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	e00c      	b.n	8005584 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	43da      	mvns	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	4013      	ands	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	429a      	cmp	r2, r3
 8005588:	d093      	beq.n	80054b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80055a0:	4b13      	ldr	r3, [pc, #76]	@ (80055f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	08db      	lsrs	r3, r3, #3
 80055a6:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	0a1a      	lsrs	r2, r3, #8
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d107      	bne.n	80055d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e008      	b.n	80055e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e0:	d0e9      	beq.n	80055b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20000000 	.word	0x20000000
 80055f4:	14f8b589 	.word	0x14f8b589

080055f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005608:	d103      	bne.n	8005612 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005610:	e007      	b.n	8005622 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800561a:	d102      	bne.n	8005622 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2208      	movs	r2, #8
 8005620:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
	...

08005630 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <HAL_PWR_EnableBkUpAccess+0x24>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005642:	687b      	ldr	r3, [r7, #4]
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	420e0020 	.word	0x420e0020
 8005654:	40007000 	.word	0x40007000

08005658 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e267      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d075      	beq.n	8005762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005676:	4b88      	ldr	r3, [pc, #544]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b04      	cmp	r3, #4
 8005680:	d00c      	beq.n	800569c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005682:	4b85      	ldr	r3, [pc, #532]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800568a:	2b08      	cmp	r3, #8
 800568c:	d112      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800568e:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800569a:	d10b      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	4b7e      	ldr	r3, [pc, #504]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d05b      	beq.n	8005760 <HAL_RCC_OscConfig+0x108>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d157      	bne.n	8005760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e242      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056bc:	d106      	bne.n	80056cc <HAL_RCC_OscConfig+0x74>
 80056be:	4b76      	ldr	r3, [pc, #472]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a75      	ldr	r2, [pc, #468]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	e01d      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCC_OscConfig+0x98>
 80056d6:	4b70      	ldr	r3, [pc, #448]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6f      	ldr	r2, [pc, #444]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	e00b      	b.n	8005708 <HAL_RCC_OscConfig+0xb0>
 80056f0:	4b69      	ldr	r3, [pc, #420]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a68      	ldr	r2, [pc, #416]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b66      	ldr	r3, [pc, #408]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a65      	ldr	r2, [pc, #404]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005710:	f7fc fc04 	bl	8001f1c <HAL_GetTick>
 8005714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005718:	f7fc fc00 	bl	8001f1c <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	@ 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e207      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572a:	4b5b      	ldr	r3, [pc, #364]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCC_OscConfig+0xc0>
 8005736:	e014      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fc fbf0 	bl	8001f1c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005740:	f7fc fbec 	bl	8001f1c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b64      	cmp	r3, #100	@ 0x64
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e1f3      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005752:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0xe8>
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d063      	beq.n	8005836 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800576e:	4b4a      	ldr	r3, [pc, #296]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005782:	2b08      	cmp	r3, #8
 8005784:	d11c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005786:	4b44      	ldr	r3, [pc, #272]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005792:	4b41      	ldr	r3, [pc, #260]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d001      	beq.n	80057aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1c7      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4937      	ldr	r1, [pc, #220]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057be:	e03a      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d020      	beq.n	800580a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c8:	4b34      	ldr	r3, [pc, #208]	@ (800589c <HAL_RCC_OscConfig+0x244>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fc fba5 	bl	8001f1c <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d6:	f7fc fba1 	bl	8001f1c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e1a8      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f4:	4b28      	ldr	r3, [pc, #160]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	4925      	ldr	r1, [pc, #148]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 8005804:	4313      	orrs	r3, r2
 8005806:	600b      	str	r3, [r1, #0]
 8005808:	e015      	b.n	8005836 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580a:	4b24      	ldr	r3, [pc, #144]	@ (800589c <HAL_RCC_OscConfig+0x244>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fc fb84 	bl	8001f1c <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005818:	f7fc fb80 	bl	8001f1c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e187      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800582a:	4b1b      	ldr	r3, [pc, #108]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d036      	beq.n	80058b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800584a:	4b15      	ldr	r3, [pc, #84]	@ (80058a0 <HAL_RCC_OscConfig+0x248>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005850:	f7fc fb64 	bl	8001f1c <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005858:	f7fc fb60 	bl	8001f1c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e167      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586a:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_RCC_OscConfig+0x240>)
 800586c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCC_OscConfig+0x200>
 8005876:	e01b      	b.n	80058b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <HAL_RCC_OscConfig+0x248>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800587e:	f7fc fb4d 	bl	8001f1c <HAL_GetTick>
 8005882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005884:	e00e      	b.n	80058a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005886:	f7fc fb49 	bl	8001f1c <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d907      	bls.n	80058a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e150      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005898:	40023800 	.word	0x40023800
 800589c:	42470000 	.word	0x42470000
 80058a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b88      	ldr	r3, [pc, #544]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ea      	bne.n	8005886 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8097 	beq.w	80059ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b81      	ldr	r3, [pc, #516]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10f      	bne.n	80058ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	2300      	movs	r3, #0
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	4b7d      	ldr	r3, [pc, #500]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	4a7c      	ldr	r2, [pc, #496]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80058de:	4b7a      	ldr	r3, [pc, #488]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ee:	4b77      	ldr	r3, [pc, #476]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d118      	bne.n	800592c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058fa:	4b74      	ldr	r3, [pc, #464]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a73      	ldr	r2, [pc, #460]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 8005900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005906:	f7fc fb09 	bl	8001f1c <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fc fb05 	bl	8001f1c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e10c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	4b6a      	ldr	r3, [pc, #424]	@ (8005acc <HAL_RCC_OscConfig+0x474>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x2ea>
 8005934:	4b64      	ldr	r3, [pc, #400]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005938:	4a63      	ldr	r2, [pc, #396]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b05      	cmp	r3, #5
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x30c>
 800594a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005950:	f043 0304 	orr.w	r3, r3, #4
 8005954:	6713      	str	r3, [r2, #112]	@ 0x70
 8005956:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595a:	4a5b      	ldr	r2, [pc, #364]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6713      	str	r3, [r2, #112]	@ 0x70
 8005962:	e00b      	b.n	800597c <HAL_RCC_OscConfig+0x324>
 8005964:	4b58      	ldr	r3, [pc, #352]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005968:	4a57      	ldr	r2, [pc, #348]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005970:	4b55      	ldr	r3, [pc, #340]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005974:	4a54      	ldr	r2, [pc, #336]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005976:	f023 0304 	bic.w	r3, r3, #4
 800597a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d015      	beq.n	80059b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc faca 	bl	8001f1c <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fc fac6 	bl	8001f1c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0cb      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	4b49      	ldr	r3, [pc, #292]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ee      	beq.n	800598c <HAL_RCC_OscConfig+0x334>
 80059ae:	e014      	b.n	80059da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b0:	f7fc fab4 	bl	8001f1c <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fc fab0 	bl	8001f1c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0b5      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059ce:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1ee      	bne.n	80059b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d105      	bne.n	80059ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059e0:	4b39      	ldr	r3, [pc, #228]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	4a38      	ldr	r2, [pc, #224]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80a1 	beq.w	8005b38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059f6:	4b34      	ldr	r3, [pc, #208]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 030c 	and.w	r3, r3, #12
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d05c      	beq.n	8005abc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d141      	bne.n	8005a8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fc fa84 	bl	8001f1c <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a18:	f7fc fa80 	bl	8001f1c <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e087      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a2a:	4b27      	ldr	r3, [pc, #156]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69da      	ldr	r2, [r3, #28]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	019b      	lsls	r3, r3, #6
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	041b      	lsls	r3, r3, #16
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a58:	061b      	lsls	r3, r3, #24
 8005a5a:	491b      	ldr	r1, [pc, #108]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a66:	f7fc fa59 	bl	8001f1c <HAL_GetTick>
 8005a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fc fa55 	bl	8001f1c <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e05c      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a80:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d0f0      	beq.n	8005a6e <HAL_RCC_OscConfig+0x416>
 8005a8c:	e054      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <HAL_RCC_OscConfig+0x478>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fc fa42 	bl	8001f1c <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fc fa3e 	bl	8001f1c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e045      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aae:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1f0      	bne.n	8005a9c <HAL_RCC_OscConfig+0x444>
 8005aba:	e03d      	b.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d107      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e038      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40007000 	.word	0x40007000
 8005ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b44 <HAL_RCC_OscConfig+0x4ec>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d028      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d121      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d11a      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b04:	4013      	ands	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d111      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0cc      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b68      	ldr	r3, [pc, #416]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d90c      	bls.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b65      	ldr	r3, [pc, #404]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b72:	4b63      	ldr	r3, [pc, #396]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d001      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0b8      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d005      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b9c:	4b59      	ldr	r3, [pc, #356]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0308 	and.w	r3, r3, #8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bb4:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	4a52      	ldr	r2, [pc, #328]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc0:	4b50      	ldr	r3, [pc, #320]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	494d      	ldr	r1, [pc, #308]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d044      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005be6:	4b47      	ldr	r3, [pc, #284]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d119      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e07f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d107      	bne.n	8005c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c06:	4b3f      	ldr	r3, [pc, #252]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c16:	4b3b      	ldr	r3, [pc, #236]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e067      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c26:	4b37      	ldr	r3, [pc, #220]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f023 0203 	bic.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4934      	ldr	r1, [pc, #208]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c38:	f7fc f970 	bl	8001f1c <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	e00a      	b.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c40:	f7fc f96c 	bl	8001f1c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e04f      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c56:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 020c 	and.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d1eb      	bne.n	8005c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c68:	4b25      	ldr	r3, [pc, #148]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d20c      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b22      	ldr	r3, [pc, #136]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <HAL_RCC_ClockConfig+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e032      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4916      	ldr	r1, [pc, #88]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cba:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	490e      	ldr	r1, [pc, #56]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cce:	f000 f821 	bl	8005d14 <HAL_RCC_GetSysClockFreq>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d04 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	490a      	ldr	r1, [pc, #40]	@ (8005d08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	5ccb      	ldrb	r3, [r1, r3]
 8005ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce6:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cea:	4b09      	ldr	r3, [pc, #36]	@ (8005d10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fc f8d0 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023c00 	.word	0x40023c00
 8005d04:	40023800 	.word	0x40023800
 8005d08:	080095c4 	.word	0x080095c4
 8005d0c:	20000000 	.word	0x20000000
 8005d10:	20000004 	.word	0x20000004

08005d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b094      	sub	sp, #80	@ 0x50
 8005d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d20:	2300      	movs	r3, #0
 8005d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d24:	2300      	movs	r3, #0
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d2c:	4b79      	ldr	r3, [pc, #484]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 030c 	and.w	r3, r3, #12
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d00d      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x40>
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	f200 80e1 	bhi.w	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_RCC_GetSysClockFreq+0x34>
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d46:	e0db      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d48:	4b73      	ldr	r3, [pc, #460]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005d4c:	e0db      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d4e:	4b73      	ldr	r3, [pc, #460]	@ (8005f1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d52:	e0d8      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d54:	4b6f      	ldr	r3, [pc, #444]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d063      	beq.n	8005e32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	2200      	movs	r2, #0
 8005d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7e:	2300      	movs	r3, #0
 8005d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	f04f 0000 	mov.w	r0, #0
 8005d8e:	f04f 0100 	mov.w	r1, #0
 8005d92:	0159      	lsls	r1, r3, #5
 8005d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d98:	0150      	lsls	r0, r2, #5
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4621      	mov	r1, r4
 8005da0:	1a51      	subs	r1, r2, r1
 8005da2:	6139      	str	r1, [r7, #16]
 8005da4:	4629      	mov	r1, r5
 8005da6:	eb63 0301 	sbc.w	r3, r3, r1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db8:	4659      	mov	r1, fp
 8005dba:	018b      	lsls	r3, r1, #6
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	018a      	lsls	r2, r1, #6
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005dcc:	4659      	mov	r1, fp
 8005dce:	eb63 0901 	sbc.w	r9, r3, r1
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de6:	4690      	mov	r8, r2
 8005de8:	4699      	mov	r9, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	eb18 0303 	adds.w	r3, r8, r3
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	462b      	mov	r3, r5
 8005df4:	eb49 0303 	adc.w	r3, r9, r3
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e06:	4629      	mov	r1, r5
 8005e08:	024b      	lsls	r3, r1, #9
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e10:	4621      	mov	r1, r4
 8005e12:	024a      	lsls	r2, r1, #9
 8005e14:	4610      	mov	r0, r2
 8005e16:	4619      	mov	r1, r3
 8005e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e24:	f7fa fa2c 	bl	8000280 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e30:	e058      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	099b      	lsrs	r3, r3, #6
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	2300      	movs	r3, #0
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	f04f 0000 	mov.w	r0, #0
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	0159      	lsls	r1, r3, #5
 8005e5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e5e:	0150      	lsls	r0, r2, #5
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4641      	mov	r1, r8
 8005e66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e84:	ebb2 040a 	subs.w	r4, r2, sl
 8005e88:	eb63 050b 	sbc.w	r5, r3, fp
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	00eb      	lsls	r3, r5, #3
 8005e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9a:	00e2      	lsls	r2, r4, #3
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	4643      	mov	r3, r8
 8005ea2:	18e3      	adds	r3, r4, r3
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	eb45 0303 	adc.w	r3, r5, r3
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eba:	4629      	mov	r1, r5
 8005ebc:	028b      	lsls	r3, r1, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	028a      	lsls	r2, r1, #10
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ece:	2200      	movs	r2, #0
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	61fa      	str	r2, [r7, #28]
 8005ed4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed8:	f7fa f9d2 	bl	8000280 <__aeabi_uldivmod>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	3301      	adds	r3, #1
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005efe:	e002      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3750      	adds	r7, #80	@ 0x50
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	40023800 	.word	0x40023800
 8005f18:	00f42400 	.word	0x00f42400
 8005f1c:	007a1200 	.word	0x007a1200

08005f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f26:	681b      	ldr	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	20000000 	.word	0x20000000

08005f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f3c:	f7ff fff0 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0a9b      	lsrs	r3, r3, #10
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	@ (8005f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40023800 	.word	0x40023800
 8005f5c:	080095d4 	.word	0x080095d4

08005f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f64:	f7ff ffdc 	bl	8005f20 <HAL_RCC_GetHCLKFreq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	0b5b      	lsrs	r3, r3, #13
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	4903      	ldr	r1, [pc, #12]	@ (8005f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	40023800 	.word	0x40023800
 8005f84:	080095d4 	.word	0x080095d4

08005f88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d035      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fb0:	4b67      	ldr	r3, [pc, #412]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fb6:	f7fb ffb1 	bl	8001f1c <HAL_GetTick>
 8005fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fbe:	f7fb ffad 	bl	8001f1c <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e0ba      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd0:	4b60      	ldr	r3, [pc, #384]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	019a      	lsls	r2, r3, #6
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	071b      	lsls	r3, r3, #28
 8005fe8:	495a      	ldr	r1, [pc, #360]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ff0:	4b57      	ldr	r3, [pc, #348]	@ (8006150 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff6:	f7fb ff91 	bl	8001f1c <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ffc:	e008      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ffe:	f7fb ff8d 	bl	8001f1c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e09a      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006010:	4b50      	ldr	r3, [pc, #320]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8083 	beq.w	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800602a:	2300      	movs	r3, #0
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	4b49      	ldr	r3, [pc, #292]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	4a48      	ldr	r2, [pc, #288]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006038:	6413      	str	r3, [r2, #64]	@ 0x40
 800603a:	4b46      	ldr	r3, [pc, #280]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006046:	4b44      	ldr	r3, [pc, #272]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a43      	ldr	r2, [pc, #268]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006050:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006052:	f7fb ff63 	bl	8001f1c <HAL_GetTick>
 8006056:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006058:	e008      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800605a:	f7fb ff5f 	bl	8001f1c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e06c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800606c:	4b3a      	ldr	r3, [pc, #232]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f0      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006078:	4b36      	ldr	r3, [pc, #216]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006080:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d02f      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	429a      	cmp	r2, r3
 8006094:	d028      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006096:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800609a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060a0:	4b2e      	ldr	r3, [pc, #184]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060a6:	4b2d      	ldr	r3, [pc, #180]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060ac:	4a29      	ldr	r2, [pc, #164]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060b2:	4b28      	ldr	r3, [pc, #160]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d114      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060be:	f7fb ff2d 	bl	8001f1c <HAL_GetTick>
 80060c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c4:	e00a      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c6:	f7fb ff29 	bl	8001f1c <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e034      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ee      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060f4:	d10d      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610a:	4912      	ldr	r1, [pc, #72]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800610c:	4313      	orrs	r3, r2
 800610e:	608b      	str	r3, [r1, #8]
 8006110:	e005      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	4a0f      	ldr	r2, [pc, #60]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006118:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800611c:	6093      	str	r3, [r2, #8]
 800611e:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006120:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612a:	490a      	ldr	r1, [pc, #40]	@ (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800612c:	4313      	orrs	r3, r2
 800612e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7c1a      	ldrb	r2, [r3, #16]
 8006140:	4b07      	ldr	r3, [pc, #28]	@ (8006160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006142:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	42470068 	.word	0x42470068
 8006154:	40023800 	.word	0x40023800
 8006158:	40007000 	.word	0x40007000
 800615c:	42470e40 	.word	0x42470e40
 8006160:	424711e0 	.word	0x424711e0

08006164 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e073      	b.n	8006262 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	7f5b      	ldrb	r3, [r3, #29]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fb fa40 	bl	8001610 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d055      	beq.n	8006250 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	22ca      	movs	r2, #202	@ 0xca
 80061aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2253      	movs	r2, #83	@ 0x53
 80061b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fa49 	bl	800664c <RTC_EnterInitMode>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d12c      	bne.n	800621e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80061d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6899      	ldr	r1, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68d2      	ldr	r2, [r2, #12]
 80061fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6919      	ldr	r1, [r3, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	041a      	lsls	r2, r3, #16
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa50 	bl	80066ba <RTC_ExitInitMode>
 800621a:	4603      	mov	r3, r0
 800621c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d110      	bne.n	8006246 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006232:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	22ff      	movs	r2, #255	@ 0xff
 800624c:	625a      	str	r2, [r3, #36]	@ 0x24
 800624e:	e001      	b.n	8006254 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800626a:	b590      	push	{r4, r7, lr}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	60f8      	str	r0, [r7, #12]
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7f1b      	ldrb	r3, [r3, #28]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_RTC_SetTime+0x1c>
 8006282:	2302      	movs	r3, #2
 8006284:	e087      	b.n	8006396 <HAL_RTC_SetTime+0x12c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2202      	movs	r2, #2
 8006290:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d126      	bne.n	80062e6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d102      	bne.n	80062ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2200      	movs	r2, #0
 80062aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fa27 	bl	8006704 <RTC_ByteToBcd2>
 80062b6:	4603      	mov	r3, r0
 80062b8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa20 	bl	8006704 <RTC_ByteToBcd2>
 80062c4:	4603      	mov	r3, r0
 80062c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062c8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	789b      	ldrb	r3, [r3, #2]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fa18 	bl	8006704 <RTC_ByteToBcd2>
 80062d4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	78db      	ldrb	r3, [r3, #3]
 80062de:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e018      	b.n	8006318 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006306:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800630c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	22ca      	movs	r2, #202	@ 0xca
 800631e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2253      	movs	r2, #83	@ 0x53
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f98f 	bl	800664c <RTC_EnterInitMode>
 800632e:	4603      	mov	r3, r0
 8006330:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006332:	7cfb      	ldrb	r3, [r7, #19]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d120      	bne.n	800637a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006342:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006346:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006356:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6899      	ldr	r1, [r3, #8]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	68da      	ldr	r2, [r3, #12]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	431a      	orrs	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f9a2 	bl	80066ba <RTC_ExitInitMode>
 8006376:	4603      	mov	r3, r0
 8006378:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800637a:	7cfb      	ldrb	r3, [r7, #19]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	22ff      	movs	r2, #255	@ 0xff
 800638c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]

  return status;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	bd90      	pop	{r4, r7, pc}

0800639e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80063d0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80063d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0d9b      	lsrs	r3, r3, #22
 8006408:	b2db      	uxtb	r3, r3
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	b2da      	uxtb	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d11a      	bne.n	8006450 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f98e 	bl	8006740 <RTC_Bcd2ToByte>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f985 	bl	8006740 <RTC_Bcd2ToByte>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	789b      	ldrb	r3, [r3, #2]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f97c 	bl	8006740 <RTC_Bcd2ToByte>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800645a:	b590      	push	{r4, r7, lr}
 800645c:	b087      	sub	sp, #28
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	7f1b      	ldrb	r3, [r3, #28]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d101      	bne.n	8006476 <HAL_RTC_SetDate+0x1c>
 8006472:	2302      	movs	r3, #2
 8006474:	e071      	b.n	800655a <HAL_RTC_SetDate+0x100>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2202      	movs	r2, #2
 8006480:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10e      	bne.n	80064a6 <HAL_RTC_SetDate+0x4c>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	785b      	ldrb	r3, [r3, #1]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	f023 0310 	bic.w	r3, r3, #16
 800649c:	b2db      	uxtb	r3, r3
 800649e:	330a      	adds	r3, #10
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d11c      	bne.n	80064e6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 f927 	bl	8006704 <RTC_ByteToBcd2>
 80064b6:	4603      	mov	r3, r0
 80064b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f920 	bl	8006704 <RTC_ByteToBcd2>
 80064c4:	4603      	mov	r3, r0
 80064c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	789b      	ldrb	r3, [r3, #2]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f918 	bl	8006704 <RTC_ByteToBcd2>
 80064d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80064d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e00e      	b.n	8006504 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	78db      	ldrb	r3, [r3, #3]
 80064ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	785b      	ldrb	r3, [r3, #1]
 80064f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80064f2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80064f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	22ca      	movs	r2, #202	@ 0xca
 800650a:	625a      	str	r2, [r3, #36]	@ 0x24
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2253      	movs	r2, #83	@ 0x53
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f899 	bl	800664c <RTC_EnterInitMode>
 800651a:	4603      	mov	r3, r0
 800651c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800651e:	7cfb      	ldrb	r3, [r7, #19]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10c      	bne.n	800653e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800652e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006532:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f8c0 	bl	80066ba <RTC_ExitInitMode>
 800653a:	4603      	mov	r3, r0
 800653c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	22ff      	movs	r2, #255	@ 0xff
 8006550:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]

  return status;
 8006558:	7cfb      	ldrb	r3, [r7, #19]
}
 800655a:	4618      	mov	r0, r3
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	bd90      	pop	{r4, r7, pc}

08006562 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800657c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006580:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	0a1b      	lsrs	r3, r3, #8
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	b2da      	uxtb	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	0b5b      	lsrs	r3, r3, #13
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11a      	bne.n	80065f6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f8bb 	bl	8006740 <RTC_Bcd2ToByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 f8b2 	bl	8006740 <RTC_Bcd2ToByte>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	789b      	ldrb	r3, [r3, #2]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f8a9 	bl	8006740 <RTC_Bcd2ToByte>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a0d      	ldr	r2, [pc, #52]	@ (8006648 <HAL_RTC_WaitForSynchro+0x48>)
 8006612:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006614:	f7fb fc82 	bl	8001f1c <HAL_GetTick>
 8006618:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800661a:	e009      	b.n	8006630 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800661c:	f7fb fc7e 	bl	8001f1c <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800662a:	d901      	bls.n	8006630 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e007      	b.n	8006640 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ee      	beq.n	800661c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	00013f5f 	.word	0x00013f5f

0800664c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d122      	bne.n	80066b0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68da      	ldr	r2, [r3, #12]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006678:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800667a:	f7fb fc4f 	bl	8001f1c <HAL_GetTick>
 800667e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006680:	e00c      	b.n	800669c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006682:	f7fb fc4b 	bl	8001f1c <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006690:	d904      	bls.n	800669c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2204      	movs	r2, #4
 8006696:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d102      	bne.n	80066b0 <RTC_EnterInitMode+0x64>
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d1e8      	bne.n	8006682 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066d4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff8b 	bl	8006600 <HAL_RTC_WaitForSynchro>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2204      	movs	r2, #4
 80066f4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006712:	e005      	b.n	8006720 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	3b0a      	subs	r3, #10
 800671e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b09      	cmp	r3, #9
 8006724:	d8f6      	bhi.n	8006714 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	b2da      	uxtb	r2, r3
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	4313      	orrs	r3, r2
 8006732:	b2db      	uxtb	r3, r3
}
 8006734:	4618      	mov	r0, r3
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	b2db      	uxtb	r3, r3
 800676c:	4413      	add	r3, r2
 800676e:	b2db      	uxtb	r3, r3
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3350      	adds	r3, #80	@ 0x50
 8006792:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4413      	add	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e07b      	b.n	80068ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d108      	bne.n	80067dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067d2:	d009      	beq.n	80067e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	61da      	str	r2, [r3, #28]
 80067da:	e005      	b.n	80067e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa ff68 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800681e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800686c:	ea42 0103 	orr.w	r1, r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006874:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 0104 	and.w	r1, r3, #4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688e:	f003 0210 	and.w	r2, r3, #16
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e041      	b.n	8006958 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fb f8fb 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f000 f94f 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d001      	beq.n	8006978 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e03c      	b.n	80069f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1e      	ldr	r2, [pc, #120]	@ (8006a00 <HAL_TIM_Base_Start+0xa0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <HAL_TIM_Base_Start+0x5c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006992:	d013      	beq.n	80069bc <HAL_TIM_Base_Start+0x5c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1a      	ldr	r2, [pc, #104]	@ (8006a04 <HAL_TIM_Base_Start+0xa4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <HAL_TIM_Base_Start+0x5c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a19      	ldr	r2, [pc, #100]	@ (8006a08 <HAL_TIM_Base_Start+0xa8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <HAL_TIM_Base_Start+0x5c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a17      	ldr	r2, [pc, #92]	@ (8006a0c <HAL_TIM_Base_Start+0xac>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <HAL_TIM_Base_Start+0x5c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <HAL_TIM_Base_Start+0xb0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d111      	bne.n	80069e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b06      	cmp	r3, #6
 80069cc:	d010      	beq.n	80069f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069de:	e007      	b.n	80069f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40014000 	.word	0x40014000

08006a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIM_ConfigClockSource+0x1c>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e0b4      	b.n	8006b9a <HAL_TIM_ConfigClockSource+0x186>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a68:	d03e      	beq.n	8006ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8006a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a6e:	f200 8087 	bhi.w	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a76:	f000 8086 	beq.w	8006b86 <HAL_TIM_ConfigClockSource+0x172>
 8006a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a7e:	d87f      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006a80:	2b70      	cmp	r3, #112	@ 0x70
 8006a82:	d01a      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0xa6>
 8006a84:	2b70      	cmp	r3, #112	@ 0x70
 8006a86:	d87b      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006a88:	2b60      	cmp	r3, #96	@ 0x60
 8006a8a:	d050      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0x11a>
 8006a8c:	2b60      	cmp	r3, #96	@ 0x60
 8006a8e:	d877      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006a90:	2b50      	cmp	r3, #80	@ 0x50
 8006a92:	d03c      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0xfa>
 8006a94:	2b50      	cmp	r3, #80	@ 0x50
 8006a96:	d873      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006a98:	2b40      	cmp	r3, #64	@ 0x40
 8006a9a:	d058      	beq.n	8006b4e <HAL_TIM_ConfigClockSource+0x13a>
 8006a9c:	2b40      	cmp	r3, #64	@ 0x40
 8006a9e:	d86f      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa0:	2b30      	cmp	r3, #48	@ 0x30
 8006aa2:	d064      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x15a>
 8006aa4:	2b30      	cmp	r3, #48	@ 0x30
 8006aa6:	d86b      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d060      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x15a>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d867      	bhi.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d05c      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x15a>
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d05a      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x15a>
 8006ab8:	e062      	b.n	8006b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aca:	f000 f971 	bl	8006db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	609a      	str	r2, [r3, #8]
      break;
 8006ae6:	e04f      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006af8:	f000 f95a 	bl	8006db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b0a:	609a      	str	r2, [r3, #8]
      break;
 8006b0c:	e03c      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f000 f8ce 	bl	8006cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2150      	movs	r1, #80	@ 0x50
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f927 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006b2c:	e02c      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 f8ed 	bl	8006d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2160      	movs	r1, #96	@ 0x60
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f917 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006b4c:	e01c      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f000 f8ae 	bl	8006cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2140      	movs	r1, #64	@ 0x40
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f907 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006b6c:	e00c      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f000 f8fe 	bl	8006d7a <TIM_ITRx_SetConfig>
      break;
 8006b7e:	e003      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73fb      	strb	r3, [r7, #15]
      break;
 8006b84:	e000      	b.n	8006b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8006ca0 <TIM_Base_SetConfig+0xfc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a37      	ldr	r2, [pc, #220]	@ (8006ca4 <TIM_Base_SetConfig+0x100>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a36      	ldr	r2, [pc, #216]	@ (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0x38>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a35      	ldr	r2, [pc, #212]	@ (8006cac <TIM_Base_SetConfig+0x108>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d108      	bne.n	8006bee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca0 <TIM_Base_SetConfig+0xfc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d01b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bfc:	d017      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a28      	ldr	r2, [pc, #160]	@ (8006ca4 <TIM_Base_SetConfig+0x100>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a27      	ldr	r2, [pc, #156]	@ (8006ca8 <TIM_Base_SetConfig+0x104>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00f      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a26      	ldr	r2, [pc, #152]	@ (8006cac <TIM_Base_SetConfig+0x108>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00b      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a25      	ldr	r2, [pc, #148]	@ (8006cb0 <TIM_Base_SetConfig+0x10c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d007      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a24      	ldr	r2, [pc, #144]	@ (8006cb4 <TIM_Base_SetConfig+0x110>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d003      	beq.n	8006c2e <TIM_Base_SetConfig+0x8a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a23      	ldr	r2, [pc, #140]	@ (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d108      	bne.n	8006c40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca0 <TIM_Base_SetConfig+0xfc>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d103      	bne.n	8006c74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	611a      	str	r2, [r3, #16]
  }
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800

08006cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f023 0201 	bic.w	r2, r3, #1
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	011b      	lsls	r3, r3, #4
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f023 030a 	bic.w	r3, r3, #10
 8006cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	621a      	str	r2, [r3, #32]
}
 8006d0e:	bf00      	nop
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b087      	sub	sp, #28
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f023 0210 	bic.w	r2, r3, #16
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	031b      	lsls	r3, r3, #12
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	621a      	str	r2, [r3, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f043 0307 	orr.w	r3, r3, #7
 8006d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	609a      	str	r2, [r3, #8]
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	021a      	lsls	r2, r3, #8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	609a      	str	r2, [r3, #8]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e050      	b.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	@ (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d018      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e54:	d013      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a16      	ldr	r2, [pc, #88]	@ (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d009      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a15      	ldr	r2, [pc, #84]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a13      	ldr	r2, [pc, #76]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d10c      	bne.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40000400 	.word	0x40000400
 8006ec0:	40000800 	.word	0x40000800
 8006ec4:	40000c00 	.word	0x40000c00
 8006ec8:	40014000 	.word	0x40014000

08006ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e042      	b.n	8006f64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fa fe96 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2224      	movs	r2, #36	@ 0x24
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fdf5 	bl	8007b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	@ 0x28
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d175      	bne.n	8007078 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_Transmit+0x2c>
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e06e      	b.n	800707a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2221      	movs	r2, #33	@ 0x21
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006faa:	f7fa ffb7 	bl	8001f1c <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc4:	d108      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e003      	b.n	8006fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fe0:	e02e      	b.n	8007040 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2180      	movs	r1, #128	@ 0x80
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fb91 	bl	8007714 <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e03a      	b.n	800707a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3302      	adds	r3, #2
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e007      	b.n	8007032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1cb      	bne.n	8006fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2200      	movs	r2, #0
 8007052:	2140      	movs	r1, #64	@ 0x40
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fb5d 	bl	8007714 <UART_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b08a      	sub	sp, #40	@ 0x28
 8007086:	af02      	add	r7, sp, #8
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b20      	cmp	r3, #32
 80070a0:	f040 8081 	bne.w	80071a6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_UART_Receive+0x2e>
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e079      	b.n	80071a8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2222      	movs	r2, #34	@ 0x22
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070c8:	f7fa ff28 	bl	8001f1c <HAL_GetTick>
 80070cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	88fa      	ldrh	r2, [r7, #6]
 80070d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e2:	d108      	bne.n	80070f6 <HAL_UART_Receive+0x74>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	e003      	b.n	80070fe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070fe:	e047      	b.n	8007190 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2200      	movs	r2, #0
 8007108:	2120      	movs	r1, #32
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fb02 	bl	8007714 <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e042      	b.n	80071a8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10c      	bne.n	8007142 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	b29a      	uxth	r2, r3
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	3302      	adds	r3, #2
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	e01f      	b.n	8007182 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800714a:	d007      	beq.n	800715c <HAL_UART_Receive+0xda>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <HAL_UART_Receive+0xe8>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	701a      	strb	r2, [r3, #0]
 8007168:	e008      	b.n	800717c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007176:	b2da      	uxtb	r2, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	3301      	adds	r3, #1
 8007180:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1b2      	bne.n	8007100 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3720      	adds	r7, #32
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b0ba      	sub	sp, #232	@ 0xe8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10f      	bne.n	8007216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_UART_IRQHandler+0x66>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fbb8 	bl	8007984 <UART_Receive_IT>
      return;
 8007214:	e25b      	b.n	80076ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 80de 	beq.w	80073dc <HAL_UART_IRQHandler+0x22c>
 8007220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b00      	cmp	r3, #0
 800722a:	d106      	bne.n	800723a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800722c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007230:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80d1 	beq.w	80073dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <HAL_UART_IRQHandler+0xae>
 8007246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800724a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	f043 0201 	orr.w	r2, r3, #1
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <HAL_UART_IRQHandler+0xd2>
 800726a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	f043 0202 	orr.w	r2, r3, #2
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <HAL_UART_IRQHandler+0xf6>
 800728e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729e:	f043 0204 	orr.w	r2, r3, #4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d011      	beq.n	80072d6 <HAL_UART_IRQHandler+0x126>
 80072b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ce:	f043 0208 	orr.w	r2, r3, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 81f2 	beq.w	80076c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_UART_IRQHandler+0x14e>
 80072ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 fb43 	bl	8007984 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007308:	2b40      	cmp	r3, #64	@ 0x40
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <HAL_UART_IRQHandler+0x17a>
 8007322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04f      	beq.n	80073ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fa4b 	bl	80077c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733a:	2b40      	cmp	r3, #64	@ 0x40
 800733c:	d141      	bne.n	80073c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3314      	adds	r3, #20
 8007344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800735c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800736a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800736e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1d9      	bne.n	800733e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d013      	beq.n	80073ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007396:	4a7e      	ldr	r2, [pc, #504]	@ (8007590 <HAL_UART_IRQHandler+0x3e0>)
 8007398:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fb fad6 	bl	8002950 <HAL_DMA_Abort_IT>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d016      	beq.n	80073d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	e00e      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f994 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	e00a      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f990 	bl	80076e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c8:	e006      	b.n	80073d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f98c 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80073d6:	e175      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d8:	bf00      	nop
    return;
 80073da:	e173      	b.n	80076c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	f040 814f 	bne.w	8007684 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80073e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ea:	f003 0310 	and.w	r3, r3, #16
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8148 	beq.w	8007684 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8141 	beq.w	8007684 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007402:	2300      	movs	r3, #0
 8007404:	60bb      	str	r3, [r7, #8]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60bb      	str	r3, [r7, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007422:	2b40      	cmp	r3, #64	@ 0x40
 8007424:	f040 80b6 	bne.w	8007594 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8145 	beq.w	80076c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007446:	429a      	cmp	r2, r3
 8007448:	f080 813e 	bcs.w	80076c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007452:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800745e:	f000 8088 	beq.w	8007572 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007478:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800747c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800748e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800749a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1d9      	bne.n	8007462 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	3314      	adds	r3, #20
 80074b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074c0:	f023 0301 	bic.w	r3, r3, #1
 80074c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3314      	adds	r3, #20
 80074ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e1      	bne.n	80074ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007500:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800750e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800751c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e3      	bne.n	80074ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007554:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007556:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800755a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e3      	bne.n	8007530 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756c:	4618      	mov	r0, r3
 800756e:	f7fb f97f 	bl	8002870 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007580:	b29b      	uxth	r3, r3
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	b29b      	uxth	r3, r3
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f8b7 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800758e:	e09b      	b.n	80076c8 <HAL_UART_IRQHandler+0x518>
 8007590:	0800788d 	.word	0x0800788d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800759c:	b29b      	uxth	r3, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 808e 	beq.w	80076cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80075b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8089 	beq.w	80076cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80075de:	647a      	str	r2, [r7, #68]	@ 0x44
 80075e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e3      	bne.n	80075ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3314      	adds	r3, #20
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	623b      	str	r3, [r7, #32]
   return(result);
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	f023 0301 	bic.w	r3, r3, #1
 8007608:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3314      	adds	r3, #20
 8007612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007616:	633a      	str	r2, [r7, #48]	@ 0x30
 8007618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800761c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e3      	bne.n	80075f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2220      	movs	r2, #32
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	60fb      	str	r3, [r7, #12]
   return(result);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800765c:	61fa      	str	r2, [r7, #28]
 800765e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	617b      	str	r3, [r7, #20]
   return(result);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e3      	bne.n	8007638 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f83d 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007682:	e023      	b.n	80076cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <HAL_UART_IRQHandler+0x4f4>
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f909 	bl	80078b4 <UART_Transmit_IT>
    return;
 80076a2:	e014      	b.n	80076ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00e      	beq.n	80076ce <HAL_UART_IRQHandler+0x51e>
 80076b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d008      	beq.n	80076ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f949 	bl	8007954 <UART_EndTransmit_IT>
    return;
 80076c2:	e004      	b.n	80076ce <HAL_UART_IRQHandler+0x51e>
    return;
 80076c4:	bf00      	nop
 80076c6:	e002      	b.n	80076ce <HAL_UART_IRQHandler+0x51e>
      return;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_UART_IRQHandler+0x51e>
      return;
 80076cc:	bf00      	nop
  }
}
 80076ce:	37e8      	adds	r7, #232	@ 0xe8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	603b      	str	r3, [r7, #0]
 8007720:	4613      	mov	r3, r2
 8007722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007724:	e03b      	b.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d037      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772e:	f7fa fbf5 	bl	8001f1c <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	6a3a      	ldr	r2, [r7, #32]
 800773a:	429a      	cmp	r2, r3
 800773c:	d302      	bcc.n	8007744 <UART_WaitOnFlagUntilTimeout+0x30>
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e03a      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0304 	and.w	r3, r3, #4
 8007752:	2b00      	cmp	r3, #0
 8007754:	d023      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b80      	cmp	r3, #128	@ 0x80
 800775a:	d020      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b40      	cmp	r3, #64	@ 0x40
 8007760:	d01d      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b08      	cmp	r3, #8
 800776e:	d116      	bne.n	800779e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f81d 	bl	80077c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2208      	movs	r2, #8
 8007790:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e00f      	b.n	80077be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4013      	ands	r3, r2
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	bf0c      	ite	eq
 80077ae:	2301      	moveq	r3, #1
 80077b0:	2300      	movne	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d0b4      	beq.n	8007726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b095      	sub	sp, #84	@ 0x54
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e5      	bne.n	80077ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3314      	adds	r3, #20
 8007808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	61fb      	str	r3, [r7, #28]
   return(result);
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3314      	adds	r3, #20
 8007820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007828:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783a:	2b01      	cmp	r3, #1
 800783c:	d119      	bne.n	8007872 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	330c      	adds	r3, #12
 8007844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	60bb      	str	r3, [r7, #8]
   return(result);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f023 0310 	bic.w	r3, r3, #16
 8007854:	647b      	str	r3, [r7, #68]	@ 0x44
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800785e:	61ba      	str	r2, [r7, #24]
 8007860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6979      	ldr	r1, [r7, #20]
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	613b      	str	r3, [r7, #16]
   return(result);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007880:	bf00      	nop
 8007882:	3754      	adds	r7, #84	@ 0x54
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007898:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f7ff ff1e 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b21      	cmp	r3, #33	@ 0x21
 80078c6:	d13e      	bne.n	8007946 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d0:	d114      	bne.n	80078fc <UART_Transmit_IT+0x48>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d110      	bne.n	80078fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	1c9a      	adds	r2, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]
 80078fa:	e008      	b.n	800790e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	1c59      	adds	r1, r3, #1
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6211      	str	r1, [r2, #32]
 8007906:	781a      	ldrb	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007912:	b29b      	uxth	r3, r3
 8007914:	3b01      	subs	r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4619      	mov	r1, r3
 800791c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10f      	bne.n	8007942 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007930:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68da      	ldr	r2, [r3, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007940:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	e000      	b.n	8007948 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800796a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fead 	bl	80076d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	@ 0x30
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b22      	cmp	r3, #34	@ 0x22
 8007996:	f040 80ae 	bne.w	8007af6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a2:	d117      	bne.n	80079d4 <UART_Receive_IT+0x50>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d113      	bne.n	80079d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	1c9a      	adds	r2, r3, #2
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80079d2:	e026      	b.n	8007a22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079e6:	d007      	beq.n	80079f8 <UART_Receive_IT+0x74>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10a      	bne.n	8007a06 <UART_Receive_IT+0x82>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e008      	b.n	8007a18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a12:	b2da      	uxtb	r2, r3
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d15d      	bne.n	8007af2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0220 	bic.w	r2, r2, #32
 8007a44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0201 	bic.w	r2, r2, #1
 8007a64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d135      	bne.n	8007ae8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	613b      	str	r3, [r7, #16]
   return(result);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f023 0310 	bic.w	r3, r3, #16
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa2:	623a      	str	r2, [r7, #32]
 8007aa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	69f9      	ldr	r1, [r7, #28]
 8007aa8:	6a3a      	ldr	r2, [r7, #32]
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1e5      	bne.n	8007a82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d10a      	bne.n	8007ada <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe0b 	bl	80076fc <HAL_UARTEx_RxEventCallback>
 8007ae6:	e002      	b.n	8007aee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7f9 fd4f 	bl	800158c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e002      	b.n	8007af8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3730      	adds	r7, #48	@ 0x30
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b04:	b0c0      	sub	sp, #256	@ 0x100
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	68d9      	ldr	r1, [r3, #12]
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	ea40 0301 	orr.w	r3, r0, r1
 8007b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b58:	f021 010c 	bic.w	r1, r1, #12
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b66:	430b      	orrs	r3, r1
 8007b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7a:	6999      	ldr	r1, [r3, #24]
 8007b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	ea40 0301 	orr.w	r3, r0, r1
 8007b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b8f      	ldr	r3, [pc, #572]	@ (8007dcc <UART_SetConfig+0x2cc>)
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d005      	beq.n	8007ba0 <UART_SetConfig+0xa0>
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8007dd0 <UART_SetConfig+0x2d0>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d104      	bne.n	8007baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ba0:	f7fe f9de 	bl	8005f60 <HAL_RCC_GetPCLK2Freq>
 8007ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ba8:	e003      	b.n	8007bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007baa:	f7fe f9c5 	bl	8005f38 <HAL_RCC_GetPCLK1Freq>
 8007bae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bbc:	f040 810c 	bne.w	8007dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	1891      	adds	r1, r2, r2
 8007bd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007bda:	415b      	adcs	r3, r3
 8007bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007be2:	4621      	mov	r1, r4
 8007be4:	eb12 0801 	adds.w	r8, r2, r1
 8007be8:	4629      	mov	r1, r5
 8007bea:	eb43 0901 	adc.w	r9, r3, r1
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c02:	4690      	mov	r8, r2
 8007c04:	4699      	mov	r9, r3
 8007c06:	4623      	mov	r3, r4
 8007c08:	eb18 0303 	adds.w	r3, r8, r3
 8007c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c10:	462b      	mov	r3, r5
 8007c12:	eb49 0303 	adc.w	r3, r9, r3
 8007c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c2e:	460b      	mov	r3, r1
 8007c30:	18db      	adds	r3, r3, r3
 8007c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c34:	4613      	mov	r3, r2
 8007c36:	eb42 0303 	adc.w	r3, r2, r3
 8007c3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c44:	f7f8 fb1c 	bl	8000280 <__aeabi_uldivmod>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4b61      	ldr	r3, [pc, #388]	@ (8007dd4 <UART_SetConfig+0x2d4>)
 8007c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	011c      	lsls	r4, r3, #4
 8007c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c68:	4642      	mov	r2, r8
 8007c6a:	464b      	mov	r3, r9
 8007c6c:	1891      	adds	r1, r2, r2
 8007c6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c70:	415b      	adcs	r3, r3
 8007c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c78:	4641      	mov	r1, r8
 8007c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8007c7e:	4649      	mov	r1, r9
 8007c80:	eb43 0b01 	adc.w	fp, r3, r1
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	f04f 0300 	mov.w	r3, #0
 8007c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c98:	4692      	mov	sl, r2
 8007c9a:	469b      	mov	fp, r3
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8007ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8007cac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	18db      	adds	r3, r3, r3
 8007cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cca:	4613      	mov	r3, r2
 8007ccc:	eb42 0303 	adc.w	r3, r2, r3
 8007cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007cda:	f7f8 fad1 	bl	8000280 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd4 <UART_SetConfig+0x2d4>)
 8007ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	2264      	movs	r2, #100	@ 0x64
 8007cee:	fb02 f303 	mul.w	r3, r2, r3
 8007cf2:	1acb      	subs	r3, r1, r3
 8007cf4:	00db      	lsls	r3, r3, #3
 8007cf6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007cfa:	4b36      	ldr	r3, [pc, #216]	@ (8007dd4 <UART_SetConfig+0x2d4>)
 8007cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d08:	441c      	add	r4, r3
 8007d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	1891      	adds	r1, r2, r2
 8007d22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d24:	415b      	adcs	r3, r3
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	1851      	adds	r1, r2, r1
 8007d30:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d32:	4649      	mov	r1, r9
 8007d34:	414b      	adcs	r3, r1
 8007d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d44:	4659      	mov	r1, fp
 8007d46:	00cb      	lsls	r3, r1, #3
 8007d48:	4651      	mov	r1, sl
 8007d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4e:	4651      	mov	r1, sl
 8007d50:	00ca      	lsls	r2, r1, #3
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	4642      	mov	r2, r8
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d60:	464b      	mov	r3, r9
 8007d62:	460a      	mov	r2, r1
 8007d64:	eb42 0303 	adc.w	r3, r2, r3
 8007d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d80:	460b      	mov	r3, r1
 8007d82:	18db      	adds	r3, r3, r3
 8007d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d86:	4613      	mov	r3, r2
 8007d88:	eb42 0303 	adc.w	r3, r2, r3
 8007d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d96:	f7f8 fa73 	bl	8000280 <__aeabi_uldivmod>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd4 <UART_SetConfig+0x2d4>)
 8007da0:	fba3 1302 	umull	r1, r3, r3, r2
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	2164      	movs	r1, #100	@ 0x64
 8007da8:	fb01 f303 	mul.w	r3, r1, r3
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	00db      	lsls	r3, r3, #3
 8007db0:	3332      	adds	r3, #50	@ 0x32
 8007db2:	4a08      	ldr	r2, [pc, #32]	@ (8007dd4 <UART_SetConfig+0x2d4>)
 8007db4:	fba2 2303 	umull	r2, r3, r2, r3
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	f003 0207 	and.w	r2, r3, #7
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4422      	add	r2, r4
 8007dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dc8:	e106      	b.n	8007fd8 <UART_SetConfig+0x4d8>
 8007dca:	bf00      	nop
 8007dcc:	40011000 	.word	0x40011000
 8007dd0:	40011400 	.word	0x40011400
 8007dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007de2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007dea:	4642      	mov	r2, r8
 8007dec:	464b      	mov	r3, r9
 8007dee:	1891      	adds	r1, r2, r2
 8007df0:	6239      	str	r1, [r7, #32]
 8007df2:	415b      	adcs	r3, r3
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	1854      	adds	r4, r2, r1
 8007dfe:	4649      	mov	r1, r9
 8007e00:	eb43 0501 	adc.w	r5, r3, r1
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	00eb      	lsls	r3, r5, #3
 8007e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e12:	00e2      	lsls	r2, r4, #3
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	4643      	mov	r3, r8
 8007e1a:	18e3      	adds	r3, r4, r3
 8007e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e20:	464b      	mov	r3, r9
 8007e22:	eb45 0303 	adc.w	r3, r5, r3
 8007e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e46:	4629      	mov	r1, r5
 8007e48:	008b      	lsls	r3, r1, #2
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e50:	4621      	mov	r1, r4
 8007e52:	008a      	lsls	r2, r1, #2
 8007e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e58:	f7f8 fa12 	bl	8000280 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4b60      	ldr	r3, [pc, #384]	@ (8007fe4 <UART_SetConfig+0x4e4>)
 8007e62:	fba3 2302 	umull	r2, r3, r3, r2
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	011c      	lsls	r4, r3, #4
 8007e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	1891      	adds	r1, r2, r2
 8007e82:	61b9      	str	r1, [r7, #24]
 8007e84:	415b      	adcs	r3, r3
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	1851      	adds	r1, r2, r1
 8007e90:	6139      	str	r1, [r7, #16]
 8007e92:	4649      	mov	r1, r9
 8007e94:	414b      	adcs	r3, r1
 8007e96:	617b      	str	r3, [r7, #20]
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	00cb      	lsls	r3, r1, #3
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eae:	4651      	mov	r1, sl
 8007eb0:	00ca      	lsls	r2, r1, #3
 8007eb2:	4610      	mov	r0, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4642      	mov	r2, r8
 8007eba:	189b      	adds	r3, r3, r2
 8007ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	460a      	mov	r2, r1
 8007ec4:	eb42 0303 	adc.w	r3, r2, r3
 8007ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ed6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ed8:	f04f 0200 	mov.w	r2, #0
 8007edc:	f04f 0300 	mov.w	r3, #0
 8007ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	008b      	lsls	r3, r1, #2
 8007ee8:	4641      	mov	r1, r8
 8007eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eee:	4641      	mov	r1, r8
 8007ef0:	008a      	lsls	r2, r1, #2
 8007ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ef6:	f7f8 f9c3 	bl	8000280 <__aeabi_uldivmod>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4611      	mov	r1, r2
 8007f00:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <UART_SetConfig+0x4e4>)
 8007f02:	fba3 2301 	umull	r2, r3, r3, r1
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	2264      	movs	r2, #100	@ 0x64
 8007f0a:	fb02 f303 	mul.w	r3, r2, r3
 8007f0e:	1acb      	subs	r3, r1, r3
 8007f10:	011b      	lsls	r3, r3, #4
 8007f12:	3332      	adds	r3, #50	@ 0x32
 8007f14:	4a33      	ldr	r2, [pc, #204]	@ (8007fe4 <UART_SetConfig+0x4e4>)
 8007f16:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f20:	441c      	add	r4, r3
 8007f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f26:	2200      	movs	r2, #0
 8007f28:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	1891      	adds	r1, r2, r2
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	415b      	adcs	r3, r3
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f40:	4641      	mov	r1, r8
 8007f42:	1851      	adds	r1, r2, r1
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	4649      	mov	r1, r9
 8007f48:	414b      	adcs	r3, r1
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f58:	4659      	mov	r1, fp
 8007f5a:	00cb      	lsls	r3, r1, #3
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f62:	4651      	mov	r1, sl
 8007f64:	00ca      	lsls	r2, r1, #3
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f72:	464b      	mov	r3, r9
 8007f74:	460a      	mov	r2, r1
 8007f76:	eb42 0303 	adc.w	r3, r2, r3
 8007f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f86:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f94:	4649      	mov	r1, r9
 8007f96:	008b      	lsls	r3, r1, #2
 8007f98:	4641      	mov	r1, r8
 8007f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	008a      	lsls	r2, r1, #2
 8007fa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fa6:	f7f8 f96b 	bl	8000280 <__aeabi_uldivmod>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe4 <UART_SetConfig+0x4e4>)
 8007fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb4:	095b      	lsrs	r3, r3, #5
 8007fb6:	2164      	movs	r1, #100	@ 0x64
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	3332      	adds	r3, #50	@ 0x32
 8007fc2:	4a08      	ldr	r2, [pc, #32]	@ (8007fe4 <UART_SetConfig+0x4e4>)
 8007fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc8:	095b      	lsrs	r3, r3, #5
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4422      	add	r2, r4
 8007fd6:	609a      	str	r2, [r3, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe4:	51eb851f 	.word	0x51eb851f

08007fe8 <atoi>:
 8007fe8:	220a      	movs	r2, #10
 8007fea:	2100      	movs	r1, #0
 8007fec:	f000 b87a 	b.w	80080e4 <strtol>

08007ff0 <_strtol_l.constprop.0>:
 8007ff0:	2b24      	cmp	r3, #36	@ 0x24
 8007ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff6:	4686      	mov	lr, r0
 8007ff8:	4690      	mov	r8, r2
 8007ffa:	d801      	bhi.n	8008000 <_strtol_l.constprop.0+0x10>
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d106      	bne.n	800800e <_strtol_l.constprop.0+0x1e>
 8008000:	f000 fafa 	bl	80085f8 <__errno>
 8008004:	2316      	movs	r3, #22
 8008006:	6003      	str	r3, [r0, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	4834      	ldr	r0, [pc, #208]	@ (80080e0 <_strtol_l.constprop.0+0xf0>)
 8008010:	460d      	mov	r5, r1
 8008012:	462a      	mov	r2, r5
 8008014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008018:	5d06      	ldrb	r6, [r0, r4]
 800801a:	f016 0608 	ands.w	r6, r6, #8
 800801e:	d1f8      	bne.n	8008012 <_strtol_l.constprop.0+0x22>
 8008020:	2c2d      	cmp	r4, #45	@ 0x2d
 8008022:	d12d      	bne.n	8008080 <_strtol_l.constprop.0+0x90>
 8008024:	782c      	ldrb	r4, [r5, #0]
 8008026:	2601      	movs	r6, #1
 8008028:	1c95      	adds	r5, r2, #2
 800802a:	f033 0210 	bics.w	r2, r3, #16
 800802e:	d109      	bne.n	8008044 <_strtol_l.constprop.0+0x54>
 8008030:	2c30      	cmp	r4, #48	@ 0x30
 8008032:	d12a      	bne.n	800808a <_strtol_l.constprop.0+0x9a>
 8008034:	782a      	ldrb	r2, [r5, #0]
 8008036:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800803a:	2a58      	cmp	r2, #88	@ 0x58
 800803c:	d125      	bne.n	800808a <_strtol_l.constprop.0+0x9a>
 800803e:	786c      	ldrb	r4, [r5, #1]
 8008040:	2310      	movs	r3, #16
 8008042:	3502      	adds	r5, #2
 8008044:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008048:	f10c 3cff 	add.w	ip, ip, #4294967295
 800804c:	2200      	movs	r2, #0
 800804e:	fbbc f9f3 	udiv	r9, ip, r3
 8008052:	4610      	mov	r0, r2
 8008054:	fb03 ca19 	mls	sl, r3, r9, ip
 8008058:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800805c:	2f09      	cmp	r7, #9
 800805e:	d81b      	bhi.n	8008098 <_strtol_l.constprop.0+0xa8>
 8008060:	463c      	mov	r4, r7
 8008062:	42a3      	cmp	r3, r4
 8008064:	dd27      	ble.n	80080b6 <_strtol_l.constprop.0+0xc6>
 8008066:	1c57      	adds	r7, r2, #1
 8008068:	d007      	beq.n	800807a <_strtol_l.constprop.0+0x8a>
 800806a:	4581      	cmp	r9, r0
 800806c:	d320      	bcc.n	80080b0 <_strtol_l.constprop.0+0xc0>
 800806e:	d101      	bne.n	8008074 <_strtol_l.constprop.0+0x84>
 8008070:	45a2      	cmp	sl, r4
 8008072:	db1d      	blt.n	80080b0 <_strtol_l.constprop.0+0xc0>
 8008074:	fb00 4003 	mla	r0, r0, r3, r4
 8008078:	2201      	movs	r2, #1
 800807a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800807e:	e7eb      	b.n	8008058 <_strtol_l.constprop.0+0x68>
 8008080:	2c2b      	cmp	r4, #43	@ 0x2b
 8008082:	bf04      	itt	eq
 8008084:	782c      	ldrbeq	r4, [r5, #0]
 8008086:	1c95      	addeq	r5, r2, #2
 8008088:	e7cf      	b.n	800802a <_strtol_l.constprop.0+0x3a>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1da      	bne.n	8008044 <_strtol_l.constprop.0+0x54>
 800808e:	2c30      	cmp	r4, #48	@ 0x30
 8008090:	bf0c      	ite	eq
 8008092:	2308      	moveq	r3, #8
 8008094:	230a      	movne	r3, #10
 8008096:	e7d5      	b.n	8008044 <_strtol_l.constprop.0+0x54>
 8008098:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800809c:	2f19      	cmp	r7, #25
 800809e:	d801      	bhi.n	80080a4 <_strtol_l.constprop.0+0xb4>
 80080a0:	3c37      	subs	r4, #55	@ 0x37
 80080a2:	e7de      	b.n	8008062 <_strtol_l.constprop.0+0x72>
 80080a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080a8:	2f19      	cmp	r7, #25
 80080aa:	d804      	bhi.n	80080b6 <_strtol_l.constprop.0+0xc6>
 80080ac:	3c57      	subs	r4, #87	@ 0x57
 80080ae:	e7d8      	b.n	8008062 <_strtol_l.constprop.0+0x72>
 80080b0:	f04f 32ff 	mov.w	r2, #4294967295
 80080b4:	e7e1      	b.n	800807a <_strtol_l.constprop.0+0x8a>
 80080b6:	1c53      	adds	r3, r2, #1
 80080b8:	d108      	bne.n	80080cc <_strtol_l.constprop.0+0xdc>
 80080ba:	2322      	movs	r3, #34	@ 0x22
 80080bc:	f8ce 3000 	str.w	r3, [lr]
 80080c0:	4660      	mov	r0, ip
 80080c2:	f1b8 0f00 	cmp.w	r8, #0
 80080c6:	d0a0      	beq.n	800800a <_strtol_l.constprop.0+0x1a>
 80080c8:	1e69      	subs	r1, r5, #1
 80080ca:	e006      	b.n	80080da <_strtol_l.constprop.0+0xea>
 80080cc:	b106      	cbz	r6, 80080d0 <_strtol_l.constprop.0+0xe0>
 80080ce:	4240      	negs	r0, r0
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d099      	beq.n	800800a <_strtol_l.constprop.0+0x1a>
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	d1f6      	bne.n	80080c8 <_strtol_l.constprop.0+0xd8>
 80080da:	f8c8 1000 	str.w	r1, [r8]
 80080de:	e794      	b.n	800800a <_strtol_l.constprop.0+0x1a>
 80080e0:	080095e5 	.word	0x080095e5

080080e4 <strtol>:
 80080e4:	4613      	mov	r3, r2
 80080e6:	460a      	mov	r2, r1
 80080e8:	4601      	mov	r1, r0
 80080ea:	4802      	ldr	r0, [pc, #8]	@ (80080f4 <strtol+0x10>)
 80080ec:	6800      	ldr	r0, [r0, #0]
 80080ee:	f7ff bf7f 	b.w	8007ff0 <_strtol_l.constprop.0>
 80080f2:	bf00      	nop
 80080f4:	20000018 	.word	0x20000018

080080f8 <std>:
 80080f8:	2300      	movs	r3, #0
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4604      	mov	r4, r0
 80080fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008106:	6083      	str	r3, [r0, #8]
 8008108:	8181      	strh	r1, [r0, #12]
 800810a:	6643      	str	r3, [r0, #100]	@ 0x64
 800810c:	81c2      	strh	r2, [r0, #14]
 800810e:	6183      	str	r3, [r0, #24]
 8008110:	4619      	mov	r1, r3
 8008112:	2208      	movs	r2, #8
 8008114:	305c      	adds	r0, #92	@ 0x5c
 8008116:	f000 fa21 	bl	800855c <memset>
 800811a:	4b0d      	ldr	r3, [pc, #52]	@ (8008150 <std+0x58>)
 800811c:	6263      	str	r3, [r4, #36]	@ 0x24
 800811e:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <std+0x5c>)
 8008120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008122:	4b0d      	ldr	r3, [pc, #52]	@ (8008158 <std+0x60>)
 8008124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008126:	4b0d      	ldr	r3, [pc, #52]	@ (800815c <std+0x64>)
 8008128:	6323      	str	r3, [r4, #48]	@ 0x30
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <std+0x68>)
 800812c:	6224      	str	r4, [r4, #32]
 800812e:	429c      	cmp	r4, r3
 8008130:	d006      	beq.n	8008140 <std+0x48>
 8008132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008136:	4294      	cmp	r4, r2
 8008138:	d002      	beq.n	8008140 <std+0x48>
 800813a:	33d0      	adds	r3, #208	@ 0xd0
 800813c:	429c      	cmp	r4, r3
 800813e:	d105      	bne.n	800814c <std+0x54>
 8008140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008148:	f000 ba80 	b.w	800864c <__retarget_lock_init_recursive>
 800814c:	bd10      	pop	{r4, pc}
 800814e:	bf00      	nop
 8008150:	080083ad 	.word	0x080083ad
 8008154:	080083cf 	.word	0x080083cf
 8008158:	08008407 	.word	0x08008407
 800815c:	0800842b 	.word	0x0800842b
 8008160:	200003f8 	.word	0x200003f8

08008164 <stdio_exit_handler>:
 8008164:	4a02      	ldr	r2, [pc, #8]	@ (8008170 <stdio_exit_handler+0xc>)
 8008166:	4903      	ldr	r1, [pc, #12]	@ (8008174 <stdio_exit_handler+0x10>)
 8008168:	4803      	ldr	r0, [pc, #12]	@ (8008178 <stdio_exit_handler+0x14>)
 800816a:	f000 b869 	b.w	8008240 <_fwalk_sglue>
 800816e:	bf00      	nop
 8008170:	2000000c 	.word	0x2000000c
 8008174:	0800919d 	.word	0x0800919d
 8008178:	2000001c 	.word	0x2000001c

0800817c <cleanup_stdio>:
 800817c:	6841      	ldr	r1, [r0, #4]
 800817e:	4b0c      	ldr	r3, [pc, #48]	@ (80081b0 <cleanup_stdio+0x34>)
 8008180:	4299      	cmp	r1, r3
 8008182:	b510      	push	{r4, lr}
 8008184:	4604      	mov	r4, r0
 8008186:	d001      	beq.n	800818c <cleanup_stdio+0x10>
 8008188:	f001 f808 	bl	800919c <_fflush_r>
 800818c:	68a1      	ldr	r1, [r4, #8]
 800818e:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <cleanup_stdio+0x38>)
 8008190:	4299      	cmp	r1, r3
 8008192:	d002      	beq.n	800819a <cleanup_stdio+0x1e>
 8008194:	4620      	mov	r0, r4
 8008196:	f001 f801 	bl	800919c <_fflush_r>
 800819a:	68e1      	ldr	r1, [r4, #12]
 800819c:	4b06      	ldr	r3, [pc, #24]	@ (80081b8 <cleanup_stdio+0x3c>)
 800819e:	4299      	cmp	r1, r3
 80081a0:	d004      	beq.n	80081ac <cleanup_stdio+0x30>
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a8:	f000 bff8 	b.w	800919c <_fflush_r>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	bf00      	nop
 80081b0:	200003f8 	.word	0x200003f8
 80081b4:	20000460 	.word	0x20000460
 80081b8:	200004c8 	.word	0x200004c8

080081bc <global_stdio_init.part.0>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <global_stdio_init.part.0+0x30>)
 80081c0:	4c0b      	ldr	r4, [pc, #44]	@ (80081f0 <global_stdio_init.part.0+0x34>)
 80081c2:	4a0c      	ldr	r2, [pc, #48]	@ (80081f4 <global_stdio_init.part.0+0x38>)
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	4620      	mov	r0, r4
 80081c8:	2200      	movs	r2, #0
 80081ca:	2104      	movs	r1, #4
 80081cc:	f7ff ff94 	bl	80080f8 <std>
 80081d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081d4:	2201      	movs	r2, #1
 80081d6:	2109      	movs	r1, #9
 80081d8:	f7ff ff8e 	bl	80080f8 <std>
 80081dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081e0:	2202      	movs	r2, #2
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	2112      	movs	r1, #18
 80081e8:	f7ff bf86 	b.w	80080f8 <std>
 80081ec:	20000530 	.word	0x20000530
 80081f0:	200003f8 	.word	0x200003f8
 80081f4:	08008165 	.word	0x08008165

080081f8 <__sfp_lock_acquire>:
 80081f8:	4801      	ldr	r0, [pc, #4]	@ (8008200 <__sfp_lock_acquire+0x8>)
 80081fa:	f000 ba28 	b.w	800864e <__retarget_lock_acquire_recursive>
 80081fe:	bf00      	nop
 8008200:	20000539 	.word	0x20000539

08008204 <__sfp_lock_release>:
 8008204:	4801      	ldr	r0, [pc, #4]	@ (800820c <__sfp_lock_release+0x8>)
 8008206:	f000 ba23 	b.w	8008650 <__retarget_lock_release_recursive>
 800820a:	bf00      	nop
 800820c:	20000539 	.word	0x20000539

08008210 <__sinit>:
 8008210:	b510      	push	{r4, lr}
 8008212:	4604      	mov	r4, r0
 8008214:	f7ff fff0 	bl	80081f8 <__sfp_lock_acquire>
 8008218:	6a23      	ldr	r3, [r4, #32]
 800821a:	b11b      	cbz	r3, 8008224 <__sinit+0x14>
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f7ff bff0 	b.w	8008204 <__sfp_lock_release>
 8008224:	4b04      	ldr	r3, [pc, #16]	@ (8008238 <__sinit+0x28>)
 8008226:	6223      	str	r3, [r4, #32]
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <__sinit+0x2c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f5      	bne.n	800821c <__sinit+0xc>
 8008230:	f7ff ffc4 	bl	80081bc <global_stdio_init.part.0>
 8008234:	e7f2      	b.n	800821c <__sinit+0xc>
 8008236:	bf00      	nop
 8008238:	0800817d 	.word	0x0800817d
 800823c:	20000530 	.word	0x20000530

08008240 <_fwalk_sglue>:
 8008240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008244:	4607      	mov	r7, r0
 8008246:	4688      	mov	r8, r1
 8008248:	4614      	mov	r4, r2
 800824a:	2600      	movs	r6, #0
 800824c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008250:	f1b9 0901 	subs.w	r9, r9, #1
 8008254:	d505      	bpl.n	8008262 <_fwalk_sglue+0x22>
 8008256:	6824      	ldr	r4, [r4, #0]
 8008258:	2c00      	cmp	r4, #0
 800825a:	d1f7      	bne.n	800824c <_fwalk_sglue+0xc>
 800825c:	4630      	mov	r0, r6
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d907      	bls.n	8008278 <_fwalk_sglue+0x38>
 8008268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800826c:	3301      	adds	r3, #1
 800826e:	d003      	beq.n	8008278 <_fwalk_sglue+0x38>
 8008270:	4629      	mov	r1, r5
 8008272:	4638      	mov	r0, r7
 8008274:	47c0      	blx	r8
 8008276:	4306      	orrs	r6, r0
 8008278:	3568      	adds	r5, #104	@ 0x68
 800827a:	e7e9      	b.n	8008250 <_fwalk_sglue+0x10>

0800827c <iprintf>:
 800827c:	b40f      	push	{r0, r1, r2, r3}
 800827e:	b507      	push	{r0, r1, r2, lr}
 8008280:	4906      	ldr	r1, [pc, #24]	@ (800829c <iprintf+0x20>)
 8008282:	ab04      	add	r3, sp, #16
 8008284:	6808      	ldr	r0, [r1, #0]
 8008286:	f853 2b04 	ldr.w	r2, [r3], #4
 800828a:	6881      	ldr	r1, [r0, #8]
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	f000 fc5b 	bl	8008b48 <_vfiprintf_r>
 8008292:	b003      	add	sp, #12
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b004      	add	sp, #16
 800829a:	4770      	bx	lr
 800829c:	20000018 	.word	0x20000018

080082a0 <putchar>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	@ (80082ac <putchar+0xc>)
 80082a2:	4601      	mov	r1, r0
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	6882      	ldr	r2, [r0, #8]
 80082a8:	f001 b802 	b.w	80092b0 <_putc_r>
 80082ac:	20000018 	.word	0x20000018

080082b0 <_puts_r>:
 80082b0:	6a03      	ldr	r3, [r0, #32]
 80082b2:	b570      	push	{r4, r5, r6, lr}
 80082b4:	6884      	ldr	r4, [r0, #8]
 80082b6:	4605      	mov	r5, r0
 80082b8:	460e      	mov	r6, r1
 80082ba:	b90b      	cbnz	r3, 80082c0 <_puts_r+0x10>
 80082bc:	f7ff ffa8 	bl	8008210 <__sinit>
 80082c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c2:	07db      	lsls	r3, r3, #31
 80082c4:	d405      	bmi.n	80082d2 <_puts_r+0x22>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	0598      	lsls	r0, r3, #22
 80082ca:	d402      	bmi.n	80082d2 <_puts_r+0x22>
 80082cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ce:	f000 f9be 	bl	800864e <__retarget_lock_acquire_recursive>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	0719      	lsls	r1, r3, #28
 80082d6:	d502      	bpl.n	80082de <_puts_r+0x2e>
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d135      	bne.n	800834a <_puts_r+0x9a>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f000 f8e5 	bl	80084b0 <__swsetup_r>
 80082e6:	b380      	cbz	r0, 800834a <_puts_r+0x9a>
 80082e8:	f04f 35ff 	mov.w	r5, #4294967295
 80082ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ee:	07da      	lsls	r2, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_puts_r+0x4e>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	059b      	lsls	r3, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_puts_r+0x4e>
 80082f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082fa:	f000 f9a9 	bl	8008650 <__retarget_lock_release_recursive>
 80082fe:	4628      	mov	r0, r5
 8008300:	bd70      	pop	{r4, r5, r6, pc}
 8008302:	2b00      	cmp	r3, #0
 8008304:	da04      	bge.n	8008310 <_puts_r+0x60>
 8008306:	69a2      	ldr	r2, [r4, #24]
 8008308:	429a      	cmp	r2, r3
 800830a:	dc17      	bgt.n	800833c <_puts_r+0x8c>
 800830c:	290a      	cmp	r1, #10
 800830e:	d015      	beq.n	800833c <_puts_r+0x8c>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	7019      	strb	r1, [r3, #0]
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800831e:	3b01      	subs	r3, #1
 8008320:	60a3      	str	r3, [r4, #8]
 8008322:	2900      	cmp	r1, #0
 8008324:	d1ed      	bne.n	8008302 <_puts_r+0x52>
 8008326:	2b00      	cmp	r3, #0
 8008328:	da11      	bge.n	800834e <_puts_r+0x9e>
 800832a:	4622      	mov	r2, r4
 800832c:	210a      	movs	r1, #10
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f87f 	bl	8008432 <__swbuf_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d0d7      	beq.n	80082e8 <_puts_r+0x38>
 8008338:	250a      	movs	r5, #10
 800833a:	e7d7      	b.n	80082ec <_puts_r+0x3c>
 800833c:	4622      	mov	r2, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f000 f877 	bl	8008432 <__swbuf_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d1e7      	bne.n	8008318 <_puts_r+0x68>
 8008348:	e7ce      	b.n	80082e8 <_puts_r+0x38>
 800834a:	3e01      	subs	r6, #1
 800834c:	e7e4      	b.n	8008318 <_puts_r+0x68>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	220a      	movs	r2, #10
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e7ee      	b.n	8008338 <_puts_r+0x88>
	...

0800835c <puts>:
 800835c:	4b02      	ldr	r3, [pc, #8]	@ (8008368 <puts+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f7ff bfa5 	b.w	80082b0 <_puts_r>
 8008366:	bf00      	nop
 8008368:	20000018 	.word	0x20000018

0800836c <siprintf>:
 800836c:	b40e      	push	{r1, r2, r3}
 800836e:	b500      	push	{lr}
 8008370:	b09c      	sub	sp, #112	@ 0x70
 8008372:	ab1d      	add	r3, sp, #116	@ 0x74
 8008374:	9002      	str	r0, [sp, #8]
 8008376:	9006      	str	r0, [sp, #24]
 8008378:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800837c:	4809      	ldr	r0, [pc, #36]	@ (80083a4 <siprintf+0x38>)
 800837e:	9107      	str	r1, [sp, #28]
 8008380:	9104      	str	r1, [sp, #16]
 8008382:	4909      	ldr	r1, [pc, #36]	@ (80083a8 <siprintf+0x3c>)
 8008384:	f853 2b04 	ldr.w	r2, [r3], #4
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	6800      	ldr	r0, [r0, #0]
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	a902      	add	r1, sp, #8
 8008390:	f000 fab4 	bl	80088fc <_svfiprintf_r>
 8008394:	9b02      	ldr	r3, [sp, #8]
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	b01c      	add	sp, #112	@ 0x70
 800839c:	f85d eb04 	ldr.w	lr, [sp], #4
 80083a0:	b003      	add	sp, #12
 80083a2:	4770      	bx	lr
 80083a4:	20000018 	.word	0x20000018
 80083a8:	ffff0208 	.word	0xffff0208

080083ac <__sread>:
 80083ac:	b510      	push	{r4, lr}
 80083ae:	460c      	mov	r4, r1
 80083b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b4:	f000 f8fc 	bl	80085b0 <_read_r>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	bfab      	itete	ge
 80083bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083be:	89a3      	ldrhlt	r3, [r4, #12]
 80083c0:	181b      	addge	r3, r3, r0
 80083c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083c6:	bfac      	ite	ge
 80083c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083ca:	81a3      	strhlt	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__swrite>:
 80083ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	461f      	mov	r7, r3
 80083d4:	898b      	ldrh	r3, [r1, #12]
 80083d6:	05db      	lsls	r3, r3, #23
 80083d8:	4605      	mov	r5, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	4616      	mov	r6, r2
 80083de:	d505      	bpl.n	80083ec <__swrite+0x1e>
 80083e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e4:	2302      	movs	r3, #2
 80083e6:	2200      	movs	r2, #0
 80083e8:	f000 f8d0 	bl	800858c <_lseek_r>
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	4632      	mov	r2, r6
 80083fa:	463b      	mov	r3, r7
 80083fc:	4628      	mov	r0, r5
 80083fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008402:	f000 b8e7 	b.w	80085d4 <_write_r>

08008406 <__sseek>:
 8008406:	b510      	push	{r4, lr}
 8008408:	460c      	mov	r4, r1
 800840a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840e:	f000 f8bd 	bl	800858c <_lseek_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	bf15      	itete	ne
 8008418:	6560      	strne	r0, [r4, #84]	@ 0x54
 800841a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800841e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008422:	81a3      	strheq	r3, [r4, #12]
 8008424:	bf18      	it	ne
 8008426:	81a3      	strhne	r3, [r4, #12]
 8008428:	bd10      	pop	{r4, pc}

0800842a <__sclose>:
 800842a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842e:	f000 b89d 	b.w	800856c <_close_r>

08008432 <__swbuf_r>:
 8008432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008434:	460e      	mov	r6, r1
 8008436:	4614      	mov	r4, r2
 8008438:	4605      	mov	r5, r0
 800843a:	b118      	cbz	r0, 8008444 <__swbuf_r+0x12>
 800843c:	6a03      	ldr	r3, [r0, #32]
 800843e:	b90b      	cbnz	r3, 8008444 <__swbuf_r+0x12>
 8008440:	f7ff fee6 	bl	8008210 <__sinit>
 8008444:	69a3      	ldr	r3, [r4, #24]
 8008446:	60a3      	str	r3, [r4, #8]
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	071a      	lsls	r2, r3, #28
 800844c:	d501      	bpl.n	8008452 <__swbuf_r+0x20>
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	b943      	cbnz	r3, 8008464 <__swbuf_r+0x32>
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f000 f82b 	bl	80084b0 <__swsetup_r>
 800845a:	b118      	cbz	r0, 8008464 <__swbuf_r+0x32>
 800845c:	f04f 37ff 	mov.w	r7, #4294967295
 8008460:	4638      	mov	r0, r7
 8008462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	6922      	ldr	r2, [r4, #16]
 8008468:	1a98      	subs	r0, r3, r2
 800846a:	6963      	ldr	r3, [r4, #20]
 800846c:	b2f6      	uxtb	r6, r6
 800846e:	4283      	cmp	r3, r0
 8008470:	4637      	mov	r7, r6
 8008472:	dc05      	bgt.n	8008480 <__swbuf_r+0x4e>
 8008474:	4621      	mov	r1, r4
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fe90 	bl	800919c <_fflush_r>
 800847c:	2800      	cmp	r0, #0
 800847e:	d1ed      	bne.n	800845c <__swbuf_r+0x2a>
 8008480:	68a3      	ldr	r3, [r4, #8]
 8008482:	3b01      	subs	r3, #1
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	6022      	str	r2, [r4, #0]
 800848c:	701e      	strb	r6, [r3, #0]
 800848e:	6962      	ldr	r2, [r4, #20]
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	429a      	cmp	r2, r3
 8008494:	d004      	beq.n	80084a0 <__swbuf_r+0x6e>
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	07db      	lsls	r3, r3, #31
 800849a:	d5e1      	bpl.n	8008460 <__swbuf_r+0x2e>
 800849c:	2e0a      	cmp	r6, #10
 800849e:	d1df      	bne.n	8008460 <__swbuf_r+0x2e>
 80084a0:	4621      	mov	r1, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 fe7a 	bl	800919c <_fflush_r>
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d0d9      	beq.n	8008460 <__swbuf_r+0x2e>
 80084ac:	e7d6      	b.n	800845c <__swbuf_r+0x2a>
	...

080084b0 <__swsetup_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4b29      	ldr	r3, [pc, #164]	@ (8008558 <__swsetup_r+0xa8>)
 80084b4:	4605      	mov	r5, r0
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	460c      	mov	r4, r1
 80084ba:	b118      	cbz	r0, 80084c4 <__swsetup_r+0x14>
 80084bc:	6a03      	ldr	r3, [r0, #32]
 80084be:	b90b      	cbnz	r3, 80084c4 <__swsetup_r+0x14>
 80084c0:	f7ff fea6 	bl	8008210 <__sinit>
 80084c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c8:	0719      	lsls	r1, r3, #28
 80084ca:	d422      	bmi.n	8008512 <__swsetup_r+0x62>
 80084cc:	06da      	lsls	r2, r3, #27
 80084ce:	d407      	bmi.n	80084e0 <__swsetup_r+0x30>
 80084d0:	2209      	movs	r2, #9
 80084d2:	602a      	str	r2, [r5, #0]
 80084d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	e033      	b.n	8008548 <__swsetup_r+0x98>
 80084e0:	0758      	lsls	r0, r3, #29
 80084e2:	d512      	bpl.n	800850a <__swsetup_r+0x5a>
 80084e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084e6:	b141      	cbz	r1, 80084fa <__swsetup_r+0x4a>
 80084e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084ec:	4299      	cmp	r1, r3
 80084ee:	d002      	beq.n	80084f6 <__swsetup_r+0x46>
 80084f0:	4628      	mov	r0, r5
 80084f2:	f000 f8af 	bl	8008654 <_free_r>
 80084f6:	2300      	movs	r3, #0
 80084f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084fa:	89a3      	ldrh	r3, [r4, #12]
 80084fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008500:	81a3      	strh	r3, [r4, #12]
 8008502:	2300      	movs	r3, #0
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	89a3      	ldrh	r3, [r4, #12]
 800850c:	f043 0308 	orr.w	r3, r3, #8
 8008510:	81a3      	strh	r3, [r4, #12]
 8008512:	6923      	ldr	r3, [r4, #16]
 8008514:	b94b      	cbnz	r3, 800852a <__swsetup_r+0x7a>
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800851c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008520:	d003      	beq.n	800852a <__swsetup_r+0x7a>
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	f000 fe87 	bl	8009238 <__smakebuf_r>
 800852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852e:	f013 0201 	ands.w	r2, r3, #1
 8008532:	d00a      	beq.n	800854a <__swsetup_r+0x9a>
 8008534:	2200      	movs	r2, #0
 8008536:	60a2      	str	r2, [r4, #8]
 8008538:	6962      	ldr	r2, [r4, #20]
 800853a:	4252      	negs	r2, r2
 800853c:	61a2      	str	r2, [r4, #24]
 800853e:	6922      	ldr	r2, [r4, #16]
 8008540:	b942      	cbnz	r2, 8008554 <__swsetup_r+0xa4>
 8008542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008546:	d1c5      	bne.n	80084d4 <__swsetup_r+0x24>
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	0799      	lsls	r1, r3, #30
 800854c:	bf58      	it	pl
 800854e:	6962      	ldrpl	r2, [r4, #20]
 8008550:	60a2      	str	r2, [r4, #8]
 8008552:	e7f4      	b.n	800853e <__swsetup_r+0x8e>
 8008554:	2000      	movs	r0, #0
 8008556:	e7f7      	b.n	8008548 <__swsetup_r+0x98>
 8008558:	20000018 	.word	0x20000018

0800855c <memset>:
 800855c:	4402      	add	r2, r0
 800855e:	4603      	mov	r3, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <_close_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d06      	ldr	r5, [pc, #24]	@ (8008588 <_close_r+0x1c>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7f9 f9e3 	bl	8001942 <_close>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_close_r+0x1a>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_close_r+0x1a>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000534 	.word	0x20000534

0800858c <_lseek_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d07      	ldr	r5, [pc, #28]	@ (80085ac <_lseek_r+0x20>)
 8008590:	4604      	mov	r4, r0
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	2200      	movs	r2, #0
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7f9 f9f8 	bl	8001990 <_lseek>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_lseek_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_lseek_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20000534 	.word	0x20000534

080085b0 <_read_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4d07      	ldr	r5, [pc, #28]	@ (80085d0 <_read_r+0x20>)
 80085b4:	4604      	mov	r4, r0
 80085b6:	4608      	mov	r0, r1
 80085b8:	4611      	mov	r1, r2
 80085ba:	2200      	movs	r2, #0
 80085bc:	602a      	str	r2, [r5, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f7f9 f986 	bl	80018d0 <_read>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d102      	bne.n	80085ce <_read_r+0x1e>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	b103      	cbz	r3, 80085ce <_read_r+0x1e>
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	bd38      	pop	{r3, r4, r5, pc}
 80085d0:	20000534 	.word	0x20000534

080085d4 <_write_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	4d07      	ldr	r5, [pc, #28]	@ (80085f4 <_write_r+0x20>)
 80085d8:	4604      	mov	r4, r0
 80085da:	4608      	mov	r0, r1
 80085dc:	4611      	mov	r1, r2
 80085de:	2200      	movs	r2, #0
 80085e0:	602a      	str	r2, [r5, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f7f9 f991 	bl	800190a <_write>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_write_r+0x1e>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_write_r+0x1e>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	20000534 	.word	0x20000534

080085f8 <__errno>:
 80085f8:	4b01      	ldr	r3, [pc, #4]	@ (8008600 <__errno+0x8>)
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20000018 	.word	0x20000018

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	4d0d      	ldr	r5, [pc, #52]	@ (800863c <__libc_init_array+0x38>)
 8008608:	4c0d      	ldr	r4, [pc, #52]	@ (8008640 <__libc_init_array+0x3c>)
 800860a:	1b64      	subs	r4, r4, r5
 800860c:	10a4      	asrs	r4, r4, #2
 800860e:	2600      	movs	r6, #0
 8008610:	42a6      	cmp	r6, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	4d0b      	ldr	r5, [pc, #44]	@ (8008644 <__libc_init_array+0x40>)
 8008616:	4c0c      	ldr	r4, [pc, #48]	@ (8008648 <__libc_init_array+0x44>)
 8008618:	f000 ff0e 	bl	8009438 <_init>
 800861c:	1b64      	subs	r4, r4, r5
 800861e:	10a4      	asrs	r4, r4, #2
 8008620:	2600      	movs	r6, #0
 8008622:	42a6      	cmp	r6, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	f855 3b04 	ldr.w	r3, [r5], #4
 800862c:	4798      	blx	r3
 800862e:	3601      	adds	r6, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	f855 3b04 	ldr.w	r3, [r5], #4
 8008636:	4798      	blx	r3
 8008638:	3601      	adds	r6, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	08009720 	.word	0x08009720
 8008640:	08009720 	.word	0x08009720
 8008644:	08009720 	.word	0x08009720
 8008648:	08009724 	.word	0x08009724

0800864c <__retarget_lock_init_recursive>:
 800864c:	4770      	bx	lr

0800864e <__retarget_lock_acquire_recursive>:
 800864e:	4770      	bx	lr

08008650 <__retarget_lock_release_recursive>:
 8008650:	4770      	bx	lr
	...

08008654 <_free_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4605      	mov	r5, r0
 8008658:	2900      	cmp	r1, #0
 800865a:	d041      	beq.n	80086e0 <_free_r+0x8c>
 800865c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008660:	1f0c      	subs	r4, r1, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	bfb8      	it	lt
 8008666:	18e4      	addlt	r4, r4, r3
 8008668:	f000 f8e0 	bl	800882c <__malloc_lock>
 800866c:	4a1d      	ldr	r2, [pc, #116]	@ (80086e4 <_free_r+0x90>)
 800866e:	6813      	ldr	r3, [r2, #0]
 8008670:	b933      	cbnz	r3, 8008680 <_free_r+0x2c>
 8008672:	6063      	str	r3, [r4, #4]
 8008674:	6014      	str	r4, [r2, #0]
 8008676:	4628      	mov	r0, r5
 8008678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800867c:	f000 b8dc 	b.w	8008838 <__malloc_unlock>
 8008680:	42a3      	cmp	r3, r4
 8008682:	d908      	bls.n	8008696 <_free_r+0x42>
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	1821      	adds	r1, r4, r0
 8008688:	428b      	cmp	r3, r1
 800868a:	bf01      	itttt	eq
 800868c:	6819      	ldreq	r1, [r3, #0]
 800868e:	685b      	ldreq	r3, [r3, #4]
 8008690:	1809      	addeq	r1, r1, r0
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	e7ed      	b.n	8008672 <_free_r+0x1e>
 8008696:	461a      	mov	r2, r3
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	b10b      	cbz	r3, 80086a0 <_free_r+0x4c>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d9fa      	bls.n	8008696 <_free_r+0x42>
 80086a0:	6811      	ldr	r1, [r2, #0]
 80086a2:	1850      	adds	r0, r2, r1
 80086a4:	42a0      	cmp	r0, r4
 80086a6:	d10b      	bne.n	80086c0 <_free_r+0x6c>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	4401      	add	r1, r0
 80086ac:	1850      	adds	r0, r2, r1
 80086ae:	4283      	cmp	r3, r0
 80086b0:	6011      	str	r1, [r2, #0]
 80086b2:	d1e0      	bne.n	8008676 <_free_r+0x22>
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	4408      	add	r0, r1
 80086bc:	6010      	str	r0, [r2, #0]
 80086be:	e7da      	b.n	8008676 <_free_r+0x22>
 80086c0:	d902      	bls.n	80086c8 <_free_r+0x74>
 80086c2:	230c      	movs	r3, #12
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	e7d6      	b.n	8008676 <_free_r+0x22>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	1821      	adds	r1, r4, r0
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf04      	itt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	6063      	str	r3, [r4, #4]
 80086d6:	bf04      	itt	eq
 80086d8:	1809      	addeq	r1, r1, r0
 80086da:	6021      	streq	r1, [r4, #0]
 80086dc:	6054      	str	r4, [r2, #4]
 80086de:	e7ca      	b.n	8008676 <_free_r+0x22>
 80086e0:	bd38      	pop	{r3, r4, r5, pc}
 80086e2:	bf00      	nop
 80086e4:	20000540 	.word	0x20000540

080086e8 <sbrk_aligned>:
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008728 <sbrk_aligned+0x40>)
 80086ec:	460c      	mov	r4, r1
 80086ee:	6831      	ldr	r1, [r6, #0]
 80086f0:	4605      	mov	r5, r0
 80086f2:	b911      	cbnz	r1, 80086fa <sbrk_aligned+0x12>
 80086f4:	f000 fe4c 	bl	8009390 <_sbrk_r>
 80086f8:	6030      	str	r0, [r6, #0]
 80086fa:	4621      	mov	r1, r4
 80086fc:	4628      	mov	r0, r5
 80086fe:	f000 fe47 	bl	8009390 <_sbrk_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	d103      	bne.n	800870e <sbrk_aligned+0x26>
 8008706:	f04f 34ff 	mov.w	r4, #4294967295
 800870a:	4620      	mov	r0, r4
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	1cc4      	adds	r4, r0, #3
 8008710:	f024 0403 	bic.w	r4, r4, #3
 8008714:	42a0      	cmp	r0, r4
 8008716:	d0f8      	beq.n	800870a <sbrk_aligned+0x22>
 8008718:	1a21      	subs	r1, r4, r0
 800871a:	4628      	mov	r0, r5
 800871c:	f000 fe38 	bl	8009390 <_sbrk_r>
 8008720:	3001      	adds	r0, #1
 8008722:	d1f2      	bne.n	800870a <sbrk_aligned+0x22>
 8008724:	e7ef      	b.n	8008706 <sbrk_aligned+0x1e>
 8008726:	bf00      	nop
 8008728:	2000053c 	.word	0x2000053c

0800872c <_malloc_r>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	1ccd      	adds	r5, r1, #3
 8008732:	f025 0503 	bic.w	r5, r5, #3
 8008736:	3508      	adds	r5, #8
 8008738:	2d0c      	cmp	r5, #12
 800873a:	bf38      	it	cc
 800873c:	250c      	movcc	r5, #12
 800873e:	2d00      	cmp	r5, #0
 8008740:	4606      	mov	r6, r0
 8008742:	db01      	blt.n	8008748 <_malloc_r+0x1c>
 8008744:	42a9      	cmp	r1, r5
 8008746:	d904      	bls.n	8008752 <_malloc_r+0x26>
 8008748:	230c      	movs	r3, #12
 800874a:	6033      	str	r3, [r6, #0]
 800874c:	2000      	movs	r0, #0
 800874e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008752:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008828 <_malloc_r+0xfc>
 8008756:	f000 f869 	bl	800882c <__malloc_lock>
 800875a:	f8d8 3000 	ldr.w	r3, [r8]
 800875e:	461c      	mov	r4, r3
 8008760:	bb44      	cbnz	r4, 80087b4 <_malloc_r+0x88>
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff ffbf 	bl	80086e8 <sbrk_aligned>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	4604      	mov	r4, r0
 800876e:	d158      	bne.n	8008822 <_malloc_r+0xf6>
 8008770:	f8d8 4000 	ldr.w	r4, [r8]
 8008774:	4627      	mov	r7, r4
 8008776:	2f00      	cmp	r7, #0
 8008778:	d143      	bne.n	8008802 <_malloc_r+0xd6>
 800877a:	2c00      	cmp	r4, #0
 800877c:	d04b      	beq.n	8008816 <_malloc_r+0xea>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	4639      	mov	r1, r7
 8008782:	4630      	mov	r0, r6
 8008784:	eb04 0903 	add.w	r9, r4, r3
 8008788:	f000 fe02 	bl	8009390 <_sbrk_r>
 800878c:	4581      	cmp	r9, r0
 800878e:	d142      	bne.n	8008816 <_malloc_r+0xea>
 8008790:	6821      	ldr	r1, [r4, #0]
 8008792:	1a6d      	subs	r5, r5, r1
 8008794:	4629      	mov	r1, r5
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ffa6 	bl	80086e8 <sbrk_aligned>
 800879c:	3001      	adds	r0, #1
 800879e:	d03a      	beq.n	8008816 <_malloc_r+0xea>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	442b      	add	r3, r5
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	f8d8 3000 	ldr.w	r3, [r8]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	bb62      	cbnz	r2, 8008808 <_malloc_r+0xdc>
 80087ae:	f8c8 7000 	str.w	r7, [r8]
 80087b2:	e00f      	b.n	80087d4 <_malloc_r+0xa8>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	1b52      	subs	r2, r2, r5
 80087b8:	d420      	bmi.n	80087fc <_malloc_r+0xd0>
 80087ba:	2a0b      	cmp	r2, #11
 80087bc:	d917      	bls.n	80087ee <_malloc_r+0xc2>
 80087be:	1961      	adds	r1, r4, r5
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	6025      	str	r5, [r4, #0]
 80087c4:	bf18      	it	ne
 80087c6:	6059      	strne	r1, [r3, #4]
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	bf08      	it	eq
 80087cc:	f8c8 1000 	streq.w	r1, [r8]
 80087d0:	5162      	str	r2, [r4, r5]
 80087d2:	604b      	str	r3, [r1, #4]
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f82f 	bl	8008838 <__malloc_unlock>
 80087da:	f104 000b 	add.w	r0, r4, #11
 80087de:	1d23      	adds	r3, r4, #4
 80087e0:	f020 0007 	bic.w	r0, r0, #7
 80087e4:	1ac2      	subs	r2, r0, r3
 80087e6:	bf1c      	itt	ne
 80087e8:	1a1b      	subne	r3, r3, r0
 80087ea:	50a3      	strne	r3, [r4, r2]
 80087ec:	e7af      	b.n	800874e <_malloc_r+0x22>
 80087ee:	6862      	ldr	r2, [r4, #4]
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	bf0c      	ite	eq
 80087f4:	f8c8 2000 	streq.w	r2, [r8]
 80087f8:	605a      	strne	r2, [r3, #4]
 80087fa:	e7eb      	b.n	80087d4 <_malloc_r+0xa8>
 80087fc:	4623      	mov	r3, r4
 80087fe:	6864      	ldr	r4, [r4, #4]
 8008800:	e7ae      	b.n	8008760 <_malloc_r+0x34>
 8008802:	463c      	mov	r4, r7
 8008804:	687f      	ldr	r7, [r7, #4]
 8008806:	e7b6      	b.n	8008776 <_malloc_r+0x4a>
 8008808:	461a      	mov	r2, r3
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	42a3      	cmp	r3, r4
 800880e:	d1fb      	bne.n	8008808 <_malloc_r+0xdc>
 8008810:	2300      	movs	r3, #0
 8008812:	6053      	str	r3, [r2, #4]
 8008814:	e7de      	b.n	80087d4 <_malloc_r+0xa8>
 8008816:	230c      	movs	r3, #12
 8008818:	6033      	str	r3, [r6, #0]
 800881a:	4630      	mov	r0, r6
 800881c:	f000 f80c 	bl	8008838 <__malloc_unlock>
 8008820:	e794      	b.n	800874c <_malloc_r+0x20>
 8008822:	6005      	str	r5, [r0, #0]
 8008824:	e7d6      	b.n	80087d4 <_malloc_r+0xa8>
 8008826:	bf00      	nop
 8008828:	20000540 	.word	0x20000540

0800882c <__malloc_lock>:
 800882c:	4801      	ldr	r0, [pc, #4]	@ (8008834 <__malloc_lock+0x8>)
 800882e:	f7ff bf0e 	b.w	800864e <__retarget_lock_acquire_recursive>
 8008832:	bf00      	nop
 8008834:	20000538 	.word	0x20000538

08008838 <__malloc_unlock>:
 8008838:	4801      	ldr	r0, [pc, #4]	@ (8008840 <__malloc_unlock+0x8>)
 800883a:	f7ff bf09 	b.w	8008650 <__retarget_lock_release_recursive>
 800883e:	bf00      	nop
 8008840:	20000538 	.word	0x20000538

08008844 <__ssputs_r>:
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	688e      	ldr	r6, [r1, #8]
 800884a:	461f      	mov	r7, r3
 800884c:	42be      	cmp	r6, r7
 800884e:	680b      	ldr	r3, [r1, #0]
 8008850:	4682      	mov	sl, r0
 8008852:	460c      	mov	r4, r1
 8008854:	4690      	mov	r8, r2
 8008856:	d82d      	bhi.n	80088b4 <__ssputs_r+0x70>
 8008858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800885c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008860:	d026      	beq.n	80088b0 <__ssputs_r+0x6c>
 8008862:	6965      	ldr	r5, [r4, #20]
 8008864:	6909      	ldr	r1, [r1, #16]
 8008866:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800886a:	eba3 0901 	sub.w	r9, r3, r1
 800886e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008872:	1c7b      	adds	r3, r7, #1
 8008874:	444b      	add	r3, r9
 8008876:	106d      	asrs	r5, r5, #1
 8008878:	429d      	cmp	r5, r3
 800887a:	bf38      	it	cc
 800887c:	461d      	movcc	r5, r3
 800887e:	0553      	lsls	r3, r2, #21
 8008880:	d527      	bpl.n	80088d2 <__ssputs_r+0x8e>
 8008882:	4629      	mov	r1, r5
 8008884:	f7ff ff52 	bl	800872c <_malloc_r>
 8008888:	4606      	mov	r6, r0
 800888a:	b360      	cbz	r0, 80088e6 <__ssputs_r+0xa2>
 800888c:	6921      	ldr	r1, [r4, #16]
 800888e:	464a      	mov	r2, r9
 8008890:	f000 fd8e 	bl	80093b0 <memcpy>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800889a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	6126      	str	r6, [r4, #16]
 80088a2:	6165      	str	r5, [r4, #20]
 80088a4:	444e      	add	r6, r9
 80088a6:	eba5 0509 	sub.w	r5, r5, r9
 80088aa:	6026      	str	r6, [r4, #0]
 80088ac:	60a5      	str	r5, [r4, #8]
 80088ae:	463e      	mov	r6, r7
 80088b0:	42be      	cmp	r6, r7
 80088b2:	d900      	bls.n	80088b6 <__ssputs_r+0x72>
 80088b4:	463e      	mov	r6, r7
 80088b6:	6820      	ldr	r0, [r4, #0]
 80088b8:	4632      	mov	r2, r6
 80088ba:	4641      	mov	r1, r8
 80088bc:	f000 fd2c 	bl	8009318 <memmove>
 80088c0:	68a3      	ldr	r3, [r4, #8]
 80088c2:	1b9b      	subs	r3, r3, r6
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	4433      	add	r3, r6
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	2000      	movs	r0, #0
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	462a      	mov	r2, r5
 80088d4:	f000 fd7a 	bl	80093cc <_realloc_r>
 80088d8:	4606      	mov	r6, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1e0      	bne.n	80088a0 <__ssputs_r+0x5c>
 80088de:	6921      	ldr	r1, [r4, #16]
 80088e0:	4650      	mov	r0, sl
 80088e2:	f7ff feb7 	bl	8008654 <_free_r>
 80088e6:	230c      	movs	r3, #12
 80088e8:	f8ca 3000 	str.w	r3, [sl]
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	e7e9      	b.n	80088ce <__ssputs_r+0x8a>
	...

080088fc <_svfiprintf_r>:
 80088fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	4698      	mov	r8, r3
 8008902:	898b      	ldrh	r3, [r1, #12]
 8008904:	061b      	lsls	r3, r3, #24
 8008906:	b09d      	sub	sp, #116	@ 0x74
 8008908:	4607      	mov	r7, r0
 800890a:	460d      	mov	r5, r1
 800890c:	4614      	mov	r4, r2
 800890e:	d510      	bpl.n	8008932 <_svfiprintf_r+0x36>
 8008910:	690b      	ldr	r3, [r1, #16]
 8008912:	b973      	cbnz	r3, 8008932 <_svfiprintf_r+0x36>
 8008914:	2140      	movs	r1, #64	@ 0x40
 8008916:	f7ff ff09 	bl	800872c <_malloc_r>
 800891a:	6028      	str	r0, [r5, #0]
 800891c:	6128      	str	r0, [r5, #16]
 800891e:	b930      	cbnz	r0, 800892e <_svfiprintf_r+0x32>
 8008920:	230c      	movs	r3, #12
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	f04f 30ff 	mov.w	r0, #4294967295
 8008928:	b01d      	add	sp, #116	@ 0x74
 800892a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	2340      	movs	r3, #64	@ 0x40
 8008930:	616b      	str	r3, [r5, #20]
 8008932:	2300      	movs	r3, #0
 8008934:	9309      	str	r3, [sp, #36]	@ 0x24
 8008936:	2320      	movs	r3, #32
 8008938:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800893c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008940:	2330      	movs	r3, #48	@ 0x30
 8008942:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ae0 <_svfiprintf_r+0x1e4>
 8008946:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800894a:	f04f 0901 	mov.w	r9, #1
 800894e:	4623      	mov	r3, r4
 8008950:	469a      	mov	sl, r3
 8008952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008956:	b10a      	cbz	r2, 800895c <_svfiprintf_r+0x60>
 8008958:	2a25      	cmp	r2, #37	@ 0x25
 800895a:	d1f9      	bne.n	8008950 <_svfiprintf_r+0x54>
 800895c:	ebba 0b04 	subs.w	fp, sl, r4
 8008960:	d00b      	beq.n	800897a <_svfiprintf_r+0x7e>
 8008962:	465b      	mov	r3, fp
 8008964:	4622      	mov	r2, r4
 8008966:	4629      	mov	r1, r5
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ff6b 	bl	8008844 <__ssputs_r>
 800896e:	3001      	adds	r0, #1
 8008970:	f000 80a7 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008976:	445a      	add	r2, fp
 8008978:	9209      	str	r2, [sp, #36]	@ 0x24
 800897a:	f89a 3000 	ldrb.w	r3, [sl]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 809f 	beq.w	8008ac2 <_svfiprintf_r+0x1c6>
 8008984:	2300      	movs	r3, #0
 8008986:	f04f 32ff 	mov.w	r2, #4294967295
 800898a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800898e:	f10a 0a01 	add.w	sl, sl, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9307      	str	r3, [sp, #28]
 8008996:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800899a:	931a      	str	r3, [sp, #104]	@ 0x68
 800899c:	4654      	mov	r4, sl
 800899e:	2205      	movs	r2, #5
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	484e      	ldr	r0, [pc, #312]	@ (8008ae0 <_svfiprintf_r+0x1e4>)
 80089a6:	f7f7 fc1b 	bl	80001e0 <memchr>
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	b9d8      	cbnz	r0, 80089e6 <_svfiprintf_r+0xea>
 80089ae:	06d0      	lsls	r0, r2, #27
 80089b0:	bf44      	itt	mi
 80089b2:	2320      	movmi	r3, #32
 80089b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b8:	0711      	lsls	r1, r2, #28
 80089ba:	bf44      	itt	mi
 80089bc:	232b      	movmi	r3, #43	@ 0x2b
 80089be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089c2:	f89a 3000 	ldrb.w	r3, [sl]
 80089c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80089c8:	d015      	beq.n	80089f6 <_svfiprintf_r+0xfa>
 80089ca:	9a07      	ldr	r2, [sp, #28]
 80089cc:	4654      	mov	r4, sl
 80089ce:	2000      	movs	r0, #0
 80089d0:	f04f 0c0a 	mov.w	ip, #10
 80089d4:	4621      	mov	r1, r4
 80089d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089da:	3b30      	subs	r3, #48	@ 0x30
 80089dc:	2b09      	cmp	r3, #9
 80089de:	d94b      	bls.n	8008a78 <_svfiprintf_r+0x17c>
 80089e0:	b1b0      	cbz	r0, 8008a10 <_svfiprintf_r+0x114>
 80089e2:	9207      	str	r2, [sp, #28]
 80089e4:	e014      	b.n	8008a10 <_svfiprintf_r+0x114>
 80089e6:	eba0 0308 	sub.w	r3, r0, r8
 80089ea:	fa09 f303 	lsl.w	r3, r9, r3
 80089ee:	4313      	orrs	r3, r2
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	46a2      	mov	sl, r4
 80089f4:	e7d2      	b.n	800899c <_svfiprintf_r+0xa0>
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	1d19      	adds	r1, r3, #4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	9103      	str	r1, [sp, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	bfbb      	ittet	lt
 8008a02:	425b      	neglt	r3, r3
 8008a04:	f042 0202 	orrlt.w	r2, r2, #2
 8008a08:	9307      	strge	r3, [sp, #28]
 8008a0a:	9307      	strlt	r3, [sp, #28]
 8008a0c:	bfb8      	it	lt
 8008a0e:	9204      	strlt	r2, [sp, #16]
 8008a10:	7823      	ldrb	r3, [r4, #0]
 8008a12:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a14:	d10a      	bne.n	8008a2c <_svfiprintf_r+0x130>
 8008a16:	7863      	ldrb	r3, [r4, #1]
 8008a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a1a:	d132      	bne.n	8008a82 <_svfiprintf_r+0x186>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	9203      	str	r2, [sp, #12]
 8008a24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a28:	3402      	adds	r4, #2
 8008a2a:	9305      	str	r3, [sp, #20]
 8008a2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008af0 <_svfiprintf_r+0x1f4>
 8008a30:	7821      	ldrb	r1, [r4, #0]
 8008a32:	2203      	movs	r2, #3
 8008a34:	4650      	mov	r0, sl
 8008a36:	f7f7 fbd3 	bl	80001e0 <memchr>
 8008a3a:	b138      	cbz	r0, 8008a4c <_svfiprintf_r+0x150>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	eba0 000a 	sub.w	r0, r0, sl
 8008a42:	2240      	movs	r2, #64	@ 0x40
 8008a44:	4082      	lsls	r2, r0
 8008a46:	4313      	orrs	r3, r2
 8008a48:	3401      	adds	r4, #1
 8008a4a:	9304      	str	r3, [sp, #16]
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	4824      	ldr	r0, [pc, #144]	@ (8008ae4 <_svfiprintf_r+0x1e8>)
 8008a52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a56:	2206      	movs	r2, #6
 8008a58:	f7f7 fbc2 	bl	80001e0 <memchr>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d036      	beq.n	8008ace <_svfiprintf_r+0x1d2>
 8008a60:	4b21      	ldr	r3, [pc, #132]	@ (8008ae8 <_svfiprintf_r+0x1ec>)
 8008a62:	bb1b      	cbnz	r3, 8008aac <_svfiprintf_r+0x1b0>
 8008a64:	9b03      	ldr	r3, [sp, #12]
 8008a66:	3307      	adds	r3, #7
 8008a68:	f023 0307 	bic.w	r3, r3, #7
 8008a6c:	3308      	adds	r3, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a72:	4433      	add	r3, r6
 8008a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a76:	e76a      	b.n	800894e <_svfiprintf_r+0x52>
 8008a78:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7a8      	b.n	80089d4 <_svfiprintf_r+0xd8>
 8008a82:	2300      	movs	r3, #0
 8008a84:	3401      	adds	r4, #1
 8008a86:	9305      	str	r3, [sp, #20]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0c0a 	mov.w	ip, #10
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a94:	3a30      	subs	r2, #48	@ 0x30
 8008a96:	2a09      	cmp	r2, #9
 8008a98:	d903      	bls.n	8008aa2 <_svfiprintf_r+0x1a6>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c6      	beq.n	8008a2c <_svfiprintf_r+0x130>
 8008a9e:	9105      	str	r1, [sp, #20]
 8008aa0:	e7c4      	b.n	8008a2c <_svfiprintf_r+0x130>
 8008aa2:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e7f0      	b.n	8008a8e <_svfiprintf_r+0x192>
 8008aac:	ab03      	add	r3, sp, #12
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ab4:	a904      	add	r1, sp, #16
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f3af 8000 	nop.w
 8008abc:	1c42      	adds	r2, r0, #1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	d1d6      	bne.n	8008a70 <_svfiprintf_r+0x174>
 8008ac2:	89ab      	ldrh	r3, [r5, #12]
 8008ac4:	065b      	lsls	r3, r3, #25
 8008ac6:	f53f af2d 	bmi.w	8008924 <_svfiprintf_r+0x28>
 8008aca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008acc:	e72c      	b.n	8008928 <_svfiprintf_r+0x2c>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b05      	ldr	r3, [pc, #20]	@ (8008aec <_svfiprintf_r+0x1f0>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f000 f9bb 	bl	8008e54 <_printf_i>
 8008ade:	e7ed      	b.n	8008abc <_svfiprintf_r+0x1c0>
 8008ae0:	080096e5 	.word	0x080096e5
 8008ae4:	080096ef 	.word	0x080096ef
 8008ae8:	00000000 	.word	0x00000000
 8008aec:	08008845 	.word	0x08008845
 8008af0:	080096eb 	.word	0x080096eb

08008af4 <__sfputc_r>:
 8008af4:	6893      	ldr	r3, [r2, #8]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	b410      	push	{r4}
 8008afc:	6093      	str	r3, [r2, #8]
 8008afe:	da08      	bge.n	8008b12 <__sfputc_r+0x1e>
 8008b00:	6994      	ldr	r4, [r2, #24]
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	db01      	blt.n	8008b0a <__sfputc_r+0x16>
 8008b06:	290a      	cmp	r1, #10
 8008b08:	d103      	bne.n	8008b12 <__sfputc_r+0x1e>
 8008b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b0e:	f7ff bc90 	b.w	8008432 <__swbuf_r>
 8008b12:	6813      	ldr	r3, [r2, #0]
 8008b14:	1c58      	adds	r0, r3, #1
 8008b16:	6010      	str	r0, [r2, #0]
 8008b18:	7019      	strb	r1, [r3, #0]
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <__sfputs_r>:
 8008b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b24:	4606      	mov	r6, r0
 8008b26:	460f      	mov	r7, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	18d5      	adds	r5, r2, r3
 8008b2c:	42ac      	cmp	r4, r5
 8008b2e:	d101      	bne.n	8008b34 <__sfputs_r+0x12>
 8008b30:	2000      	movs	r0, #0
 8008b32:	e007      	b.n	8008b44 <__sfputs_r+0x22>
 8008b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b38:	463a      	mov	r2, r7
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7ff ffda 	bl	8008af4 <__sfputc_r>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d1f3      	bne.n	8008b2c <__sfputs_r+0xa>
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b48 <_vfiprintf_r>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	460d      	mov	r5, r1
 8008b4e:	b09d      	sub	sp, #116	@ 0x74
 8008b50:	4614      	mov	r4, r2
 8008b52:	4698      	mov	r8, r3
 8008b54:	4606      	mov	r6, r0
 8008b56:	b118      	cbz	r0, 8008b60 <_vfiprintf_r+0x18>
 8008b58:	6a03      	ldr	r3, [r0, #32]
 8008b5a:	b90b      	cbnz	r3, 8008b60 <_vfiprintf_r+0x18>
 8008b5c:	f7ff fb58 	bl	8008210 <__sinit>
 8008b60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b62:	07d9      	lsls	r1, r3, #31
 8008b64:	d405      	bmi.n	8008b72 <_vfiprintf_r+0x2a>
 8008b66:	89ab      	ldrh	r3, [r5, #12]
 8008b68:	059a      	lsls	r2, r3, #22
 8008b6a:	d402      	bmi.n	8008b72 <_vfiprintf_r+0x2a>
 8008b6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b6e:	f7ff fd6e 	bl	800864e <__retarget_lock_acquire_recursive>
 8008b72:	89ab      	ldrh	r3, [r5, #12]
 8008b74:	071b      	lsls	r3, r3, #28
 8008b76:	d501      	bpl.n	8008b7c <_vfiprintf_r+0x34>
 8008b78:	692b      	ldr	r3, [r5, #16]
 8008b7a:	b99b      	cbnz	r3, 8008ba4 <_vfiprintf_r+0x5c>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff fc96 	bl	80084b0 <__swsetup_r>
 8008b84:	b170      	cbz	r0, 8008ba4 <_vfiprintf_r+0x5c>
 8008b86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b88:	07dc      	lsls	r4, r3, #31
 8008b8a:	d504      	bpl.n	8008b96 <_vfiprintf_r+0x4e>
 8008b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b90:	b01d      	add	sp, #116	@ 0x74
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b96:	89ab      	ldrh	r3, [r5, #12]
 8008b98:	0598      	lsls	r0, r3, #22
 8008b9a:	d4f7      	bmi.n	8008b8c <_vfiprintf_r+0x44>
 8008b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b9e:	f7ff fd57 	bl	8008650 <__retarget_lock_release_recursive>
 8008ba2:	e7f3      	b.n	8008b8c <_vfiprintf_r+0x44>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba8:	2320      	movs	r3, #32
 8008baa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb2:	2330      	movs	r3, #48	@ 0x30
 8008bb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d64 <_vfiprintf_r+0x21c>
 8008bb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bbc:	f04f 0901 	mov.w	r9, #1
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	469a      	mov	sl, r3
 8008bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bc8:	b10a      	cbz	r2, 8008bce <_vfiprintf_r+0x86>
 8008bca:	2a25      	cmp	r2, #37	@ 0x25
 8008bcc:	d1f9      	bne.n	8008bc2 <_vfiprintf_r+0x7a>
 8008bce:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd2:	d00b      	beq.n	8008bec <_vfiprintf_r+0xa4>
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffa1 	bl	8008b22 <__sfputs_r>
 8008be0:	3001      	adds	r0, #1
 8008be2:	f000 80a7 	beq.w	8008d34 <_vfiprintf_r+0x1ec>
 8008be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008be8:	445a      	add	r2, fp
 8008bea:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bec:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 809f 	beq.w	8008d34 <_vfiprintf_r+0x1ec>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c00:	f10a 0a01 	add.w	sl, sl, #1
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c0e:	4654      	mov	r4, sl
 8008c10:	2205      	movs	r2, #5
 8008c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c16:	4853      	ldr	r0, [pc, #332]	@ (8008d64 <_vfiprintf_r+0x21c>)
 8008c18:	f7f7 fae2 	bl	80001e0 <memchr>
 8008c1c:	9a04      	ldr	r2, [sp, #16]
 8008c1e:	b9d8      	cbnz	r0, 8008c58 <_vfiprintf_r+0x110>
 8008c20:	06d1      	lsls	r1, r2, #27
 8008c22:	bf44      	itt	mi
 8008c24:	2320      	movmi	r3, #32
 8008c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c2a:	0713      	lsls	r3, r2, #28
 8008c2c:	bf44      	itt	mi
 8008c2e:	232b      	movmi	r3, #43	@ 0x2b
 8008c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c34:	f89a 3000 	ldrb.w	r3, [sl]
 8008c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c3a:	d015      	beq.n	8008c68 <_vfiprintf_r+0x120>
 8008c3c:	9a07      	ldr	r2, [sp, #28]
 8008c3e:	4654      	mov	r4, sl
 8008c40:	2000      	movs	r0, #0
 8008c42:	f04f 0c0a 	mov.w	ip, #10
 8008c46:	4621      	mov	r1, r4
 8008c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c4c:	3b30      	subs	r3, #48	@ 0x30
 8008c4e:	2b09      	cmp	r3, #9
 8008c50:	d94b      	bls.n	8008cea <_vfiprintf_r+0x1a2>
 8008c52:	b1b0      	cbz	r0, 8008c82 <_vfiprintf_r+0x13a>
 8008c54:	9207      	str	r2, [sp, #28]
 8008c56:	e014      	b.n	8008c82 <_vfiprintf_r+0x13a>
 8008c58:	eba0 0308 	sub.w	r3, r0, r8
 8008c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c60:	4313      	orrs	r3, r2
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	46a2      	mov	sl, r4
 8008c66:	e7d2      	b.n	8008c0e <_vfiprintf_r+0xc6>
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	1d19      	adds	r1, r3, #4
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	9103      	str	r1, [sp, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bfbb      	ittet	lt
 8008c74:	425b      	neglt	r3, r3
 8008c76:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7a:	9307      	strge	r3, [sp, #28]
 8008c7c:	9307      	strlt	r3, [sp, #28]
 8008c7e:	bfb8      	it	lt
 8008c80:	9204      	strlt	r2, [sp, #16]
 8008c82:	7823      	ldrb	r3, [r4, #0]
 8008c84:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c86:	d10a      	bne.n	8008c9e <_vfiprintf_r+0x156>
 8008c88:	7863      	ldrb	r3, [r4, #1]
 8008c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c8c:	d132      	bne.n	8008cf4 <_vfiprintf_r+0x1ac>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	1d1a      	adds	r2, r3, #4
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	9203      	str	r2, [sp, #12]
 8008c96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c9a:	3402      	adds	r4, #2
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d74 <_vfiprintf_r+0x22c>
 8008ca2:	7821      	ldrb	r1, [r4, #0]
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	f7f7 fa9a 	bl	80001e0 <memchr>
 8008cac:	b138      	cbz	r0, 8008cbe <_vfiprintf_r+0x176>
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	eba0 000a 	sub.w	r0, r0, sl
 8008cb4:	2240      	movs	r2, #64	@ 0x40
 8008cb6:	4082      	lsls	r2, r0
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	3401      	adds	r4, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	4829      	ldr	r0, [pc, #164]	@ (8008d68 <_vfiprintf_r+0x220>)
 8008cc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cc8:	2206      	movs	r2, #6
 8008cca:	f7f7 fa89 	bl	80001e0 <memchr>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d03f      	beq.n	8008d52 <_vfiprintf_r+0x20a>
 8008cd2:	4b26      	ldr	r3, [pc, #152]	@ (8008d6c <_vfiprintf_r+0x224>)
 8008cd4:	bb1b      	cbnz	r3, 8008d1e <_vfiprintf_r+0x1d6>
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	3307      	adds	r3, #7
 8008cda:	f023 0307 	bic.w	r3, r3, #7
 8008cde:	3308      	adds	r3, #8
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce4:	443b      	add	r3, r7
 8008ce6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ce8:	e76a      	b.n	8008bc0 <_vfiprintf_r+0x78>
 8008cea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cee:	460c      	mov	r4, r1
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e7a8      	b.n	8008c46 <_vfiprintf_r+0xfe>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	9305      	str	r3, [sp, #20]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f04f 0c0a 	mov.w	ip, #10
 8008d00:	4620      	mov	r0, r4
 8008d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d06:	3a30      	subs	r2, #48	@ 0x30
 8008d08:	2a09      	cmp	r2, #9
 8008d0a:	d903      	bls.n	8008d14 <_vfiprintf_r+0x1cc>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0c6      	beq.n	8008c9e <_vfiprintf_r+0x156>
 8008d10:	9105      	str	r1, [sp, #20]
 8008d12:	e7c4      	b.n	8008c9e <_vfiprintf_r+0x156>
 8008d14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d18:	4604      	mov	r4, r0
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e7f0      	b.n	8008d00 <_vfiprintf_r+0x1b8>
 8008d1e:	ab03      	add	r3, sp, #12
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	462a      	mov	r2, r5
 8008d24:	4b12      	ldr	r3, [pc, #72]	@ (8008d70 <_vfiprintf_r+0x228>)
 8008d26:	a904      	add	r1, sp, #16
 8008d28:	4630      	mov	r0, r6
 8008d2a:	f3af 8000 	nop.w
 8008d2e:	4607      	mov	r7, r0
 8008d30:	1c78      	adds	r0, r7, #1
 8008d32:	d1d6      	bne.n	8008ce2 <_vfiprintf_r+0x19a>
 8008d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d36:	07d9      	lsls	r1, r3, #31
 8008d38:	d405      	bmi.n	8008d46 <_vfiprintf_r+0x1fe>
 8008d3a:	89ab      	ldrh	r3, [r5, #12]
 8008d3c:	059a      	lsls	r2, r3, #22
 8008d3e:	d402      	bmi.n	8008d46 <_vfiprintf_r+0x1fe>
 8008d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d42:	f7ff fc85 	bl	8008650 <__retarget_lock_release_recursive>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	065b      	lsls	r3, r3, #25
 8008d4a:	f53f af1f 	bmi.w	8008b8c <_vfiprintf_r+0x44>
 8008d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d50:	e71e      	b.n	8008b90 <_vfiprintf_r+0x48>
 8008d52:	ab03      	add	r3, sp, #12
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	462a      	mov	r2, r5
 8008d58:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <_vfiprintf_r+0x228>)
 8008d5a:	a904      	add	r1, sp, #16
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 f879 	bl	8008e54 <_printf_i>
 8008d62:	e7e4      	b.n	8008d2e <_vfiprintf_r+0x1e6>
 8008d64:	080096e5 	.word	0x080096e5
 8008d68:	080096ef 	.word	0x080096ef
 8008d6c:	00000000 	.word	0x00000000
 8008d70:	08008b23 	.word	0x08008b23
 8008d74:	080096eb 	.word	0x080096eb

08008d78 <_printf_common>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	4698      	mov	r8, r3
 8008d80:	688a      	ldr	r2, [r1, #8]
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	bfb8      	it	lt
 8008d8c:	4613      	movlt	r3, r2
 8008d8e:	6033      	str	r3, [r6, #0]
 8008d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d94:	4607      	mov	r7, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	b10a      	cbz	r2, 8008d9e <_printf_common+0x26>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	6823      	ldr	r3, [r4, #0]
 8008da0:	0699      	lsls	r1, r3, #26
 8008da2:	bf42      	ittt	mi
 8008da4:	6833      	ldrmi	r3, [r6, #0]
 8008da6:	3302      	addmi	r3, #2
 8008da8:	6033      	strmi	r3, [r6, #0]
 8008daa:	6825      	ldr	r5, [r4, #0]
 8008dac:	f015 0506 	ands.w	r5, r5, #6
 8008db0:	d106      	bne.n	8008dc0 <_printf_common+0x48>
 8008db2:	f104 0a19 	add.w	sl, r4, #25
 8008db6:	68e3      	ldr	r3, [r4, #12]
 8008db8:	6832      	ldr	r2, [r6, #0]
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	42ab      	cmp	r3, r5
 8008dbe:	dc26      	bgt.n	8008e0e <_printf_common+0x96>
 8008dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	3b00      	subs	r3, #0
 8008dc8:	bf18      	it	ne
 8008dca:	2301      	movne	r3, #1
 8008dcc:	0692      	lsls	r2, r2, #26
 8008dce:	d42b      	bmi.n	8008e28 <_printf_common+0xb0>
 8008dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c8      	blx	r9
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d01e      	beq.n	8008e1c <_printf_common+0xa4>
 8008dde:	6823      	ldr	r3, [r4, #0]
 8008de0:	6922      	ldr	r2, [r4, #16]
 8008de2:	f003 0306 	and.w	r3, r3, #6
 8008de6:	2b04      	cmp	r3, #4
 8008de8:	bf02      	ittt	eq
 8008dea:	68e5      	ldreq	r5, [r4, #12]
 8008dec:	6833      	ldreq	r3, [r6, #0]
 8008dee:	1aed      	subeq	r5, r5, r3
 8008df0:	68a3      	ldr	r3, [r4, #8]
 8008df2:	bf0c      	ite	eq
 8008df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df8:	2500      	movne	r5, #0
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	bfc4      	itt	gt
 8008dfe:	1a9b      	subgt	r3, r3, r2
 8008e00:	18ed      	addgt	r5, r5, r3
 8008e02:	2600      	movs	r6, #0
 8008e04:	341a      	adds	r4, #26
 8008e06:	42b5      	cmp	r5, r6
 8008e08:	d11a      	bne.n	8008e40 <_printf_common+0xc8>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	e008      	b.n	8008e20 <_printf_common+0xa8>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4652      	mov	r2, sl
 8008e12:	4641      	mov	r1, r8
 8008e14:	4638      	mov	r0, r7
 8008e16:	47c8      	blx	r9
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d103      	bne.n	8008e24 <_printf_common+0xac>
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e24:	3501      	adds	r5, #1
 8008e26:	e7c6      	b.n	8008db6 <_printf_common+0x3e>
 8008e28:	18e1      	adds	r1, r4, r3
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	2030      	movs	r0, #48	@ 0x30
 8008e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e32:	4422      	add	r2, r4
 8008e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e3c:	3302      	adds	r3, #2
 8008e3e:	e7c7      	b.n	8008dd0 <_printf_common+0x58>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4622      	mov	r2, r4
 8008e44:	4641      	mov	r1, r8
 8008e46:	4638      	mov	r0, r7
 8008e48:	47c8      	blx	r9
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0e6      	beq.n	8008e1c <_printf_common+0xa4>
 8008e4e:	3601      	adds	r6, #1
 8008e50:	e7d9      	b.n	8008e06 <_printf_common+0x8e>
	...

08008e54 <_printf_i>:
 8008e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e58:	7e0f      	ldrb	r7, [r1, #24]
 8008e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e5c:	2f78      	cmp	r7, #120	@ 0x78
 8008e5e:	4691      	mov	r9, r2
 8008e60:	4680      	mov	r8, r0
 8008e62:	460c      	mov	r4, r1
 8008e64:	469a      	mov	sl, r3
 8008e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e6a:	d807      	bhi.n	8008e7c <_printf_i+0x28>
 8008e6c:	2f62      	cmp	r7, #98	@ 0x62
 8008e6e:	d80a      	bhi.n	8008e86 <_printf_i+0x32>
 8008e70:	2f00      	cmp	r7, #0
 8008e72:	f000 80d2 	beq.w	800901a <_printf_i+0x1c6>
 8008e76:	2f58      	cmp	r7, #88	@ 0x58
 8008e78:	f000 80b9 	beq.w	8008fee <_printf_i+0x19a>
 8008e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e84:	e03a      	b.n	8008efc <_printf_i+0xa8>
 8008e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e8a:	2b15      	cmp	r3, #21
 8008e8c:	d8f6      	bhi.n	8008e7c <_printf_i+0x28>
 8008e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e94 <_printf_i+0x40>)
 8008e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008f01 	.word	0x08008f01
 8008e9c:	08008e7d 	.word	0x08008e7d
 8008ea0:	08008e7d 	.word	0x08008e7d
 8008ea4:	08008e7d 	.word	0x08008e7d
 8008ea8:	08008e7d 	.word	0x08008e7d
 8008eac:	08008f01 	.word	0x08008f01
 8008eb0:	08008e7d 	.word	0x08008e7d
 8008eb4:	08008e7d 	.word	0x08008e7d
 8008eb8:	08008e7d 	.word	0x08008e7d
 8008ebc:	08008e7d 	.word	0x08008e7d
 8008ec0:	08009001 	.word	0x08009001
 8008ec4:	08008f2b 	.word	0x08008f2b
 8008ec8:	08008fbb 	.word	0x08008fbb
 8008ecc:	08008e7d 	.word	0x08008e7d
 8008ed0:	08008e7d 	.word	0x08008e7d
 8008ed4:	08009023 	.word	0x08009023
 8008ed8:	08008e7d 	.word	0x08008e7d
 8008edc:	08008f2b 	.word	0x08008f2b
 8008ee0:	08008e7d 	.word	0x08008e7d
 8008ee4:	08008e7d 	.word	0x08008e7d
 8008ee8:	08008fc3 	.word	0x08008fc3
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	1d1a      	adds	r2, r3, #4
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6032      	str	r2, [r6, #0]
 8008ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008efc:	2301      	movs	r3, #1
 8008efe:	e09d      	b.n	800903c <_printf_i+0x1e8>
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	6820      	ldr	r0, [r4, #0]
 8008f04:	1d19      	adds	r1, r3, #4
 8008f06:	6031      	str	r1, [r6, #0]
 8008f08:	0606      	lsls	r6, r0, #24
 8008f0a:	d501      	bpl.n	8008f10 <_printf_i+0xbc>
 8008f0c:	681d      	ldr	r5, [r3, #0]
 8008f0e:	e003      	b.n	8008f18 <_printf_i+0xc4>
 8008f10:	0645      	lsls	r5, r0, #25
 8008f12:	d5fb      	bpl.n	8008f0c <_printf_i+0xb8>
 8008f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f18:	2d00      	cmp	r5, #0
 8008f1a:	da03      	bge.n	8008f24 <_printf_i+0xd0>
 8008f1c:	232d      	movs	r3, #45	@ 0x2d
 8008f1e:	426d      	negs	r5, r5
 8008f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f24:	4859      	ldr	r0, [pc, #356]	@ (800908c <_printf_i+0x238>)
 8008f26:	230a      	movs	r3, #10
 8008f28:	e011      	b.n	8008f4e <_printf_i+0xfa>
 8008f2a:	6821      	ldr	r1, [r4, #0]
 8008f2c:	6833      	ldr	r3, [r6, #0]
 8008f2e:	0608      	lsls	r0, r1, #24
 8008f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f34:	d402      	bmi.n	8008f3c <_printf_i+0xe8>
 8008f36:	0649      	lsls	r1, r1, #25
 8008f38:	bf48      	it	mi
 8008f3a:	b2ad      	uxthmi	r5, r5
 8008f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f3e:	4853      	ldr	r0, [pc, #332]	@ (800908c <_printf_i+0x238>)
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	bf14      	ite	ne
 8008f44:	230a      	movne	r3, #10
 8008f46:	2308      	moveq	r3, #8
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f4e:	6866      	ldr	r6, [r4, #4]
 8008f50:	60a6      	str	r6, [r4, #8]
 8008f52:	2e00      	cmp	r6, #0
 8008f54:	bfa2      	ittt	ge
 8008f56:	6821      	ldrge	r1, [r4, #0]
 8008f58:	f021 0104 	bicge.w	r1, r1, #4
 8008f5c:	6021      	strge	r1, [r4, #0]
 8008f5e:	b90d      	cbnz	r5, 8008f64 <_printf_i+0x110>
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	d04b      	beq.n	8008ffc <_printf_i+0x1a8>
 8008f64:	4616      	mov	r6, r2
 8008f66:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f6a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f6e:	5dc7      	ldrb	r7, [r0, r7]
 8008f70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f74:	462f      	mov	r7, r5
 8008f76:	42bb      	cmp	r3, r7
 8008f78:	460d      	mov	r5, r1
 8008f7a:	d9f4      	bls.n	8008f66 <_printf_i+0x112>
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d10b      	bne.n	8008f98 <_printf_i+0x144>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07df      	lsls	r7, r3, #31
 8008f84:	d508      	bpl.n	8008f98 <_printf_i+0x144>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6861      	ldr	r1, [r4, #4]
 8008f8a:	4299      	cmp	r1, r3
 8008f8c:	bfde      	ittt	le
 8008f8e:	2330      	movle	r3, #48	@ 0x30
 8008f90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f98:	1b92      	subs	r2, r2, r6
 8008f9a:	6122      	str	r2, [r4, #16]
 8008f9c:	f8cd a000 	str.w	sl, [sp]
 8008fa0:	464b      	mov	r3, r9
 8008fa2:	aa03      	add	r2, sp, #12
 8008fa4:	4621      	mov	r1, r4
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	f7ff fee6 	bl	8008d78 <_printf_common>
 8008fac:	3001      	adds	r0, #1
 8008fae:	d14a      	bne.n	8009046 <_printf_i+0x1f2>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	b004      	add	sp, #16
 8008fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f043 0320 	orr.w	r3, r3, #32
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	4833      	ldr	r0, [pc, #204]	@ (8009090 <_printf_i+0x23c>)
 8008fc4:	2778      	movs	r7, #120	@ 0x78
 8008fc6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	6831      	ldr	r1, [r6, #0]
 8008fce:	061f      	lsls	r7, r3, #24
 8008fd0:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fd4:	d402      	bmi.n	8008fdc <_printf_i+0x188>
 8008fd6:	065f      	lsls	r7, r3, #25
 8008fd8:	bf48      	it	mi
 8008fda:	b2ad      	uxthmi	r5, r5
 8008fdc:	6031      	str	r1, [r6, #0]
 8008fde:	07d9      	lsls	r1, r3, #31
 8008fe0:	bf44      	itt	mi
 8008fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fe6:	6023      	strmi	r3, [r4, #0]
 8008fe8:	b11d      	cbz	r5, 8008ff2 <_printf_i+0x19e>
 8008fea:	2310      	movs	r3, #16
 8008fec:	e7ac      	b.n	8008f48 <_printf_i+0xf4>
 8008fee:	4827      	ldr	r0, [pc, #156]	@ (800908c <_printf_i+0x238>)
 8008ff0:	e7e9      	b.n	8008fc6 <_printf_i+0x172>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	f023 0320 	bic.w	r3, r3, #32
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	e7f6      	b.n	8008fea <_printf_i+0x196>
 8008ffc:	4616      	mov	r6, r2
 8008ffe:	e7bd      	b.n	8008f7c <_printf_i+0x128>
 8009000:	6833      	ldr	r3, [r6, #0]
 8009002:	6825      	ldr	r5, [r4, #0]
 8009004:	6961      	ldr	r1, [r4, #20]
 8009006:	1d18      	adds	r0, r3, #4
 8009008:	6030      	str	r0, [r6, #0]
 800900a:	062e      	lsls	r6, r5, #24
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	d501      	bpl.n	8009014 <_printf_i+0x1c0>
 8009010:	6019      	str	r1, [r3, #0]
 8009012:	e002      	b.n	800901a <_printf_i+0x1c6>
 8009014:	0668      	lsls	r0, r5, #25
 8009016:	d5fb      	bpl.n	8009010 <_printf_i+0x1bc>
 8009018:	8019      	strh	r1, [r3, #0]
 800901a:	2300      	movs	r3, #0
 800901c:	6123      	str	r3, [r4, #16]
 800901e:	4616      	mov	r6, r2
 8009020:	e7bc      	b.n	8008f9c <_printf_i+0x148>
 8009022:	6833      	ldr	r3, [r6, #0]
 8009024:	1d1a      	adds	r2, r3, #4
 8009026:	6032      	str	r2, [r6, #0]
 8009028:	681e      	ldr	r6, [r3, #0]
 800902a:	6862      	ldr	r2, [r4, #4]
 800902c:	2100      	movs	r1, #0
 800902e:	4630      	mov	r0, r6
 8009030:	f7f7 f8d6 	bl	80001e0 <memchr>
 8009034:	b108      	cbz	r0, 800903a <_printf_i+0x1e6>
 8009036:	1b80      	subs	r0, r0, r6
 8009038:	6060      	str	r0, [r4, #4]
 800903a:	6863      	ldr	r3, [r4, #4]
 800903c:	6123      	str	r3, [r4, #16]
 800903e:	2300      	movs	r3, #0
 8009040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009044:	e7aa      	b.n	8008f9c <_printf_i+0x148>
 8009046:	6923      	ldr	r3, [r4, #16]
 8009048:	4632      	mov	r2, r6
 800904a:	4649      	mov	r1, r9
 800904c:	4640      	mov	r0, r8
 800904e:	47d0      	blx	sl
 8009050:	3001      	adds	r0, #1
 8009052:	d0ad      	beq.n	8008fb0 <_printf_i+0x15c>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	079b      	lsls	r3, r3, #30
 8009058:	d413      	bmi.n	8009082 <_printf_i+0x22e>
 800905a:	68e0      	ldr	r0, [r4, #12]
 800905c:	9b03      	ldr	r3, [sp, #12]
 800905e:	4298      	cmp	r0, r3
 8009060:	bfb8      	it	lt
 8009062:	4618      	movlt	r0, r3
 8009064:	e7a6      	b.n	8008fb4 <_printf_i+0x160>
 8009066:	2301      	movs	r3, #1
 8009068:	4632      	mov	r2, r6
 800906a:	4649      	mov	r1, r9
 800906c:	4640      	mov	r0, r8
 800906e:	47d0      	blx	sl
 8009070:	3001      	adds	r0, #1
 8009072:	d09d      	beq.n	8008fb0 <_printf_i+0x15c>
 8009074:	3501      	adds	r5, #1
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	9903      	ldr	r1, [sp, #12]
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	42ab      	cmp	r3, r5
 800907e:	dcf2      	bgt.n	8009066 <_printf_i+0x212>
 8009080:	e7eb      	b.n	800905a <_printf_i+0x206>
 8009082:	2500      	movs	r5, #0
 8009084:	f104 0619 	add.w	r6, r4, #25
 8009088:	e7f5      	b.n	8009076 <_printf_i+0x222>
 800908a:	bf00      	nop
 800908c:	080096f6 	.word	0x080096f6
 8009090:	08009707 	.word	0x08009707

08009094 <__sflush_r>:
 8009094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909c:	0716      	lsls	r6, r2, #28
 800909e:	4605      	mov	r5, r0
 80090a0:	460c      	mov	r4, r1
 80090a2:	d454      	bmi.n	800914e <__sflush_r+0xba>
 80090a4:	684b      	ldr	r3, [r1, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	dc02      	bgt.n	80090b0 <__sflush_r+0x1c>
 80090aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd48      	ble.n	8009142 <__sflush_r+0xae>
 80090b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090b2:	2e00      	cmp	r6, #0
 80090b4:	d045      	beq.n	8009142 <__sflush_r+0xae>
 80090b6:	2300      	movs	r3, #0
 80090b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090bc:	682f      	ldr	r7, [r5, #0]
 80090be:	6a21      	ldr	r1, [r4, #32]
 80090c0:	602b      	str	r3, [r5, #0]
 80090c2:	d030      	beq.n	8009126 <__sflush_r+0x92>
 80090c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	0759      	lsls	r1, r3, #29
 80090ca:	d505      	bpl.n	80090d8 <__sflush_r+0x44>
 80090cc:	6863      	ldr	r3, [r4, #4]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090d2:	b10b      	cbz	r3, 80090d8 <__sflush_r+0x44>
 80090d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	2300      	movs	r3, #0
 80090da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	4628      	mov	r0, r5
 80090e0:	47b0      	blx	r6
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	89a3      	ldrh	r3, [r4, #12]
 80090e6:	d106      	bne.n	80090f6 <__sflush_r+0x62>
 80090e8:	6829      	ldr	r1, [r5, #0]
 80090ea:	291d      	cmp	r1, #29
 80090ec:	d82b      	bhi.n	8009146 <__sflush_r+0xb2>
 80090ee:	4a2a      	ldr	r2, [pc, #168]	@ (8009198 <__sflush_r+0x104>)
 80090f0:	410a      	asrs	r2, r1
 80090f2:	07d6      	lsls	r6, r2, #31
 80090f4:	d427      	bmi.n	8009146 <__sflush_r+0xb2>
 80090f6:	2200      	movs	r2, #0
 80090f8:	6062      	str	r2, [r4, #4]
 80090fa:	04d9      	lsls	r1, r3, #19
 80090fc:	6922      	ldr	r2, [r4, #16]
 80090fe:	6022      	str	r2, [r4, #0]
 8009100:	d504      	bpl.n	800910c <__sflush_r+0x78>
 8009102:	1c42      	adds	r2, r0, #1
 8009104:	d101      	bne.n	800910a <__sflush_r+0x76>
 8009106:	682b      	ldr	r3, [r5, #0]
 8009108:	b903      	cbnz	r3, 800910c <__sflush_r+0x78>
 800910a:	6560      	str	r0, [r4, #84]	@ 0x54
 800910c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800910e:	602f      	str	r7, [r5, #0]
 8009110:	b1b9      	cbz	r1, 8009142 <__sflush_r+0xae>
 8009112:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__sflush_r+0x8c>
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fa9a 	bl	8008654 <_free_r>
 8009120:	2300      	movs	r3, #0
 8009122:	6363      	str	r3, [r4, #52]	@ 0x34
 8009124:	e00d      	b.n	8009142 <__sflush_r+0xae>
 8009126:	2301      	movs	r3, #1
 8009128:	4628      	mov	r0, r5
 800912a:	47b0      	blx	r6
 800912c:	4602      	mov	r2, r0
 800912e:	1c50      	adds	r0, r2, #1
 8009130:	d1c9      	bne.n	80090c6 <__sflush_r+0x32>
 8009132:	682b      	ldr	r3, [r5, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0c6      	beq.n	80090c6 <__sflush_r+0x32>
 8009138:	2b1d      	cmp	r3, #29
 800913a:	d001      	beq.n	8009140 <__sflush_r+0xac>
 800913c:	2b16      	cmp	r3, #22
 800913e:	d11e      	bne.n	800917e <__sflush_r+0xea>
 8009140:	602f      	str	r7, [r5, #0]
 8009142:	2000      	movs	r0, #0
 8009144:	e022      	b.n	800918c <__sflush_r+0xf8>
 8009146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914a:	b21b      	sxth	r3, r3
 800914c:	e01b      	b.n	8009186 <__sflush_r+0xf2>
 800914e:	690f      	ldr	r7, [r1, #16]
 8009150:	2f00      	cmp	r7, #0
 8009152:	d0f6      	beq.n	8009142 <__sflush_r+0xae>
 8009154:	0793      	lsls	r3, r2, #30
 8009156:	680e      	ldr	r6, [r1, #0]
 8009158:	bf08      	it	eq
 800915a:	694b      	ldreq	r3, [r1, #20]
 800915c:	600f      	str	r7, [r1, #0]
 800915e:	bf18      	it	ne
 8009160:	2300      	movne	r3, #0
 8009162:	eba6 0807 	sub.w	r8, r6, r7
 8009166:	608b      	str	r3, [r1, #8]
 8009168:	f1b8 0f00 	cmp.w	r8, #0
 800916c:	dde9      	ble.n	8009142 <__sflush_r+0xae>
 800916e:	6a21      	ldr	r1, [r4, #32]
 8009170:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009172:	4643      	mov	r3, r8
 8009174:	463a      	mov	r2, r7
 8009176:	4628      	mov	r0, r5
 8009178:	47b0      	blx	r6
 800917a:	2800      	cmp	r0, #0
 800917c:	dc08      	bgt.n	8009190 <__sflush_r+0xfc>
 800917e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009190:	4407      	add	r7, r0
 8009192:	eba8 0800 	sub.w	r8, r8, r0
 8009196:	e7e7      	b.n	8009168 <__sflush_r+0xd4>
 8009198:	dfbffffe 	.word	0xdfbffffe

0800919c <_fflush_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	690b      	ldr	r3, [r1, #16]
 80091a0:	4605      	mov	r5, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	b913      	cbnz	r3, 80091ac <_fflush_r+0x10>
 80091a6:	2500      	movs	r5, #0
 80091a8:	4628      	mov	r0, r5
 80091aa:	bd38      	pop	{r3, r4, r5, pc}
 80091ac:	b118      	cbz	r0, 80091b6 <_fflush_r+0x1a>
 80091ae:	6a03      	ldr	r3, [r0, #32]
 80091b0:	b90b      	cbnz	r3, 80091b6 <_fflush_r+0x1a>
 80091b2:	f7ff f82d 	bl	8008210 <__sinit>
 80091b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f3      	beq.n	80091a6 <_fflush_r+0xa>
 80091be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091c0:	07d0      	lsls	r0, r2, #31
 80091c2:	d404      	bmi.n	80091ce <_fflush_r+0x32>
 80091c4:	0599      	lsls	r1, r3, #22
 80091c6:	d402      	bmi.n	80091ce <_fflush_r+0x32>
 80091c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ca:	f7ff fa40 	bl	800864e <__retarget_lock_acquire_recursive>
 80091ce:	4628      	mov	r0, r5
 80091d0:	4621      	mov	r1, r4
 80091d2:	f7ff ff5f 	bl	8009094 <__sflush_r>
 80091d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d8:	07da      	lsls	r2, r3, #31
 80091da:	4605      	mov	r5, r0
 80091dc:	d4e4      	bmi.n	80091a8 <_fflush_r+0xc>
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	059b      	lsls	r3, r3, #22
 80091e2:	d4e1      	bmi.n	80091a8 <_fflush_r+0xc>
 80091e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091e6:	f7ff fa33 	bl	8008650 <__retarget_lock_release_recursive>
 80091ea:	e7dd      	b.n	80091a8 <_fflush_r+0xc>

080091ec <__swhatbuf_r>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	460c      	mov	r4, r1
 80091f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f4:	2900      	cmp	r1, #0
 80091f6:	b096      	sub	sp, #88	@ 0x58
 80091f8:	4615      	mov	r5, r2
 80091fa:	461e      	mov	r6, r3
 80091fc:	da0d      	bge.n	800921a <__swhatbuf_r+0x2e>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009204:	f04f 0100 	mov.w	r1, #0
 8009208:	bf14      	ite	ne
 800920a:	2340      	movne	r3, #64	@ 0x40
 800920c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009210:	2000      	movs	r0, #0
 8009212:	6031      	str	r1, [r6, #0]
 8009214:	602b      	str	r3, [r5, #0]
 8009216:	b016      	add	sp, #88	@ 0x58
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	466a      	mov	r2, sp
 800921c:	f000 f896 	bl	800934c <_fstat_r>
 8009220:	2800      	cmp	r0, #0
 8009222:	dbec      	blt.n	80091fe <__swhatbuf_r+0x12>
 8009224:	9901      	ldr	r1, [sp, #4]
 8009226:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800922a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800922e:	4259      	negs	r1, r3
 8009230:	4159      	adcs	r1, r3
 8009232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009236:	e7eb      	b.n	8009210 <__swhatbuf_r+0x24>

08009238 <__smakebuf_r>:
 8009238:	898b      	ldrh	r3, [r1, #12]
 800923a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800923c:	079d      	lsls	r5, r3, #30
 800923e:	4606      	mov	r6, r0
 8009240:	460c      	mov	r4, r1
 8009242:	d507      	bpl.n	8009254 <__smakebuf_r+0x1c>
 8009244:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	2301      	movs	r3, #1
 800924e:	6163      	str	r3, [r4, #20]
 8009250:	b003      	add	sp, #12
 8009252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009254:	ab01      	add	r3, sp, #4
 8009256:	466a      	mov	r2, sp
 8009258:	f7ff ffc8 	bl	80091ec <__swhatbuf_r>
 800925c:	9f00      	ldr	r7, [sp, #0]
 800925e:	4605      	mov	r5, r0
 8009260:	4639      	mov	r1, r7
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff fa62 	bl	800872c <_malloc_r>
 8009268:	b948      	cbnz	r0, 800927e <__smakebuf_r+0x46>
 800926a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926e:	059a      	lsls	r2, r3, #22
 8009270:	d4ee      	bmi.n	8009250 <__smakebuf_r+0x18>
 8009272:	f023 0303 	bic.w	r3, r3, #3
 8009276:	f043 0302 	orr.w	r3, r3, #2
 800927a:	81a3      	strh	r3, [r4, #12]
 800927c:	e7e2      	b.n	8009244 <__smakebuf_r+0xc>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	6020      	str	r0, [r4, #0]
 8009282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	9b01      	ldr	r3, [sp, #4]
 800928a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800928e:	b15b      	cbz	r3, 80092a8 <__smakebuf_r+0x70>
 8009290:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009294:	4630      	mov	r0, r6
 8009296:	f000 f86b 	bl	8009370 <_isatty_r>
 800929a:	b128      	cbz	r0, 80092a8 <__smakebuf_r+0x70>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	f023 0303 	bic.w	r3, r3, #3
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	81a3      	strh	r3, [r4, #12]
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	431d      	orrs	r5, r3
 80092ac:	81a5      	strh	r5, [r4, #12]
 80092ae:	e7cf      	b.n	8009250 <__smakebuf_r+0x18>

080092b0 <_putc_r>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	460d      	mov	r5, r1
 80092b4:	4614      	mov	r4, r2
 80092b6:	4606      	mov	r6, r0
 80092b8:	b118      	cbz	r0, 80092c2 <_putc_r+0x12>
 80092ba:	6a03      	ldr	r3, [r0, #32]
 80092bc:	b90b      	cbnz	r3, 80092c2 <_putc_r+0x12>
 80092be:	f7fe ffa7 	bl	8008210 <__sinit>
 80092c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092c4:	07d8      	lsls	r0, r3, #31
 80092c6:	d405      	bmi.n	80092d4 <_putc_r+0x24>
 80092c8:	89a3      	ldrh	r3, [r4, #12]
 80092ca:	0599      	lsls	r1, r3, #22
 80092cc:	d402      	bmi.n	80092d4 <_putc_r+0x24>
 80092ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092d0:	f7ff f9bd 	bl	800864e <__retarget_lock_acquire_recursive>
 80092d4:	68a3      	ldr	r3, [r4, #8]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	60a3      	str	r3, [r4, #8]
 80092dc:	da05      	bge.n	80092ea <_putc_r+0x3a>
 80092de:	69a2      	ldr	r2, [r4, #24]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	db12      	blt.n	800930a <_putc_r+0x5a>
 80092e4:	b2eb      	uxtb	r3, r5
 80092e6:	2b0a      	cmp	r3, #10
 80092e8:	d00f      	beq.n	800930a <_putc_r+0x5a>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	6022      	str	r2, [r4, #0]
 80092f0:	701d      	strb	r5, [r3, #0]
 80092f2:	b2ed      	uxtb	r5, r5
 80092f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092f6:	07da      	lsls	r2, r3, #31
 80092f8:	d405      	bmi.n	8009306 <_putc_r+0x56>
 80092fa:	89a3      	ldrh	r3, [r4, #12]
 80092fc:	059b      	lsls	r3, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_putc_r+0x56>
 8009300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009302:	f7ff f9a5 	bl	8008650 <__retarget_lock_release_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	bd70      	pop	{r4, r5, r6, pc}
 800930a:	4629      	mov	r1, r5
 800930c:	4622      	mov	r2, r4
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff f88f 	bl	8008432 <__swbuf_r>
 8009314:	4605      	mov	r5, r0
 8009316:	e7ed      	b.n	80092f4 <_putc_r+0x44>

08009318 <memmove>:
 8009318:	4288      	cmp	r0, r1
 800931a:	b510      	push	{r4, lr}
 800931c:	eb01 0402 	add.w	r4, r1, r2
 8009320:	d902      	bls.n	8009328 <memmove+0x10>
 8009322:	4284      	cmp	r4, r0
 8009324:	4623      	mov	r3, r4
 8009326:	d807      	bhi.n	8009338 <memmove+0x20>
 8009328:	1e43      	subs	r3, r0, #1
 800932a:	42a1      	cmp	r1, r4
 800932c:	d008      	beq.n	8009340 <memmove+0x28>
 800932e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009332:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009336:	e7f8      	b.n	800932a <memmove+0x12>
 8009338:	4402      	add	r2, r0
 800933a:	4601      	mov	r1, r0
 800933c:	428a      	cmp	r2, r1
 800933e:	d100      	bne.n	8009342 <memmove+0x2a>
 8009340:	bd10      	pop	{r4, pc}
 8009342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800934a:	e7f7      	b.n	800933c <memmove+0x24>

0800934c <_fstat_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4d07      	ldr	r5, [pc, #28]	@ (800936c <_fstat_r+0x20>)
 8009350:	2300      	movs	r3, #0
 8009352:	4604      	mov	r4, r0
 8009354:	4608      	mov	r0, r1
 8009356:	4611      	mov	r1, r2
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	f7f8 fafe 	bl	800195a <_fstat>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	d102      	bne.n	8009368 <_fstat_r+0x1c>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	b103      	cbz	r3, 8009368 <_fstat_r+0x1c>
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	bd38      	pop	{r3, r4, r5, pc}
 800936a:	bf00      	nop
 800936c:	20000534 	.word	0x20000534

08009370 <_isatty_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4d06      	ldr	r5, [pc, #24]	@ (800938c <_isatty_r+0x1c>)
 8009374:	2300      	movs	r3, #0
 8009376:	4604      	mov	r4, r0
 8009378:	4608      	mov	r0, r1
 800937a:	602b      	str	r3, [r5, #0]
 800937c:	f7f8 fafd 	bl	800197a <_isatty>
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	d102      	bne.n	800938a <_isatty_r+0x1a>
 8009384:	682b      	ldr	r3, [r5, #0]
 8009386:	b103      	cbz	r3, 800938a <_isatty_r+0x1a>
 8009388:	6023      	str	r3, [r4, #0]
 800938a:	bd38      	pop	{r3, r4, r5, pc}
 800938c:	20000534 	.word	0x20000534

08009390 <_sbrk_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d06      	ldr	r5, [pc, #24]	@ (80093ac <_sbrk_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f8 fb06 	bl	80019ac <_sbrk>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_sbrk_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_sbrk_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20000534 	.word	0x20000534

080093b0 <memcpy>:
 80093b0:	440a      	add	r2, r1
 80093b2:	4291      	cmp	r1, r2
 80093b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b8:	d100      	bne.n	80093bc <memcpy+0xc>
 80093ba:	4770      	bx	lr
 80093bc:	b510      	push	{r4, lr}
 80093be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c6:	4291      	cmp	r1, r2
 80093c8:	d1f9      	bne.n	80093be <memcpy+0xe>
 80093ca:	bd10      	pop	{r4, pc}

080093cc <_realloc_r>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4680      	mov	r8, r0
 80093d2:	4615      	mov	r5, r2
 80093d4:	460c      	mov	r4, r1
 80093d6:	b921      	cbnz	r1, 80093e2 <_realloc_r+0x16>
 80093d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4611      	mov	r1, r2
 80093de:	f7ff b9a5 	b.w	800872c <_malloc_r>
 80093e2:	b92a      	cbnz	r2, 80093f0 <_realloc_r+0x24>
 80093e4:	f7ff f936 	bl	8008654 <_free_r>
 80093e8:	2400      	movs	r4, #0
 80093ea:	4620      	mov	r0, r4
 80093ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f0:	f000 f81a 	bl	8009428 <_malloc_usable_size_r>
 80093f4:	4285      	cmp	r5, r0
 80093f6:	4606      	mov	r6, r0
 80093f8:	d802      	bhi.n	8009400 <_realloc_r+0x34>
 80093fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093fe:	d8f4      	bhi.n	80093ea <_realloc_r+0x1e>
 8009400:	4629      	mov	r1, r5
 8009402:	4640      	mov	r0, r8
 8009404:	f7ff f992 	bl	800872c <_malloc_r>
 8009408:	4607      	mov	r7, r0
 800940a:	2800      	cmp	r0, #0
 800940c:	d0ec      	beq.n	80093e8 <_realloc_r+0x1c>
 800940e:	42b5      	cmp	r5, r6
 8009410:	462a      	mov	r2, r5
 8009412:	4621      	mov	r1, r4
 8009414:	bf28      	it	cs
 8009416:	4632      	movcs	r2, r6
 8009418:	f7ff ffca 	bl	80093b0 <memcpy>
 800941c:	4621      	mov	r1, r4
 800941e:	4640      	mov	r0, r8
 8009420:	f7ff f918 	bl	8008654 <_free_r>
 8009424:	463c      	mov	r4, r7
 8009426:	e7e0      	b.n	80093ea <_realloc_r+0x1e>

08009428 <_malloc_usable_size_r>:
 8009428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800942c:	1f18      	subs	r0, r3, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	bfbc      	itt	lt
 8009432:	580b      	ldrlt	r3, [r1, r0]
 8009434:	18c0      	addlt	r0, r0, r3
 8009436:	4770      	bx	lr

08009438 <_init>:
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943a:	bf00      	nop
 800943c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800943e:	bc08      	pop	{r3}
 8009440:	469e      	mov	lr, r3
 8009442:	4770      	bx	lr

08009444 <_fini>:
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009446:	bf00      	nop
 8009448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800944a:	bc08      	pop	{r3}
 800944c:	469e      	mov	lr, r3
 800944e:	4770      	bx	lr
