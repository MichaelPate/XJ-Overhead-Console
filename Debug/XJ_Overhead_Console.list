
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ebc  08004ebc  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec4  08004ec4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00005ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004ecc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000068  08004f34  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08004f34  000063d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ccb  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  00016d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00019b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9f  00000000  00000000  0001aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cd2  00000000  00000000  0001b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159e2  00000000  00000000  000352b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ceb3  00000000  00000000  0004ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7b4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  000e7b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ec040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e44 	.word	0x08004e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004e44 	.word	0x08004e44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 fe59 	bl	8001288 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa52 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fe8d 	bl	8001310 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa42 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 f9f9 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 f9ed 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b52      	ldr	r3, [pc, #328]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a51      	ldr	r2, [pc, #324]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b4f      	ldr	r3, [pc, #316]	@ (8000838 <MX_GPIO_Init+0x164>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b4b      	ldr	r3, [pc, #300]	@ (8000838 <MX_GPIO_Init+0x164>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a4a      	ldr	r2, [pc, #296]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b44      	ldr	r3, [pc, #272]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a43      	ldr	r2, [pc, #268]	@ (8000838 <MX_GPIO_Init+0x164>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b41      	ldr	r3, [pc, #260]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a3c      	ldr	r2, [pc, #240]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b3a      	ldr	r3, [pc, #232]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a35      	ldr	r2, [pc, #212]	@ (8000838 <MX_GPIO_Init+0x164>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b33      	ldr	r3, [pc, #204]	@ (8000838 <MX_GPIO_Init+0x164>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 800077c:	482f      	ldr	r0, [pc, #188]	@ (800083c <MX_GPIO_Init+0x168>)
 800077e:	f001 fb0d 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	482e      	ldr	r0, [pc, #184]	@ (8000840 <MX_GPIO_Init+0x16c>)
 8000788:	f001 fb08 	bl	8001d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000792:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4828      	ldr	r0, [pc, #160]	@ (8000844 <MX_GPIO_Init+0x170>)
 80007a4:	f001 f976 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007a8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481e      	ldr	r0, [pc, #120]	@ (800083c <MX_GPIO_Init+0x168>)
 80007c2:	f001 f967 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 80007c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_GPIO_Init+0x168>)
 80007dc:	f001 f95a 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 80007e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	@ (8000844 <MX_GPIO_Init+0x170>)
 80007f6:	f001 f94d 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80007fa:	2304      	movs	r3, #4
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	@ (8000848 <MX_GPIO_Init+0x174>)
 800080e:	f001 f941 	bl	8001a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000812:	2310      	movs	r3, #16
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2302      	movs	r3, #2
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_GPIO_Init+0x16c>)
 800082a:	f001 f933 	bl	8001a94 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	@ 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00

0800084c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2C1_Init+0x50>)
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <MX_I2C1_Init+0x54>)
 8000854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2C1_Init+0x50>)
 8000858:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_I2C1_Init+0x58>)
 800085a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_I2C1_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_I2C1_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_I2C1_Init+0x50>)
 800086a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800086e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_I2C1_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_I2C1_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_I2C1_Init+0x50>)
 800088a:	f001 fabb 	bl	8001e04 <HAL_I2C_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000894:	f000 f8f6 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000cc 	.word	0x200000cc
 80008a0:	40005400 	.word	0x40005400
 80008a4:	000186a0 	.word	0x000186a0

080008a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a19      	ldr	r2, [pc, #100]	@ (800092c <HAL_I2C_MspInit+0x84>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d12b      	bne.n	8000922 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008e6:	23c0      	movs	r3, #192	@ 0xc0
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f6:	2304      	movs	r3, #4
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	@ (8000934 <HAL_I2C_MspInit+0x8c>)
 8000902:	f001 f8c7 	bl	8001a94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000914:	6413      	str	r3, [r2, #64]	@ 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_I2C_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400

08000938 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000940:	1d39      	adds	r1, r7, #4
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2201      	movs	r2, #1
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <__io_putchar+0x20>)
 800094a:	f002 fb04 	bl	8002f56 <HAL_UART_Transmit>
  return ch;
 800094e:	687b      	ldr	r3, [r7, #4]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001f0 	.word	0x200001f0

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b0f2      	sub	sp, #456	@ 0x1c8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 fc1f 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f81f 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f7ff feb3 	bl	80006d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096e:	f000 fae1 	bl	8000f34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000972:	f7ff fdfd 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000976:	f7ff ff69 	bl	800084c <MX_I2C1_Init>
  MX_RTC_Init();
 800097a:	f000 f88f 	bl	8000a9c <MX_RTC_Init>
  MX_SPI2_Init();
 800097e:	f000 f8df 	bl	8000b40 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000982:	f000 faad 	bl	8000ee0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000986:	f000 faff 	bl	8000f88 <MX_USART6_UART_Init>

  int buffer[100];

  //while (1)
  //{
	  HAL_UART_Receive_IT(&huart2, &rxBuffer, 1);
 800098a:	2201      	movs	r2, #1
 800098c:	4904      	ldr	r1, [pc, #16]	@ (80009a0 <main+0x44>)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <main+0x48>)
 8000990:	f002 fba2 	bl	80030d8 <HAL_UART_Receive_IT>
	  printf(rxBuffer);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <main+0x44>)
 8000996:	f003 fbe7 	bl	8004168 <iprintf>
	  while(1);
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <main+0x3e>
 800099e:	bf00      	nop
 80009a0:	20000120 	.word	0x20000120
 80009a4:	200001f0 	.word	0x200001f0

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	@ 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fc2b 	bl	8004212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <SystemClock_Config+0xd4>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a29      	ldr	r2, [pc, #164]	@ (8000a7c <SystemClock_Config+0xd4>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <SystemClock_Config+0xd4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <SystemClock_Config+0xd8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f4:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <SystemClock_Config+0xd8>)
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <SystemClock_Config+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a10:	2310      	movs	r3, #16
 8000a12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a14:	2301      	movs	r3, #1
 8000a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a20:	2310      	movs	r3, #16
 8000a22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb28 	bl	800208c <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a42:	f000 f81f 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2102      	movs	r1, #2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fd8a 	bl	800257c <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a6e:	f000 f809 	bl	8000a84 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3750      	adds	r7, #80	@ 0x50
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <Error_Handler+0x14>)
 8000a8e:	f003 fb6b 	bl	8004168 <iprintf>
	  while (1);
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <Error_Handler+0xe>
 8000a96:	bf00      	nop
 8000a98:	08004e5c 	.word	0x08004e5c

08000a9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <MX_RTC_Init+0x48>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000aae:	227f      	movs	r2, #127	@ 0x7f
 8000ab0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000ab4:	22ff      	movs	r2, #255	@ 0xff
 8000ab6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_RTC_Init+0x44>)
 8000acc:	f002 f864 	bl	8002b98 <HAL_RTC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ad6:	f7ff ffd5 	bl	8000a84 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000012c 	.word	0x2000012c
 8000ae4:	40002800 	.word	0x40002800

08000ae8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_RTC_MspInit+0x50>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d111      	bne.n	8000b2e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 ff4f 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000b24:	f7ff ffae 	bl	8000a84 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <HAL_RTC_MspInit+0x54>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40002800 	.word	0x40002800
 8000b3c:	42470e3c 	.word	0x42470e3c

08000b40 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b46:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <MX_SPI2_Init+0x6c>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b50:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b54:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b58:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b72:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b8e:	220a      	movs	r2, #10
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_SPI2_Init+0x68>)
 8000b94:	f002 f906 	bl	8002da4 <HAL_SPI_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000b9e:	f7ff ff71 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000014c 	.word	0x2000014c
 8000bac:	40003800 	.word	0x40003800

08000bb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <HAL_SPI_MspInit+0xc0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d14a      	bne.n	8000c68 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a26      	ldr	r2, [pc, #152]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a18      	ldr	r2, [pc, #96]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b16      	ldr	r3, [pc, #88]	@ (8000c74 <HAL_SPI_MspInit+0xc4>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c26:	2308      	movs	r3, #8
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c36:	2305      	movs	r3, #5
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <HAL_SPI_MspInit+0xc8>)
 8000c42:	f000 ff27 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <HAL_SPI_MspInit+0xcc>)
 8000c64:	f000 ff16 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	@ 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40003800 	.word	0x40003800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cbe:	2007      	movs	r0, #7
 8000cc0:	f000 fe14 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 fa8f 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)){  // check UART2 Rx Not Empty flag
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <USART2_IRQHandler+0x38>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	2b20      	cmp	r3, #32
 8000d40:	d104      	bne.n	8000d4c <USART2_IRQHandler+0x1c>
	        HAL_UART_Transmit_IT(&huart2, &rxBuffer, 1);   // ransmit the received data back
 8000d42:	2201      	movs	r2, #1
 8000d44:	4909      	ldr	r1, [pc, #36]	@ (8000d6c <USART2_IRQHandler+0x3c>)
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <USART2_IRQHandler+0x38>)
 8000d48:	f002 f990 	bl	800306c <HAL_UART_Transmit_IT>
	    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d4c:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <USART2_IRQHandler+0x38>)
 8000d4e:	f002 f9e9 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &rxBuffer, 1);  // restart listening for data
 8000d52:	2201      	movs	r2, #1
 8000d54:	4905      	ldr	r1, [pc, #20]	@ (8000d6c <USART2_IRQHandler+0x3c>)
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <USART2_IRQHandler+0x38>)
 8000d58:	f002 f9be 	bl	80030d8 <HAL_UART_Receive_IT>

  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // toggle User LED
 8000d5c:	2120      	movs	r1, #32
 8000d5e:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <USART2_IRQHandler+0x40>)
 8000d60:	f001 f835 	bl	8001dce <HAL_GPIO_TogglePin>
  /* USER CODE END USART2_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001f0 	.word	0x200001f0
 8000d6c:	20000120 	.word	0x20000120
 8000d70:	40020000 	.word	0x40020000

08000d74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
  }

  return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fdb5 	bl	8000938 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
  }
  return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f003 fa16 	bl	80042b0 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20018000 	.word	0x20018000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200001a4 	.word	0x200001a4
 8000eb8:	200003d0 	.word	0x200003d0

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eea:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f001 ffcd 	bl	8002eb6 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f7ff fdaf 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001a8 	.word	0x200001a8
 8000f30:	40011000 	.word	0x40011000

08000f34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <MX_USART2_UART_Init+0x50>)
 8000f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	f001 ffa3 	bl	8002eb6 <HAL_UART_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f76:	f7ff fd85 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001f0 	.word	0x200001f0
 8000f84:	40004400 	.word	0x40004400

08000f88 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	f001 ff79 	bl	8002eb6 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f7ff fd5b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000238 	.word	0x20000238
 8000fd8:	40011400 	.word	0x40011400

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	@ 0x38
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <HAL_UART_MspInit+0x15c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12d      	bne.n	800105a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	4b4e      	ldr	r3, [pc, #312]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a4d      	ldr	r2, [pc, #308]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	4b47      	ldr	r3, [pc, #284]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a46      	ldr	r2, [pc, #280]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b44      	ldr	r3, [pc, #272]	@ (800113c <HAL_UART_MspInit+0x160>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	61fb      	str	r3, [r7, #28]
 8001034:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001036:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001044:	2303      	movs	r3, #3
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001048:	2307      	movs	r3, #7
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001050:	4619      	mov	r1, r3
 8001052:	483b      	ldr	r0, [pc, #236]	@ (8001140 <HAL_UART_MspInit+0x164>)
 8001054:	f000 fd1e 	bl	8001a94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001058:	e06a      	b.n	8001130 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a39      	ldr	r2, [pc, #228]	@ (8001144 <HAL_UART_MspInit+0x168>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d134      	bne.n	80010ce <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	4b34      	ldr	r3, [pc, #208]	@ (800113c <HAL_UART_MspInit+0x160>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a33      	ldr	r2, [pc, #204]	@ (800113c <HAL_UART_MspInit+0x160>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a2c      	ldr	r2, [pc, #176]	@ (800113c <HAL_UART_MspInit+0x160>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ac:	2307      	movs	r3, #7
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4822      	ldr	r0, [pc, #136]	@ (8001140 <HAL_UART_MspInit+0x164>)
 80010b8:	f000 fcec 	bl	8001a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	2026      	movs	r0, #38	@ 0x26
 80010c2:	f000 fc1e 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c6:	2026      	movs	r0, #38	@ 0x26
 80010c8:	f000 fc37 	bl	800193a <HAL_NVIC_EnableIRQ>
}
 80010cc:	e030      	b.n	8001130 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001148 <HAL_UART_MspInit+0x16c>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d12b      	bne.n	8001130 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e0:	4a16      	ldr	r2, [pc, #88]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a0f      	ldr	r2, [pc, #60]	@ (800113c <HAL_UART_MspInit+0x160>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b0d      	ldr	r3, [pc, #52]	@ (800113c <HAL_UART_MspInit+0x160>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001110:	23c0      	movs	r3, #192	@ 0xc0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001120:	2308      	movs	r3, #8
 8001122:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	4808      	ldr	r0, [pc, #32]	@ (800114c <HAL_UART_MspInit+0x170>)
 800112c:	f000 fcb2 	bl	8001a94 <HAL_GPIO_Init>
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40011000 	.word	0x40011000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40004400 	.word	0x40004400
 8001148:	40011400 	.word	0x40011400
 800114c:	40020800 	.word	0x40020800

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001154:	f7ff feb2 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800117e:	f003 f89d 	bl	80042bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fbeb 	bl	800095c <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001188:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001194:	08004ecc 	.word	0x08004ecc
  ldr r2, =_sbss
 8001198:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800119c:	200003d0 	.word	0x200003d0

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 fb8d 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fd52 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	@ (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fba5 	bl	8001956 <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 fb6d 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	@ (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000008 	.word	0x20000008
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	@ (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000280 	.word	0x20000280

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000280 	.word	0x20000280

08001288 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e033      	b.n	8001306 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff f9b4 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d118      	bne.n	80012f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012ce:	f023 0302 	bic.w	r3, r3, #2
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f93a 	bl	8001554 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	f043 0201 	orr.w	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80012f6:	e001      	b.n	80012fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1c>
 8001328:	2302      	movs	r3, #2
 800132a:	e105      	b.n	8001538 <HAL_ADC_ConfigChannel+0x228>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d925      	bls.n	8001388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68d9      	ldr	r1, [r3, #12]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	3b1e      	subs	r3, #30
 8001352:	2207      	movs	r2, #7
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43da      	mvns	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	400a      	ands	r2, r1
 8001360:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68d9      	ldr	r1, [r3, #12]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	4603      	mov	r3, r0
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4403      	add	r3, r0
 800137a:	3b1e      	subs	r3, #30
 800137c:	409a      	lsls	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	e022      	b.n	80013ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6919      	ldr	r1, [r3, #16]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	2207      	movs	r2, #7
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6919      	ldr	r1, [r3, #16]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4403      	add	r3, r0
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d824      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b05      	subs	r3, #5
 80013e8:	221f      	movs	r2, #31
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	400a      	ands	r2, r1
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b05      	subs	r3, #5
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
 800141e:	e04c      	b.n	80014ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	d824      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b23      	subs	r3, #35	@ 0x23
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b23      	subs	r3, #35	@ 0x23
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001470:	e023      	b.n	80014ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b41      	subs	r3, #65	@ 0x41
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b41      	subs	r3, #65	@ 0x41
 80014ae:	fa00 f203 	lsl.w	r2, r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <HAL_ADC_ConfigChannel+0x234>)
 80014bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a21      	ldr	r2, [pc, #132]	@ (8001548 <HAL_ADC_ConfigChannel+0x238>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d109      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1cc>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d105      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <HAL_ADC_ConfigChannel+0x238>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d123      	bne.n	800152e <HAL_ADC_ConfigChannel+0x21e>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d003      	beq.n	80014f6 <HAL_ADC_ConfigChannel+0x1e6>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b11      	cmp	r3, #17
 80014f4:	d11b      	bne.n	800152e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b10      	cmp	r3, #16
 8001508:	d111      	bne.n	800152e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_ADC_ConfigChannel+0x23c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <HAL_ADC_ConfigChannel+0x240>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	0c9a      	lsrs	r2, r3, #18
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001520:	e002      	b.n	8001528 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3b01      	subs	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40012300 	.word	0x40012300
 8001548:	40012000 	.word	0x40012000
 800154c:	20000000 	.word	0x20000000
 8001550:	431bde83 	.word	0x431bde83

08001554 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155c:	4b79      	ldr	r3, [pc, #484]	@ (8001744 <ADC_Init+0x1f0>)
 800155e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	021a      	lsls	r2, r3, #8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	4a58      	ldr	r2, [pc, #352]	@ (8001748 <ADC_Init+0x1f4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6899      	ldr	r1, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800161c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e00f      	b.n	8001652 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001650:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0202 	bic.w	r2, r2, #2
 8001660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6899      	ldr	r1, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7e1b      	ldrb	r3, [r3, #24]
 800166c:	005a      	lsls	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d01b      	beq.n	80016b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800168e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800169e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	3b01      	subs	r3, #1
 80016ac:	035a      	lsls	r2, r3, #13
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e007      	b.n	80016c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	051a      	lsls	r2, r3, #20
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800170a:	025a      	lsls	r2, r3, #9
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6899      	ldr	r1, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	029a      	lsls	r2, r3, #10
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40012300 	.word	0x40012300
 8001748:	0f000001 	.word	0x0f000001

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	@ (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	@ (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	@ (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	@ (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	@ 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fc78 	bl	8001270 <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d008      	beq.n	80019a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2280      	movs	r2, #128	@ 0x80
 8001992:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e052      	b.n	8001a46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0216 	bic.w	r2, r2, #22
 80019ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <HAL_DMA_Abort+0x62>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0208 	bic.w	r2, r2, #8
 80019de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f0:	e013      	b.n	8001a1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f2:	f7ff fc3d 	bl	8001270 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d90c      	bls.n	8001a1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e015      	b.n	8001a46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e4      	bne.n	80019f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2c:	223f      	movs	r2, #63	@ 0x3f
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d004      	beq.n	8001a6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e00c      	b.n	8001a86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2205      	movs	r2, #5
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0201 	bic.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e159      	b.n	8001d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	f040 8148 	bne.w	8001d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d005      	beq.n	8001ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d130      	bne.n	8001b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 0201 	and.w	r2, r3, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d017      	beq.n	8001b84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d123      	bne.n	8001bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	08da      	lsrs	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3208      	adds	r2, #8
 8001bd2:	69b9      	ldr	r1, [r7, #24]
 8001bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a2 	beq.w	8001d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b57      	ldr	r3, [pc, #348]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a56      	ldr	r2, [pc, #344]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b54      	ldr	r3, [pc, #336]	@ (8001d7c <HAL_GPIO_Init+0x2e8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c36:	4a52      	ldr	r2, [pc, #328]	@ (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a49      	ldr	r2, [pc, #292]	@ (8001d84 <HAL_GPIO_Init+0x2f0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d019      	beq.n	8001c96 <HAL_GPIO_Init+0x202>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a48      	ldr	r2, [pc, #288]	@ (8001d88 <HAL_GPIO_Init+0x2f4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0x1fe>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_GPIO_Init+0x2f8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00d      	beq.n	8001c8e <HAL_GPIO_Init+0x1fa>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a46      	ldr	r2, [pc, #280]	@ (8001d90 <HAL_GPIO_Init+0x2fc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d007      	beq.n	8001c8a <HAL_GPIO_Init+0x1f6>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a45      	ldr	r2, [pc, #276]	@ (8001d94 <HAL_GPIO_Init+0x300>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d101      	bne.n	8001c86 <HAL_GPIO_Init+0x1f2>
 8001c82:	2304      	movs	r3, #4
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c86:	2307      	movs	r3, #7
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x204>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	@ (8001d80 <HAL_GPIO_Init+0x2ec>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a2f      	ldr	r2, [pc, #188]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a24      	ldr	r2, [pc, #144]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_GPIO_Init+0x304>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f aea2 	bls.w	8001ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40013c00 	.word	0x40013c00

08001d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dac:	787b      	ldrb	r3, [r7, #1]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db8:	e003      	b.n	8001dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	041a      	lsls	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	041a      	lsls	r2, r3, #16
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	400b      	ands	r3, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e12b      	b.n	800206e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fd3c 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	@ 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e68:	f000 fd80 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8001e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4a81      	ldr	r2, [pc, #516]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d807      	bhi.n	8001e88 <HAL_I2C_Init+0x84>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a80      	ldr	r2, [pc, #512]	@ (800207c <HAL_I2C_Init+0x278>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	bf94      	ite	ls
 8001e80:	2301      	movls	r3, #1
 8001e82:	2300      	movhi	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e006      	b.n	8001e96 <HAL_I2C_Init+0x92>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002080 <HAL_I2C_Init+0x27c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	bf94      	ite	ls
 8001e90:	2301      	movls	r3, #1
 8001e92:	2300      	movhi	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0e7      	b.n	800206e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4a78      	ldr	r2, [pc, #480]	@ (8002084 <HAL_I2C_Init+0x280>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9b      	lsrs	r3, r3, #18
 8001ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d802      	bhi.n	8001ed8 <HAL_I2C_Init+0xd4>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	e009      	b.n	8001eec <HAL_I2C_Init+0xe8>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a69      	ldr	r2, [pc, #420]	@ (8002088 <HAL_I2C_Init+0x284>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	3301      	adds	r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001efe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	495c      	ldr	r1, [pc, #368]	@ (8002078 <HAL_I2C_Init+0x274>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d819      	bhi.n	8001f40 <HAL_I2C_Init+0x13c>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e59      	subs	r1, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_I2C_Init+0x138>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e59      	subs	r1, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f3a:	e051      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e04f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d111      	bne.n	8001f6c <HAL_I2C_Init+0x168>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e58      	subs	r0, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	e012      	b.n	8001f92 <HAL_I2C_Init+0x18e>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1e58      	subs	r0, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	0099      	lsls	r1, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_I2C_Init+0x196>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e022      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_I2C_Init+0x1bc>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e58      	subs	r0, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	460b      	mov	r3, r1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	440b      	add	r3, r1
 8001fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Init+0x1dc>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	0099      	lsls	r1, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	6809      	ldr	r1, [r1, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800200e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6911      	ldr	r1, [r2, #16]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	000186a0 	.word	0x000186a0
 800207c:	001e847f 	.word	0x001e847f
 8002080:	003d08ff 	.word	0x003d08ff
 8002084:	431bde83 	.word	0x431bde83
 8002088:	10624dd3 	.word	0x10624dd3

0800208c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e267      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d075      	beq.n	8002196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020aa:	4b88      	ldr	r3, [pc, #544]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d00c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b85      	ldr	r3, [pc, #532]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d112      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	4b82      	ldr	r3, [pc, #520]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d0:	4b7e      	ldr	r3, [pc, #504]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d05b      	beq.n	8002194 <HAL_RCC_OscConfig+0x108>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d157      	bne.n	8002194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e242      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x74>
 80020f2:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a75      	ldr	r2, [pc, #468]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e01d      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002108:	d10c      	bne.n	8002124 <HAL_RCC_OscConfig+0x98>
 800210a:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6f      	ldr	r2, [pc, #444]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b6d      	ldr	r3, [pc, #436]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a6c      	ldr	r2, [pc, #432]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00b      	b.n	800213c <HAL_RCC_OscConfig+0xb0>
 8002124:	4b69      	ldr	r3, [pc, #420]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a68      	ldr	r2, [pc, #416]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7ff f894 	bl	8001270 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214c:	f7ff f890 	bl	8001270 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e207      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b5b      	ldr	r3, [pc, #364]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xc0>
 800216a:	e014      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff f880 	bl	8001270 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002174:	f7ff f87c 	bl	8001270 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e1f3      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	4b51      	ldr	r3, [pc, #324]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0xe8>
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d063      	beq.n	800226a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021a2:	4b4a      	ldr	r3, [pc, #296]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00b      	beq.n	80021c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b47      	ldr	r3, [pc, #284]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d11c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ba:	4b44      	ldr	r3, [pc, #272]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d116      	bne.n	80021f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c6:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e1c7      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021de:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4937      	ldr	r1, [pc, #220]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f2:	e03a      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021fc:	4b34      	ldr	r3, [pc, #208]	@ (80022d0 <HAL_RCC_OscConfig+0x244>)
 80021fe:	2201      	movs	r2, #1
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff f835 	bl	8001270 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff f831 	bl	8001270 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1a8      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	4b2b      	ldr	r3, [pc, #172]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b28      	ldr	r3, [pc, #160]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4925      	ldr	r1, [pc, #148]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]
 800223c:	e015      	b.n	800226a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223e:	4b24      	ldr	r3, [pc, #144]	@ (80022d0 <HAL_RCC_OscConfig+0x244>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff f814 	bl	8001270 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff f810 	bl	8001270 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e187      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d036      	beq.n	80022e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <HAL_RCC_OscConfig+0x248>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fff4 	bl	8001270 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800228c:	f7fe fff0 	bl	8001270 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e167      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_RCC_OscConfig+0x240>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x200>
 80022aa:	e01b      	b.n	80022e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_OscConfig+0x248>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe ffdd 	bl	8001270 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	e00e      	b.n	80022d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ba:	f7fe ffd9 	bl	8001270 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d907      	bls.n	80022d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e150      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	42470000 	.word	0x42470000
 80022d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b88      	ldr	r3, [pc, #544]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80022da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ea      	bne.n	80022ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8097 	beq.w	8002420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b81      	ldr	r3, [pc, #516]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10f      	bne.n	8002322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b7d      	ldr	r3, [pc, #500]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a7c      	ldr	r2, [pc, #496]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b7a      	ldr	r3, [pc, #488]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002322:	4b77      	ldr	r3, [pc, #476]	@ (8002500 <HAL_RCC_OscConfig+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232e:	4b74      	ldr	r3, [pc, #464]	@ (8002500 <HAL_RCC_OscConfig+0x474>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a73      	ldr	r2, [pc, #460]	@ (8002500 <HAL_RCC_OscConfig+0x474>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe ff99 	bl	8001270 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe ff95 	bl	8001270 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e10c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002354:	4b6a      	ldr	r3, [pc, #424]	@ (8002500 <HAL_RCC_OscConfig+0x474>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x2ea>
 8002368:	4b64      	ldr	r3, [pc, #400]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	4a63      	ldr	r2, [pc, #396]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6713      	str	r3, [r2, #112]	@ 0x70
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b05      	cmp	r3, #5
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x30c>
 800237e:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002382:	4a5e      	ldr	r2, [pc, #376]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6713      	str	r3, [r2, #112]	@ 0x70
 800238a:	4b5c      	ldr	r3, [pc, #368]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	4a5b      	ldr	r2, [pc, #364]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	@ 0x70
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0x324>
 8002398:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239c:	4a57      	ldr	r2, [pc, #348]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a4:	4b55      	ldr	r3, [pc, #340]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	4a54      	ldr	r2, [pc, #336]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80023aa:	f023 0304 	bic.w	r3, r3, #4
 80023ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7fe ff5a 	bl	8001270 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c0:	f7fe ff56 	bl	8001270 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e0cb      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	4b49      	ldr	r3, [pc, #292]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d0ee      	beq.n	80023c0 <HAL_RCC_OscConfig+0x334>
 80023e2:	e014      	b.n	800240e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e4:	f7fe ff44 	bl	8001270 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7fe ff40 	bl	8001270 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e0b5      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002402:	4b3e      	ldr	r3, [pc, #248]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ee      	bne.n	80023ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b39      	ldr	r3, [pc, #228]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	4a38      	ldr	r2, [pc, #224]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80a1 	beq.w	800256c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800242a:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d05c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d141      	bne.n	80024c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b31      	ldr	r3, [pc, #196]	@ (8002504 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe ff14 	bl	8001270 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe ff10 	bl	8001270 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e087      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b27      	ldr	r3, [pc, #156]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	085b      	lsrs	r3, r3, #1
 8002482:	3b01      	subs	r3, #1
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	491b      	ldr	r1, [pc, #108]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x478>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7fe fee9 	bl	8001270 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a2:	f7fe fee5 	bl	8001270 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e05c      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x416>
 80024c0:	e054      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_RCC_OscConfig+0x478>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fed2 	bl	8001270 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7fe fece 	bl	8001270 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e045      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_RCC_OscConfig+0x470>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x444>
 80024ee:	e03d      	b.n	800256c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e038      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x4ec>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d028      	beq.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d121      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d11a      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002538:	4013      	ands	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800253e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002540:	4293      	cmp	r3, r2
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	3b01      	subs	r3, #1
 8002552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002554:	429a      	cmp	r2, r3
 8002556:	d107      	bne.n	8002568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800

0800257c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0cc      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b68      	ldr	r3, [pc, #416]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d90c      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b65      	ldr	r3, [pc, #404]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a6:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0b8      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d020      	beq.n	8002606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d0:	4b59      	ldr	r3, [pc, #356]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a58      	ldr	r2, [pc, #352]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	494d      	ldr	r1, [pc, #308]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d044      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b47      	ldr	r3, [pc, #284]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d119      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e07f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d003      	beq.n	800263a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002636:	2b03      	cmp	r3, #3
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b3f      	ldr	r3, [pc, #252]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e06f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3b      	ldr	r3, [pc, #236]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e067      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b37      	ldr	r3, [pc, #220]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4934      	ldr	r1, [pc, #208]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	4313      	orrs	r3, r2
 800266a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fe00 	bl	8001270 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fdfc 	bl	8001270 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04f      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d20c      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b22      	ldr	r3, [pc, #136]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e032      	b.n	800272a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4916      	ldr	r1, [pc, #88]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d009      	beq.n	8002702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ee:	4b12      	ldr	r3, [pc, #72]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	490e      	ldr	r1, [pc, #56]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002702:	f000 f821 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8002706:	4602      	mov	r2, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	490a      	ldr	r1, [pc, #40]	@ (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	5ccb      	ldrb	r3, [r1, r3]
 8002716:	fa22 f303 	lsr.w	r3, r2, r3
 800271a:	4a09      	ldr	r2, [pc, #36]	@ (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fd60 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00
 8002738:	40023800 	.word	0x40023800
 800273c:	08004e70 	.word	0x08004e70
 8002740:	20000000 	.word	0x20000000
 8002744:	20000004 	.word	0x20000004

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b094      	sub	sp, #80	@ 0x50
 800274e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	@ 0x44
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002758:	2300      	movs	r3, #0
 800275a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002760:	4b79      	ldr	r3, [pc, #484]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b08      	cmp	r3, #8
 800276a:	d00d      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x40>
 800276c:	2b08      	cmp	r3, #8
 800276e:	f200 80e1 	bhi.w	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002776:	2b04      	cmp	r3, #4
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x3a>
 800277a:	e0db      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b73      	ldr	r3, [pc, #460]	@ (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 800277e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002780:	e0db      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002782:	4b73      	ldr	r3, [pc, #460]	@ (8002950 <HAL_RCC_GetSysClockFreq+0x208>)
 8002784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002786:	e0d8      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002788:	4b6f      	ldr	r3, [pc, #444]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002790:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002792:	4b6d      	ldr	r3, [pc, #436]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d063      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b6a      	ldr	r3, [pc, #424]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	2200      	movs	r2, #0
 80027a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027b2:	2300      	movs	r3, #0
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80027b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	f04f 0000 	mov.w	r0, #0
 80027c2:	f04f 0100 	mov.w	r1, #0
 80027c6:	0159      	lsls	r1, r3, #5
 80027c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027cc:	0150      	lsls	r0, r2, #5
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4621      	mov	r1, r4
 80027d4:	1a51      	subs	r1, r2, r1
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	4629      	mov	r1, r5
 80027da:	eb63 0301 	sbc.w	r3, r3, r1
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ec:	4659      	mov	r1, fp
 80027ee:	018b      	lsls	r3, r1, #6
 80027f0:	4651      	mov	r1, sl
 80027f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027f6:	4651      	mov	r1, sl
 80027f8:	018a      	lsls	r2, r1, #6
 80027fa:	4651      	mov	r1, sl
 80027fc:	ebb2 0801 	subs.w	r8, r2, r1
 8002800:	4659      	mov	r1, fp
 8002802:	eb63 0901 	sbc.w	r9, r3, r1
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
 800281e:	4623      	mov	r3, r4
 8002820:	eb18 0303 	adds.w	r3, r8, r3
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	462b      	mov	r3, r5
 8002828:	eb49 0303 	adc.w	r3, r9, r3
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800283a:	4629      	mov	r1, r5
 800283c:	024b      	lsls	r3, r1, #9
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002844:	4621      	mov	r1, r4
 8002846:	024a      	lsls	r2, r1, #9
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800284e:	2200      	movs	r2, #0
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002854:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002858:	f7fd fd12 	bl	8000280 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002864:	e058      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	099b      	lsrs	r3, r3, #6
 800286c:	2200      	movs	r2, #0
 800286e:	4618      	mov	r0, r3
 8002870:	4611      	mov	r1, r2
 8002872:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002876:	623b      	str	r3, [r7, #32]
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
 800287c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002880:	4642      	mov	r2, r8
 8002882:	464b      	mov	r3, r9
 8002884:	f04f 0000 	mov.w	r0, #0
 8002888:	f04f 0100 	mov.w	r1, #0
 800288c:	0159      	lsls	r1, r3, #5
 800288e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002892:	0150      	lsls	r0, r2, #5
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4641      	mov	r1, r8
 800289a:	ebb2 0a01 	subs.w	sl, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028b8:	ebb2 040a 	subs.w	r4, r2, sl
 80028bc:	eb63 050b 	sbc.w	r5, r3, fp
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ee:	4629      	mov	r1, r5
 80028f0:	028b      	lsls	r3, r1, #10
 80028f2:	4621      	mov	r1, r4
 80028f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f8:	4621      	mov	r1, r4
 80028fa:	028a      	lsls	r2, r1, #10
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002902:	2200      	movs	r2, #0
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	61fa      	str	r2, [r7, #28]
 8002908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800290c:	f7fd fcb8 	bl	8000280 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <HAL_RCC_GetSysClockFreq+0x200>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002928:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800292a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002932:	e002      	b.n	800293a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <HAL_RCC_GetSysClockFreq+0x204>)
 8002936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800293a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800293c:	4618      	mov	r0, r3
 800293e:	3750      	adds	r7, #80	@ 0x50
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	00f42400 	.word	0x00f42400
 8002950:	007a1200 	.word	0x007a1200

08002954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <HAL_RCC_GetHCLKFreq+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002970:	f7ff fff0 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 8002974:	4602      	mov	r2, r0
 8002976:	4b05      	ldr	r3, [pc, #20]	@ (800298c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	4903      	ldr	r1, [pc, #12]	@ (8002990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002982:	5ccb      	ldrb	r3, [r1, r3]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	08004e80 	.word	0x08004e80

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002998:	f7ff ffdc 	bl	8002954 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	0b5b      	lsrs	r3, r3, #13
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	@ (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	08004e80 	.word	0x08004e80

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d035      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029e4:	4b67      	ldr	r3, [pc, #412]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029ea:	f7fe fc41 	bl	8001270 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029f2:	f7fe fc3d 	bl	8001270 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0ba      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a04:	4b60      	ldr	r3, [pc, #384]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	019a      	lsls	r2, r3, #6
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	071b      	lsls	r3, r3, #28
 8002a1c:	495a      	ldr	r1, [pc, #360]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a24:	4b57      	ldr	r3, [pc, #348]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fc21 	bl	8001270 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a32:	f7fe fc1d 	bl	8001270 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e09a      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a44:	4b50      	ldr	r3, [pc, #320]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8083 	beq.w	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b49      	ldr	r3, [pc, #292]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	4a48      	ldr	r2, [pc, #288]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6e:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a7a:	4b44      	ldr	r3, [pc, #272]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a43      	ldr	r2, [pc, #268]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fbf3 	bl	8001270 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fbef 	bl	8001270 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e06c      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d02f      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aca:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ad2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ada:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ae0:	4a29      	ldr	r2, [pc, #164]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ae6:	4b28      	ldr	r3, [pc, #160]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d114      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fbbd 	bl	8001270 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fbb9 	bl	8001270 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e034      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b28:	d10d      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b2a:	4b17      	ldr	r3, [pc, #92]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3e:	4912      	ldr	r1, [pc, #72]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
 8002b44:	e005      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b4c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b50:	6093      	str	r3, [r2, #8]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5e:	490a      	ldr	r1, [pc, #40]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7c1a      	ldrb	r2, [r3, #16]
 8002b74:	4b07      	ldr	r3, [pc, #28]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b76:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	42470068 	.word	0x42470068
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	42470e40 	.word	0x42470e40
 8002b94:	424711e0 	.word	0x424711e0

08002b98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e073      	b.n	8002c96 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7f5b      	ldrb	r3, [r3, #29]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd ff92 	bl	8000ae8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d055      	beq.n	8002c84 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	22ca      	movs	r2, #202	@ 0xca
 8002bde:	625a      	str	r2, [r3, #36]	@ 0x24
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2253      	movs	r2, #83	@ 0x53
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f87f 	bl	8002cec <RTC_EnterInitMode>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d12c      	bne.n	8002c52 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c0a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6899      	ldr	r1, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	68d2      	ldr	r2, [r2, #12]
 8002c32:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	041a      	lsls	r2, r3, #16
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f886 	bl	8002d5a <RTC_ExitInitMode>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c66:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	22ff      	movs	r2, #255	@ 0xff
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c82:	e001      	b.n	8002c88 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <HAL_RTC_WaitForSynchro+0x48>)
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb4:	f7fe fadc 	bl	8001270 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cba:	e009      	b.n	8002cd0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cbc:	f7fe fad8 	bl	8001270 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cca:	d901      	bls.n	8002cd0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e007      	b.n	8002ce0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0ee      	beq.n	8002cbc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	00013f5f 	.word	0x00013f5f

08002cec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d122      	bne.n	8002d50 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d18:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe faa9 	bl	8001270 <HAL_GetTick>
 8002d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d20:	e00c      	b.n	8002d3c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d22:	f7fe faa5 	bl	8001270 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d30:	d904      	bls.n	8002d3c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <RTC_EnterInitMode+0x64>
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d1e8      	bne.n	8002d22 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d74:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff8b 	bl	8002ca0 <HAL_RTC_WaitForSynchro>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2204      	movs	r2, #4
 8002d94:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07b      	b.n	8002eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc6:	d009      	beq.n	8002ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
 8002dce:	e005      	b.n	8002ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd feda 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0104 	and.w	r1, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	f003 0210 	and.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e042      	b.n	8002f4e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d106      	bne.n	8002ee2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fe f87d 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2224      	movs	r2, #36	@ 0x24
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fdfe 	bl	8003afc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f1e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	@ 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d175      	bne.n	8003062 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Transmit+0x2c>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06e      	b.n	8003064 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2221      	movs	r2, #33	@ 0x21
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f94:	f7fe f96c 	bl	8001270 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fae:	d108      	bne.n	8002fc2 <HAL_UART_Transmit+0x6c>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d104      	bne.n	8002fc2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e003      	b.n	8002fca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fca:	e02e      	b.n	800302a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb60 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e03a      	b.n	8003064 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003002:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3302      	adds	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e007      	b.n	800301c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1cb      	bne.n	8002fcc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2200      	movs	r2, #0
 800303c:	2140      	movs	r1, #64	@ 0x40
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fb2c 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e006      	b.n	8003064 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	4618      	mov	r0, r3
 8003066:	3720      	adds	r7, #32
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	d121      	bne.n	80030ca <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_UART_Transmit_IT+0x26>
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e01a      	b.n	80030cc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2221      	movs	r2, #33	@ 0x21
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
  }
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d112      	bne.n	8003118 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <HAL_UART_Receive_IT+0x26>
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00b      	b.n	800311a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	461a      	mov	r2, r3
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fb1d 	bl	800374e <UART_Start_Receive_IT>
 8003114:	4603      	mov	r3, r0
 8003116:	e000      	b.n	800311a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0ba      	sub	sp, #232	@ 0xe8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003162:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800316a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_UART_IRQHandler+0x66>
 8003176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fbfc 	bl	8003980 <UART_Receive_IT>
      return;
 8003188:	e25b      	b.n	8003642 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800318a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 80de 	beq.w	8003350 <HAL_UART_IRQHandler+0x22c>
 8003194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80d1 	beq.w	8003350 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xae>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_UART_IRQHandler+0xd2>
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
 8003202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f043 0204 	orr.w	r2, r3, #4
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d011      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
 8003226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d105      	bne.n	800323e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0208 	orr.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 81f2 	beq.w	8003638 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_UART_IRQHandler+0x14e>
 8003260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fb87 	bl	8003980 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b40      	cmp	r3, #64	@ 0x40
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <HAL_UART_IRQHandler+0x17a>
 8003296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800329a:	2b00      	cmp	r3, #0
 800329c:	d04f      	beq.n	800333e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa8f 	bl	80037c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ae:	2b40      	cmp	r3, #64	@ 0x40
 80032b0:	d141      	bne.n	8003336 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3314      	adds	r3, #20
 80032da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1d9      	bne.n	80032b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d013      	beq.n	800332e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	4a7e      	ldr	r2, [pc, #504]	@ (8003504 <HAL_UART_IRQHandler+0x3e0>)
 800330c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fb9b 	bl	8001a4e <HAL_DMA_Abort_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	e00e      	b.n	800334c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f99e 	bl	8003670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	e00a      	b.n	800334c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f99a 	bl	8003670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	e006      	b.n	800334c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f996 	bl	8003670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800334a:	e175      	b.n	8003638 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334c:	bf00      	nop
    return;
 800334e:	e173      	b.n	8003638 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 814f 	bne.w	80035f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8148 	beq.w	80035f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8141 	beq.w	80035f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003396:	2b40      	cmp	r3, #64	@ 0x40
 8003398:	f040 80b6 	bne.w	8003508 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8145 	beq.w	800363c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033ba:	429a      	cmp	r2, r3
 80033bc:	f080 813e 	bcs.w	800363c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d2:	f000 8088 	beq.w	80034e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003402:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003406:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800340e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800341a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1d9      	bne.n	80033d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3314      	adds	r3, #20
 8003442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003446:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800344a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800344e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e1      	bne.n	8003422 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800346e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003470:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3314      	adds	r3, #20
 800347e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003482:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003484:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003488:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e3      	bne.n	800345e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	330c      	adds	r3, #12
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	330c      	adds	r3, #12
 80034c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e3      	bne.n	80034a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fa44 	bl	800196e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f8c1 	bl	8003684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003502:	e09b      	b.n	800363c <HAL_UART_IRQHandler+0x518>
 8003504:	08003889 	.word	0x08003889
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003510:	b29b      	uxth	r3, r3
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 808e 	beq.w	8003640 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003524:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8089 	beq.w	8003640 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003544:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003552:	647a      	str	r2, [r7, #68]	@ 0x44
 8003554:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3314      	adds	r3, #20
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	623b      	str	r3, [r7, #32]
   return(result);
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	f023 0301 	bic.w	r3, r3, #1
 800357c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800358a:	633a      	str	r2, [r7, #48]	@ 0x30
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e3      	bne.n	8003566 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0310 	bic.w	r3, r3, #16
 80035c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035d0:	61fa      	str	r2, [r7, #28]
 80035d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	69b9      	ldr	r1, [r7, #24]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	617b      	str	r3, [r7, #20]
   return(result);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e3      	bne.n	80035ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ee:	4619      	mov	r1, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f847 	bl	8003684 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035f6:	e023      	b.n	8003640 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <HAL_UART_IRQHandler+0x4f4>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f94d 	bl	80038b0 <UART_Transmit_IT>
    return;
 8003616:	e014      	b.n	8003642 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <HAL_UART_IRQHandler+0x51e>
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f98d 	bl	8003950 <UART_EndTransmit_IT>
    return;
 8003636:	e004      	b.n	8003642 <HAL_UART_IRQHandler+0x51e>
    return;
 8003638:	bf00      	nop
 800363a:	e002      	b.n	8003642 <HAL_UART_IRQHandler+0x51e>
      return;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <HAL_UART_IRQHandler+0x51e>
      return;
 8003640:	bf00      	nop
  }
}
 8003642:	37e8      	adds	r7, #232	@ 0xe8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	e03b      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d037      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fd fddb 	bl	8001270 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <UART_WaitOnFlagUntilTimeout+0x30>
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e03a      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d023      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b80      	cmp	r3, #128	@ 0x80
 80036e2:	d020      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b40      	cmp	r3, #64	@ 0x40
 80036e8:	d01d      	beq.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d116      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 f857 	bl	80037c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2208      	movs	r2, #8
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	bf0c      	ite	eq
 8003736:	2301      	moveq	r3, #1
 8003738:	2300      	movne	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	79fb      	ldrb	r3, [r7, #7]
 8003740:	429a      	cmp	r2, r3
 8003742:	d0b4      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	88fa      	ldrh	r2, [r7, #6]
 800376c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	@ 0x22
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003792:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b095      	sub	sp, #84	@ 0x54
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	330c      	adds	r3, #12
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	330c      	adds	r3, #12
 80037e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e5      	bne.n	80037ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	61fb      	str	r3, [r7, #28]
   return(result);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800381e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	2b01      	cmp	r3, #1
 8003838:	d119      	bne.n	800386e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	60bb      	str	r3, [r7, #8]
   return(result);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0310 	bic.w	r3, r3, #16
 8003850:	647b      	str	r3, [r7, #68]	@ 0x44
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800385a:	61ba      	str	r2, [r7, #24]
 800385c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6979      	ldr	r1, [r7, #20]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	613b      	str	r3, [r7, #16]
   return(result);
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800387c:	bf00      	nop
 800387e:	3754      	adds	r7, #84	@ 0x54
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fee4 	bl	8003670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b21      	cmp	r3, #33	@ 0x21
 80038c2:	d13e      	bne.n	8003942 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038cc:	d114      	bne.n	80038f8 <UART_Transmit_IT+0x48>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d110      	bne.n	80038f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	1c9a      	adds	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]
 80038f6:	e008      	b.n	800390a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	1c59      	adds	r1, r3, #1
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6211      	str	r1, [r2, #32]
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4619      	mov	r1, r3
 8003918:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800392c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800393c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003966:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fe69 	bl	8003648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	@ 0x30
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b22      	cmp	r3, #34	@ 0x22
 8003992:	f040 80ae 	bne.w	8003af2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399e:	d117      	bne.n	80039d0 <UART_Receive_IT+0x50>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d113      	bne.n	80039d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039be:	b29a      	uxth	r2, r3
 80039c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	1c9a      	adds	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ce:	e026      	b.n	8003a1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e2:	d007      	beq.n	80039f4 <UART_Receive_IT+0x74>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <UART_Receive_IT+0x82>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	701a      	strb	r2, [r3, #0]
 8003a00:	e008      	b.n	8003a14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d15d      	bne.n	8003aee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0220 	bic.w	r2, r2, #32
 8003a40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d135      	bne.n	8003ae4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	330c      	adds	r3, #12
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0310 	bic.w	r3, r3, #16
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9e:	623a      	str	r2, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d10a      	bne.n	8003ad6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fdd1 	bl	8003684 <HAL_UARTEx_RxEventCallback>
 8003ae2:	e002      	b.n	8003aea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff fdb9 	bl	800365c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e002      	b.n	8003af4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3730      	adds	r7, #48	@ 0x30
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b00:	b0c0      	sub	sp, #256	@ 0x100
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	68d9      	ldr	r1, [r3, #12]
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	ea40 0301 	orr.w	r3, r0, r1
 8003b24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b54:	f021 010c 	bic.w	r1, r1, #12
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b62:	430b      	orrs	r3, r1
 8003b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b76:	6999      	ldr	r1, [r3, #24]
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	ea40 0301 	orr.w	r3, r0, r1
 8003b82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b8f      	ldr	r3, [pc, #572]	@ (8003dc8 <UART_SetConfig+0x2cc>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d005      	beq.n	8003b9c <UART_SetConfig+0xa0>
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b8d      	ldr	r3, [pc, #564]	@ (8003dcc <UART_SetConfig+0x2d0>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d104      	bne.n	8003ba6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7fe fefa 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 8003ba0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ba4:	e003      	b.n	8003bae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba6:	f7fe fee1 	bl	800296c <HAL_RCC_GetPCLK1Freq>
 8003baa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb8:	f040 810c 	bne.w	8003dd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bce:	4622      	mov	r2, r4
 8003bd0:	462b      	mov	r3, r5
 8003bd2:	1891      	adds	r1, r2, r2
 8003bd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bd6:	415b      	adcs	r3, r3
 8003bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bde:	4621      	mov	r1, r4
 8003be0:	eb12 0801 	adds.w	r8, r2, r1
 8003be4:	4629      	mov	r1, r5
 8003be6:	eb43 0901 	adc.w	r9, r3, r1
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bfe:	4690      	mov	r8, r2
 8003c00:	4699      	mov	r9, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	eb18 0303 	adds.w	r3, r8, r3
 8003c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	eb49 0303 	adc.w	r3, r9, r3
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	18db      	adds	r3, r3, r3
 8003c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c30:	4613      	mov	r3, r2
 8003c32:	eb42 0303 	adc.w	r3, r2, r3
 8003c36:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c40:	f7fc fb1e 	bl	8000280 <__aeabi_uldivmod>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4b61      	ldr	r3, [pc, #388]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	011c      	lsls	r4, r3, #4
 8003c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	1891      	adds	r1, r2, r2
 8003c6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c6c:	415b      	adcs	r3, r3
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c74:	4641      	mov	r1, r8
 8003c76:	eb12 0a01 	adds.w	sl, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c94:	4692      	mov	sl, r2
 8003c96:	469b      	mov	fp, r3
 8003c98:	4643      	mov	r3, r8
 8003c9a:	eb1a 0303 	adds.w	r3, sl, r3
 8003c9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	18db      	adds	r3, r3, r3
 8003cc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cd6:	f7fc fad3 	bl	8000280 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2264      	movs	r2, #100	@ 0x64
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	1acb      	subs	r3, r1, r3
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cf6:	4b36      	ldr	r3, [pc, #216]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d04:	441c      	add	r4, r3
 8003d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	1891      	adds	r1, r2, r2
 8003d1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d20:	415b      	adcs	r3, r3
 8003d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d28:	4641      	mov	r1, r8
 8003d2a:	1851      	adds	r1, r2, r1
 8003d2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d2e:	4649      	mov	r1, r9
 8003d30:	414b      	adcs	r3, r1
 8003d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d40:	4659      	mov	r1, fp
 8003d42:	00cb      	lsls	r3, r1, #3
 8003d44:	4651      	mov	r1, sl
 8003d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	00ca      	lsls	r2, r1, #3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	4642      	mov	r2, r8
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	460a      	mov	r2, r1
 8003d60:	eb42 0303 	adc.w	r3, r2, r3
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	18db      	adds	r3, r3, r3
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d82:	4613      	mov	r3, r2
 8003d84:	eb42 0303 	adc.w	r3, r2, r3
 8003d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d92:	f7fc fa75 	bl	8000280 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	2164      	movs	r1, #100	@ 0x64
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	3332      	adds	r3, #50	@ 0x32
 8003dae:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <UART_SetConfig+0x2d4>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	f003 0207 	and.w	r2, r3, #7
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4422      	add	r2, r4
 8003dc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dc4:	e106      	b.n	8003fd4 <UART_SetConfig+0x4d8>
 8003dc6:	bf00      	nop
 8003dc8:	40011000 	.word	0x40011000
 8003dcc:	40011400 	.word	0x40011400
 8003dd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003de2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003de6:	4642      	mov	r2, r8
 8003de8:	464b      	mov	r3, r9
 8003dea:	1891      	adds	r1, r2, r2
 8003dec:	6239      	str	r1, [r7, #32]
 8003dee:	415b      	adcs	r3, r3
 8003df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003df6:	4641      	mov	r1, r8
 8003df8:	1854      	adds	r4, r2, r1
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	eb43 0501 	adc.w	r5, r3, r1
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	00eb      	lsls	r3, r5, #3
 8003e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0e:	00e2      	lsls	r2, r4, #3
 8003e10:	4614      	mov	r4, r2
 8003e12:	461d      	mov	r5, r3
 8003e14:	4643      	mov	r3, r8
 8003e16:	18e3      	adds	r3, r4, r3
 8003e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	eb45 0303 	adc.w	r3, r5, r3
 8003e22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e42:	4629      	mov	r1, r5
 8003e44:	008b      	lsls	r3, r1, #2
 8003e46:	4621      	mov	r1, r4
 8003e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	008a      	lsls	r2, r1, #2
 8003e50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e54:	f7fc fa14 	bl	8000280 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4b60      	ldr	r3, [pc, #384]	@ (8003fe0 <UART_SetConfig+0x4e4>)
 8003e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	011c      	lsls	r4, r3, #4
 8003e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	1891      	adds	r1, r2, r2
 8003e7e:	61b9      	str	r1, [r7, #24]
 8003e80:	415b      	adcs	r3, r3
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e88:	4641      	mov	r1, r8
 8003e8a:	1851      	adds	r1, r2, r1
 8003e8c:	6139      	str	r1, [r7, #16]
 8003e8e:	4649      	mov	r1, r9
 8003e90:	414b      	adcs	r3, r1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea0:	4659      	mov	r1, fp
 8003ea2:	00cb      	lsls	r3, r1, #3
 8003ea4:	4651      	mov	r1, sl
 8003ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eaa:	4651      	mov	r1, sl
 8003eac:	00ca      	lsls	r2, r1, #3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	189b      	adds	r3, r3, r2
 8003eb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	460a      	mov	r2, r1
 8003ec0:	eb42 0303 	adc.w	r3, r2, r3
 8003ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	008b      	lsls	r3, r1, #2
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eea:	4641      	mov	r1, r8
 8003eec:	008a      	lsls	r2, r1, #2
 8003eee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ef2:	f7fc f9c5 	bl	8000280 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <UART_SetConfig+0x4e4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2264      	movs	r2, #100	@ 0x64
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	3332      	adds	r3, #50	@ 0x32
 8003f10:	4a33      	ldr	r2, [pc, #204]	@ (8003fe0 <UART_SetConfig+0x4e4>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f1c:	441c      	add	r4, r3
 8003f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f22:	2200      	movs	r2, #0
 8003f24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	415b      	adcs	r3, r3
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	1851      	adds	r1, r2, r1
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	4649      	mov	r1, r9
 8003f44:	414b      	adcs	r3, r1
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f54:	4659      	mov	r1, fp
 8003f56:	00cb      	lsls	r3, r1, #3
 8003f58:	4651      	mov	r1, sl
 8003f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5e:	4651      	mov	r1, sl
 8003f60:	00ca      	lsls	r2, r1, #3
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	4642      	mov	r2, r8
 8003f6a:	189b      	adds	r3, r3, r2
 8003f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f6e:	464b      	mov	r3, r9
 8003f70:	460a      	mov	r2, r1
 8003f72:	eb42 0303 	adc.w	r3, r2, r3
 8003f76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f90:	4649      	mov	r1, r9
 8003f92:	008b      	lsls	r3, r1, #2
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fa2:	f7fc f96d 	bl	8000280 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <UART_SetConfig+0x4e4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	@ 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	3332      	adds	r3, #50	@ 0x32
 8003fbe:	4a08      	ldr	r2, [pc, #32]	@ (8003fe0 <UART_SetConfig+0x4e4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4422      	add	r2, r4
 8003fd2:	609a      	str	r2, [r3, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe0:	51eb851f 	.word	0x51eb851f

08003fe4 <std>:
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	4604      	mov	r4, r0
 8003fea:	e9c0 3300 	strd	r3, r3, [r0]
 8003fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ff2:	6083      	str	r3, [r0, #8]
 8003ff4:	8181      	strh	r1, [r0, #12]
 8003ff6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ff8:	81c2      	strh	r2, [r0, #14]
 8003ffa:	6183      	str	r3, [r0, #24]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	2208      	movs	r2, #8
 8004000:	305c      	adds	r0, #92	@ 0x5c
 8004002:	f000 f906 	bl	8004212 <memset>
 8004006:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <std+0x58>)
 8004008:	6263      	str	r3, [r4, #36]	@ 0x24
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <std+0x5c>)
 800400c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <std+0x60>)
 8004010:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <std+0x64>)
 8004014:	6323      	str	r3, [r4, #48]	@ 0x30
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <std+0x68>)
 8004018:	6224      	str	r4, [r4, #32]
 800401a:	429c      	cmp	r4, r3
 800401c:	d006      	beq.n	800402c <std+0x48>
 800401e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004022:	4294      	cmp	r4, r2
 8004024:	d002      	beq.n	800402c <std+0x48>
 8004026:	33d0      	adds	r3, #208	@ 0xd0
 8004028:	429c      	cmp	r4, r3
 800402a:	d105      	bne.n	8004038 <std+0x54>
 800402c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004034:	f000 b966 	b.w	8004304 <__retarget_lock_init_recursive>
 8004038:	bd10      	pop	{r4, pc}
 800403a:	bf00      	nop
 800403c:	0800418d 	.word	0x0800418d
 8004040:	080041af 	.word	0x080041af
 8004044:	080041e7 	.word	0x080041e7
 8004048:	0800420b 	.word	0x0800420b
 800404c:	20000284 	.word	0x20000284

08004050 <stdio_exit_handler>:
 8004050:	4a02      	ldr	r2, [pc, #8]	@ (800405c <stdio_exit_handler+0xc>)
 8004052:	4903      	ldr	r1, [pc, #12]	@ (8004060 <stdio_exit_handler+0x10>)
 8004054:	4803      	ldr	r0, [pc, #12]	@ (8004064 <stdio_exit_handler+0x14>)
 8004056:	f000 b869 	b.w	800412c <_fwalk_sglue>
 800405a:	bf00      	nop
 800405c:	2000000c 	.word	0x2000000c
 8004060:	08004ba5 	.word	0x08004ba5
 8004064:	2000001c 	.word	0x2000001c

08004068 <cleanup_stdio>:
 8004068:	6841      	ldr	r1, [r0, #4]
 800406a:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <cleanup_stdio+0x34>)
 800406c:	4299      	cmp	r1, r3
 800406e:	b510      	push	{r4, lr}
 8004070:	4604      	mov	r4, r0
 8004072:	d001      	beq.n	8004078 <cleanup_stdio+0x10>
 8004074:	f000 fd96 	bl	8004ba4 <_fflush_r>
 8004078:	68a1      	ldr	r1, [r4, #8]
 800407a:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <cleanup_stdio+0x38>)
 800407c:	4299      	cmp	r1, r3
 800407e:	d002      	beq.n	8004086 <cleanup_stdio+0x1e>
 8004080:	4620      	mov	r0, r4
 8004082:	f000 fd8f 	bl	8004ba4 <_fflush_r>
 8004086:	68e1      	ldr	r1, [r4, #12]
 8004088:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <cleanup_stdio+0x3c>)
 800408a:	4299      	cmp	r1, r3
 800408c:	d004      	beq.n	8004098 <cleanup_stdio+0x30>
 800408e:	4620      	mov	r0, r4
 8004090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004094:	f000 bd86 	b.w	8004ba4 <_fflush_r>
 8004098:	bd10      	pop	{r4, pc}
 800409a:	bf00      	nop
 800409c:	20000284 	.word	0x20000284
 80040a0:	200002ec 	.word	0x200002ec
 80040a4:	20000354 	.word	0x20000354

080040a8 <global_stdio_init.part.0>:
 80040a8:	b510      	push	{r4, lr}
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <global_stdio_init.part.0+0x30>)
 80040ac:	4c0b      	ldr	r4, [pc, #44]	@ (80040dc <global_stdio_init.part.0+0x34>)
 80040ae:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <global_stdio_init.part.0+0x38>)
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	4620      	mov	r0, r4
 80040b4:	2200      	movs	r2, #0
 80040b6:	2104      	movs	r1, #4
 80040b8:	f7ff ff94 	bl	8003fe4 <std>
 80040bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040c0:	2201      	movs	r2, #1
 80040c2:	2109      	movs	r1, #9
 80040c4:	f7ff ff8e 	bl	8003fe4 <std>
 80040c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040cc:	2202      	movs	r2, #2
 80040ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d2:	2112      	movs	r1, #18
 80040d4:	f7ff bf86 	b.w	8003fe4 <std>
 80040d8:	200003bc 	.word	0x200003bc
 80040dc:	20000284 	.word	0x20000284
 80040e0:	08004051 	.word	0x08004051

080040e4 <__sfp_lock_acquire>:
 80040e4:	4801      	ldr	r0, [pc, #4]	@ (80040ec <__sfp_lock_acquire+0x8>)
 80040e6:	f000 b90e 	b.w	8004306 <__retarget_lock_acquire_recursive>
 80040ea:	bf00      	nop
 80040ec:	200003c5 	.word	0x200003c5

080040f0 <__sfp_lock_release>:
 80040f0:	4801      	ldr	r0, [pc, #4]	@ (80040f8 <__sfp_lock_release+0x8>)
 80040f2:	f000 b909 	b.w	8004308 <__retarget_lock_release_recursive>
 80040f6:	bf00      	nop
 80040f8:	200003c5 	.word	0x200003c5

080040fc <__sinit>:
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4604      	mov	r4, r0
 8004100:	f7ff fff0 	bl	80040e4 <__sfp_lock_acquire>
 8004104:	6a23      	ldr	r3, [r4, #32]
 8004106:	b11b      	cbz	r3, 8004110 <__sinit+0x14>
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410c:	f7ff bff0 	b.w	80040f0 <__sfp_lock_release>
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <__sinit+0x28>)
 8004112:	6223      	str	r3, [r4, #32]
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__sinit+0x2c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f5      	bne.n	8004108 <__sinit+0xc>
 800411c:	f7ff ffc4 	bl	80040a8 <global_stdio_init.part.0>
 8004120:	e7f2      	b.n	8004108 <__sinit+0xc>
 8004122:	bf00      	nop
 8004124:	08004069 	.word	0x08004069
 8004128:	200003bc 	.word	0x200003bc

0800412c <_fwalk_sglue>:
 800412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004130:	4607      	mov	r7, r0
 8004132:	4688      	mov	r8, r1
 8004134:	4614      	mov	r4, r2
 8004136:	2600      	movs	r6, #0
 8004138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800413c:	f1b9 0901 	subs.w	r9, r9, #1
 8004140:	d505      	bpl.n	800414e <_fwalk_sglue+0x22>
 8004142:	6824      	ldr	r4, [r4, #0]
 8004144:	2c00      	cmp	r4, #0
 8004146:	d1f7      	bne.n	8004138 <_fwalk_sglue+0xc>
 8004148:	4630      	mov	r0, r6
 800414a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d907      	bls.n	8004164 <_fwalk_sglue+0x38>
 8004154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004158:	3301      	adds	r3, #1
 800415a:	d003      	beq.n	8004164 <_fwalk_sglue+0x38>
 800415c:	4629      	mov	r1, r5
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	4306      	orrs	r6, r0
 8004164:	3568      	adds	r5, #104	@ 0x68
 8004166:	e7e9      	b.n	800413c <_fwalk_sglue+0x10>

08004168 <iprintf>:
 8004168:	b40f      	push	{r0, r1, r2, r3}
 800416a:	b507      	push	{r0, r1, r2, lr}
 800416c:	4906      	ldr	r1, [pc, #24]	@ (8004188 <iprintf+0x20>)
 800416e:	ab04      	add	r3, sp, #16
 8004170:	6808      	ldr	r0, [r1, #0]
 8004172:	f853 2b04 	ldr.w	r2, [r3], #4
 8004176:	6881      	ldr	r1, [r0, #8]
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	f000 f9e9 	bl	8004550 <_vfiprintf_r>
 800417e:	b003      	add	sp, #12
 8004180:	f85d eb04 	ldr.w	lr, [sp], #4
 8004184:	b004      	add	sp, #16
 8004186:	4770      	bx	lr
 8004188:	20000018 	.word	0x20000018

0800418c <__sread>:
 800418c:	b510      	push	{r4, lr}
 800418e:	460c      	mov	r4, r1
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f868 	bl	8004268 <_read_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	bfab      	itete	ge
 800419c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800419e:	89a3      	ldrhlt	r3, [r4, #12]
 80041a0:	181b      	addge	r3, r3, r0
 80041a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041a6:	bfac      	ite	ge
 80041a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041aa:	81a3      	strhlt	r3, [r4, #12]
 80041ac:	bd10      	pop	{r4, pc}

080041ae <__swrite>:
 80041ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b2:	461f      	mov	r7, r3
 80041b4:	898b      	ldrh	r3, [r1, #12]
 80041b6:	05db      	lsls	r3, r3, #23
 80041b8:	4605      	mov	r5, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	4616      	mov	r6, r2
 80041be:	d505      	bpl.n	80041cc <__swrite+0x1e>
 80041c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c4:	2302      	movs	r3, #2
 80041c6:	2200      	movs	r2, #0
 80041c8:	f000 f83c 	bl	8004244 <_lseek_r>
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	4632      	mov	r2, r6
 80041da:	463b      	mov	r3, r7
 80041dc:	4628      	mov	r0, r5
 80041de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041e2:	f000 b853 	b.w	800428c <_write_r>

080041e6 <__sseek>:
 80041e6:	b510      	push	{r4, lr}
 80041e8:	460c      	mov	r4, r1
 80041ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ee:	f000 f829 	bl	8004244 <_lseek_r>
 80041f2:	1c43      	adds	r3, r0, #1
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	bf15      	itete	ne
 80041f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004202:	81a3      	strheq	r3, [r4, #12]
 8004204:	bf18      	it	ne
 8004206:	81a3      	strhne	r3, [r4, #12]
 8004208:	bd10      	pop	{r4, pc}

0800420a <__sclose>:
 800420a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420e:	f000 b809 	b.w	8004224 <_close_r>

08004212 <memset>:
 8004212:	4402      	add	r2, r0
 8004214:	4603      	mov	r3, r0
 8004216:	4293      	cmp	r3, r2
 8004218:	d100      	bne.n	800421c <memset+0xa>
 800421a:	4770      	bx	lr
 800421c:	f803 1b01 	strb.w	r1, [r3], #1
 8004220:	e7f9      	b.n	8004216 <memset+0x4>
	...

08004224 <_close_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4d06      	ldr	r5, [pc, #24]	@ (8004240 <_close_r+0x1c>)
 8004228:	2300      	movs	r3, #0
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	602b      	str	r3, [r5, #0]
 8004230:	f7fc fdd9 	bl	8000de6 <_close>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_close_r+0x1a>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_close_r+0x1a>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	200003c0 	.word	0x200003c0

08004244 <_lseek_r>:
 8004244:	b538      	push	{r3, r4, r5, lr}
 8004246:	4d07      	ldr	r5, [pc, #28]	@ (8004264 <_lseek_r+0x20>)
 8004248:	4604      	mov	r4, r0
 800424a:	4608      	mov	r0, r1
 800424c:	4611      	mov	r1, r2
 800424e:	2200      	movs	r2, #0
 8004250:	602a      	str	r2, [r5, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	f7fc fdee 	bl	8000e34 <_lseek>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_lseek_r+0x1e>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_lseek_r+0x1e>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200003c0 	.word	0x200003c0

08004268 <_read_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d07      	ldr	r5, [pc, #28]	@ (8004288 <_read_r+0x20>)
 800426c:	4604      	mov	r4, r0
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	2200      	movs	r2, #0
 8004274:	602a      	str	r2, [r5, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f7fc fd7c 	bl	8000d74 <_read>
 800427c:	1c43      	adds	r3, r0, #1
 800427e:	d102      	bne.n	8004286 <_read_r+0x1e>
 8004280:	682b      	ldr	r3, [r5, #0]
 8004282:	b103      	cbz	r3, 8004286 <_read_r+0x1e>
 8004284:	6023      	str	r3, [r4, #0]
 8004286:	bd38      	pop	{r3, r4, r5, pc}
 8004288:	200003c0 	.word	0x200003c0

0800428c <_write_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d07      	ldr	r5, [pc, #28]	@ (80042ac <_write_r+0x20>)
 8004290:	4604      	mov	r4, r0
 8004292:	4608      	mov	r0, r1
 8004294:	4611      	mov	r1, r2
 8004296:	2200      	movs	r2, #0
 8004298:	602a      	str	r2, [r5, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	f7fc fd87 	bl	8000dae <_write>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_write_r+0x1e>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_write_r+0x1e>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	200003c0 	.word	0x200003c0

080042b0 <__errno>:
 80042b0:	4b01      	ldr	r3, [pc, #4]	@ (80042b8 <__errno+0x8>)
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20000018 	.word	0x20000018

080042bc <__libc_init_array>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	4d0d      	ldr	r5, [pc, #52]	@ (80042f4 <__libc_init_array+0x38>)
 80042c0:	4c0d      	ldr	r4, [pc, #52]	@ (80042f8 <__libc_init_array+0x3c>)
 80042c2:	1b64      	subs	r4, r4, r5
 80042c4:	10a4      	asrs	r4, r4, #2
 80042c6:	2600      	movs	r6, #0
 80042c8:	42a6      	cmp	r6, r4
 80042ca:	d109      	bne.n	80042e0 <__libc_init_array+0x24>
 80042cc:	4d0b      	ldr	r5, [pc, #44]	@ (80042fc <__libc_init_array+0x40>)
 80042ce:	4c0c      	ldr	r4, [pc, #48]	@ (8004300 <__libc_init_array+0x44>)
 80042d0:	f000 fdb8 	bl	8004e44 <_init>
 80042d4:	1b64      	subs	r4, r4, r5
 80042d6:	10a4      	asrs	r4, r4, #2
 80042d8:	2600      	movs	r6, #0
 80042da:	42a6      	cmp	r6, r4
 80042dc:	d105      	bne.n	80042ea <__libc_init_array+0x2e>
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e4:	4798      	blx	r3
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7ee      	b.n	80042c8 <__libc_init_array+0xc>
 80042ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ee:	4798      	blx	r3
 80042f0:	3601      	adds	r6, #1
 80042f2:	e7f2      	b.n	80042da <__libc_init_array+0x1e>
 80042f4:	08004ec4 	.word	0x08004ec4
 80042f8:	08004ec4 	.word	0x08004ec4
 80042fc:	08004ec4 	.word	0x08004ec4
 8004300:	08004ec8 	.word	0x08004ec8

08004304 <__retarget_lock_init_recursive>:
 8004304:	4770      	bx	lr

08004306 <__retarget_lock_acquire_recursive>:
 8004306:	4770      	bx	lr

08004308 <__retarget_lock_release_recursive>:
 8004308:	4770      	bx	lr
	...

0800430c <_free_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	4605      	mov	r5, r0
 8004310:	2900      	cmp	r1, #0
 8004312:	d041      	beq.n	8004398 <_free_r+0x8c>
 8004314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004318:	1f0c      	subs	r4, r1, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bfb8      	it	lt
 800431e:	18e4      	addlt	r4, r4, r3
 8004320:	f000 f8e0 	bl	80044e4 <__malloc_lock>
 8004324:	4a1d      	ldr	r2, [pc, #116]	@ (800439c <_free_r+0x90>)
 8004326:	6813      	ldr	r3, [r2, #0]
 8004328:	b933      	cbnz	r3, 8004338 <_free_r+0x2c>
 800432a:	6063      	str	r3, [r4, #4]
 800432c:	6014      	str	r4, [r2, #0]
 800432e:	4628      	mov	r0, r5
 8004330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004334:	f000 b8dc 	b.w	80044f0 <__malloc_unlock>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d908      	bls.n	800434e <_free_r+0x42>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	1821      	adds	r1, r4, r0
 8004340:	428b      	cmp	r3, r1
 8004342:	bf01      	itttt	eq
 8004344:	6819      	ldreq	r1, [r3, #0]
 8004346:	685b      	ldreq	r3, [r3, #4]
 8004348:	1809      	addeq	r1, r1, r0
 800434a:	6021      	streq	r1, [r4, #0]
 800434c:	e7ed      	b.n	800432a <_free_r+0x1e>
 800434e:	461a      	mov	r2, r3
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	b10b      	cbz	r3, 8004358 <_free_r+0x4c>
 8004354:	42a3      	cmp	r3, r4
 8004356:	d9fa      	bls.n	800434e <_free_r+0x42>
 8004358:	6811      	ldr	r1, [r2, #0]
 800435a:	1850      	adds	r0, r2, r1
 800435c:	42a0      	cmp	r0, r4
 800435e:	d10b      	bne.n	8004378 <_free_r+0x6c>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	4401      	add	r1, r0
 8004364:	1850      	adds	r0, r2, r1
 8004366:	4283      	cmp	r3, r0
 8004368:	6011      	str	r1, [r2, #0]
 800436a:	d1e0      	bne.n	800432e <_free_r+0x22>
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	6053      	str	r3, [r2, #4]
 8004372:	4408      	add	r0, r1
 8004374:	6010      	str	r0, [r2, #0]
 8004376:	e7da      	b.n	800432e <_free_r+0x22>
 8004378:	d902      	bls.n	8004380 <_free_r+0x74>
 800437a:	230c      	movs	r3, #12
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	e7d6      	b.n	800432e <_free_r+0x22>
 8004380:	6820      	ldr	r0, [r4, #0]
 8004382:	1821      	adds	r1, r4, r0
 8004384:	428b      	cmp	r3, r1
 8004386:	bf04      	itt	eq
 8004388:	6819      	ldreq	r1, [r3, #0]
 800438a:	685b      	ldreq	r3, [r3, #4]
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	bf04      	itt	eq
 8004390:	1809      	addeq	r1, r1, r0
 8004392:	6021      	streq	r1, [r4, #0]
 8004394:	6054      	str	r4, [r2, #4]
 8004396:	e7ca      	b.n	800432e <_free_r+0x22>
 8004398:	bd38      	pop	{r3, r4, r5, pc}
 800439a:	bf00      	nop
 800439c:	200003cc 	.word	0x200003cc

080043a0 <sbrk_aligned>:
 80043a0:	b570      	push	{r4, r5, r6, lr}
 80043a2:	4e0f      	ldr	r6, [pc, #60]	@ (80043e0 <sbrk_aligned+0x40>)
 80043a4:	460c      	mov	r4, r1
 80043a6:	6831      	ldr	r1, [r6, #0]
 80043a8:	4605      	mov	r5, r0
 80043aa:	b911      	cbnz	r1, 80043b2 <sbrk_aligned+0x12>
 80043ac:	f000 fcb6 	bl	8004d1c <_sbrk_r>
 80043b0:	6030      	str	r0, [r6, #0]
 80043b2:	4621      	mov	r1, r4
 80043b4:	4628      	mov	r0, r5
 80043b6:	f000 fcb1 	bl	8004d1c <_sbrk_r>
 80043ba:	1c43      	adds	r3, r0, #1
 80043bc:	d103      	bne.n	80043c6 <sbrk_aligned+0x26>
 80043be:	f04f 34ff 	mov.w	r4, #4294967295
 80043c2:	4620      	mov	r0, r4
 80043c4:	bd70      	pop	{r4, r5, r6, pc}
 80043c6:	1cc4      	adds	r4, r0, #3
 80043c8:	f024 0403 	bic.w	r4, r4, #3
 80043cc:	42a0      	cmp	r0, r4
 80043ce:	d0f8      	beq.n	80043c2 <sbrk_aligned+0x22>
 80043d0:	1a21      	subs	r1, r4, r0
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 fca2 	bl	8004d1c <_sbrk_r>
 80043d8:	3001      	adds	r0, #1
 80043da:	d1f2      	bne.n	80043c2 <sbrk_aligned+0x22>
 80043dc:	e7ef      	b.n	80043be <sbrk_aligned+0x1e>
 80043de:	bf00      	nop
 80043e0:	200003c8 	.word	0x200003c8

080043e4 <_malloc_r>:
 80043e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e8:	1ccd      	adds	r5, r1, #3
 80043ea:	f025 0503 	bic.w	r5, r5, #3
 80043ee:	3508      	adds	r5, #8
 80043f0:	2d0c      	cmp	r5, #12
 80043f2:	bf38      	it	cc
 80043f4:	250c      	movcc	r5, #12
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	4606      	mov	r6, r0
 80043fa:	db01      	blt.n	8004400 <_malloc_r+0x1c>
 80043fc:	42a9      	cmp	r1, r5
 80043fe:	d904      	bls.n	800440a <_malloc_r+0x26>
 8004400:	230c      	movs	r3, #12
 8004402:	6033      	str	r3, [r6, #0]
 8004404:	2000      	movs	r0, #0
 8004406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044e0 <_malloc_r+0xfc>
 800440e:	f000 f869 	bl	80044e4 <__malloc_lock>
 8004412:	f8d8 3000 	ldr.w	r3, [r8]
 8004416:	461c      	mov	r4, r3
 8004418:	bb44      	cbnz	r4, 800446c <_malloc_r+0x88>
 800441a:	4629      	mov	r1, r5
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff ffbf 	bl	80043a0 <sbrk_aligned>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	4604      	mov	r4, r0
 8004426:	d158      	bne.n	80044da <_malloc_r+0xf6>
 8004428:	f8d8 4000 	ldr.w	r4, [r8]
 800442c:	4627      	mov	r7, r4
 800442e:	2f00      	cmp	r7, #0
 8004430:	d143      	bne.n	80044ba <_malloc_r+0xd6>
 8004432:	2c00      	cmp	r4, #0
 8004434:	d04b      	beq.n	80044ce <_malloc_r+0xea>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	4639      	mov	r1, r7
 800443a:	4630      	mov	r0, r6
 800443c:	eb04 0903 	add.w	r9, r4, r3
 8004440:	f000 fc6c 	bl	8004d1c <_sbrk_r>
 8004444:	4581      	cmp	r9, r0
 8004446:	d142      	bne.n	80044ce <_malloc_r+0xea>
 8004448:	6821      	ldr	r1, [r4, #0]
 800444a:	1a6d      	subs	r5, r5, r1
 800444c:	4629      	mov	r1, r5
 800444e:	4630      	mov	r0, r6
 8004450:	f7ff ffa6 	bl	80043a0 <sbrk_aligned>
 8004454:	3001      	adds	r0, #1
 8004456:	d03a      	beq.n	80044ce <_malloc_r+0xea>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	442b      	add	r3, r5
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	f8d8 3000 	ldr.w	r3, [r8]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	bb62      	cbnz	r2, 80044c0 <_malloc_r+0xdc>
 8004466:	f8c8 7000 	str.w	r7, [r8]
 800446a:	e00f      	b.n	800448c <_malloc_r+0xa8>
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	1b52      	subs	r2, r2, r5
 8004470:	d420      	bmi.n	80044b4 <_malloc_r+0xd0>
 8004472:	2a0b      	cmp	r2, #11
 8004474:	d917      	bls.n	80044a6 <_malloc_r+0xc2>
 8004476:	1961      	adds	r1, r4, r5
 8004478:	42a3      	cmp	r3, r4
 800447a:	6025      	str	r5, [r4, #0]
 800447c:	bf18      	it	ne
 800447e:	6059      	strne	r1, [r3, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	bf08      	it	eq
 8004484:	f8c8 1000 	streq.w	r1, [r8]
 8004488:	5162      	str	r2, [r4, r5]
 800448a:	604b      	str	r3, [r1, #4]
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f82f 	bl	80044f0 <__malloc_unlock>
 8004492:	f104 000b 	add.w	r0, r4, #11
 8004496:	1d23      	adds	r3, r4, #4
 8004498:	f020 0007 	bic.w	r0, r0, #7
 800449c:	1ac2      	subs	r2, r0, r3
 800449e:	bf1c      	itt	ne
 80044a0:	1a1b      	subne	r3, r3, r0
 80044a2:	50a3      	strne	r3, [r4, r2]
 80044a4:	e7af      	b.n	8004406 <_malloc_r+0x22>
 80044a6:	6862      	ldr	r2, [r4, #4]
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	bf0c      	ite	eq
 80044ac:	f8c8 2000 	streq.w	r2, [r8]
 80044b0:	605a      	strne	r2, [r3, #4]
 80044b2:	e7eb      	b.n	800448c <_malloc_r+0xa8>
 80044b4:	4623      	mov	r3, r4
 80044b6:	6864      	ldr	r4, [r4, #4]
 80044b8:	e7ae      	b.n	8004418 <_malloc_r+0x34>
 80044ba:	463c      	mov	r4, r7
 80044bc:	687f      	ldr	r7, [r7, #4]
 80044be:	e7b6      	b.n	800442e <_malloc_r+0x4a>
 80044c0:	461a      	mov	r2, r3
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	d1fb      	bne.n	80044c0 <_malloc_r+0xdc>
 80044c8:	2300      	movs	r3, #0
 80044ca:	6053      	str	r3, [r2, #4]
 80044cc:	e7de      	b.n	800448c <_malloc_r+0xa8>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	4630      	mov	r0, r6
 80044d4:	f000 f80c 	bl	80044f0 <__malloc_unlock>
 80044d8:	e794      	b.n	8004404 <_malloc_r+0x20>
 80044da:	6005      	str	r5, [r0, #0]
 80044dc:	e7d6      	b.n	800448c <_malloc_r+0xa8>
 80044de:	bf00      	nop
 80044e0:	200003cc 	.word	0x200003cc

080044e4 <__malloc_lock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	@ (80044ec <__malloc_lock+0x8>)
 80044e6:	f7ff bf0e 	b.w	8004306 <__retarget_lock_acquire_recursive>
 80044ea:	bf00      	nop
 80044ec:	200003c4 	.word	0x200003c4

080044f0 <__malloc_unlock>:
 80044f0:	4801      	ldr	r0, [pc, #4]	@ (80044f8 <__malloc_unlock+0x8>)
 80044f2:	f7ff bf09 	b.w	8004308 <__retarget_lock_release_recursive>
 80044f6:	bf00      	nop
 80044f8:	200003c4 	.word	0x200003c4

080044fc <__sfputc_r>:
 80044fc:	6893      	ldr	r3, [r2, #8]
 80044fe:	3b01      	subs	r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	b410      	push	{r4}
 8004504:	6093      	str	r3, [r2, #8]
 8004506:	da08      	bge.n	800451a <__sfputc_r+0x1e>
 8004508:	6994      	ldr	r4, [r2, #24]
 800450a:	42a3      	cmp	r3, r4
 800450c:	db01      	blt.n	8004512 <__sfputc_r+0x16>
 800450e:	290a      	cmp	r1, #10
 8004510:	d103      	bne.n	800451a <__sfputc_r+0x1e>
 8004512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004516:	f000 bb6d 	b.w	8004bf4 <__swbuf_r>
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	1c58      	adds	r0, r3, #1
 800451e:	6010      	str	r0, [r2, #0]
 8004520:	7019      	strb	r1, [r3, #0]
 8004522:	4608      	mov	r0, r1
 8004524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004528:	4770      	bx	lr

0800452a <__sfputs_r>:
 800452a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452c:	4606      	mov	r6, r0
 800452e:	460f      	mov	r7, r1
 8004530:	4614      	mov	r4, r2
 8004532:	18d5      	adds	r5, r2, r3
 8004534:	42ac      	cmp	r4, r5
 8004536:	d101      	bne.n	800453c <__sfputs_r+0x12>
 8004538:	2000      	movs	r0, #0
 800453a:	e007      	b.n	800454c <__sfputs_r+0x22>
 800453c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004540:	463a      	mov	r2, r7
 8004542:	4630      	mov	r0, r6
 8004544:	f7ff ffda 	bl	80044fc <__sfputc_r>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d1f3      	bne.n	8004534 <__sfputs_r+0xa>
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004550 <_vfiprintf_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	460d      	mov	r5, r1
 8004556:	b09d      	sub	sp, #116	@ 0x74
 8004558:	4614      	mov	r4, r2
 800455a:	4698      	mov	r8, r3
 800455c:	4606      	mov	r6, r0
 800455e:	b118      	cbz	r0, 8004568 <_vfiprintf_r+0x18>
 8004560:	6a03      	ldr	r3, [r0, #32]
 8004562:	b90b      	cbnz	r3, 8004568 <_vfiprintf_r+0x18>
 8004564:	f7ff fdca 	bl	80040fc <__sinit>
 8004568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800456a:	07d9      	lsls	r1, r3, #31
 800456c:	d405      	bmi.n	800457a <_vfiprintf_r+0x2a>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	059a      	lsls	r2, r3, #22
 8004572:	d402      	bmi.n	800457a <_vfiprintf_r+0x2a>
 8004574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004576:	f7ff fec6 	bl	8004306 <__retarget_lock_acquire_recursive>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	d501      	bpl.n	8004584 <_vfiprintf_r+0x34>
 8004580:	692b      	ldr	r3, [r5, #16]
 8004582:	b99b      	cbnz	r3, 80045ac <_vfiprintf_r+0x5c>
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f000 fb72 	bl	8004c70 <__swsetup_r>
 800458c:	b170      	cbz	r0, 80045ac <_vfiprintf_r+0x5c>
 800458e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004590:	07dc      	lsls	r4, r3, #31
 8004592:	d504      	bpl.n	800459e <_vfiprintf_r+0x4e>
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	b01d      	add	sp, #116	@ 0x74
 800459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	0598      	lsls	r0, r3, #22
 80045a2:	d4f7      	bmi.n	8004594 <_vfiprintf_r+0x44>
 80045a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045a6:	f7ff feaf 	bl	8004308 <__retarget_lock_release_recursive>
 80045aa:	e7f3      	b.n	8004594 <_vfiprintf_r+0x44>
 80045ac:	2300      	movs	r3, #0
 80045ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80045b0:	2320      	movs	r3, #32
 80045b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ba:	2330      	movs	r3, #48	@ 0x30
 80045bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800476c <_vfiprintf_r+0x21c>
 80045c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045c4:	f04f 0901 	mov.w	r9, #1
 80045c8:	4623      	mov	r3, r4
 80045ca:	469a      	mov	sl, r3
 80045cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d0:	b10a      	cbz	r2, 80045d6 <_vfiprintf_r+0x86>
 80045d2:	2a25      	cmp	r2, #37	@ 0x25
 80045d4:	d1f9      	bne.n	80045ca <_vfiprintf_r+0x7a>
 80045d6:	ebba 0b04 	subs.w	fp, sl, r4
 80045da:	d00b      	beq.n	80045f4 <_vfiprintf_r+0xa4>
 80045dc:	465b      	mov	r3, fp
 80045de:	4622      	mov	r2, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff ffa1 	bl	800452a <__sfputs_r>
 80045e8:	3001      	adds	r0, #1
 80045ea:	f000 80a7 	beq.w	800473c <_vfiprintf_r+0x1ec>
 80045ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045f0:	445a      	add	r2, fp
 80045f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80045f4:	f89a 3000 	ldrb.w	r3, [sl]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 809f 	beq.w	800473c <_vfiprintf_r+0x1ec>
 80045fe:	2300      	movs	r3, #0
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004608:	f10a 0a01 	add.w	sl, sl, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004614:	931a      	str	r3, [sp, #104]	@ 0x68
 8004616:	4654      	mov	r4, sl
 8004618:	2205      	movs	r2, #5
 800461a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461e:	4853      	ldr	r0, [pc, #332]	@ (800476c <_vfiprintf_r+0x21c>)
 8004620:	f7fb fdde 	bl	80001e0 <memchr>
 8004624:	9a04      	ldr	r2, [sp, #16]
 8004626:	b9d8      	cbnz	r0, 8004660 <_vfiprintf_r+0x110>
 8004628:	06d1      	lsls	r1, r2, #27
 800462a:	bf44      	itt	mi
 800462c:	2320      	movmi	r3, #32
 800462e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004632:	0713      	lsls	r3, r2, #28
 8004634:	bf44      	itt	mi
 8004636:	232b      	movmi	r3, #43	@ 0x2b
 8004638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800463c:	f89a 3000 	ldrb.w	r3, [sl]
 8004640:	2b2a      	cmp	r3, #42	@ 0x2a
 8004642:	d015      	beq.n	8004670 <_vfiprintf_r+0x120>
 8004644:	9a07      	ldr	r2, [sp, #28]
 8004646:	4654      	mov	r4, sl
 8004648:	2000      	movs	r0, #0
 800464a:	f04f 0c0a 	mov.w	ip, #10
 800464e:	4621      	mov	r1, r4
 8004650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004654:	3b30      	subs	r3, #48	@ 0x30
 8004656:	2b09      	cmp	r3, #9
 8004658:	d94b      	bls.n	80046f2 <_vfiprintf_r+0x1a2>
 800465a:	b1b0      	cbz	r0, 800468a <_vfiprintf_r+0x13a>
 800465c:	9207      	str	r2, [sp, #28]
 800465e:	e014      	b.n	800468a <_vfiprintf_r+0x13a>
 8004660:	eba0 0308 	sub.w	r3, r0, r8
 8004664:	fa09 f303 	lsl.w	r3, r9, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	46a2      	mov	sl, r4
 800466e:	e7d2      	b.n	8004616 <_vfiprintf_r+0xc6>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d19      	adds	r1, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9103      	str	r1, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfbb      	ittet	lt
 800467c:	425b      	neglt	r3, r3
 800467e:	f042 0202 	orrlt.w	r2, r2, #2
 8004682:	9307      	strge	r3, [sp, #28]
 8004684:	9307      	strlt	r3, [sp, #28]
 8004686:	bfb8      	it	lt
 8004688:	9204      	strlt	r2, [sp, #16]
 800468a:	7823      	ldrb	r3, [r4, #0]
 800468c:	2b2e      	cmp	r3, #46	@ 0x2e
 800468e:	d10a      	bne.n	80046a6 <_vfiprintf_r+0x156>
 8004690:	7863      	ldrb	r3, [r4, #1]
 8004692:	2b2a      	cmp	r3, #42	@ 0x2a
 8004694:	d132      	bne.n	80046fc <_vfiprintf_r+0x1ac>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1d1a      	adds	r2, r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	9203      	str	r2, [sp, #12]
 800469e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046a2:	3402      	adds	r4, #2
 80046a4:	9305      	str	r3, [sp, #20]
 80046a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800477c <_vfiprintf_r+0x22c>
 80046aa:	7821      	ldrb	r1, [r4, #0]
 80046ac:	2203      	movs	r2, #3
 80046ae:	4650      	mov	r0, sl
 80046b0:	f7fb fd96 	bl	80001e0 <memchr>
 80046b4:	b138      	cbz	r0, 80046c6 <_vfiprintf_r+0x176>
 80046b6:	9b04      	ldr	r3, [sp, #16]
 80046b8:	eba0 000a 	sub.w	r0, r0, sl
 80046bc:	2240      	movs	r2, #64	@ 0x40
 80046be:	4082      	lsls	r2, r0
 80046c0:	4313      	orrs	r3, r2
 80046c2:	3401      	adds	r4, #1
 80046c4:	9304      	str	r3, [sp, #16]
 80046c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ca:	4829      	ldr	r0, [pc, #164]	@ (8004770 <_vfiprintf_r+0x220>)
 80046cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046d0:	2206      	movs	r2, #6
 80046d2:	f7fb fd85 	bl	80001e0 <memchr>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d03f      	beq.n	800475a <_vfiprintf_r+0x20a>
 80046da:	4b26      	ldr	r3, [pc, #152]	@ (8004774 <_vfiprintf_r+0x224>)
 80046dc:	bb1b      	cbnz	r3, 8004726 <_vfiprintf_r+0x1d6>
 80046de:	9b03      	ldr	r3, [sp, #12]
 80046e0:	3307      	adds	r3, #7
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	3308      	adds	r3, #8
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046ec:	443b      	add	r3, r7
 80046ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80046f0:	e76a      	b.n	80045c8 <_vfiprintf_r+0x78>
 80046f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046f6:	460c      	mov	r4, r1
 80046f8:	2001      	movs	r0, #1
 80046fa:	e7a8      	b.n	800464e <_vfiprintf_r+0xfe>
 80046fc:	2300      	movs	r3, #0
 80046fe:	3401      	adds	r4, #1
 8004700:	9305      	str	r3, [sp, #20]
 8004702:	4619      	mov	r1, r3
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4620      	mov	r0, r4
 800470a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800470e:	3a30      	subs	r2, #48	@ 0x30
 8004710:	2a09      	cmp	r2, #9
 8004712:	d903      	bls.n	800471c <_vfiprintf_r+0x1cc>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0c6      	beq.n	80046a6 <_vfiprintf_r+0x156>
 8004718:	9105      	str	r1, [sp, #20]
 800471a:	e7c4      	b.n	80046a6 <_vfiprintf_r+0x156>
 800471c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004720:	4604      	mov	r4, r0
 8004722:	2301      	movs	r3, #1
 8004724:	e7f0      	b.n	8004708 <_vfiprintf_r+0x1b8>
 8004726:	ab03      	add	r3, sp, #12
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	462a      	mov	r2, r5
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <_vfiprintf_r+0x228>)
 800472e:	a904      	add	r1, sp, #16
 8004730:	4630      	mov	r0, r6
 8004732:	f3af 8000 	nop.w
 8004736:	4607      	mov	r7, r0
 8004738:	1c78      	adds	r0, r7, #1
 800473a:	d1d6      	bne.n	80046ea <_vfiprintf_r+0x19a>
 800473c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800473e:	07d9      	lsls	r1, r3, #31
 8004740:	d405      	bmi.n	800474e <_vfiprintf_r+0x1fe>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	059a      	lsls	r2, r3, #22
 8004746:	d402      	bmi.n	800474e <_vfiprintf_r+0x1fe>
 8004748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800474a:	f7ff fddd 	bl	8004308 <__retarget_lock_release_recursive>
 800474e:	89ab      	ldrh	r3, [r5, #12]
 8004750:	065b      	lsls	r3, r3, #25
 8004752:	f53f af1f 	bmi.w	8004594 <_vfiprintf_r+0x44>
 8004756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004758:	e71e      	b.n	8004598 <_vfiprintf_r+0x48>
 800475a:	ab03      	add	r3, sp, #12
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	462a      	mov	r2, r5
 8004760:	4b05      	ldr	r3, [pc, #20]	@ (8004778 <_vfiprintf_r+0x228>)
 8004762:	a904      	add	r1, sp, #16
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f879 	bl	800485c <_printf_i>
 800476a:	e7e4      	b.n	8004736 <_vfiprintf_r+0x1e6>
 800476c:	08004e88 	.word	0x08004e88
 8004770:	08004e92 	.word	0x08004e92
 8004774:	00000000 	.word	0x00000000
 8004778:	0800452b 	.word	0x0800452b
 800477c:	08004e8e 	.word	0x08004e8e

08004780 <_printf_common>:
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	4616      	mov	r6, r2
 8004786:	4698      	mov	r8, r3
 8004788:	688a      	ldr	r2, [r1, #8]
 800478a:	690b      	ldr	r3, [r1, #16]
 800478c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004790:	4293      	cmp	r3, r2
 8004792:	bfb8      	it	lt
 8004794:	4613      	movlt	r3, r2
 8004796:	6033      	str	r3, [r6, #0]
 8004798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800479c:	4607      	mov	r7, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	b10a      	cbz	r2, 80047a6 <_printf_common+0x26>
 80047a2:	3301      	adds	r3, #1
 80047a4:	6033      	str	r3, [r6, #0]
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	0699      	lsls	r1, r3, #26
 80047aa:	bf42      	ittt	mi
 80047ac:	6833      	ldrmi	r3, [r6, #0]
 80047ae:	3302      	addmi	r3, #2
 80047b0:	6033      	strmi	r3, [r6, #0]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d106      	bne.n	80047c8 <_printf_common+0x48>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	6832      	ldr	r2, [r6, #0]
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	42ab      	cmp	r3, r5
 80047c6:	dc26      	bgt.n	8004816 <_printf_common+0x96>
 80047c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	3b00      	subs	r3, #0
 80047d0:	bf18      	it	ne
 80047d2:	2301      	movne	r3, #1
 80047d4:	0692      	lsls	r2, r2, #26
 80047d6:	d42b      	bmi.n	8004830 <_printf_common+0xb0>
 80047d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047dc:	4641      	mov	r1, r8
 80047de:	4638      	mov	r0, r7
 80047e0:	47c8      	blx	r9
 80047e2:	3001      	adds	r0, #1
 80047e4:	d01e      	beq.n	8004824 <_printf_common+0xa4>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	6922      	ldr	r2, [r4, #16]
 80047ea:	f003 0306 	and.w	r3, r3, #6
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	bf02      	ittt	eq
 80047f2:	68e5      	ldreq	r5, [r4, #12]
 80047f4:	6833      	ldreq	r3, [r6, #0]
 80047f6:	1aed      	subeq	r5, r5, r3
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	bf0c      	ite	eq
 80047fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004800:	2500      	movne	r5, #0
 8004802:	4293      	cmp	r3, r2
 8004804:	bfc4      	itt	gt
 8004806:	1a9b      	subgt	r3, r3, r2
 8004808:	18ed      	addgt	r5, r5, r3
 800480a:	2600      	movs	r6, #0
 800480c:	341a      	adds	r4, #26
 800480e:	42b5      	cmp	r5, r6
 8004810:	d11a      	bne.n	8004848 <_printf_common+0xc8>
 8004812:	2000      	movs	r0, #0
 8004814:	e008      	b.n	8004828 <_printf_common+0xa8>
 8004816:	2301      	movs	r3, #1
 8004818:	4652      	mov	r2, sl
 800481a:	4641      	mov	r1, r8
 800481c:	4638      	mov	r0, r7
 800481e:	47c8      	blx	r9
 8004820:	3001      	adds	r0, #1
 8004822:	d103      	bne.n	800482c <_printf_common+0xac>
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
 8004828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482c:	3501      	adds	r5, #1
 800482e:	e7c6      	b.n	80047be <_printf_common+0x3e>
 8004830:	18e1      	adds	r1, r4, r3
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	2030      	movs	r0, #48	@ 0x30
 8004836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800483a:	4422      	add	r2, r4
 800483c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004844:	3302      	adds	r3, #2
 8004846:	e7c7      	b.n	80047d8 <_printf_common+0x58>
 8004848:	2301      	movs	r3, #1
 800484a:	4622      	mov	r2, r4
 800484c:	4641      	mov	r1, r8
 800484e:	4638      	mov	r0, r7
 8004850:	47c8      	blx	r9
 8004852:	3001      	adds	r0, #1
 8004854:	d0e6      	beq.n	8004824 <_printf_common+0xa4>
 8004856:	3601      	adds	r6, #1
 8004858:	e7d9      	b.n	800480e <_printf_common+0x8e>
	...

0800485c <_printf_i>:
 800485c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004860:	7e0f      	ldrb	r7, [r1, #24]
 8004862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004864:	2f78      	cmp	r7, #120	@ 0x78
 8004866:	4691      	mov	r9, r2
 8004868:	4680      	mov	r8, r0
 800486a:	460c      	mov	r4, r1
 800486c:	469a      	mov	sl, r3
 800486e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004872:	d807      	bhi.n	8004884 <_printf_i+0x28>
 8004874:	2f62      	cmp	r7, #98	@ 0x62
 8004876:	d80a      	bhi.n	800488e <_printf_i+0x32>
 8004878:	2f00      	cmp	r7, #0
 800487a:	f000 80d2 	beq.w	8004a22 <_printf_i+0x1c6>
 800487e:	2f58      	cmp	r7, #88	@ 0x58
 8004880:	f000 80b9 	beq.w	80049f6 <_printf_i+0x19a>
 8004884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800488c:	e03a      	b.n	8004904 <_printf_i+0xa8>
 800488e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004892:	2b15      	cmp	r3, #21
 8004894:	d8f6      	bhi.n	8004884 <_printf_i+0x28>
 8004896:	a101      	add	r1, pc, #4	@ (adr r1, 800489c <_printf_i+0x40>)
 8004898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	08004909 	.word	0x08004909
 80048a4:	08004885 	.word	0x08004885
 80048a8:	08004885 	.word	0x08004885
 80048ac:	08004885 	.word	0x08004885
 80048b0:	08004885 	.word	0x08004885
 80048b4:	08004909 	.word	0x08004909
 80048b8:	08004885 	.word	0x08004885
 80048bc:	08004885 	.word	0x08004885
 80048c0:	08004885 	.word	0x08004885
 80048c4:	08004885 	.word	0x08004885
 80048c8:	08004a09 	.word	0x08004a09
 80048cc:	08004933 	.word	0x08004933
 80048d0:	080049c3 	.word	0x080049c3
 80048d4:	08004885 	.word	0x08004885
 80048d8:	08004885 	.word	0x08004885
 80048dc:	08004a2b 	.word	0x08004a2b
 80048e0:	08004885 	.word	0x08004885
 80048e4:	08004933 	.word	0x08004933
 80048e8:	08004885 	.word	0x08004885
 80048ec:	08004885 	.word	0x08004885
 80048f0:	080049cb 	.word	0x080049cb
 80048f4:	6833      	ldr	r3, [r6, #0]
 80048f6:	1d1a      	adds	r2, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6032      	str	r2, [r6, #0]
 80048fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e09d      	b.n	8004a44 <_printf_i+0x1e8>
 8004908:	6833      	ldr	r3, [r6, #0]
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	6031      	str	r1, [r6, #0]
 8004910:	0606      	lsls	r6, r0, #24
 8004912:	d501      	bpl.n	8004918 <_printf_i+0xbc>
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	e003      	b.n	8004920 <_printf_i+0xc4>
 8004918:	0645      	lsls	r5, r0, #25
 800491a:	d5fb      	bpl.n	8004914 <_printf_i+0xb8>
 800491c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004920:	2d00      	cmp	r5, #0
 8004922:	da03      	bge.n	800492c <_printf_i+0xd0>
 8004924:	232d      	movs	r3, #45	@ 0x2d
 8004926:	426d      	negs	r5, r5
 8004928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800492c:	4859      	ldr	r0, [pc, #356]	@ (8004a94 <_printf_i+0x238>)
 800492e:	230a      	movs	r3, #10
 8004930:	e011      	b.n	8004956 <_printf_i+0xfa>
 8004932:	6821      	ldr	r1, [r4, #0]
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	0608      	lsls	r0, r1, #24
 8004938:	f853 5b04 	ldr.w	r5, [r3], #4
 800493c:	d402      	bmi.n	8004944 <_printf_i+0xe8>
 800493e:	0649      	lsls	r1, r1, #25
 8004940:	bf48      	it	mi
 8004942:	b2ad      	uxthmi	r5, r5
 8004944:	2f6f      	cmp	r7, #111	@ 0x6f
 8004946:	4853      	ldr	r0, [pc, #332]	@ (8004a94 <_printf_i+0x238>)
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	bf14      	ite	ne
 800494c:	230a      	movne	r3, #10
 800494e:	2308      	moveq	r3, #8
 8004950:	2100      	movs	r1, #0
 8004952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004956:	6866      	ldr	r6, [r4, #4]
 8004958:	60a6      	str	r6, [r4, #8]
 800495a:	2e00      	cmp	r6, #0
 800495c:	bfa2      	ittt	ge
 800495e:	6821      	ldrge	r1, [r4, #0]
 8004960:	f021 0104 	bicge.w	r1, r1, #4
 8004964:	6021      	strge	r1, [r4, #0]
 8004966:	b90d      	cbnz	r5, 800496c <_printf_i+0x110>
 8004968:	2e00      	cmp	r6, #0
 800496a:	d04b      	beq.n	8004a04 <_printf_i+0x1a8>
 800496c:	4616      	mov	r6, r2
 800496e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004972:	fb03 5711 	mls	r7, r3, r1, r5
 8004976:	5dc7      	ldrb	r7, [r0, r7]
 8004978:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800497c:	462f      	mov	r7, r5
 800497e:	42bb      	cmp	r3, r7
 8004980:	460d      	mov	r5, r1
 8004982:	d9f4      	bls.n	800496e <_printf_i+0x112>
 8004984:	2b08      	cmp	r3, #8
 8004986:	d10b      	bne.n	80049a0 <_printf_i+0x144>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	07df      	lsls	r7, r3, #31
 800498c:	d508      	bpl.n	80049a0 <_printf_i+0x144>
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	6861      	ldr	r1, [r4, #4]
 8004992:	4299      	cmp	r1, r3
 8004994:	bfde      	ittt	le
 8004996:	2330      	movle	r3, #48	@ 0x30
 8004998:	f806 3c01 	strble.w	r3, [r6, #-1]
 800499c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049a0:	1b92      	subs	r2, r2, r6
 80049a2:	6122      	str	r2, [r4, #16]
 80049a4:	f8cd a000 	str.w	sl, [sp]
 80049a8:	464b      	mov	r3, r9
 80049aa:	aa03      	add	r2, sp, #12
 80049ac:	4621      	mov	r1, r4
 80049ae:	4640      	mov	r0, r8
 80049b0:	f7ff fee6 	bl	8004780 <_printf_common>
 80049b4:	3001      	adds	r0, #1
 80049b6:	d14a      	bne.n	8004a4e <_printf_i+0x1f2>
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	b004      	add	sp, #16
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	f043 0320 	orr.w	r3, r3, #32
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	4833      	ldr	r0, [pc, #204]	@ (8004a98 <_printf_i+0x23c>)
 80049cc:	2778      	movs	r7, #120	@ 0x78
 80049ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	6831      	ldr	r1, [r6, #0]
 80049d6:	061f      	lsls	r7, r3, #24
 80049d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80049dc:	d402      	bmi.n	80049e4 <_printf_i+0x188>
 80049de:	065f      	lsls	r7, r3, #25
 80049e0:	bf48      	it	mi
 80049e2:	b2ad      	uxthmi	r5, r5
 80049e4:	6031      	str	r1, [r6, #0]
 80049e6:	07d9      	lsls	r1, r3, #31
 80049e8:	bf44      	itt	mi
 80049ea:	f043 0320 	orrmi.w	r3, r3, #32
 80049ee:	6023      	strmi	r3, [r4, #0]
 80049f0:	b11d      	cbz	r5, 80049fa <_printf_i+0x19e>
 80049f2:	2310      	movs	r3, #16
 80049f4:	e7ac      	b.n	8004950 <_printf_i+0xf4>
 80049f6:	4827      	ldr	r0, [pc, #156]	@ (8004a94 <_printf_i+0x238>)
 80049f8:	e7e9      	b.n	80049ce <_printf_i+0x172>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f023 0320 	bic.w	r3, r3, #32
 8004a00:	6023      	str	r3, [r4, #0]
 8004a02:	e7f6      	b.n	80049f2 <_printf_i+0x196>
 8004a04:	4616      	mov	r6, r2
 8004a06:	e7bd      	b.n	8004984 <_printf_i+0x128>
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	6825      	ldr	r5, [r4, #0]
 8004a0c:	6961      	ldr	r1, [r4, #20]
 8004a0e:	1d18      	adds	r0, r3, #4
 8004a10:	6030      	str	r0, [r6, #0]
 8004a12:	062e      	lsls	r6, r5, #24
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	d501      	bpl.n	8004a1c <_printf_i+0x1c0>
 8004a18:	6019      	str	r1, [r3, #0]
 8004a1a:	e002      	b.n	8004a22 <_printf_i+0x1c6>
 8004a1c:	0668      	lsls	r0, r5, #25
 8004a1e:	d5fb      	bpl.n	8004a18 <_printf_i+0x1bc>
 8004a20:	8019      	strh	r1, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	6123      	str	r3, [r4, #16]
 8004a26:	4616      	mov	r6, r2
 8004a28:	e7bc      	b.n	80049a4 <_printf_i+0x148>
 8004a2a:	6833      	ldr	r3, [r6, #0]
 8004a2c:	1d1a      	adds	r2, r3, #4
 8004a2e:	6032      	str	r2, [r6, #0]
 8004a30:	681e      	ldr	r6, [r3, #0]
 8004a32:	6862      	ldr	r2, [r4, #4]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4630      	mov	r0, r6
 8004a38:	f7fb fbd2 	bl	80001e0 <memchr>
 8004a3c:	b108      	cbz	r0, 8004a42 <_printf_i+0x1e6>
 8004a3e:	1b80      	subs	r0, r0, r6
 8004a40:	6060      	str	r0, [r4, #4]
 8004a42:	6863      	ldr	r3, [r4, #4]
 8004a44:	6123      	str	r3, [r4, #16]
 8004a46:	2300      	movs	r3, #0
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4c:	e7aa      	b.n	80049a4 <_printf_i+0x148>
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	4632      	mov	r2, r6
 8004a52:	4649      	mov	r1, r9
 8004a54:	4640      	mov	r0, r8
 8004a56:	47d0      	blx	sl
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d0ad      	beq.n	80049b8 <_printf_i+0x15c>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	079b      	lsls	r3, r3, #30
 8004a60:	d413      	bmi.n	8004a8a <_printf_i+0x22e>
 8004a62:	68e0      	ldr	r0, [r4, #12]
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	4298      	cmp	r0, r3
 8004a68:	bfb8      	it	lt
 8004a6a:	4618      	movlt	r0, r3
 8004a6c:	e7a6      	b.n	80049bc <_printf_i+0x160>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4632      	mov	r2, r6
 8004a72:	4649      	mov	r1, r9
 8004a74:	4640      	mov	r0, r8
 8004a76:	47d0      	blx	sl
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d09d      	beq.n	80049b8 <_printf_i+0x15c>
 8004a7c:	3501      	adds	r5, #1
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	9903      	ldr	r1, [sp, #12]
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dcf2      	bgt.n	8004a6e <_printf_i+0x212>
 8004a88:	e7eb      	b.n	8004a62 <_printf_i+0x206>
 8004a8a:	2500      	movs	r5, #0
 8004a8c:	f104 0619 	add.w	r6, r4, #25
 8004a90:	e7f5      	b.n	8004a7e <_printf_i+0x222>
 8004a92:	bf00      	nop
 8004a94:	08004e99 	.word	0x08004e99
 8004a98:	08004eaa 	.word	0x08004eaa

08004a9c <__sflush_r>:
 8004a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa4:	0716      	lsls	r6, r2, #28
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	d454      	bmi.n	8004b56 <__sflush_r+0xba>
 8004aac:	684b      	ldr	r3, [r1, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	dc02      	bgt.n	8004ab8 <__sflush_r+0x1c>
 8004ab2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	dd48      	ble.n	8004b4a <__sflush_r+0xae>
 8004ab8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004aba:	2e00      	cmp	r6, #0
 8004abc:	d045      	beq.n	8004b4a <__sflush_r+0xae>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004ac4:	682f      	ldr	r7, [r5, #0]
 8004ac6:	6a21      	ldr	r1, [r4, #32]
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	d030      	beq.n	8004b2e <__sflush_r+0x92>
 8004acc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	0759      	lsls	r1, r3, #29
 8004ad2:	d505      	bpl.n	8004ae0 <__sflush_r+0x44>
 8004ad4:	6863      	ldr	r3, [r4, #4]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ada:	b10b      	cbz	r3, 8004ae0 <__sflush_r+0x44>
 8004adc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ae4:	6a21      	ldr	r1, [r4, #32]
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	47b0      	blx	r6
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	d106      	bne.n	8004afe <__sflush_r+0x62>
 8004af0:	6829      	ldr	r1, [r5, #0]
 8004af2:	291d      	cmp	r1, #29
 8004af4:	d82b      	bhi.n	8004b4e <__sflush_r+0xb2>
 8004af6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba0 <__sflush_r+0x104>)
 8004af8:	410a      	asrs	r2, r1
 8004afa:	07d6      	lsls	r6, r2, #31
 8004afc:	d427      	bmi.n	8004b4e <__sflush_r+0xb2>
 8004afe:	2200      	movs	r2, #0
 8004b00:	6062      	str	r2, [r4, #4]
 8004b02:	04d9      	lsls	r1, r3, #19
 8004b04:	6922      	ldr	r2, [r4, #16]
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	d504      	bpl.n	8004b14 <__sflush_r+0x78>
 8004b0a:	1c42      	adds	r2, r0, #1
 8004b0c:	d101      	bne.n	8004b12 <__sflush_r+0x76>
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	b903      	cbnz	r3, 8004b14 <__sflush_r+0x78>
 8004b12:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b16:	602f      	str	r7, [r5, #0]
 8004b18:	b1b9      	cbz	r1, 8004b4a <__sflush_r+0xae>
 8004b1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b1e:	4299      	cmp	r1, r3
 8004b20:	d002      	beq.n	8004b28 <__sflush_r+0x8c>
 8004b22:	4628      	mov	r0, r5
 8004b24:	f7ff fbf2 	bl	800430c <_free_r>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b2c:	e00d      	b.n	8004b4a <__sflush_r+0xae>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b0      	blx	r6
 8004b34:	4602      	mov	r2, r0
 8004b36:	1c50      	adds	r0, r2, #1
 8004b38:	d1c9      	bne.n	8004ace <__sflush_r+0x32>
 8004b3a:	682b      	ldr	r3, [r5, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0c6      	beq.n	8004ace <__sflush_r+0x32>
 8004b40:	2b1d      	cmp	r3, #29
 8004b42:	d001      	beq.n	8004b48 <__sflush_r+0xac>
 8004b44:	2b16      	cmp	r3, #22
 8004b46:	d11e      	bne.n	8004b86 <__sflush_r+0xea>
 8004b48:	602f      	str	r7, [r5, #0]
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	e022      	b.n	8004b94 <__sflush_r+0xf8>
 8004b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b52:	b21b      	sxth	r3, r3
 8004b54:	e01b      	b.n	8004b8e <__sflush_r+0xf2>
 8004b56:	690f      	ldr	r7, [r1, #16]
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	d0f6      	beq.n	8004b4a <__sflush_r+0xae>
 8004b5c:	0793      	lsls	r3, r2, #30
 8004b5e:	680e      	ldr	r6, [r1, #0]
 8004b60:	bf08      	it	eq
 8004b62:	694b      	ldreq	r3, [r1, #20]
 8004b64:	600f      	str	r7, [r1, #0]
 8004b66:	bf18      	it	ne
 8004b68:	2300      	movne	r3, #0
 8004b6a:	eba6 0807 	sub.w	r8, r6, r7
 8004b6e:	608b      	str	r3, [r1, #8]
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	dde9      	ble.n	8004b4a <__sflush_r+0xae>
 8004b76:	6a21      	ldr	r1, [r4, #32]
 8004b78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004b7a:	4643      	mov	r3, r8
 8004b7c:	463a      	mov	r2, r7
 8004b7e:	4628      	mov	r0, r5
 8004b80:	47b0      	blx	r6
 8004b82:	2800      	cmp	r0, #0
 8004b84:	dc08      	bgt.n	8004b98 <__sflush_r+0xfc>
 8004b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	4407      	add	r7, r0
 8004b9a:	eba8 0800 	sub.w	r8, r8, r0
 8004b9e:	e7e7      	b.n	8004b70 <__sflush_r+0xd4>
 8004ba0:	dfbffffe 	.word	0xdfbffffe

08004ba4 <_fflush_r>:
 8004ba4:	b538      	push	{r3, r4, r5, lr}
 8004ba6:	690b      	ldr	r3, [r1, #16]
 8004ba8:	4605      	mov	r5, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	b913      	cbnz	r3, 8004bb4 <_fflush_r+0x10>
 8004bae:	2500      	movs	r5, #0
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	b118      	cbz	r0, 8004bbe <_fflush_r+0x1a>
 8004bb6:	6a03      	ldr	r3, [r0, #32]
 8004bb8:	b90b      	cbnz	r3, 8004bbe <_fflush_r+0x1a>
 8004bba:	f7ff fa9f 	bl	80040fc <__sinit>
 8004bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f3      	beq.n	8004bae <_fflush_r+0xa>
 8004bc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004bc8:	07d0      	lsls	r0, r2, #31
 8004bca:	d404      	bmi.n	8004bd6 <_fflush_r+0x32>
 8004bcc:	0599      	lsls	r1, r3, #22
 8004bce:	d402      	bmi.n	8004bd6 <_fflush_r+0x32>
 8004bd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bd2:	f7ff fb98 	bl	8004306 <__retarget_lock_acquire_recursive>
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f7ff ff5f 	bl	8004a9c <__sflush_r>
 8004bde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004be0:	07da      	lsls	r2, r3, #31
 8004be2:	4605      	mov	r5, r0
 8004be4:	d4e4      	bmi.n	8004bb0 <_fflush_r+0xc>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	059b      	lsls	r3, r3, #22
 8004bea:	d4e1      	bmi.n	8004bb0 <_fflush_r+0xc>
 8004bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bee:	f7ff fb8b 	bl	8004308 <__retarget_lock_release_recursive>
 8004bf2:	e7dd      	b.n	8004bb0 <_fflush_r+0xc>

08004bf4 <__swbuf_r>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	460e      	mov	r6, r1
 8004bf8:	4614      	mov	r4, r2
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	b118      	cbz	r0, 8004c06 <__swbuf_r+0x12>
 8004bfe:	6a03      	ldr	r3, [r0, #32]
 8004c00:	b90b      	cbnz	r3, 8004c06 <__swbuf_r+0x12>
 8004c02:	f7ff fa7b 	bl	80040fc <__sinit>
 8004c06:	69a3      	ldr	r3, [r4, #24]
 8004c08:	60a3      	str	r3, [r4, #8]
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	071a      	lsls	r2, r3, #28
 8004c0e:	d501      	bpl.n	8004c14 <__swbuf_r+0x20>
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	b943      	cbnz	r3, 8004c26 <__swbuf_r+0x32>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4628      	mov	r0, r5
 8004c18:	f000 f82a 	bl	8004c70 <__swsetup_r>
 8004c1c:	b118      	cbz	r0, 8004c26 <__swbuf_r+0x32>
 8004c1e:	f04f 37ff 	mov.w	r7, #4294967295
 8004c22:	4638      	mov	r0, r7
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	6922      	ldr	r2, [r4, #16]
 8004c2a:	1a98      	subs	r0, r3, r2
 8004c2c:	6963      	ldr	r3, [r4, #20]
 8004c2e:	b2f6      	uxtb	r6, r6
 8004c30:	4283      	cmp	r3, r0
 8004c32:	4637      	mov	r7, r6
 8004c34:	dc05      	bgt.n	8004c42 <__swbuf_r+0x4e>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f7ff ffb3 	bl	8004ba4 <_fflush_r>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d1ed      	bne.n	8004c1e <__swbuf_r+0x2a>
 8004c42:	68a3      	ldr	r3, [r4, #8]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	6022      	str	r2, [r4, #0]
 8004c4e:	701e      	strb	r6, [r3, #0]
 8004c50:	6962      	ldr	r2, [r4, #20]
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d004      	beq.n	8004c62 <__swbuf_r+0x6e>
 8004c58:	89a3      	ldrh	r3, [r4, #12]
 8004c5a:	07db      	lsls	r3, r3, #31
 8004c5c:	d5e1      	bpl.n	8004c22 <__swbuf_r+0x2e>
 8004c5e:	2e0a      	cmp	r6, #10
 8004c60:	d1df      	bne.n	8004c22 <__swbuf_r+0x2e>
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7ff ff9d 	bl	8004ba4 <_fflush_r>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0d9      	beq.n	8004c22 <__swbuf_r+0x2e>
 8004c6e:	e7d6      	b.n	8004c1e <__swbuf_r+0x2a>

08004c70 <__swsetup_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <__swsetup_r+0xa8>)
 8004c74:	4605      	mov	r5, r0
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	460c      	mov	r4, r1
 8004c7a:	b118      	cbz	r0, 8004c84 <__swsetup_r+0x14>
 8004c7c:	6a03      	ldr	r3, [r0, #32]
 8004c7e:	b90b      	cbnz	r3, 8004c84 <__swsetup_r+0x14>
 8004c80:	f7ff fa3c 	bl	80040fc <__sinit>
 8004c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c88:	0719      	lsls	r1, r3, #28
 8004c8a:	d422      	bmi.n	8004cd2 <__swsetup_r+0x62>
 8004c8c:	06da      	lsls	r2, r3, #27
 8004c8e:	d407      	bmi.n	8004ca0 <__swsetup_r+0x30>
 8004c90:	2209      	movs	r2, #9
 8004c92:	602a      	str	r2, [r5, #0]
 8004c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c98:	81a3      	strh	r3, [r4, #12]
 8004c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9e:	e033      	b.n	8004d08 <__swsetup_r+0x98>
 8004ca0:	0758      	lsls	r0, r3, #29
 8004ca2:	d512      	bpl.n	8004cca <__swsetup_r+0x5a>
 8004ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ca6:	b141      	cbz	r1, 8004cba <__swsetup_r+0x4a>
 8004ca8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cac:	4299      	cmp	r1, r3
 8004cae:	d002      	beq.n	8004cb6 <__swsetup_r+0x46>
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f7ff fb2b 	bl	800430c <_free_r>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	b94b      	cbnz	r3, 8004cea <__swsetup_r+0x7a>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce0:	d003      	beq.n	8004cea <__swsetup_r+0x7a>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f84f 	bl	8004d88 <__smakebuf_r>
 8004cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cee:	f013 0201 	ands.w	r2, r3, #1
 8004cf2:	d00a      	beq.n	8004d0a <__swsetup_r+0x9a>
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60a2      	str	r2, [r4, #8]
 8004cf8:	6962      	ldr	r2, [r4, #20]
 8004cfa:	4252      	negs	r2, r2
 8004cfc:	61a2      	str	r2, [r4, #24]
 8004cfe:	6922      	ldr	r2, [r4, #16]
 8004d00:	b942      	cbnz	r2, 8004d14 <__swsetup_r+0xa4>
 8004d02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004d06:	d1c5      	bne.n	8004c94 <__swsetup_r+0x24>
 8004d08:	bd38      	pop	{r3, r4, r5, pc}
 8004d0a:	0799      	lsls	r1, r3, #30
 8004d0c:	bf58      	it	pl
 8004d0e:	6962      	ldrpl	r2, [r4, #20]
 8004d10:	60a2      	str	r2, [r4, #8]
 8004d12:	e7f4      	b.n	8004cfe <__swsetup_r+0x8e>
 8004d14:	2000      	movs	r0, #0
 8004d16:	e7f7      	b.n	8004d08 <__swsetup_r+0x98>
 8004d18:	20000018 	.word	0x20000018

08004d1c <_sbrk_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d06      	ldr	r5, [pc, #24]	@ (8004d38 <_sbrk_r+0x1c>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fc f892 	bl	8000e50 <_sbrk>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_sbrk_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_sbrk_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	200003c0 	.word	0x200003c0

08004d3c <__swhatbuf_r>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d44:	2900      	cmp	r1, #0
 8004d46:	b096      	sub	sp, #88	@ 0x58
 8004d48:	4615      	mov	r5, r2
 8004d4a:	461e      	mov	r6, r3
 8004d4c:	da0d      	bge.n	8004d6a <__swhatbuf_r+0x2e>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	bf14      	ite	ne
 8004d5a:	2340      	movne	r3, #64	@ 0x40
 8004d5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d60:	2000      	movs	r0, #0
 8004d62:	6031      	str	r1, [r6, #0]
 8004d64:	602b      	str	r3, [r5, #0]
 8004d66:	b016      	add	sp, #88	@ 0x58
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	466a      	mov	r2, sp
 8004d6c:	f000 f848 	bl	8004e00 <_fstat_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	dbec      	blt.n	8004d4e <__swhatbuf_r+0x12>
 8004d74:	9901      	ldr	r1, [sp, #4]
 8004d76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d7e:	4259      	negs	r1, r3
 8004d80:	4159      	adcs	r1, r3
 8004d82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d86:	e7eb      	b.n	8004d60 <__swhatbuf_r+0x24>

08004d88 <__smakebuf_r>:
 8004d88:	898b      	ldrh	r3, [r1, #12]
 8004d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d8c:	079d      	lsls	r5, r3, #30
 8004d8e:	4606      	mov	r6, r0
 8004d90:	460c      	mov	r4, r1
 8004d92:	d507      	bpl.n	8004da4 <__smakebuf_r+0x1c>
 8004d94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	b003      	add	sp, #12
 8004da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da4:	ab01      	add	r3, sp, #4
 8004da6:	466a      	mov	r2, sp
 8004da8:	f7ff ffc8 	bl	8004d3c <__swhatbuf_r>
 8004dac:	9f00      	ldr	r7, [sp, #0]
 8004dae:	4605      	mov	r5, r0
 8004db0:	4639      	mov	r1, r7
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff fb16 	bl	80043e4 <_malloc_r>
 8004db8:	b948      	cbnz	r0, 8004dce <__smakebuf_r+0x46>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	059a      	lsls	r2, r3, #22
 8004dc0:	d4ee      	bmi.n	8004da0 <__smakebuf_r+0x18>
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e7e2      	b.n	8004d94 <__smakebuf_r+0xc>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	6020      	str	r0, [r4, #0]
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	9b01      	ldr	r3, [sp, #4]
 8004dda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dde:	b15b      	cbz	r3, 8004df8 <__smakebuf_r+0x70>
 8004de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 f81d 	bl	8004e24 <_isatty_r>
 8004dea:	b128      	cbz	r0, 8004df8 <__smakebuf_r+0x70>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	81a3      	strh	r3, [r4, #12]
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	431d      	orrs	r5, r3
 8004dfc:	81a5      	strh	r5, [r4, #12]
 8004dfe:	e7cf      	b.n	8004da0 <__smakebuf_r+0x18>

08004e00 <_fstat_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d07      	ldr	r5, [pc, #28]	@ (8004e20 <_fstat_r+0x20>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	602b      	str	r3, [r5, #0]
 8004e0e:	f7fb fff6 	bl	8000dfe <_fstat>
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	d102      	bne.n	8004e1c <_fstat_r+0x1c>
 8004e16:	682b      	ldr	r3, [r5, #0]
 8004e18:	b103      	cbz	r3, 8004e1c <_fstat_r+0x1c>
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	bd38      	pop	{r3, r4, r5, pc}
 8004e1e:	bf00      	nop
 8004e20:	200003c0 	.word	0x200003c0

08004e24 <_isatty_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4d06      	ldr	r5, [pc, #24]	@ (8004e40 <_isatty_r+0x1c>)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	f7fb fff5 	bl	8000e1e <_isatty>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_isatty_r+0x1a>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_isatty_r+0x1a>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	200003c0 	.word	0x200003c0

08004e44 <_init>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr

08004e50 <_fini>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr
