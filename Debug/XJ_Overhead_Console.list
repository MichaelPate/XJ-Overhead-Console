
XJ_Overhead_Console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080050fc  080050fc  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005104  08005104  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005104  08005104  00006104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005108  08005108  00006108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800510c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000068  08005174  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000428  08005174  00007428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bf7  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e81  00000000  00000000  00017c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001ab10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  0001ba48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f19  00000000  00000000  0001c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016210  00000000  00000000  00036519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf04  00000000  00000000  0004c729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e962d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004540  00000000  00000000  000e9670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000edbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800502c 	.word	0x0800502c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800502c 	.word	0x0800502c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000584:	4a21      	ldr	r2, [pc, #132]	@ (800060c <MX_ADC1_Init+0x9c>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x98>)
 800058a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800058e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x98>)
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b2:	4a17      	ldr	r2, [pc, #92]	@ (8000610 <MX_ADC1_Init+0xa0>)
 80005b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005d2:	f000 feb1 	bl	8001338 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa98 	bl	8000b10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005e0:	2306      	movs	r3, #6
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_ADC1_Init+0x98>)
 80005f2:	f000 fee5 	bl	80013c0 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005fc:	f000 fa88 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000084 	.word	0x20000084
 800060c:	40012000 	.word	0x40012000
 8000610:	0f000001 	.word	0x0f000001

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	@ 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	@ (80006c4 <HAL_ADC_MspInit+0xb0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d141      	bne.n	80006ba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800063c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063e:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000644:	6453      	str	r3, [r2, #68]	@ 0x44
 8000646:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800064a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <HAL_ADC_MspInit+0xb4>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <HAL_ADC_MspInit+0xb8>)
 800069e:	f001 fd2f 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SystemVoltage_Pin|AnalogIn2_Pin;
 80006a2:	2330      	movs	r3, #48	@ 0x30
 80006a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a6:	2303      	movs	r3, #3
 80006a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <HAL_ADC_MspInit+0xbc>)
 80006b6:	f001 fd23 	bl	8002100 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020000 	.word	0x40020000
 80006d0:	40020800 	.word	0x40020800

080006d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DMA_Init+0x3c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f001 f959 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f001 f972 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b52      	ldr	r3, [pc, #328]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a51      	ldr	r2, [pc, #324]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b4f      	ldr	r3, [pc, #316]	@ (8000878 <MX_GPIO_Init+0x164>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x164>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a4a      	ldr	r2, [pc, #296]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b48      	ldr	r3, [pc, #288]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b44      	ldr	r3, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <MX_GPIO_Init+0x164>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b41      	ldr	r3, [pc, #260]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b3d      	ldr	r3, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a3c      	ldr	r2, [pc, #240]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <MX_GPIO_Init+0x164>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a35      	ldr	r2, [pc, #212]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <MX_GPIO_Init+0x164>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80007bc:	482f      	ldr	r0, [pc, #188]	@ (800087c <MX_GPIO_Init+0x168>)
 80007be:	f001 fe23 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Piezo_GPIO_Port, Piezo_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2110      	movs	r1, #16
 80007c6:	482e      	ldr	r0, [pc, #184]	@ (8000880 <MX_GPIO_Init+0x16c>)
 80007c8:	f001 fe1e 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_GPIO_Init+0x170>)
 80007e4:	f001 fc8c 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|LED2_Pin|LED1_Pin;
 80007e8:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	481e      	ldr	r0, [pc, #120]	@ (800087c <MX_GPIO_Init+0x168>)
 8000802:	f001 fc7d 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button5_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button5_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4818      	ldr	r0, [pc, #96]	@ (800087c <MX_GPIO_Init+0x168>)
 800081c:	f001 fc70 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Button4_Pin|Button3_Pin|Button2_Pin;
 8000820:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4813      	ldr	r0, [pc, #76]	@ (8000884 <MX_GPIO_Init+0x170>)
 8000836:	f001 fc63 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 800083a:	2304      	movs	r3, #4
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_GPIO_Init+0x174>)
 800084e:	f001 fc57 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Piezo_Pin;
 8000852:	2310      	movs	r3, #16
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Piezo_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_GPIO_Init+0x16c>)
 800086a:	f001 fc49 	bl	8002100 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00

0800088c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	@ (80008e0 <MX_I2C1_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_I2C1_Init+0x50>)
 8000898:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_I2C1_Init+0x58>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_I2C1_Init+0x50>)
 80008ca:	f001 fdb7 	bl	800243c <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 f91c 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000cc 	.word	0x200000cc
 80008e0:	40005400 	.word	0x40005400
 80008e4:	000186a0 	.word	0x000186a0

080008e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a19      	ldr	r2, [pc, #100]	@ (800096c <HAL_I2C_MspInit+0x84>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d12b      	bne.n	8000962 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000926:	23c0      	movs	r3, #192	@ 0xc0
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000936:	2304      	movs	r3, #4
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	@ (8000974 <HAL_I2C_MspInit+0x8c>)
 8000942:	f001 fbdd 	bl	8002100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_I2C_MspInit+0x88>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40005400 	.word	0x40005400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000980:	1d39      	adds	r1, r7, #4
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	2201      	movs	r2, #1
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <__io_putchar+0x20>)
 800098a:	f002 fe00 	bl	800358e <HAL_UART_Transmit>
  return ch;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200001e8 	.word	0x200001e8

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	@ 0x38
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fc57 	bl	8001254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f833 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff feb3 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ae:	f7ff fe91 	bl	80006d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009b2:	f000 faed 	bl	8000f90 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80009b6:	f7ff fddb 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009ba:	f7ff ff67 	bl	800088c <MX_I2C1_Init>
  MX_RTC_Init();
 80009be:	f000 f8b3 	bl	8000b28 <MX_RTC_Init>
  MX_SPI2_Init();
 80009c2:	f000 f903 	bl	8000bcc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009c6:	f000 fab9 	bl	8000f3c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ca:	f000 fb0b 	bl	8000fe4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // Here is we will test RX through DMA and just cut off the rest of the code for now

  printf("Put something in the terminal.\r\n");
 80009ce:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <main+0x64>)
 80009d0:	f003 fcc8 	bl	8004364 <puts>
  // just define a buffer in the size of data we want to receive
  // then call a dma receive for that number of bytes
  // and wait for the finished flag to be set
  // the finish flag gets set inside the tx complete callback

  printf("give me 4 bytes of data.\r\n");
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <main+0x68>)
 80009d6:	f003 fcc5 	bl	8004364 <puts>
  uint8_t buf[4] = {0};
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_UART_Receive_DMA(&huart2, buf, 4);
 80009de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009e2:	2204      	movs	r2, #4
 80009e4:	4619      	mov	r1, r3
 80009e6:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <main+0x6c>)
 80009e8:	f002 fe5c 	bl	80036a4 <HAL_UART_Receive_DMA>
  while (isDone == 0);
 80009ec:	bf00      	nop
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <main+0x70>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0fb      	beq.n	80009ee <main+0x52>
  isDone = 0;
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <main+0x70>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
  // we should now have the 4 bytes in buf


  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <main+0x60>
 8000a00:	08005044 	.word	0x08005044
 8000a04:	08005064 	.word	0x08005064
 8000a08:	200001e8 	.word	0x200001e8
 8000a0c:	20000120 	.word	0x20000120

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	@ 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	@ 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fd80 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae4 <SystemClock_Config+0xd4>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ae4 <SystemClock_Config+0xd4>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a44:	4b27      	ldr	r3, [pc, #156]	@ (8000ae4 <SystemClock_Config+0xd4>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <SystemClock_Config+0xd8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a5c:	4a22      	ldr	r2, [pc, #136]	@ (8000ae8 <SystemClock_Config+0xd8>)
 8000a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <SystemClock_Config+0xd8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a70:	230a      	movs	r3, #10
 8000a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	2301      	movs	r3, #1
 8000a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a80:	2302      	movs	r3, #2
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a8c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a90:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a96:	2307      	movs	r3, #7
 8000a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fe10 	bl	80026c4 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aaa:	f000 f831 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 f872 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ad6:	f000 f81b 	bl	8000b10 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	@ 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40007000 	.word	0x40007000

08000aec <HAL_UART_RxCpltCallback>:
/**
  * @brief UART 2 DMA RX complete callback
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	printf("Got data finished\r\n");
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <HAL_UART_RxCpltCallback+0x1c>)
 8000af6:	f003 fc35 	bl	8004364 <puts>
	isDone = 1;
 8000afa:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_UART_RxCpltCallback+0x20>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
    //HAL_UART_Transmit(&huart2, UART2_rxBuffer, RXBUFSIZE, 100);

    // This was commented out because we are currently using a circular DMA buffer
    // which runs continuously, so there is no need to restart the DMA RX process after one is completed
    //HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, RXBUFSIZE);
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08005080 	.word	0x08005080
 8000b0c:	20000120 	.word	0x20000120

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error encountered.");
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <Error_Handler+0x14>)
 8000b1a:	f003 fbbb 	bl	8004294 <iprintf>
	  while (1);
 8000b1e:	bf00      	nop
 8000b20:	e7fd      	b.n	8000b1e <Error_Handler+0xe>
 8000b22:	bf00      	nop
 8000b24:	08005094 	.word	0x08005094

08000b28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b2e:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <MX_RTC_Init+0x48>)
 8000b30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b3a:	227f      	movs	r2, #127	@ 0x7f
 8000b3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b40:	22ff      	movs	r2, #255	@ 0xff
 8000b42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_RTC_Init+0x44>)
 8000b58:	f002 fb3a 	bl	80031d0 <HAL_RTC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b62:	f7ff ffd5 	bl	8000b10 <Error_Handler>
  /* USER CODE BEGIN RTC_Init 2 */


  /* USER CODE END RTC_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000124 	.word	0x20000124
 8000b70:	40002800 	.word	0x40002800

08000b74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <HAL_RTC_MspInit+0x50>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d111      	bne.n	8000bba <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fa25 	bl	8002ff4 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000bb0:	f7ff ffae 	bl	8000b10 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <HAL_RTC_MspInit+0x54>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40002800 	.word	0x40002800
 8000bc8:	42470e3c 	.word	0x42470e3c

08000bcc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000bd2:	4a19      	ldr	r2, [pc, #100]	@ (8000c38 <MX_SPI2_Init+0x6c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000bd8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000be0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000be4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bfe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c1a:	220a      	movs	r2, #10
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_SPI2_Init+0x68>)
 8000c20:	f002 fbdc 	bl	80033dc <HAL_SPI_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000c2a:	f7ff ff71 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000144 	.word	0x20000144
 8000c38:	40003800 	.word	0x40003800

08000c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a28      	ldr	r2, [pc, #160]	@ (8000cfc <HAL_SPI_MspInit+0xc0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d14a      	bne.n	8000cf4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a26      	ldr	r2, [pc, #152]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <HAL_SPI_MspInit+0xc4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	@ (8000d04 <HAL_SPI_MspInit+0xc8>)
 8000cce:	f001 fa17 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <HAL_SPI_MspInit+0xcc>)
 8000cf0:	f001 fa06 	bl	8002100 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	@ 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40003800 	.word	0x40003800
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020400 	.word	0x40020400

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f000 fe26 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <NMI_Handler+0x4>

08000d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 faa1 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	@ (8000dcc <DMA1_Stream5_IRQHandler+0x10>)
 8000dc2:	f000 ff33 	bl	8001c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000278 	.word	0x20000278

08000dd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e00a      	b.n	8000df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de2:	f3af 8000 	nop.w
 8000de6:	4601      	mov	r1, r0
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	1c5a      	adds	r2, r3, #1
 8000dec:	60ba      	str	r2, [r7, #8]
 8000dee:	b2ca      	uxtb	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	697a      	ldr	r2, [r7, #20]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbf0      	blt.n	8000de2 <_read+0x12>
  }

  return len;
 8000e00:	687b      	ldr	r3, [r7, #4]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3718      	adds	r7, #24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	e009      	b.n	8000e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fda7 	bl	8000978 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dbf1      	blt.n	8000e1c <_write+0x12>
  }
  return len;
 8000e38:	687b      	ldr	r3, [r7, #4]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_close>:

int _close(int file)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_isatty>:

int _isatty(int file)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f003 fb70 	bl	80045c0 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20018000 	.word	0x20018000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	2000019c 	.word	0x2000019c
 8000f14:	20000428 	.word	0x20000428

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f002 fabb 	bl	80034ee <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f7ff fdc7 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001a0 	.word	0x200001a0
 8000f8c:	40011000 	.word	0x40011000

08000f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <MX_USART2_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f002 fa91 	bl	80034ee <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f7ff fd9d 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001e8 	.word	0x200001e8
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <MX_USART6_UART_Init+0x50>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_USART6_UART_Init+0x4c>)
 800101c:	f002 fa67 	bl	80034ee <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001026:	f7ff fd73 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000230 	.word	0x20000230
 8001034:	40011400 	.word	0x40011400

08001038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	@ 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a62      	ldr	r2, [pc, #392]	@ (80011e0 <HAL_UART_MspInit+0x1a8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12d      	bne.n	80010b6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	4b61      	ldr	r3, [pc, #388]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a60      	ldr	r2, [pc, #384]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b5e      	ldr	r3, [pc, #376]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	4b5a      	ldr	r3, [pc, #360]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a59      	ldr	r2, [pc, #356]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b57      	ldr	r3, [pc, #348]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001092:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a4:	2307      	movs	r3, #7
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	484e      	ldr	r0, [pc, #312]	@ (80011e8 <HAL_UART_MspInit+0x1b0>)
 80010b0:	f001 f826 	bl	8002100 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010b4:	e090      	b.n	80011d8 <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART2)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a4c      	ldr	r2, [pc, #304]	@ (80011ec <HAL_UART_MspInit+0x1b4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d15a      	bne.n	8001176 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	4b47      	ldr	r3, [pc, #284]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c8:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d0:	4b44      	ldr	r3, [pc, #272]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	4b40      	ldr	r3, [pc, #256]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	4a3f      	ldr	r2, [pc, #252]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ec:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010f8:	230c      	movs	r3, #12
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001108:	2307      	movs	r3, #7
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001110:	4619      	mov	r1, r3
 8001112:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <HAL_UART_MspInit+0x1b0>)
 8001114:	f000 fff4 	bl	8002100 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001118:	4b35      	ldr	r3, [pc, #212]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800111a:	4a36      	ldr	r2, [pc, #216]	@ (80011f4 <HAL_UART_MspInit+0x1bc>)
 800111c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800111e:	4b34      	ldr	r3, [pc, #208]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001120:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001124:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001126:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001132:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001134:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001138:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001158:	4825      	ldr	r0, [pc, #148]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800115a:	f000 fc61 	bl	8001a20 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001164:	f7ff fcd4 	bl	8000b10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a21      	ldr	r2, [pc, #132]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 800116c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800116e:	4a20      	ldr	r2, [pc, #128]	@ (80011f0 <HAL_UART_MspInit+0x1b8>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001174:	e030      	b.n	80011d8 <HAL_UART_MspInit+0x1a0>
  else if(uartHandle->Instance==USART6)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <HAL_UART_MspInit+0x1c0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d12b      	bne.n	80011d8 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	4b17      	ldr	r3, [pc, #92]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_UART_MspInit+0x1ac>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b8:	23c0      	movs	r3, #192	@ 0xc0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011c8:	2308      	movs	r3, #8
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	480a      	ldr	r0, [pc, #40]	@ (80011fc <HAL_UART_MspInit+0x1c4>)
 80011d4:	f000 ff94 	bl	8002100 <HAL_GPIO_Init>
}
 80011d8:	bf00      	nop
 80011da:	3738      	adds	r7, #56	@ 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40004400 	.word	0x40004400
 80011f0:	20000278 	.word	0x20000278
 80011f4:	40026088 	.word	0x40026088
 80011f8:	40011400 	.word	0x40011400
 80011fc:	40020800 	.word	0x40020800

08001200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001200:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001204:	f7ff fe88 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	@ (8001240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	@ (8001244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	@ (800124c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800122e:	f003 f9cd 	bl	80045cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001232:	f7ff fbb3 	bl	800099c <main>
  bx  lr    
 8001236:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001238:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001244:	0800510c 	.word	0x0800510c
  ldr r2, =_sbss
 8001248:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800124c:	20000428 	.word	0x20000428

08001250 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC_IRQHandler>
	...

08001254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_Init+0x40>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <HAL_Init+0x40>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001262:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_Init+0x40>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_Init+0x40>)
 800126a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	@ (8001294 <HAL_Init+0x40>)
 8001276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 fb8d 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	2000      	movs	r0, #0
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fd40 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023c00 	.word	0x40023c00

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fba5 	bl	8001a06 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 fb6d 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	@ (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008
 800131c:	200002d8 	.word	0x200002d8

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200002d8 	.word	0x200002d8

08001338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e033      	b.n	80013b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f95c 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800137e:	f023 0302 	bic.w	r3, r3, #2
 8001382:	f043 0202 	orr.w	r2, r3, #2
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f93a 	bl	8001604 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	f023 0303 	bic.w	r3, r3, #3
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a6:	e001      	b.n	80013ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d101      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1c>
 80013d8:	2302      	movs	r3, #2
 80013da:	e105      	b.n	80015e8 <HAL_ADC_ConfigChannel+0x228>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	d925      	bls.n	8001438 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68d9      	ldr	r1, [r3, #12]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	3b1e      	subs	r3, #30
 8001402:	2207      	movs	r2, #7
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43da      	mvns	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	400a      	ands	r2, r1
 8001410:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68d9      	ldr	r1, [r3, #12]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	4603      	mov	r3, r0
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4403      	add	r3, r0
 800142a:	3b1e      	subs	r3, #30
 800142c:	409a      	lsls	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	e022      	b.n	800147e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6919      	ldr	r1, [r3, #16]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	2207      	movs	r2, #7
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6919      	ldr	r1, [r3, #16]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	4603      	mov	r3, r0
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4403      	add	r3, r0
 8001474:	409a      	lsls	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b06      	cmp	r3, #6
 8001484:	d824      	bhi.n	80014d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	3b05      	subs	r3, #5
 8001498:	221f      	movs	r2, #31
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	400a      	ands	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b05      	subs	r3, #5
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ce:	e04c      	b.n	800156a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d824      	bhi.n	8001522 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b23      	subs	r3, #35	@ 0x23
 80014ea:	221f      	movs	r2, #31
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43da      	mvns	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	4618      	mov	r0, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	3b23      	subs	r3, #35	@ 0x23
 8001514:	fa00 f203 	lsl.w	r2, r0, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001520:	e023      	b.n	800156a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b41      	subs	r3, #65	@ 0x41
 8001534:	221f      	movs	r2, #31
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	400a      	ands	r2, r1
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4618      	mov	r0, r3
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	3b41      	subs	r3, #65	@ 0x41
 800155e:	fa00 f203 	lsl.w	r2, r0, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_ADC_ConfigChannel+0x234>)
 800156c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <HAL_ADC_ConfigChannel+0x238>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d109      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1cc>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b12      	cmp	r3, #18
 800157e:	d105      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a19      	ldr	r2, [pc, #100]	@ (80015f8 <HAL_ADC_ConfigChannel+0x238>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d123      	bne.n	80015de <HAL_ADC_ConfigChannel+0x21e>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b10      	cmp	r3, #16
 800159c:	d003      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x1e6>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b11      	cmp	r3, #17
 80015a4:	d11b      	bne.n	80015de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b10      	cmp	r3, #16
 80015b8:	d111      	bne.n	80015de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_ADC_ConfigChannel+0x23c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a10      	ldr	r2, [pc, #64]	@ (8001600 <HAL_ADC_ConfigChannel+0x240>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9a      	lsrs	r2, r3, #18
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d0:	e002      	b.n	80015d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f9      	bne.n	80015d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40012300 	.word	0x40012300
 80015f8:	40012000 	.word	0x40012000
 80015fc:	20000000 	.word	0x20000000
 8001600:	431bde83 	.word	0x431bde83

08001604 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800160c:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <ADC_Init+0x1f0>)
 800160e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	431a      	orrs	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	021a      	lsls	r2, r3, #8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800165c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800167e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6899      	ldr	r1, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	4a58      	ldr	r2, [pc, #352]	@ (80017f8 <ADC_Init+0x1f4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d022      	beq.n	80016e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6899      	ldr	r1, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e00f      	b.n	8001702 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001700:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0202 	bic.w	r2, r2, #2
 8001710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e1b      	ldrb	r3, [r3, #24]
 800171c:	005a      	lsls	r2, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800173e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800174e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6859      	ldr	r1, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175a:	3b01      	subs	r3, #1
 800175c:	035a      	lsls	r2, r3, #13
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	e007      	b.n	8001778 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001776:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	3b01      	subs	r3, #1
 8001794:	051a      	lsls	r2, r3, #20
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80017ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017ba:	025a      	lsls	r2, r3, #9
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40012300 	.word	0x40012300
 80017f8:	0f000001 	.word	0x0f000001

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fc78 	bl	8001320 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e099      	b.n	8001b70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5c:	e00f      	b.n	8001a7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a5e:	f7ff fc5f 	bl	8001320 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d908      	bls.n	8001a7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e078      	b.n	8001b70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e8      	bne.n	8001a5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_DMA_Init+0x158>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d107      	bne.n	8001ae8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f023 0307 	bic.w	r3, r3, #7
 8001afe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d117      	bne.n	8001b42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00e      	beq.n	8001b42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 fa6f 	bl	8002008 <DMA_CheckFifoParam>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2240      	movs	r2, #64	@ 0x40
 8001b34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa26 	bl	8001f9c <DMA_CalcBaseAndBitshift>
 8001b50:	4603      	mov	r3, r0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	223f      	movs	r2, #63	@ 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	f010803f 	.word	0xf010803f

08001b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_DMA_Start_IT+0x26>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e040      	b.n	8001c24 <HAL_DMA_Start_IT+0xa8>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d12f      	bne.n	8001c16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 f9b8 	bl	8001f40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	223f      	movs	r2, #63	@ 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0216 	orr.w	r2, r2, #22
 8001bea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0208 	orr.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e005      	b.n	8001c22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c38:	4b8e      	ldr	r3, [pc, #568]	@ (8001e74 <HAL_DMA_IRQHandler+0x248>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a8e      	ldr	r2, [pc, #568]	@ (8001e78 <HAL_DMA_IRQHandler+0x24c>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c56:	2208      	movs	r2, #8
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d013      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	2208      	movs	r2, #8
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d012      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00b      	beq.n	8001cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cba:	2201      	movs	r2, #1
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f043 0202 	orr.w	r2, r3, #2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d08:	2210      	movs	r2, #16
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d043      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03c      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d26:	2210      	movs	r2, #16
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d018      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d024      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
 8001d5a:	e01f      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e016      	b.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0208 	bic.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	2220      	movs	r2, #32
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808f 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 8087 	beq.w	8001ecc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d136      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x1da>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1a:	223f      	movs	r2, #63	@ 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d07e      	beq.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	4798      	blx	r3
        }
        return;
 8001e42:	e079      	b.n	8001f38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01d      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10d      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d031      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	4798      	blx	r3
 8001e70:	e02c      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000
 8001e78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	4798      	blx	r3
 8001e8c:	e01e      	b.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10f      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0210 	bic.w	r2, r2, #16
 8001eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d032      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d022      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2205      	movs	r2, #5
 8001ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	3301      	adds	r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d307      	bcc.n	8001f14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f2      	bne.n	8001ef8 <HAL_DMA_IRQHandler+0x2cc>
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	4798      	blx	r3
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f38:	bf00      	nop
    }
  }
}
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b40      	cmp	r3, #64	@ 0x40
 8001f6c:	d108      	bne.n	8001f80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f7e:	e007      	b.n	8001f90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	60da      	str	r2, [r3, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	3b10      	subs	r3, #16
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <DMA_CalcBaseAndBitshift+0x64>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fb6:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <DMA_CalcBaseAndBitshift+0x68>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4413      	add	r3, r2
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d909      	bls.n	8001fde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fd2:	f023 0303 	bic.w	r3, r3, #3
 8001fd6:	1d1a      	adds	r2, r3, #4
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fdc:	e007      	b.n	8001fee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	aaaaaaab 	.word	0xaaaaaaab
 8002004:	080050c0 	.word	0x080050c0

08002008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d856      	bhi.n	80020d6 <DMA_CheckFifoParam+0xce>
 8002028:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <DMA_CheckFifoParam+0x28>)
 800202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202e:	bf00      	nop
 8002030:	08002041 	.word	0x08002041
 8002034:	08002053 	.word	0x08002053
 8002038:	08002041 	.word	0x08002041
 800203c:	080020d7 	.word	0x080020d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d046      	beq.n	80020da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002050:	e043      	b.n	80020da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002056:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800205a:	d140      	bne.n	80020de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002060:	e03d      	b.n	80020de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800206a:	d121      	bne.n	80020b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d837      	bhi.n	80020e2 <DMA_CheckFifoParam+0xda>
 8002072:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <DMA_CheckFifoParam+0x70>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	08002089 	.word	0x08002089
 800207c:	0800208f 	.word	0x0800208f
 8002080:	08002089 	.word	0x08002089
 8002084:	080020a1 	.word	0x080020a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      break;
 800208c:	e030      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d025      	beq.n	80020e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209e:	e022      	b.n	80020e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020a8:	d11f      	bne.n	80020ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020ae:	e01c      	b.n	80020ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d903      	bls.n	80020be <DMA_CheckFifoParam+0xb6>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d003      	beq.n	80020c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020bc:	e018      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
      break;
 80020c2:	e015      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
      break;
 80020d4:	e00b      	b.n	80020ee <DMA_CheckFifoParam+0xe6>
      break;
 80020d6:	bf00      	nop
 80020d8:	e00a      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e008      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e006      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e004      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e002      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020ea:	bf00      	nop
 80020ec:	e000      	b.n	80020f0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
    }
  } 
  
  return status; 
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e159      	b.n	80023d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 8148 	bne.w	80023ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	2b02      	cmp	r3, #2
 8002150:	d130      	bne.n	80021b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d123      	bne.n	8002244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a2 	beq.w	80023ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <HAL_GPIO_Init+0x2e8>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	4a56      	ldr	r2, [pc, #344]	@ (80023e8 <HAL_GPIO_Init+0x2e8>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002294:	6453      	str	r3, [r2, #68]	@ 0x44
 8002296:	4b54      	ldr	r3, [pc, #336]	@ (80023e8 <HAL_GPIO_Init+0x2e8>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a52      	ldr	r2, [pc, #328]	@ (80023ec <HAL_GPIO_Init+0x2ec>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a49      	ldr	r2, [pc, #292]	@ (80023f0 <HAL_GPIO_Init+0x2f0>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d019      	beq.n	8002302 <HAL_GPIO_Init+0x202>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a48      	ldr	r2, [pc, #288]	@ (80023f4 <HAL_GPIO_Init+0x2f4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d013      	beq.n	80022fe <HAL_GPIO_Init+0x1fe>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a47      	ldr	r2, [pc, #284]	@ (80023f8 <HAL_GPIO_Init+0x2f8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00d      	beq.n	80022fa <HAL_GPIO_Init+0x1fa>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a46      	ldr	r2, [pc, #280]	@ (80023fc <HAL_GPIO_Init+0x2fc>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <HAL_GPIO_Init+0x1f6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a45      	ldr	r2, [pc, #276]	@ (8002400 <HAL_GPIO_Init+0x300>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_GPIO_Init+0x1f2>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e008      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022f2:	2307      	movs	r3, #7
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022f6:	2303      	movs	r3, #3
 80022f8:	e004      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e002      	b.n	8002304 <HAL_GPIO_Init+0x204>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_GPIO_Init+0x204>
 8002302:	2300      	movs	r3, #0
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	0092      	lsls	r2, r2, #2
 800230c:	4093      	lsls	r3, r2
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002314:	4935      	ldr	r1, [pc, #212]	@ (80023ec <HAL_GPIO_Init+0x2ec>)
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <HAL_GPIO_Init+0x304>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	43db      	mvns	r3, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4013      	ands	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002346:	4a2f      	ldr	r2, [pc, #188]	@ (8002404 <HAL_GPIO_Init+0x304>)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800234c:	4b2d      	ldr	r3, [pc, #180]	@ (8002404 <HAL_GPIO_Init+0x304>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002370:	4a24      	ldr	r2, [pc, #144]	@ (8002404 <HAL_GPIO_Init+0x304>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002376:	4b23      	ldr	r3, [pc, #140]	@ (8002404 <HAL_GPIO_Init+0x304>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_GPIO_Init+0x304>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <HAL_GPIO_Init+0x304>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_GPIO_Init+0x304>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3301      	adds	r3, #1
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	f67f aea2 	bls.w	800211c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e12b      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fa40 	bl	80008e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2224      	movs	r2, #36	@ 0x24
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800248e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800249e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a0:	f000 fd80 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80024a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a81      	ldr	r2, [pc, #516]	@ (80026b0 <HAL_I2C_Init+0x274>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d807      	bhi.n	80024c0 <HAL_I2C_Init+0x84>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a80      	ldr	r2, [pc, #512]	@ (80026b4 <HAL_I2C_Init+0x278>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bf94      	ite	ls
 80024b8:	2301      	movls	r3, #1
 80024ba:	2300      	movhi	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e006      	b.n	80024ce <HAL_I2C_Init+0x92>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a7d      	ldr	r2, [pc, #500]	@ (80026b8 <HAL_I2C_Init+0x27c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0e7      	b.n	80026a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a78      	ldr	r2, [pc, #480]	@ (80026bc <HAL_I2C_Init+0x280>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0c9b      	lsrs	r3, r3, #18
 80024e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4a6a      	ldr	r2, [pc, #424]	@ (80026b0 <HAL_I2C_Init+0x274>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d802      	bhi.n	8002510 <HAL_I2C_Init+0xd4>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3301      	adds	r3, #1
 800250e:	e009      	b.n	8002524 <HAL_I2C_Init+0xe8>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002516:	fb02 f303 	mul.w	r3, r2, r3
 800251a:	4a69      	ldr	r2, [pc, #420]	@ (80026c0 <HAL_I2C_Init+0x284>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	3301      	adds	r3, #1
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	430b      	orrs	r3, r1
 800252a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002536:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	495c      	ldr	r1, [pc, #368]	@ (80026b0 <HAL_I2C_Init+0x274>)
 8002540:	428b      	cmp	r3, r1
 8002542:	d819      	bhi.n	8002578 <HAL_I2C_Init+0x13c>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	1e59      	subs	r1, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002552:	1c59      	adds	r1, r3, #1
 8002554:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002558:	400b      	ands	r3, r1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_I2C_Init+0x138>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1e59      	subs	r1, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fbb1 f3f3 	udiv	r3, r1, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	e051      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002574:	2304      	movs	r3, #4
 8002576:	e04f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <HAL_I2C_Init+0x168>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e58      	subs	r0, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	440b      	add	r3, r1
 800258e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002592:	3301      	adds	r3, #1
 8002594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf0c      	ite	eq
 800259c:	2301      	moveq	r3, #1
 800259e:	2300      	movne	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e012      	b.n	80025ca <HAL_I2C_Init+0x18e>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Init+0x196>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e022      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10e      	bne.n	80025f8 <HAL_I2C_Init+0x1bc>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e58      	subs	r0, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	440b      	add	r3, r1
 80025e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f6:	e00f      	b.n	8002618 <HAL_I2C_Init+0x1dc>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6809      	ldr	r1, [r1, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002646:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6911      	ldr	r1, [r2, #16]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68d2      	ldr	r2, [r2, #12]
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695a      	ldr	r2, [r3, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	000186a0 	.word	0x000186a0
 80026b4:	001e847f 	.word	0x001e847f
 80026b8:	003d08ff 	.word	0x003d08ff
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	10624dd3 	.word	0x10624dd3

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e267      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d075      	beq.n	80027ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d00c      	beq.n	8002708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d112      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4b82      	ldr	r3, [pc, #520]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002702:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002706:	d10b      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4b7e      	ldr	r3, [pc, #504]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05b      	beq.n	80027cc <HAL_RCC_OscConfig+0x108>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d157      	bne.n	80027cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e242      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x74>
 800272a:	4b76      	ldr	r3, [pc, #472]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a75      	ldr	r2, [pc, #468]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x98>
 8002742:	4b70      	ldr	r3, [pc, #448]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6f      	ldr	r2, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6c      	ldr	r2, [pc, #432]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 800275c:	4b69      	ldr	r3, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a68      	ldr	r2, [pc, #416]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a65      	ldr	r2, [pc, #404]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fdd0 	bl	8001320 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fdcc 	bl	8001320 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e207      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xc0>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fdbc 	bl	8001320 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fdb8 	bl	8001320 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1f3      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b51      	ldr	r3, [pc, #324]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0xe8>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b47      	ldr	r3, [pc, #284]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1c7      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4937      	ldr	r1, [pc, #220]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b34      	ldr	r3, [pc, #208]	@ (8002908 <HAL_RCC_OscConfig+0x244>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fd71 	bl	8001320 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fd6d 	bl	8001320 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1a8      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	4b2b      	ldr	r3, [pc, #172]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4925      	ldr	r1, [pc, #148]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_OscConfig+0x244>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fd50 	bl	8001320 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002884:	f7fe fd4c 	bl	8001320 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e187      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d036      	beq.n	800291c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_RCC_OscConfig+0x248>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fd30 	bl	8001320 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe fd2c 	bl	8001320 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e167      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_OscConfig+0x240>)
 80028d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x200>
 80028e2:	e01b      	b.n	800291c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_RCC_OscConfig+0x248>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fd19 	bl	8001320 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	e00e      	b.n	8002910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fd15 	bl	8001320 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d907      	bls.n	8002910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e150      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	42470000 	.word	0x42470000
 800290c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b88      	ldr	r3, [pc, #544]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ea      	bne.n	80028f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8097 	beq.w	8002a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b81      	ldr	r3, [pc, #516]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	4a7c      	ldr	r2, [pc, #496]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	@ 0x40
 800294a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b77      	ldr	r3, [pc, #476]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b74      	ldr	r3, [pc, #464]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a73      	ldr	r2, [pc, #460]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7fe fcd5 	bl	8001320 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fcd1 	bl	8001320 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e10c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_RCC_OscConfig+0x474>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x2ea>
 80029a0:	4b64      	ldr	r3, [pc, #400]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a4:	4a63      	ldr	r2, [pc, #396]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x30c>
 80029b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029d0:	4b58      	ldr	r3, [pc, #352]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a57      	ldr	r2, [pc, #348]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	@ 0x70
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e0:	4a54      	ldr	r2, [pc, #336]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fc96 	bl	8001320 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fc92 	bl	8001320 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0cb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ee      	beq.n	80029f8 <HAL_RCC_OscConfig+0x334>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fc80 	bl	8001320 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fc7c 	bl	8001320 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0b5      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b39      	ldr	r3, [pc, #228]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	4a38      	ldr	r2, [pc, #224]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a1 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a62:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d05c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d141      	bne.n	8002afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fc50 	bl	8001320 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fc4c 	bl	8001320 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e087      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	491b      	ldr	r1, [pc, #108]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fc25 	bl	8001320 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fc21 	bl	8001320 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e05c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aec:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x416>
 8002af8:	e054      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fc0e 	bl	8001320 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fc0a 	bl	8001320 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e045      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x444>
 8002b26:	e03d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e038      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x4ec>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d11a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0cc      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b68      	ldr	r3, [pc, #416]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d90c      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b63      	ldr	r3, [pc, #396]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b8      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b59      	ldr	r3, [pc, #356]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	494d      	ldr	r1, [pc, #308]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b47      	ldr	r3, [pc, #284]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b3f      	ldr	r3, [pc, #252]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3b      	ldr	r3, [pc, #236]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e067      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4934      	ldr	r1, [pc, #208]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fb3c 	bl	8001320 <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fb38 	bl	8001320 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e04f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d20c      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b20      	ldr	r3, [pc, #128]	@ (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4916      	ldr	r1, [pc, #88]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490e      	ldr	r1, [pc, #56]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3a:	f000 f821 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490a      	ldr	r1, [pc, #40]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fa9c 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	080050a8 	.word	0x080050a8
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b094      	sub	sp, #80	@ 0x50
 8002d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d90:	2300      	movs	r3, #0
 8002d92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d98:	4b79      	ldr	r3, [pc, #484]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f200 80e1 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x3a>
 8002db2:	e0db      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b73      	ldr	r3, [pc, #460]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002db8:	e0db      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b73      	ldr	r3, [pc, #460]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dbe:	e0d8      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dca:	4b6d      	ldr	r3, [pc, #436]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4651      	mov	r1, sl
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4651      	mov	r1, sl
 8002e34:	ebb2 0801 	subs.w	r8, r2, r1
 8002e38:	4659      	mov	r1, fp
 8002e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e52:	4690      	mov	r8, r2
 8002e54:	4699      	mov	r9, r3
 8002e56:	4623      	mov	r3, r4
 8002e58:	eb18 0303 	adds.w	r3, r8, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	eb49 0303 	adc.w	r3, r9, r3
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e72:	4629      	mov	r1, r5
 8002e74:	024b      	lsls	r3, r1, #9
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	024a      	lsls	r2, r1, #9
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e90:	f7fd f9f6 	bl	8000280 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b38      	ldr	r3, [pc, #224]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	0159      	lsls	r1, r3, #5
 8002ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eca:	0150      	lsls	r0, r2, #5
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	00eb      	lsls	r3, r5, #3
 8002f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f06:	00e2      	lsls	r2, r4, #3
 8002f08:	4614      	mov	r4, r2
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	18e3      	adds	r3, r4, r3
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	464b      	mov	r3, r9
 8002f14:	eb45 0303 	adc.w	r3, r5, r3
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	61fa      	str	r2, [r7, #28]
 8002f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f44:	f7fd f99c 	bl	8000280 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3750      	adds	r7, #80	@ 0x50
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	@ (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	@ (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	080050b8 	.word	0x080050b8

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	@ (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	080050b8 	.word	0x080050b8

08002ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003018:	2b00      	cmp	r3, #0
 800301a:	d035      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800301c:	4b67      	ldr	r3, [pc, #412]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003022:	f7fe f97d 	bl	8001320 <HAL_GetTick>
 8003026:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800302a:	f7fe f979 	bl	8001320 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0ba      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800303c:	4b60      	ldr	r3, [pc, #384]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	019a      	lsls	r2, r3, #6
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	071b      	lsls	r3, r3, #28
 8003054:	495a      	ldr	r1, [pc, #360]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800305c:	4b57      	ldr	r3, [pc, #348]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003062:	f7fe f95d 	bl	8001320 <HAL_GetTick>
 8003066:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800306a:	f7fe f959 	bl	8001320 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e09a      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800307c:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8083 	beq.w	800319c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b49      	ldr	r3, [pc, #292]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	4a48      	ldr	r2, [pc, #288]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	4b46      	ldr	r3, [pc, #280]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030b2:	4b44      	ldr	r3, [pc, #272]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a43      	ldr	r2, [pc, #268]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030be:	f7fe f92f 	bl	8001320 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fe f92b 	bl	8001320 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e06c      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030d8:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e4:	4b36      	ldr	r3, [pc, #216]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02f      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d028      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003102:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800310a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310c:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003112:	4b2d      	ldr	r3, [pc, #180]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003118:	4a29      	ldr	r2, [pc, #164]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800311e:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b01      	cmp	r3, #1
 8003128:	d114      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe f8f9 	bl	8001320 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe f8f5 	bl	8001320 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e034      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003148:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ee      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003160:	d10d      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003162:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003176:	4912      	ldr	r1, [pc, #72]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
 800317c:	e005      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4a0f      	ldr	r2, [pc, #60]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003184:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003188:	6093      	str	r3, [r2, #8]
 800318a:	4b0d      	ldr	r3, [pc, #52]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800318c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	490a      	ldr	r1, [pc, #40]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7c1a      	ldrb	r2, [r3, #16]
 80031ac:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ae:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	42470068 	.word	0x42470068
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000
 80031c8:	42470e40 	.word	0x42470e40
 80031cc:	424711e0 	.word	0x424711e0

080031d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e073      	b.n	80032ce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7f5b      	ldrb	r3, [r3, #29]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fcbc 	bl	8000b74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d055      	beq.n	80032bc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	22ca      	movs	r2, #202	@ 0xca
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2253      	movs	r2, #83	@ 0x53
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f87f 	bl	8003324 <RTC_EnterInitMode>
 8003226:	4603      	mov	r3, r0
 8003228:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d12c      	bne.n	800328a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800323e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003242:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	041a      	lsls	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f886 	bl	8003392 <RTC_ExitInitMode>
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d110      	bne.n	80032b2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	22ff      	movs	r2, #255	@ 0xff
 80032b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80032ba:	e001      	b.n	80032c0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d102      	bne.n	80032cc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <HAL_RTC_WaitForSynchro+0x48>)
 80032ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032ec:	f7fe f818 	bl	8001320 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032f2:	e009      	b.n	8003308 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f4:	f7fe f814 	bl	8001320 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003302:	d901      	bls.n	8003308 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e007      	b.n	8003318 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0ee      	beq.n	80032f4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	00013f5f 	.word	0x00013f5f

08003324 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d122      	bne.n	8003388 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003350:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003352:	f7fd ffe5 	bl	8001320 <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003358:	e00c      	b.n	8003374 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800335a:	f7fd ffe1 	bl	8001320 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003368:	d904      	bls.n	8003374 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2204      	movs	r2, #4
 800336e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <RTC_EnterInitMode+0x64>
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d1e8      	bne.n	800335a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff8b 	bl	80032d8 <HAL_RTC_WaitForSynchro>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2204      	movs	r2, #4
 80033cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e07b      	b.n	80034e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d108      	bne.n	8003408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033fe:	d009      	beq.n	8003414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
 8003406:	e005      	b.n	8003414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fc04 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800344a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003498:	ea42 0103 	orr.w	r1, r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0104 	and.w	r1, r3, #4
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	f003 0210 	and.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e042      	b.n	8003586 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7fd fd8f 	bl	8001038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2224      	movs	r2, #36	@ 0x24
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003530:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fb78 	bl	8003c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003546:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003556:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003566:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08a      	sub	sp, #40	@ 0x28
 8003592:	af02      	add	r7, sp, #8
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d175      	bne.n	800369a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_UART_Transmit+0x2c>
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06e      	b.n	800369c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	@ 0x21
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035cc:	f7fd fea8 	bl	8001320 <HAL_GetTick>
 80035d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	88fa      	ldrh	r2, [r7, #6]
 80035dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e6:	d108      	bne.n	80035fa <HAL_UART_Transmit+0x6c>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	61bb      	str	r3, [r7, #24]
 80035f8:	e003      	b.n	8003602 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003602:	e02e      	b.n	8003662 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	2180      	movs	r1, #128	@ 0x80
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f98b 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e03a      	b.n	800369c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800363a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	3302      	adds	r3, #2
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e007      	b.n	8003654 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3301      	adds	r3, #1
 8003652:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1cb      	bne.n	8003604 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	2140      	movs	r1, #64	@ 0x40
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f957 	bl	800392a <UART_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e006      	b.n	800369c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	e000      	b.n	800369c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d112      	bne.n	80036e4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <HAL_UART_Receive_DMA+0x26>
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00b      	b.n	80036e6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f97e 	bl	80039dc <UART_Start_Receive_DMA>
 80036e0:	4603      	mov	r3, r0
 80036e2:	e000      	b.n	80036e6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b09c      	sub	sp, #112	@ 0x70
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d172      	bne.n	8003830 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800374a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800374c:	2200      	movs	r2, #0
 800374e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003750:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003762:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003768:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003770:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003772:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800377e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	667b      	str	r3, [r7, #100]	@ 0x64
 800379c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80037a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3314      	adds	r3, #20
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	e853 3f00 	ldrex	r3, [r3]
 80037c6:	623b      	str	r3, [r7, #32]
   return(result);
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80037d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3314      	adds	r3, #20
 80037d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80037d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e0:	e841 2300 	strex	r3, r2, [r1]
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e5      	bne.n	80037b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d119      	bne.n	8003830 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	60fb      	str	r3, [r7, #12]
   return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800381c:	61fa      	str	r2, [r7, #28]
 800381e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	617b      	str	r3, [r7, #20]
   return(result);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003832:	2200      	movs	r2, #0
 8003834:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	2b01      	cmp	r3, #1
 800383c:	d106      	bne.n	800384c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800383e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003840:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003842:	4619      	mov	r1, r3
 8003844:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003846:	f7ff ff66 	bl	8003716 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800384a:	e002      	b.n	8003852 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800384c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800384e:	f7fd f94d 	bl	8000aec <HAL_UART_RxCpltCallback>
}
 8003852:	bf00      	nop
 8003854:	3770      	adds	r7, #112	@ 0x70
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003866:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	2b01      	cmp	r3, #1
 8003874:	d108      	bne.n	8003888 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	b29b      	uxth	r3, r3
 800387e:	4619      	mov	r1, r3
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff ff48 	bl	8003716 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003886:	e002      	b.n	800388e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff30 	bl	80036ee <HAL_UART_RxHalfCpltCallback>
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b2:	2b80      	cmp	r3, #128	@ 0x80
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b21      	cmp	r3, #33	@ 0x21
 80038c8:	d108      	bne.n	80038dc <UART_DMAError+0x46>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80038d6:	68b8      	ldr	r0, [r7, #8]
 80038d8:	f000 f91a 	bl	8003b10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b22      	cmp	r3, #34	@ 0x22
 80038fc:	d108      	bne.n	8003910 <UART_DMAError+0x7a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800390a:	68b8      	ldr	r0, [r7, #8]
 800390c:	f000 f928 	bl	8003b60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800391c:	68b8      	ldr	r0, [r7, #8]
 800391e:	f7ff fef0 	bl	8003702 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393a:	e03b      	b.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d037      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003944:	f7fd fcec 	bl	8001320 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	429a      	cmp	r2, r3
 8003952:	d302      	bcc.n	800395a <UART_WaitOnFlagUntilTimeout+0x30>
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e03a      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d023      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b80      	cmp	r3, #128	@ 0x80
 8003970:	d020      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b40      	cmp	r3, #64	@ 0x40
 8003976:	d01d      	beq.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b08      	cmp	r3, #8
 8003984:	d116      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003986:	2300      	movs	r3, #0
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f8df 	bl	8003b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2208      	movs	r2, #8
 80039a6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e00f      	b.n	80039d4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d0b4      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b098      	sub	sp, #96	@ 0x60
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2222      	movs	r2, #34	@ 0x22
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a08:	4a3e      	ldr	r2, [pc, #248]	@ (8003b04 <UART_Start_Receive_DMA+0x128>)
 8003a0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	4a3d      	ldr	r2, [pc, #244]	@ (8003b08 <UART_Start_Receive_DMA+0x12c>)
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	4a3c      	ldr	r2, [pc, #240]	@ (8003b0c <UART_Start_Receive_DMA+0x130>)
 8003a1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	2200      	movs	r2, #0
 8003a22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	f7fe f89e 	bl	8001b7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	613b      	str	r3, [r7, #16]
 8003a54:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d019      	beq.n	8003a92 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a7e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ab2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3314      	adds	r3, #20
 8003ae4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ae6:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6a39      	ldr	r1, [r7, #32]
 8003aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e5      	bne.n	8003ac6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3760      	adds	r7, #96	@ 0x60
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	0800372f 	.word	0x0800372f
 8003b08:	0800385b 	.word	0x0800385b
 8003b0c:	08003897 	.word	0x08003897

08003b10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b089      	sub	sp, #36	@ 0x24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	e853 3f00 	ldrex	r3, [r3]
 8003b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	61ba      	str	r2, [r7, #24]
 8003b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6979      	ldr	r1, [r7, #20]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	613b      	str	r3, [r7, #16]
   return(result);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e5      	bne.n	8003b18 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003b54:	bf00      	nop
 8003b56:	3724      	adds	r7, #36	@ 0x24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b095      	sub	sp, #84	@ 0x54
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	330c      	adds	r3, #12
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b72:	e853 3f00 	ldrex	r3, [r3]
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b88:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e5      	bne.n	8003b68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3314      	adds	r3, #20
 8003bba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d119      	bne.n	8003c0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f023 0310 	bic.w	r3, r3, #16
 8003bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf8:	61ba      	str	r2, [r7, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6979      	ldr	r1, [r7, #20]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	613b      	str	r3, [r7, #16]
   return(result);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c1a:	bf00      	nop
 8003c1c:	3754      	adds	r7, #84	@ 0x54
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c2c:	b0c0      	sub	sp, #256	@ 0x100
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c44:	68d9      	ldr	r1, [r3, #12]
 8003c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	ea40 0301 	orr.w	r3, r0, r1
 8003c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c80:	f021 010c 	bic.w	r1, r1, #12
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca2:	6999      	ldr	r1, [r3, #24]
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	ea40 0301 	orr.w	r3, r0, r1
 8003cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef4 <UART_SetConfig+0x2cc>)
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d005      	beq.n	8003cc8 <UART_SetConfig+0xa0>
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ef8 <UART_SetConfig+0x2d0>)
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d104      	bne.n	8003cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7ff f980 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8003ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cd0:	e003      	b.n	8003cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cd2:	f7ff f967 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8003cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce4:	f040 810c 	bne.w	8003f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	1891      	adds	r1, r2, r2
 8003d00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d02:	415b      	adcs	r3, r3
 8003d04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	eb12 0801 	adds.w	r8, r2, r1
 8003d10:	4629      	mov	r1, r5
 8003d12:	eb43 0901 	adc.w	r9, r3, r1
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2a:	4690      	mov	r8, r2
 8003d2c:	4699      	mov	r9, r3
 8003d2e:	4623      	mov	r3, r4
 8003d30:	eb18 0303 	adds.w	r3, r8, r3
 8003d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d38:	462b      	mov	r3, r5
 8003d3a:	eb49 0303 	adc.w	r3, r9, r3
 8003d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d56:	460b      	mov	r3, r1
 8003d58:	18db      	adds	r3, r3, r3
 8003d5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	eb42 0303 	adc.w	r3, r2, r3
 8003d62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d6c:	f7fc fa88 	bl	8000280 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b61      	ldr	r3, [pc, #388]	@ (8003efc <UART_SetConfig+0x2d4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011c      	lsls	r4, r3, #4
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003da0:	4641      	mov	r1, r8
 8003da2:	eb12 0a01 	adds.w	sl, r2, r1
 8003da6:	4649      	mov	r1, r9
 8003da8:	eb43 0b01 	adc.w	fp, r3, r1
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dc0:	4692      	mov	sl, r2
 8003dc2:	469b      	mov	fp, r3
 8003dc4:	4643      	mov	r3, r8
 8003dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dce:	464b      	mov	r3, r9
 8003dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003de4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dec:	460b      	mov	r3, r1
 8003dee:	18db      	adds	r3, r3, r3
 8003df0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df2:	4613      	mov	r3, r2
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e02:	f7fc fa3d 	bl	8000280 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <UART_SetConfig+0x2d4>)
 8003e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2264      	movs	r2, #100	@ 0x64
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	1acb      	subs	r3, r1, r3
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e22:	4b36      	ldr	r3, [pc, #216]	@ (8003efc <UART_SetConfig+0x2d4>)
 8003e24:	fba3 2302 	umull	r2, r3, r3, r2
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e30:	441c      	add	r4, r3
 8003e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e88:	464b      	mov	r3, r9
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	eb42 0303 	adc.w	r3, r2, r3
 8003e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	18db      	adds	r3, r3, r3
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eae:	4613      	mov	r3, r2
 8003eb0:	eb42 0303 	adc.w	r3, r2, r3
 8003eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ebe:	f7fc f9df 	bl	8000280 <__aeabi_uldivmod>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8003efc <UART_SetConfig+0x2d4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	@ 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	3332      	adds	r3, #50	@ 0x32
 8003eda:	4a08      	ldr	r2, [pc, #32]	@ (8003efc <UART_SetConfig+0x2d4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 0207 	and.w	r2, r3, #7
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4422      	add	r2, r4
 8003eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ef0:	e106      	b.n	8004100 <UART_SetConfig+0x4d8>
 8003ef2:	bf00      	nop
 8003ef4:	40011000 	.word	0x40011000
 8003ef8:	40011400 	.word	0x40011400
 8003efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f12:	4642      	mov	r2, r8
 8003f14:	464b      	mov	r3, r9
 8003f16:	1891      	adds	r1, r2, r2
 8003f18:	6239      	str	r1, [r7, #32]
 8003f1a:	415b      	adcs	r3, r3
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f22:	4641      	mov	r1, r8
 8003f24:	1854      	adds	r4, r2, r1
 8003f26:	4649      	mov	r1, r9
 8003f28:	eb43 0501 	adc.w	r5, r3, r1
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	00eb      	lsls	r3, r5, #3
 8003f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f3a:	00e2      	lsls	r2, r4, #3
 8003f3c:	4614      	mov	r4, r2
 8003f3e:	461d      	mov	r5, r3
 8003f40:	4643      	mov	r3, r8
 8003f42:	18e3      	adds	r3, r4, r3
 8003f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f48:	464b      	mov	r3, r9
 8003f4a:	eb45 0303 	adc.w	r3, r5, r3
 8003f4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f6e:	4629      	mov	r1, r5
 8003f70:	008b      	lsls	r3, r1, #2
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f78:	4621      	mov	r1, r4
 8003f7a:	008a      	lsls	r2, r1, #2
 8003f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f80:	f7fc f97e 	bl	8000280 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b60      	ldr	r3, [pc, #384]	@ (800410c <UART_SetConfig+0x4e4>)
 8003f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	011c      	lsls	r4, r3, #4
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	1891      	adds	r1, r2, r2
 8003faa:	61b9      	str	r1, [r7, #24]
 8003fac:	415b      	adcs	r3, r3
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	1851      	adds	r1, r2, r1
 8003fb8:	6139      	str	r1, [r7, #16]
 8003fba:	4649      	mov	r1, r9
 8003fbc:	414b      	adcs	r3, r1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fcc:	4659      	mov	r1, fp
 8003fce:	00cb      	lsls	r3, r1, #3
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	00ca      	lsls	r2, r1, #3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4642      	mov	r2, r8
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fe8:	464b      	mov	r3, r9
 8003fea:	460a      	mov	r2, r1
 8003fec:	eb42 0303 	adc.w	r3, r2, r3
 8003ff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ffe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800400c:	4649      	mov	r1, r9
 800400e:	008b      	lsls	r3, r1, #2
 8004010:	4641      	mov	r1, r8
 8004012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004016:	4641      	mov	r1, r8
 8004018:	008a      	lsls	r2, r1, #2
 800401a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800401e:	f7fc f92f 	bl	8000280 <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4611      	mov	r1, r2
 8004028:	4b38      	ldr	r3, [pc, #224]	@ (800410c <UART_SetConfig+0x4e4>)
 800402a:	fba3 2301 	umull	r2, r3, r3, r1
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	2264      	movs	r2, #100	@ 0x64
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	1acb      	subs	r3, r1, r3
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	3332      	adds	r3, #50	@ 0x32
 800403c:	4a33      	ldr	r2, [pc, #204]	@ (800410c <UART_SetConfig+0x4e4>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004048:	441c      	add	r4, r3
 800404a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404e:	2200      	movs	r2, #0
 8004050:	673b      	str	r3, [r7, #112]	@ 0x70
 8004052:	677a      	str	r2, [r7, #116]	@ 0x74
 8004054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	1891      	adds	r1, r2, r2
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	415b      	adcs	r3, r3
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004068:	4641      	mov	r1, r8
 800406a:	1851      	adds	r1, r2, r1
 800406c:	6039      	str	r1, [r7, #0]
 800406e:	4649      	mov	r1, r9
 8004070:	414b      	adcs	r3, r1
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004080:	4659      	mov	r1, fp
 8004082:	00cb      	lsls	r3, r1, #3
 8004084:	4651      	mov	r1, sl
 8004086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408a:	4651      	mov	r1, sl
 800408c:	00ca      	lsls	r2, r1, #3
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	4603      	mov	r3, r0
 8004094:	4642      	mov	r2, r8
 8004096:	189b      	adds	r3, r3, r2
 8004098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800409a:	464b      	mov	r3, r9
 800409c:	460a      	mov	r2, r1
 800409e:	eb42 0303 	adc.w	r3, r2, r3
 80040a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040bc:	4649      	mov	r1, r9
 80040be:	008b      	lsls	r3, r1, #2
 80040c0:	4641      	mov	r1, r8
 80040c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c6:	4641      	mov	r1, r8
 80040c8:	008a      	lsls	r2, r1, #2
 80040ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040ce:	f7fc f8d7 	bl	8000280 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4b0d      	ldr	r3, [pc, #52]	@ (800410c <UART_SetConfig+0x4e4>)
 80040d8:	fba3 1302 	umull	r1, r3, r3, r2
 80040dc:	095b      	lsrs	r3, r3, #5
 80040de:	2164      	movs	r1, #100	@ 0x64
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	3332      	adds	r3, #50	@ 0x32
 80040ea:	4a08      	ldr	r2, [pc, #32]	@ (800410c <UART_SetConfig+0x4e4>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	f003 020f 	and.w	r2, r3, #15
 80040f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4422      	add	r2, r4
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004106:	46bd      	mov	sp, r7
 8004108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800410c:	51eb851f 	.word	0x51eb851f

08004110 <std>:
 8004110:	2300      	movs	r3, #0
 8004112:	b510      	push	{r4, lr}
 8004114:	4604      	mov	r4, r0
 8004116:	e9c0 3300 	strd	r3, r3, [r0]
 800411a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800411e:	6083      	str	r3, [r0, #8]
 8004120:	8181      	strh	r1, [r0, #12]
 8004122:	6643      	str	r3, [r0, #100]	@ 0x64
 8004124:	81c2      	strh	r2, [r0, #14]
 8004126:	6183      	str	r3, [r0, #24]
 8004128:	4619      	mov	r1, r3
 800412a:	2208      	movs	r2, #8
 800412c:	305c      	adds	r0, #92	@ 0x5c
 800412e:	f000 f9f9 	bl	8004524 <memset>
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <std+0x58>)
 8004134:	6263      	str	r3, [r4, #36]	@ 0x24
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <std+0x5c>)
 8004138:	62a3      	str	r3, [r4, #40]	@ 0x28
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <std+0x60>)
 800413c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <std+0x64>)
 8004140:	6323      	str	r3, [r4, #48]	@ 0x30
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <std+0x68>)
 8004144:	6224      	str	r4, [r4, #32]
 8004146:	429c      	cmp	r4, r3
 8004148:	d006      	beq.n	8004158 <std+0x48>
 800414a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800414e:	4294      	cmp	r4, r2
 8004150:	d002      	beq.n	8004158 <std+0x48>
 8004152:	33d0      	adds	r3, #208	@ 0xd0
 8004154:	429c      	cmp	r4, r3
 8004156:	d105      	bne.n	8004164 <std+0x54>
 8004158:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f000 ba58 	b.w	8004614 <__retarget_lock_init_recursive>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	08004375 	.word	0x08004375
 800416c:	08004397 	.word	0x08004397
 8004170:	080043cf 	.word	0x080043cf
 8004174:	080043f3 	.word	0x080043f3
 8004178:	200002dc 	.word	0x200002dc

0800417c <stdio_exit_handler>:
 800417c:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <stdio_exit_handler+0xc>)
 800417e:	4903      	ldr	r1, [pc, #12]	@ (800418c <stdio_exit_handler+0x10>)
 8004180:	4803      	ldr	r0, [pc, #12]	@ (8004190 <stdio_exit_handler+0x14>)
 8004182:	f000 b869 	b.w	8004258 <_fwalk_sglue>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c
 800418c:	08004eb5 	.word	0x08004eb5
 8004190:	2000001c 	.word	0x2000001c

08004194 <cleanup_stdio>:
 8004194:	6841      	ldr	r1, [r0, #4]
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <cleanup_stdio+0x34>)
 8004198:	4299      	cmp	r1, r3
 800419a:	b510      	push	{r4, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	d001      	beq.n	80041a4 <cleanup_stdio+0x10>
 80041a0:	f000 fe88 	bl	8004eb4 <_fflush_r>
 80041a4:	68a1      	ldr	r1, [r4, #8]
 80041a6:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <cleanup_stdio+0x38>)
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d002      	beq.n	80041b2 <cleanup_stdio+0x1e>
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fe81 	bl	8004eb4 <_fflush_r>
 80041b2:	68e1      	ldr	r1, [r4, #12]
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <cleanup_stdio+0x3c>)
 80041b6:	4299      	cmp	r1, r3
 80041b8:	d004      	beq.n	80041c4 <cleanup_stdio+0x30>
 80041ba:	4620      	mov	r0, r4
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f000 be78 	b.w	8004eb4 <_fflush_r>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	200002dc 	.word	0x200002dc
 80041cc:	20000344 	.word	0x20000344
 80041d0:	200003ac 	.word	0x200003ac

080041d4 <global_stdio_init.part.0>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <global_stdio_init.part.0+0x30>)
 80041d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004208 <global_stdio_init.part.0+0x34>)
 80041da:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <global_stdio_init.part.0+0x38>)
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	4620      	mov	r0, r4
 80041e0:	2200      	movs	r2, #0
 80041e2:	2104      	movs	r1, #4
 80041e4:	f7ff ff94 	bl	8004110 <std>
 80041e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041ec:	2201      	movs	r2, #1
 80041ee:	2109      	movs	r1, #9
 80041f0:	f7ff ff8e 	bl	8004110 <std>
 80041f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041f8:	2202      	movs	r2, #2
 80041fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fe:	2112      	movs	r1, #18
 8004200:	f7ff bf86 	b.w	8004110 <std>
 8004204:	20000414 	.word	0x20000414
 8004208:	200002dc 	.word	0x200002dc
 800420c:	0800417d 	.word	0x0800417d

08004210 <__sfp_lock_acquire>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__sfp_lock_acquire+0x8>)
 8004212:	f000 ba00 	b.w	8004616 <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	2000041d 	.word	0x2000041d

0800421c <__sfp_lock_release>:
 800421c:	4801      	ldr	r0, [pc, #4]	@ (8004224 <__sfp_lock_release+0x8>)
 800421e:	f000 b9fb 	b.w	8004618 <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	2000041d 	.word	0x2000041d

08004228 <__sinit>:
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
 800422c:	f7ff fff0 	bl	8004210 <__sfp_lock_acquire>
 8004230:	6a23      	ldr	r3, [r4, #32]
 8004232:	b11b      	cbz	r3, 800423c <__sinit+0x14>
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f7ff bff0 	b.w	800421c <__sfp_lock_release>
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__sinit+0x28>)
 800423e:	6223      	str	r3, [r4, #32]
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <__sinit+0x2c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f5      	bne.n	8004234 <__sinit+0xc>
 8004248:	f7ff ffc4 	bl	80041d4 <global_stdio_init.part.0>
 800424c:	e7f2      	b.n	8004234 <__sinit+0xc>
 800424e:	bf00      	nop
 8004250:	08004195 	.word	0x08004195
 8004254:	20000414 	.word	0x20000414

08004258 <_fwalk_sglue>:
 8004258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800425c:	4607      	mov	r7, r0
 800425e:	4688      	mov	r8, r1
 8004260:	4614      	mov	r4, r2
 8004262:	2600      	movs	r6, #0
 8004264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004268:	f1b9 0901 	subs.w	r9, r9, #1
 800426c:	d505      	bpl.n	800427a <_fwalk_sglue+0x22>
 800426e:	6824      	ldr	r4, [r4, #0]
 8004270:	2c00      	cmp	r4, #0
 8004272:	d1f7      	bne.n	8004264 <_fwalk_sglue+0xc>
 8004274:	4630      	mov	r0, r6
 8004276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d907      	bls.n	8004290 <_fwalk_sglue+0x38>
 8004280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004284:	3301      	adds	r3, #1
 8004286:	d003      	beq.n	8004290 <_fwalk_sglue+0x38>
 8004288:	4629      	mov	r1, r5
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	4306      	orrs	r6, r0
 8004290:	3568      	adds	r5, #104	@ 0x68
 8004292:	e7e9      	b.n	8004268 <_fwalk_sglue+0x10>

08004294 <iprintf>:
 8004294:	b40f      	push	{r0, r1, r2, r3}
 8004296:	b507      	push	{r0, r1, r2, lr}
 8004298:	4906      	ldr	r1, [pc, #24]	@ (80042b4 <iprintf+0x20>)
 800429a:	ab04      	add	r3, sp, #16
 800429c:	6808      	ldr	r0, [r1, #0]
 800429e:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a2:	6881      	ldr	r1, [r0, #8]
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f000 fadb 	bl	8004860 <_vfiprintf_r>
 80042aa:	b003      	add	sp, #12
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b004      	add	sp, #16
 80042b2:	4770      	bx	lr
 80042b4:	20000018 	.word	0x20000018

080042b8 <_puts_r>:
 80042b8:	6a03      	ldr	r3, [r0, #32]
 80042ba:	b570      	push	{r4, r5, r6, lr}
 80042bc:	6884      	ldr	r4, [r0, #8]
 80042be:	4605      	mov	r5, r0
 80042c0:	460e      	mov	r6, r1
 80042c2:	b90b      	cbnz	r3, 80042c8 <_puts_r+0x10>
 80042c4:	f7ff ffb0 	bl	8004228 <__sinit>
 80042c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d405      	bmi.n	80042da <_puts_r+0x22>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	0598      	lsls	r0, r3, #22
 80042d2:	d402      	bmi.n	80042da <_puts_r+0x22>
 80042d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042d6:	f000 f99e 	bl	8004616 <__retarget_lock_acquire_recursive>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	0719      	lsls	r1, r3, #28
 80042de:	d502      	bpl.n	80042e6 <_puts_r+0x2e>
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d135      	bne.n	8004352 <_puts_r+0x9a>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f8c5 	bl	8004478 <__swsetup_r>
 80042ee:	b380      	cbz	r0, 8004352 <_puts_r+0x9a>
 80042f0:	f04f 35ff 	mov.w	r5, #4294967295
 80042f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042f6:	07da      	lsls	r2, r3, #31
 80042f8:	d405      	bmi.n	8004306 <_puts_r+0x4e>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	059b      	lsls	r3, r3, #22
 80042fe:	d402      	bmi.n	8004306 <_puts_r+0x4e>
 8004300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004302:	f000 f989 	bl	8004618 <__retarget_lock_release_recursive>
 8004306:	4628      	mov	r0, r5
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	2b00      	cmp	r3, #0
 800430c:	da04      	bge.n	8004318 <_puts_r+0x60>
 800430e:	69a2      	ldr	r2, [r4, #24]
 8004310:	429a      	cmp	r2, r3
 8004312:	dc17      	bgt.n	8004344 <_puts_r+0x8c>
 8004314:	290a      	cmp	r1, #10
 8004316:	d015      	beq.n	8004344 <_puts_r+0x8c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	6022      	str	r2, [r4, #0]
 800431e:	7019      	strb	r1, [r3, #0]
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004326:	3b01      	subs	r3, #1
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	2900      	cmp	r1, #0
 800432c:	d1ed      	bne.n	800430a <_puts_r+0x52>
 800432e:	2b00      	cmp	r3, #0
 8004330:	da11      	bge.n	8004356 <_puts_r+0x9e>
 8004332:	4622      	mov	r2, r4
 8004334:	210a      	movs	r1, #10
 8004336:	4628      	mov	r0, r5
 8004338:	f000 f85f 	bl	80043fa <__swbuf_r>
 800433c:	3001      	adds	r0, #1
 800433e:	d0d7      	beq.n	80042f0 <_puts_r+0x38>
 8004340:	250a      	movs	r5, #10
 8004342:	e7d7      	b.n	80042f4 <_puts_r+0x3c>
 8004344:	4622      	mov	r2, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f857 	bl	80043fa <__swbuf_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d1e7      	bne.n	8004320 <_puts_r+0x68>
 8004350:	e7ce      	b.n	80042f0 <_puts_r+0x38>
 8004352:	3e01      	subs	r6, #1
 8004354:	e7e4      	b.n	8004320 <_puts_r+0x68>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	6022      	str	r2, [r4, #0]
 800435c:	220a      	movs	r2, #10
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e7ee      	b.n	8004340 <_puts_r+0x88>
	...

08004364 <puts>:
 8004364:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <puts+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7ff bfa5 	b.w	80042b8 <_puts_r>
 800436e:	bf00      	nop
 8004370:	20000018 	.word	0x20000018

08004374 <__sread>:
 8004374:	b510      	push	{r4, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f8fc 	bl	8004578 <_read_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	bfab      	itete	ge
 8004384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004386:	89a3      	ldrhlt	r3, [r4, #12]
 8004388:	181b      	addge	r3, r3, r0
 800438a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800438e:	bfac      	ite	ge
 8004390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004392:	81a3      	strhlt	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__swrite>:
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	461f      	mov	r7, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	05db      	lsls	r3, r3, #23
 80043a0:	4605      	mov	r5, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4616      	mov	r6, r2
 80043a6:	d505      	bpl.n	80043b4 <__swrite+0x1e>
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	2302      	movs	r3, #2
 80043ae:	2200      	movs	r2, #0
 80043b0:	f000 f8d0 	bl	8004554 <_lseek_r>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	4628      	mov	r0, r5
 80043c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	f000 b8e7 	b.w	800459c <_write_r>

080043ce <__sseek>:
 80043ce:	b510      	push	{r4, lr}
 80043d0:	460c      	mov	r4, r1
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 f8bd 	bl	8004554 <_lseek_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	bf15      	itete	ne
 80043e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ea:	81a3      	strheq	r3, [r4, #12]
 80043ec:	bf18      	it	ne
 80043ee:	81a3      	strhne	r3, [r4, #12]
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <__sclose>:
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 b89d 	b.w	8004534 <_close_r>

080043fa <__swbuf_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	460e      	mov	r6, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	4605      	mov	r5, r0
 8004402:	b118      	cbz	r0, 800440c <__swbuf_r+0x12>
 8004404:	6a03      	ldr	r3, [r0, #32]
 8004406:	b90b      	cbnz	r3, 800440c <__swbuf_r+0x12>
 8004408:	f7ff ff0e 	bl	8004228 <__sinit>
 800440c:	69a3      	ldr	r3, [r4, #24]
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	071a      	lsls	r2, r3, #28
 8004414:	d501      	bpl.n	800441a <__swbuf_r+0x20>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	b943      	cbnz	r3, 800442c <__swbuf_r+0x32>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f82b 	bl	8004478 <__swsetup_r>
 8004422:	b118      	cbz	r0, 800442c <__swbuf_r+0x32>
 8004424:	f04f 37ff 	mov.w	r7, #4294967295
 8004428:	4638      	mov	r0, r7
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	1a98      	subs	r0, r3, r2
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	b2f6      	uxtb	r6, r6
 8004436:	4283      	cmp	r3, r0
 8004438:	4637      	mov	r7, r6
 800443a:	dc05      	bgt.n	8004448 <__swbuf_r+0x4e>
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	f000 fd38 	bl	8004eb4 <_fflush_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	d1ed      	bne.n	8004424 <__swbuf_r+0x2a>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	701e      	strb	r6, [r3, #0]
 8004456:	6962      	ldr	r2, [r4, #20]
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	429a      	cmp	r2, r3
 800445c:	d004      	beq.n	8004468 <__swbuf_r+0x6e>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d5e1      	bpl.n	8004428 <__swbuf_r+0x2e>
 8004464:	2e0a      	cmp	r6, #10
 8004466:	d1df      	bne.n	8004428 <__swbuf_r+0x2e>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f000 fd22 	bl	8004eb4 <_fflush_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	d0d9      	beq.n	8004428 <__swbuf_r+0x2e>
 8004474:	e7d6      	b.n	8004424 <__swbuf_r+0x2a>
	...

08004478 <__swsetup_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <__swsetup_r+0xa8>)
 800447c:	4605      	mov	r5, r0
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	460c      	mov	r4, r1
 8004482:	b118      	cbz	r0, 800448c <__swsetup_r+0x14>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <__swsetup_r+0x14>
 8004488:	f7ff fece 	bl	8004228 <__sinit>
 800448c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d422      	bmi.n	80044da <__swsetup_r+0x62>
 8004494:	06da      	lsls	r2, r3, #27
 8004496:	d407      	bmi.n	80044a8 <__swsetup_r+0x30>
 8004498:	2209      	movs	r2, #9
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	e033      	b.n	8004510 <__swsetup_r+0x98>
 80044a8:	0758      	lsls	r0, r3, #29
 80044aa:	d512      	bpl.n	80044d2 <__swsetup_r+0x5a>
 80044ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ae:	b141      	cbz	r1, 80044c2 <__swsetup_r+0x4a>
 80044b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044b4:	4299      	cmp	r1, r3
 80044b6:	d002      	beq.n	80044be <__swsetup_r+0x46>
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 f8af 	bl	800461c <_free_r>
 80044be:	2300      	movs	r3, #0
 80044c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f043 0308 	orr.w	r3, r3, #8
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	b94b      	cbnz	r3, 80044f2 <__swsetup_r+0x7a>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d003      	beq.n	80044f2 <__swsetup_r+0x7a>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 fd2f 	bl	8004f50 <__smakebuf_r>
 80044f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f6:	f013 0201 	ands.w	r2, r3, #1
 80044fa:	d00a      	beq.n	8004512 <__swsetup_r+0x9a>
 80044fc:	2200      	movs	r2, #0
 80044fe:	60a2      	str	r2, [r4, #8]
 8004500:	6962      	ldr	r2, [r4, #20]
 8004502:	4252      	negs	r2, r2
 8004504:	61a2      	str	r2, [r4, #24]
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	b942      	cbnz	r2, 800451c <__swsetup_r+0xa4>
 800450a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800450e:	d1c5      	bne.n	800449c <__swsetup_r+0x24>
 8004510:	bd38      	pop	{r3, r4, r5, pc}
 8004512:	0799      	lsls	r1, r3, #30
 8004514:	bf58      	it	pl
 8004516:	6962      	ldrpl	r2, [r4, #20]
 8004518:	60a2      	str	r2, [r4, #8]
 800451a:	e7f4      	b.n	8004506 <__swsetup_r+0x8e>
 800451c:	2000      	movs	r0, #0
 800451e:	e7f7      	b.n	8004510 <__swsetup_r+0x98>
 8004520:	20000018 	.word	0x20000018

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <_close_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d06      	ldr	r5, [pc, #24]	@ (8004550 <_close_r+0x1c>)
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	4608      	mov	r0, r1
 800453e:	602b      	str	r3, [r5, #0]
 8004540:	f7fc fc7f 	bl	8000e42 <_close>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d102      	bne.n	800454e <_close_r+0x1a>
 8004548:	682b      	ldr	r3, [r5, #0]
 800454a:	b103      	cbz	r3, 800454e <_close_r+0x1a>
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
 8004550:	20000418 	.word	0x20000418

08004554 <_lseek_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	4d07      	ldr	r5, [pc, #28]	@ (8004574 <_lseek_r+0x20>)
 8004558:	4604      	mov	r4, r0
 800455a:	4608      	mov	r0, r1
 800455c:	4611      	mov	r1, r2
 800455e:	2200      	movs	r2, #0
 8004560:	602a      	str	r2, [r5, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f7fc fc94 	bl	8000e90 <_lseek>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_lseek_r+0x1e>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_lseek_r+0x1e>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	20000418 	.word	0x20000418

08004578 <_read_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4d07      	ldr	r5, [pc, #28]	@ (8004598 <_read_r+0x20>)
 800457c:	4604      	mov	r4, r0
 800457e:	4608      	mov	r0, r1
 8004580:	4611      	mov	r1, r2
 8004582:	2200      	movs	r2, #0
 8004584:	602a      	str	r2, [r5, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f7fc fc22 	bl	8000dd0 <_read>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_read_r+0x1e>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_read_r+0x1e>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000418 	.word	0x20000418

0800459c <_write_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4d07      	ldr	r5, [pc, #28]	@ (80045bc <_write_r+0x20>)
 80045a0:	4604      	mov	r4, r0
 80045a2:	4608      	mov	r0, r1
 80045a4:	4611      	mov	r1, r2
 80045a6:	2200      	movs	r2, #0
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7fc fc2d 	bl	8000e0a <_write>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_write_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_write_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	20000418 	.word	0x20000418

080045c0 <__errno>:
 80045c0:	4b01      	ldr	r3, [pc, #4]	@ (80045c8 <__errno+0x8>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000018 	.word	0x20000018

080045cc <__libc_init_array>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004604 <__libc_init_array+0x38>)
 80045d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004608 <__libc_init_array+0x3c>)
 80045d2:	1b64      	subs	r4, r4, r5
 80045d4:	10a4      	asrs	r4, r4, #2
 80045d6:	2600      	movs	r6, #0
 80045d8:	42a6      	cmp	r6, r4
 80045da:	d109      	bne.n	80045f0 <__libc_init_array+0x24>
 80045dc:	4d0b      	ldr	r5, [pc, #44]	@ (800460c <__libc_init_array+0x40>)
 80045de:	4c0c      	ldr	r4, [pc, #48]	@ (8004610 <__libc_init_array+0x44>)
 80045e0:	f000 fd24 	bl	800502c <_init>
 80045e4:	1b64      	subs	r4, r4, r5
 80045e6:	10a4      	asrs	r4, r4, #2
 80045e8:	2600      	movs	r6, #0
 80045ea:	42a6      	cmp	r6, r4
 80045ec:	d105      	bne.n	80045fa <__libc_init_array+0x2e>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f4:	4798      	blx	r3
 80045f6:	3601      	adds	r6, #1
 80045f8:	e7ee      	b.n	80045d8 <__libc_init_array+0xc>
 80045fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fe:	4798      	blx	r3
 8004600:	3601      	adds	r6, #1
 8004602:	e7f2      	b.n	80045ea <__libc_init_array+0x1e>
 8004604:	08005104 	.word	0x08005104
 8004608:	08005104 	.word	0x08005104
 800460c:	08005104 	.word	0x08005104
 8004610:	08005108 	.word	0x08005108

08004614 <__retarget_lock_init_recursive>:
 8004614:	4770      	bx	lr

08004616 <__retarget_lock_acquire_recursive>:
 8004616:	4770      	bx	lr

08004618 <__retarget_lock_release_recursive>:
 8004618:	4770      	bx	lr
	...

0800461c <_free_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4605      	mov	r5, r0
 8004620:	2900      	cmp	r1, #0
 8004622:	d041      	beq.n	80046a8 <_free_r+0x8c>
 8004624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004628:	1f0c      	subs	r4, r1, #4
 800462a:	2b00      	cmp	r3, #0
 800462c:	bfb8      	it	lt
 800462e:	18e4      	addlt	r4, r4, r3
 8004630:	f000 f8e0 	bl	80047f4 <__malloc_lock>
 8004634:	4a1d      	ldr	r2, [pc, #116]	@ (80046ac <_free_r+0x90>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	b933      	cbnz	r3, 8004648 <_free_r+0x2c>
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	4628      	mov	r0, r5
 8004640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004644:	f000 b8dc 	b.w	8004800 <__malloc_unlock>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d908      	bls.n	800465e <_free_r+0x42>
 800464c:	6820      	ldr	r0, [r4, #0]
 800464e:	1821      	adds	r1, r4, r0
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1809      	addeq	r1, r1, r0
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	e7ed      	b.n	800463a <_free_r+0x1e>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x4c>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x42>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1850      	adds	r0, r2, r1
 800466c:	42a0      	cmp	r0, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x6c>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	4401      	add	r1, r0
 8004674:	1850      	adds	r0, r2, r1
 8004676:	4283      	cmp	r3, r0
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1e0      	bne.n	800463e <_free_r+0x22>
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	4408      	add	r0, r1
 8004684:	6010      	str	r0, [r2, #0]
 8004686:	e7da      	b.n	800463e <_free_r+0x22>
 8004688:	d902      	bls.n	8004690 <_free_r+0x74>
 800468a:	230c      	movs	r3, #12
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	e7d6      	b.n	800463e <_free_r+0x22>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	1821      	adds	r1, r4, r0
 8004694:	428b      	cmp	r3, r1
 8004696:	bf04      	itt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	6054      	str	r4, [r2, #4]
 80046a6:	e7ca      	b.n	800463e <_free_r+0x22>
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
 80046aa:	bf00      	nop
 80046ac:	20000424 	.word	0x20000424

080046b0 <sbrk_aligned>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4e0f      	ldr	r6, [pc, #60]	@ (80046f0 <sbrk_aligned+0x40>)
 80046b4:	460c      	mov	r4, r1
 80046b6:	6831      	ldr	r1, [r6, #0]
 80046b8:	4605      	mov	r5, r0
 80046ba:	b911      	cbnz	r1, 80046c2 <sbrk_aligned+0x12>
 80046bc:	f000 fca6 	bl	800500c <_sbrk_r>
 80046c0:	6030      	str	r0, [r6, #0]
 80046c2:	4621      	mov	r1, r4
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 fca1 	bl	800500c <_sbrk_r>
 80046ca:	1c43      	adds	r3, r0, #1
 80046cc:	d103      	bne.n	80046d6 <sbrk_aligned+0x26>
 80046ce:	f04f 34ff 	mov.w	r4, #4294967295
 80046d2:	4620      	mov	r0, r4
 80046d4:	bd70      	pop	{r4, r5, r6, pc}
 80046d6:	1cc4      	adds	r4, r0, #3
 80046d8:	f024 0403 	bic.w	r4, r4, #3
 80046dc:	42a0      	cmp	r0, r4
 80046de:	d0f8      	beq.n	80046d2 <sbrk_aligned+0x22>
 80046e0:	1a21      	subs	r1, r4, r0
 80046e2:	4628      	mov	r0, r5
 80046e4:	f000 fc92 	bl	800500c <_sbrk_r>
 80046e8:	3001      	adds	r0, #1
 80046ea:	d1f2      	bne.n	80046d2 <sbrk_aligned+0x22>
 80046ec:	e7ef      	b.n	80046ce <sbrk_aligned+0x1e>
 80046ee:	bf00      	nop
 80046f0:	20000420 	.word	0x20000420

080046f4 <_malloc_r>:
 80046f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f8:	1ccd      	adds	r5, r1, #3
 80046fa:	f025 0503 	bic.w	r5, r5, #3
 80046fe:	3508      	adds	r5, #8
 8004700:	2d0c      	cmp	r5, #12
 8004702:	bf38      	it	cc
 8004704:	250c      	movcc	r5, #12
 8004706:	2d00      	cmp	r5, #0
 8004708:	4606      	mov	r6, r0
 800470a:	db01      	blt.n	8004710 <_malloc_r+0x1c>
 800470c:	42a9      	cmp	r1, r5
 800470e:	d904      	bls.n	800471a <_malloc_r+0x26>
 8004710:	230c      	movs	r3, #12
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	2000      	movs	r0, #0
 8004716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800471a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047f0 <_malloc_r+0xfc>
 800471e:	f000 f869 	bl	80047f4 <__malloc_lock>
 8004722:	f8d8 3000 	ldr.w	r3, [r8]
 8004726:	461c      	mov	r4, r3
 8004728:	bb44      	cbnz	r4, 800477c <_malloc_r+0x88>
 800472a:	4629      	mov	r1, r5
 800472c:	4630      	mov	r0, r6
 800472e:	f7ff ffbf 	bl	80046b0 <sbrk_aligned>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	4604      	mov	r4, r0
 8004736:	d158      	bne.n	80047ea <_malloc_r+0xf6>
 8004738:	f8d8 4000 	ldr.w	r4, [r8]
 800473c:	4627      	mov	r7, r4
 800473e:	2f00      	cmp	r7, #0
 8004740:	d143      	bne.n	80047ca <_malloc_r+0xd6>
 8004742:	2c00      	cmp	r4, #0
 8004744:	d04b      	beq.n	80047de <_malloc_r+0xea>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	4639      	mov	r1, r7
 800474a:	4630      	mov	r0, r6
 800474c:	eb04 0903 	add.w	r9, r4, r3
 8004750:	f000 fc5c 	bl	800500c <_sbrk_r>
 8004754:	4581      	cmp	r9, r0
 8004756:	d142      	bne.n	80047de <_malloc_r+0xea>
 8004758:	6821      	ldr	r1, [r4, #0]
 800475a:	1a6d      	subs	r5, r5, r1
 800475c:	4629      	mov	r1, r5
 800475e:	4630      	mov	r0, r6
 8004760:	f7ff ffa6 	bl	80046b0 <sbrk_aligned>
 8004764:	3001      	adds	r0, #1
 8004766:	d03a      	beq.n	80047de <_malloc_r+0xea>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	442b      	add	r3, r5
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	f8d8 3000 	ldr.w	r3, [r8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	bb62      	cbnz	r2, 80047d0 <_malloc_r+0xdc>
 8004776:	f8c8 7000 	str.w	r7, [r8]
 800477a:	e00f      	b.n	800479c <_malloc_r+0xa8>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	d420      	bmi.n	80047c4 <_malloc_r+0xd0>
 8004782:	2a0b      	cmp	r2, #11
 8004784:	d917      	bls.n	80047b6 <_malloc_r+0xc2>
 8004786:	1961      	adds	r1, r4, r5
 8004788:	42a3      	cmp	r3, r4
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	bf18      	it	ne
 800478e:	6059      	strne	r1, [r3, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	bf08      	it	eq
 8004794:	f8c8 1000 	streq.w	r1, [r8]
 8004798:	5162      	str	r2, [r4, r5]
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	4630      	mov	r0, r6
 800479e:	f000 f82f 	bl	8004800 <__malloc_unlock>
 80047a2:	f104 000b 	add.w	r0, r4, #11
 80047a6:	1d23      	adds	r3, r4, #4
 80047a8:	f020 0007 	bic.w	r0, r0, #7
 80047ac:	1ac2      	subs	r2, r0, r3
 80047ae:	bf1c      	itt	ne
 80047b0:	1a1b      	subne	r3, r3, r0
 80047b2:	50a3      	strne	r3, [r4, r2]
 80047b4:	e7af      	b.n	8004716 <_malloc_r+0x22>
 80047b6:	6862      	ldr	r2, [r4, #4]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	bf0c      	ite	eq
 80047bc:	f8c8 2000 	streq.w	r2, [r8]
 80047c0:	605a      	strne	r2, [r3, #4]
 80047c2:	e7eb      	b.n	800479c <_malloc_r+0xa8>
 80047c4:	4623      	mov	r3, r4
 80047c6:	6864      	ldr	r4, [r4, #4]
 80047c8:	e7ae      	b.n	8004728 <_malloc_r+0x34>
 80047ca:	463c      	mov	r4, r7
 80047cc:	687f      	ldr	r7, [r7, #4]
 80047ce:	e7b6      	b.n	800473e <_malloc_r+0x4a>
 80047d0:	461a      	mov	r2, r3
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	42a3      	cmp	r3, r4
 80047d6:	d1fb      	bne.n	80047d0 <_malloc_r+0xdc>
 80047d8:	2300      	movs	r3, #0
 80047da:	6053      	str	r3, [r2, #4]
 80047dc:	e7de      	b.n	800479c <_malloc_r+0xa8>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	4630      	mov	r0, r6
 80047e4:	f000 f80c 	bl	8004800 <__malloc_unlock>
 80047e8:	e794      	b.n	8004714 <_malloc_r+0x20>
 80047ea:	6005      	str	r5, [r0, #0]
 80047ec:	e7d6      	b.n	800479c <_malloc_r+0xa8>
 80047ee:	bf00      	nop
 80047f0:	20000424 	.word	0x20000424

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__malloc_lock+0x8>)
 80047f6:	f7ff bf0e 	b.w	8004616 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	2000041c 	.word	0x2000041c

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	@ (8004808 <__malloc_unlock+0x8>)
 8004802:	f7ff bf09 	b.w	8004618 <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	2000041c 	.word	0x2000041c

0800480c <__sfputc_r>:
 800480c:	6893      	ldr	r3, [r2, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	b410      	push	{r4}
 8004814:	6093      	str	r3, [r2, #8]
 8004816:	da08      	bge.n	800482a <__sfputc_r+0x1e>
 8004818:	6994      	ldr	r4, [r2, #24]
 800481a:	42a3      	cmp	r3, r4
 800481c:	db01      	blt.n	8004822 <__sfputc_r+0x16>
 800481e:	290a      	cmp	r1, #10
 8004820:	d103      	bne.n	800482a <__sfputc_r+0x1e>
 8004822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004826:	f7ff bde8 	b.w	80043fa <__swbuf_r>
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	1c58      	adds	r0, r3, #1
 800482e:	6010      	str	r0, [r2, #0]
 8004830:	7019      	strb	r1, [r3, #0]
 8004832:	4608      	mov	r0, r1
 8004834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004838:	4770      	bx	lr

0800483a <__sfputs_r>:
 800483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483c:	4606      	mov	r6, r0
 800483e:	460f      	mov	r7, r1
 8004840:	4614      	mov	r4, r2
 8004842:	18d5      	adds	r5, r2, r3
 8004844:	42ac      	cmp	r4, r5
 8004846:	d101      	bne.n	800484c <__sfputs_r+0x12>
 8004848:	2000      	movs	r0, #0
 800484a:	e007      	b.n	800485c <__sfputs_r+0x22>
 800484c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004850:	463a      	mov	r2, r7
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff ffda 	bl	800480c <__sfputc_r>
 8004858:	1c43      	adds	r3, r0, #1
 800485a:	d1f3      	bne.n	8004844 <__sfputs_r+0xa>
 800485c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004860 <_vfiprintf_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	460d      	mov	r5, r1
 8004866:	b09d      	sub	sp, #116	@ 0x74
 8004868:	4614      	mov	r4, r2
 800486a:	4698      	mov	r8, r3
 800486c:	4606      	mov	r6, r0
 800486e:	b118      	cbz	r0, 8004878 <_vfiprintf_r+0x18>
 8004870:	6a03      	ldr	r3, [r0, #32]
 8004872:	b90b      	cbnz	r3, 8004878 <_vfiprintf_r+0x18>
 8004874:	f7ff fcd8 	bl	8004228 <__sinit>
 8004878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800487a:	07d9      	lsls	r1, r3, #31
 800487c:	d405      	bmi.n	800488a <_vfiprintf_r+0x2a>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	059a      	lsls	r2, r3, #22
 8004882:	d402      	bmi.n	800488a <_vfiprintf_r+0x2a>
 8004884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004886:	f7ff fec6 	bl	8004616 <__retarget_lock_acquire_recursive>
 800488a:	89ab      	ldrh	r3, [r5, #12]
 800488c:	071b      	lsls	r3, r3, #28
 800488e:	d501      	bpl.n	8004894 <_vfiprintf_r+0x34>
 8004890:	692b      	ldr	r3, [r5, #16]
 8004892:	b99b      	cbnz	r3, 80048bc <_vfiprintf_r+0x5c>
 8004894:	4629      	mov	r1, r5
 8004896:	4630      	mov	r0, r6
 8004898:	f7ff fdee 	bl	8004478 <__swsetup_r>
 800489c:	b170      	cbz	r0, 80048bc <_vfiprintf_r+0x5c>
 800489e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048a0:	07dc      	lsls	r4, r3, #31
 80048a2:	d504      	bpl.n	80048ae <_vfiprintf_r+0x4e>
 80048a4:	f04f 30ff 	mov.w	r0, #4294967295
 80048a8:	b01d      	add	sp, #116	@ 0x74
 80048aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	0598      	lsls	r0, r3, #22
 80048b2:	d4f7      	bmi.n	80048a4 <_vfiprintf_r+0x44>
 80048b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048b6:	f7ff feaf 	bl	8004618 <__retarget_lock_release_recursive>
 80048ba:	e7f3      	b.n	80048a4 <_vfiprintf_r+0x44>
 80048bc:	2300      	movs	r3, #0
 80048be:	9309      	str	r3, [sp, #36]	@ 0x24
 80048c0:	2320      	movs	r3, #32
 80048c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ca:	2330      	movs	r3, #48	@ 0x30
 80048cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a7c <_vfiprintf_r+0x21c>
 80048d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048d4:	f04f 0901 	mov.w	r9, #1
 80048d8:	4623      	mov	r3, r4
 80048da:	469a      	mov	sl, r3
 80048dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048e0:	b10a      	cbz	r2, 80048e6 <_vfiprintf_r+0x86>
 80048e2:	2a25      	cmp	r2, #37	@ 0x25
 80048e4:	d1f9      	bne.n	80048da <_vfiprintf_r+0x7a>
 80048e6:	ebba 0b04 	subs.w	fp, sl, r4
 80048ea:	d00b      	beq.n	8004904 <_vfiprintf_r+0xa4>
 80048ec:	465b      	mov	r3, fp
 80048ee:	4622      	mov	r2, r4
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f7ff ffa1 	bl	800483a <__sfputs_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	f000 80a7 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 80048fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004900:	445a      	add	r2, fp
 8004902:	9209      	str	r2, [sp, #36]	@ 0x24
 8004904:	f89a 3000 	ldrb.w	r3, [sl]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 809f 	beq.w	8004a4c <_vfiprintf_r+0x1ec>
 800490e:	2300      	movs	r3, #0
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004918:	f10a 0a01 	add.w	sl, sl, #1
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004924:	931a      	str	r3, [sp, #104]	@ 0x68
 8004926:	4654      	mov	r4, sl
 8004928:	2205      	movs	r2, #5
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492e:	4853      	ldr	r0, [pc, #332]	@ (8004a7c <_vfiprintf_r+0x21c>)
 8004930:	f7fb fc56 	bl	80001e0 <memchr>
 8004934:	9a04      	ldr	r2, [sp, #16]
 8004936:	b9d8      	cbnz	r0, 8004970 <_vfiprintf_r+0x110>
 8004938:	06d1      	lsls	r1, r2, #27
 800493a:	bf44      	itt	mi
 800493c:	2320      	movmi	r3, #32
 800493e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004942:	0713      	lsls	r3, r2, #28
 8004944:	bf44      	itt	mi
 8004946:	232b      	movmi	r3, #43	@ 0x2b
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494c:	f89a 3000 	ldrb.w	r3, [sl]
 8004950:	2b2a      	cmp	r3, #42	@ 0x2a
 8004952:	d015      	beq.n	8004980 <_vfiprintf_r+0x120>
 8004954:	9a07      	ldr	r2, [sp, #28]
 8004956:	4654      	mov	r4, sl
 8004958:	2000      	movs	r0, #0
 800495a:	f04f 0c0a 	mov.w	ip, #10
 800495e:	4621      	mov	r1, r4
 8004960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004964:	3b30      	subs	r3, #48	@ 0x30
 8004966:	2b09      	cmp	r3, #9
 8004968:	d94b      	bls.n	8004a02 <_vfiprintf_r+0x1a2>
 800496a:	b1b0      	cbz	r0, 800499a <_vfiprintf_r+0x13a>
 800496c:	9207      	str	r2, [sp, #28]
 800496e:	e014      	b.n	800499a <_vfiprintf_r+0x13a>
 8004970:	eba0 0308 	sub.w	r3, r0, r8
 8004974:	fa09 f303 	lsl.w	r3, r9, r3
 8004978:	4313      	orrs	r3, r2
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	46a2      	mov	sl, r4
 800497e:	e7d2      	b.n	8004926 <_vfiprintf_r+0xc6>
 8004980:	9b03      	ldr	r3, [sp, #12]
 8004982:	1d19      	adds	r1, r3, #4
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9103      	str	r1, [sp, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bfbb      	ittet	lt
 800498c:	425b      	neglt	r3, r3
 800498e:	f042 0202 	orrlt.w	r2, r2, #2
 8004992:	9307      	strge	r3, [sp, #28]
 8004994:	9307      	strlt	r3, [sp, #28]
 8004996:	bfb8      	it	lt
 8004998:	9204      	strlt	r2, [sp, #16]
 800499a:	7823      	ldrb	r3, [r4, #0]
 800499c:	2b2e      	cmp	r3, #46	@ 0x2e
 800499e:	d10a      	bne.n	80049b6 <_vfiprintf_r+0x156>
 80049a0:	7863      	ldrb	r3, [r4, #1]
 80049a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a4:	d132      	bne.n	8004a0c <_vfiprintf_r+0x1ac>
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	1d1a      	adds	r2, r3, #4
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	9203      	str	r2, [sp, #12]
 80049ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049b2:	3402      	adds	r4, #2
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a8c <_vfiprintf_r+0x22c>
 80049ba:	7821      	ldrb	r1, [r4, #0]
 80049bc:	2203      	movs	r2, #3
 80049be:	4650      	mov	r0, sl
 80049c0:	f7fb fc0e 	bl	80001e0 <memchr>
 80049c4:	b138      	cbz	r0, 80049d6 <_vfiprintf_r+0x176>
 80049c6:	9b04      	ldr	r3, [sp, #16]
 80049c8:	eba0 000a 	sub.w	r0, r0, sl
 80049cc:	2240      	movs	r2, #64	@ 0x40
 80049ce:	4082      	lsls	r2, r0
 80049d0:	4313      	orrs	r3, r2
 80049d2:	3401      	adds	r4, #1
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049da:	4829      	ldr	r0, [pc, #164]	@ (8004a80 <_vfiprintf_r+0x220>)
 80049dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049e0:	2206      	movs	r2, #6
 80049e2:	f7fb fbfd 	bl	80001e0 <memchr>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d03f      	beq.n	8004a6a <_vfiprintf_r+0x20a>
 80049ea:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <_vfiprintf_r+0x224>)
 80049ec:	bb1b      	cbnz	r3, 8004a36 <_vfiprintf_r+0x1d6>
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	3307      	adds	r3, #7
 80049f2:	f023 0307 	bic.w	r3, r3, #7
 80049f6:	3308      	adds	r3, #8
 80049f8:	9303      	str	r3, [sp, #12]
 80049fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fc:	443b      	add	r3, r7
 80049fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a00:	e76a      	b.n	80048d8 <_vfiprintf_r+0x78>
 8004a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a06:	460c      	mov	r4, r1
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7a8      	b.n	800495e <_vfiprintf_r+0xfe>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 0c0a 	mov.w	ip, #10
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a1e:	3a30      	subs	r2, #48	@ 0x30
 8004a20:	2a09      	cmp	r2, #9
 8004a22:	d903      	bls.n	8004a2c <_vfiprintf_r+0x1cc>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0c6      	beq.n	80049b6 <_vfiprintf_r+0x156>
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	e7c4      	b.n	80049b6 <_vfiprintf_r+0x156>
 8004a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a30:	4604      	mov	r4, r0
 8004a32:	2301      	movs	r3, #1
 8004a34:	e7f0      	b.n	8004a18 <_vfiprintf_r+0x1b8>
 8004a36:	ab03      	add	r3, sp, #12
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a3e:	a904      	add	r1, sp, #16
 8004a40:	4630      	mov	r0, r6
 8004a42:	f3af 8000 	nop.w
 8004a46:	4607      	mov	r7, r0
 8004a48:	1c78      	adds	r0, r7, #1
 8004a4a:	d1d6      	bne.n	80049fa <_vfiprintf_r+0x19a>
 8004a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4e:	07d9      	lsls	r1, r3, #31
 8004a50:	d405      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	059a      	lsls	r2, r3, #22
 8004a56:	d402      	bmi.n	8004a5e <_vfiprintf_r+0x1fe>
 8004a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a5a:	f7ff fddd 	bl	8004618 <__retarget_lock_release_recursive>
 8004a5e:	89ab      	ldrh	r3, [r5, #12]
 8004a60:	065b      	lsls	r3, r3, #25
 8004a62:	f53f af1f 	bmi.w	80048a4 <_vfiprintf_r+0x44>
 8004a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a68:	e71e      	b.n	80048a8 <_vfiprintf_r+0x48>
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b05      	ldr	r3, [pc, #20]	@ (8004a88 <_vfiprintf_r+0x228>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4630      	mov	r0, r6
 8004a76:	f000 f879 	bl	8004b6c <_printf_i>
 8004a7a:	e7e4      	b.n	8004a46 <_vfiprintf_r+0x1e6>
 8004a7c:	080050c8 	.word	0x080050c8
 8004a80:	080050d2 	.word	0x080050d2
 8004a84:	00000000 	.word	0x00000000
 8004a88:	0800483b 	.word	0x0800483b
 8004a8c:	080050ce 	.word	0x080050ce

08004a90 <_printf_common>:
 8004a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a94:	4616      	mov	r6, r2
 8004a96:	4698      	mov	r8, r3
 8004a98:	688a      	ldr	r2, [r1, #8]
 8004a9a:	690b      	ldr	r3, [r1, #16]
 8004a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	bfb8      	it	lt
 8004aa4:	4613      	movlt	r3, r2
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aac:	4607      	mov	r7, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_printf_common+0x26>
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	6033      	str	r3, [r6, #0]
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	0699      	lsls	r1, r3, #26
 8004aba:	bf42      	ittt	mi
 8004abc:	6833      	ldrmi	r3, [r6, #0]
 8004abe:	3302      	addmi	r3, #2
 8004ac0:	6033      	strmi	r3, [r6, #0]
 8004ac2:	6825      	ldr	r5, [r4, #0]
 8004ac4:	f015 0506 	ands.w	r5, r5, #6
 8004ac8:	d106      	bne.n	8004ad8 <_printf_common+0x48>
 8004aca:	f104 0a19 	add.w	sl, r4, #25
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ab      	cmp	r3, r5
 8004ad6:	dc26      	bgt.n	8004b26 <_printf_common+0x96>
 8004ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	3b00      	subs	r3, #0
 8004ae0:	bf18      	it	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	0692      	lsls	r2, r2, #26
 8004ae6:	d42b      	bmi.n	8004b40 <_printf_common+0xb0>
 8004ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004aec:	4641      	mov	r1, r8
 8004aee:	4638      	mov	r0, r7
 8004af0:	47c8      	blx	r9
 8004af2:	3001      	adds	r0, #1
 8004af4:	d01e      	beq.n	8004b34 <_printf_common+0xa4>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf02      	ittt	eq
 8004b02:	68e5      	ldreq	r5, [r4, #12]
 8004b04:	6833      	ldreq	r3, [r6, #0]
 8004b06:	1aed      	subeq	r5, r5, r3
 8004b08:	68a3      	ldr	r3, [r4, #8]
 8004b0a:	bf0c      	ite	eq
 8004b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b10:	2500      	movne	r5, #0
 8004b12:	4293      	cmp	r3, r2
 8004b14:	bfc4      	itt	gt
 8004b16:	1a9b      	subgt	r3, r3, r2
 8004b18:	18ed      	addgt	r5, r5, r3
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	341a      	adds	r4, #26
 8004b1e:	42b5      	cmp	r5, r6
 8004b20:	d11a      	bne.n	8004b58 <_printf_common+0xc8>
 8004b22:	2000      	movs	r0, #0
 8004b24:	e008      	b.n	8004b38 <_printf_common+0xa8>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	47c8      	blx	r9
 8004b30:	3001      	adds	r0, #1
 8004b32:	d103      	bne.n	8004b3c <_printf_common+0xac>
 8004b34:	f04f 30ff 	mov.w	r0, #4294967295
 8004b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3c:	3501      	adds	r5, #1
 8004b3e:	e7c6      	b.n	8004ace <_printf_common+0x3e>
 8004b40:	18e1      	adds	r1, r4, r3
 8004b42:	1c5a      	adds	r2, r3, #1
 8004b44:	2030      	movs	r0, #48	@ 0x30
 8004b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b4a:	4422      	add	r2, r4
 8004b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b54:	3302      	adds	r3, #2
 8004b56:	e7c7      	b.n	8004ae8 <_printf_common+0x58>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c8      	blx	r9
 8004b62:	3001      	adds	r0, #1
 8004b64:	d0e6      	beq.n	8004b34 <_printf_common+0xa4>
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7d9      	b.n	8004b1e <_printf_common+0x8e>
	...

08004b6c <_printf_i>:
 8004b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b70:	7e0f      	ldrb	r7, [r1, #24]
 8004b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b74:	2f78      	cmp	r7, #120	@ 0x78
 8004b76:	4691      	mov	r9, r2
 8004b78:	4680      	mov	r8, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	469a      	mov	sl, r3
 8004b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b82:	d807      	bhi.n	8004b94 <_printf_i+0x28>
 8004b84:	2f62      	cmp	r7, #98	@ 0x62
 8004b86:	d80a      	bhi.n	8004b9e <_printf_i+0x32>
 8004b88:	2f00      	cmp	r7, #0
 8004b8a:	f000 80d2 	beq.w	8004d32 <_printf_i+0x1c6>
 8004b8e:	2f58      	cmp	r7, #88	@ 0x58
 8004b90:	f000 80b9 	beq.w	8004d06 <_printf_i+0x19a>
 8004b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b9c:	e03a      	b.n	8004c14 <_printf_i+0xa8>
 8004b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ba2:	2b15      	cmp	r3, #21
 8004ba4:	d8f6      	bhi.n	8004b94 <_printf_i+0x28>
 8004ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8004bac <_printf_i+0x40>)
 8004ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c19 	.word	0x08004c19
 8004bb4:	08004b95 	.word	0x08004b95
 8004bb8:	08004b95 	.word	0x08004b95
 8004bbc:	08004b95 	.word	0x08004b95
 8004bc0:	08004b95 	.word	0x08004b95
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b95 	.word	0x08004b95
 8004bcc:	08004b95 	.word	0x08004b95
 8004bd0:	08004b95 	.word	0x08004b95
 8004bd4:	08004b95 	.word	0x08004b95
 8004bd8:	08004d19 	.word	0x08004d19
 8004bdc:	08004c43 	.word	0x08004c43
 8004be0:	08004cd3 	.word	0x08004cd3
 8004be4:	08004b95 	.word	0x08004b95
 8004be8:	08004b95 	.word	0x08004b95
 8004bec:	08004d3b 	.word	0x08004d3b
 8004bf0:	08004b95 	.word	0x08004b95
 8004bf4:	08004c43 	.word	0x08004c43
 8004bf8:	08004b95 	.word	0x08004b95
 8004bfc:	08004b95 	.word	0x08004b95
 8004c00:	08004cdb 	.word	0x08004cdb
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	1d1a      	adds	r2, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6032      	str	r2, [r6, #0]
 8004c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c14:	2301      	movs	r3, #1
 8004c16:	e09d      	b.n	8004d54 <_printf_i+0x1e8>
 8004c18:	6833      	ldr	r3, [r6, #0]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	6031      	str	r1, [r6, #0]
 8004c20:	0606      	lsls	r6, r0, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xbc>
 8004c24:	681d      	ldr	r5, [r3, #0]
 8004c26:	e003      	b.n	8004c30 <_printf_i+0xc4>
 8004c28:	0645      	lsls	r5, r0, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xb8>
 8004c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	da03      	bge.n	8004c3c <_printf_i+0xd0>
 8004c34:	232d      	movs	r3, #45	@ 0x2d
 8004c36:	426d      	negs	r5, r5
 8004c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3c:	4859      	ldr	r0, [pc, #356]	@ (8004da4 <_printf_i+0x238>)
 8004c3e:	230a      	movs	r3, #10
 8004c40:	e011      	b.n	8004c66 <_printf_i+0xfa>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	6833      	ldr	r3, [r6, #0]
 8004c46:	0608      	lsls	r0, r1, #24
 8004c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c4c:	d402      	bmi.n	8004c54 <_printf_i+0xe8>
 8004c4e:	0649      	lsls	r1, r1, #25
 8004c50:	bf48      	it	mi
 8004c52:	b2ad      	uxthmi	r5, r5
 8004c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c56:	4853      	ldr	r0, [pc, #332]	@ (8004da4 <_printf_i+0x238>)
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	bf14      	ite	ne
 8004c5c:	230a      	movne	r3, #10
 8004c5e:	2308      	moveq	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c66:	6866      	ldr	r6, [r4, #4]
 8004c68:	60a6      	str	r6, [r4, #8]
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	bfa2      	ittt	ge
 8004c6e:	6821      	ldrge	r1, [r4, #0]
 8004c70:	f021 0104 	bicge.w	r1, r1, #4
 8004c74:	6021      	strge	r1, [r4, #0]
 8004c76:	b90d      	cbnz	r5, 8004c7c <_printf_i+0x110>
 8004c78:	2e00      	cmp	r6, #0
 8004c7a:	d04b      	beq.n	8004d14 <_printf_i+0x1a8>
 8004c7c:	4616      	mov	r6, r2
 8004c7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c82:	fb03 5711 	mls	r7, r3, r1, r5
 8004c86:	5dc7      	ldrb	r7, [r0, r7]
 8004c88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c8c:	462f      	mov	r7, r5
 8004c8e:	42bb      	cmp	r3, r7
 8004c90:	460d      	mov	r5, r1
 8004c92:	d9f4      	bls.n	8004c7e <_printf_i+0x112>
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d10b      	bne.n	8004cb0 <_printf_i+0x144>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	07df      	lsls	r7, r3, #31
 8004c9c:	d508      	bpl.n	8004cb0 <_printf_i+0x144>
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	6861      	ldr	r1, [r4, #4]
 8004ca2:	4299      	cmp	r1, r3
 8004ca4:	bfde      	ittt	le
 8004ca6:	2330      	movle	r3, #48	@ 0x30
 8004ca8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004cac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004cb0:	1b92      	subs	r2, r2, r6
 8004cb2:	6122      	str	r2, [r4, #16]
 8004cb4:	f8cd a000 	str.w	sl, [sp]
 8004cb8:	464b      	mov	r3, r9
 8004cba:	aa03      	add	r2, sp, #12
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f7ff fee6 	bl	8004a90 <_printf_common>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d14a      	bne.n	8004d5e <_printf_i+0x1f2>
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	b004      	add	sp, #16
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	f043 0320 	orr.w	r3, r3, #32
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	4833      	ldr	r0, [pc, #204]	@ (8004da8 <_printf_i+0x23c>)
 8004cdc:	2778      	movs	r7, #120	@ 0x78
 8004cde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	6831      	ldr	r1, [r6, #0]
 8004ce6:	061f      	lsls	r7, r3, #24
 8004ce8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cec:	d402      	bmi.n	8004cf4 <_printf_i+0x188>
 8004cee:	065f      	lsls	r7, r3, #25
 8004cf0:	bf48      	it	mi
 8004cf2:	b2ad      	uxthmi	r5, r5
 8004cf4:	6031      	str	r1, [r6, #0]
 8004cf6:	07d9      	lsls	r1, r3, #31
 8004cf8:	bf44      	itt	mi
 8004cfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004cfe:	6023      	strmi	r3, [r4, #0]
 8004d00:	b11d      	cbz	r5, 8004d0a <_printf_i+0x19e>
 8004d02:	2310      	movs	r3, #16
 8004d04:	e7ac      	b.n	8004c60 <_printf_i+0xf4>
 8004d06:	4827      	ldr	r0, [pc, #156]	@ (8004da4 <_printf_i+0x238>)
 8004d08:	e7e9      	b.n	8004cde <_printf_i+0x172>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f023 0320 	bic.w	r3, r3, #32
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	e7f6      	b.n	8004d02 <_printf_i+0x196>
 8004d14:	4616      	mov	r6, r2
 8004d16:	e7bd      	b.n	8004c94 <_printf_i+0x128>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6825      	ldr	r5, [r4, #0]
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	1d18      	adds	r0, r3, #4
 8004d20:	6030      	str	r0, [r6, #0]
 8004d22:	062e      	lsls	r6, r5, #24
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0x1c0>
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0x1c6>
 8004d2c:	0668      	lsls	r0, r5, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0x1bc>
 8004d30:	8019      	strh	r1, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	4616      	mov	r6, r2
 8004d38:	e7bc      	b.n	8004cb4 <_printf_i+0x148>
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	6032      	str	r2, [r6, #0]
 8004d40:	681e      	ldr	r6, [r3, #0]
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	2100      	movs	r1, #0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7fb fa4a 	bl	80001e0 <memchr>
 8004d4c:	b108      	cbz	r0, 8004d52 <_printf_i+0x1e6>
 8004d4e:	1b80      	subs	r0, r0, r6
 8004d50:	6060      	str	r0, [r4, #4]
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	2300      	movs	r3, #0
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5c:	e7aa      	b.n	8004cb4 <_printf_i+0x148>
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	4632      	mov	r2, r6
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d0ad      	beq.n	8004cc8 <_printf_i+0x15c>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	079b      	lsls	r3, r3, #30
 8004d70:	d413      	bmi.n	8004d9a <_printf_i+0x22e>
 8004d72:	68e0      	ldr	r0, [r4, #12]
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	4298      	cmp	r0, r3
 8004d78:	bfb8      	it	lt
 8004d7a:	4618      	movlt	r0, r3
 8004d7c:	e7a6      	b.n	8004ccc <_printf_i+0x160>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4632      	mov	r2, r6
 8004d82:	4649      	mov	r1, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	47d0      	blx	sl
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d09d      	beq.n	8004cc8 <_printf_i+0x15c>
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	9903      	ldr	r1, [sp, #12]
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dcf2      	bgt.n	8004d7e <_printf_i+0x212>
 8004d98:	e7eb      	b.n	8004d72 <_printf_i+0x206>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	f104 0619 	add.w	r6, r4, #25
 8004da0:	e7f5      	b.n	8004d8e <_printf_i+0x222>
 8004da2:	bf00      	nop
 8004da4:	080050d9 	.word	0x080050d9
 8004da8:	080050ea 	.word	0x080050ea

08004dac <__sflush_r>:
 8004dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	0716      	lsls	r6, r2, #28
 8004db6:	4605      	mov	r5, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	d454      	bmi.n	8004e66 <__sflush_r+0xba>
 8004dbc:	684b      	ldr	r3, [r1, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dc02      	bgt.n	8004dc8 <__sflush_r+0x1c>
 8004dc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd48      	ble.n	8004e5a <__sflush_r+0xae>
 8004dc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d045      	beq.n	8004e5a <__sflush_r+0xae>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dd4:	682f      	ldr	r7, [r5, #0]
 8004dd6:	6a21      	ldr	r1, [r4, #32]
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	d030      	beq.n	8004e3e <__sflush_r+0x92>
 8004ddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	0759      	lsls	r1, r3, #29
 8004de2:	d505      	bpl.n	8004df0 <__sflush_r+0x44>
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dea:	b10b      	cbz	r3, 8004df0 <__sflush_r+0x44>
 8004dec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df4:	6a21      	ldr	r1, [r4, #32]
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	d106      	bne.n	8004e0e <__sflush_r+0x62>
 8004e00:	6829      	ldr	r1, [r5, #0]
 8004e02:	291d      	cmp	r1, #29
 8004e04:	d82b      	bhi.n	8004e5e <__sflush_r+0xb2>
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <__sflush_r+0x104>)
 8004e08:	410a      	asrs	r2, r1
 8004e0a:	07d6      	lsls	r6, r2, #31
 8004e0c:	d427      	bmi.n	8004e5e <__sflush_r+0xb2>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6062      	str	r2, [r4, #4]
 8004e12:	04d9      	lsls	r1, r3, #19
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	d504      	bpl.n	8004e24 <__sflush_r+0x78>
 8004e1a:	1c42      	adds	r2, r0, #1
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0x76>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	b903      	cbnz	r3, 8004e24 <__sflush_r+0x78>
 8004e22:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e26:	602f      	str	r7, [r5, #0]
 8004e28:	b1b9      	cbz	r1, 8004e5a <__sflush_r+0xae>
 8004e2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d002      	beq.n	8004e38 <__sflush_r+0x8c>
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7ff fbf2 	bl	800461c <_free_r>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e3c:	e00d      	b.n	8004e5a <__sflush_r+0xae>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	4602      	mov	r2, r0
 8004e46:	1c50      	adds	r0, r2, #1
 8004e48:	d1c9      	bne.n	8004dde <__sflush_r+0x32>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0c6      	beq.n	8004dde <__sflush_r+0x32>
 8004e50:	2b1d      	cmp	r3, #29
 8004e52:	d001      	beq.n	8004e58 <__sflush_r+0xac>
 8004e54:	2b16      	cmp	r3, #22
 8004e56:	d11e      	bne.n	8004e96 <__sflush_r+0xea>
 8004e58:	602f      	str	r7, [r5, #0]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e022      	b.n	8004ea4 <__sflush_r+0xf8>
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	e01b      	b.n	8004e9e <__sflush_r+0xf2>
 8004e66:	690f      	ldr	r7, [r1, #16]
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	d0f6      	beq.n	8004e5a <__sflush_r+0xae>
 8004e6c:	0793      	lsls	r3, r2, #30
 8004e6e:	680e      	ldr	r6, [r1, #0]
 8004e70:	bf08      	it	eq
 8004e72:	694b      	ldreq	r3, [r1, #20]
 8004e74:	600f      	str	r7, [r1, #0]
 8004e76:	bf18      	it	ne
 8004e78:	2300      	movne	r3, #0
 8004e7a:	eba6 0807 	sub.w	r8, r6, r7
 8004e7e:	608b      	str	r3, [r1, #8]
 8004e80:	f1b8 0f00 	cmp.w	r8, #0
 8004e84:	dde9      	ble.n	8004e5a <__sflush_r+0xae>
 8004e86:	6a21      	ldr	r1, [r4, #32]
 8004e88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	2800      	cmp	r0, #0
 8004e94:	dc08      	bgt.n	8004ea8 <__sflush_r+0xfc>
 8004e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4407      	add	r7, r0
 8004eaa:	eba8 0800 	sub.w	r8, r8, r0
 8004eae:	e7e7      	b.n	8004e80 <__sflush_r+0xd4>
 8004eb0:	dfbffffe 	.word	0xdfbffffe

08004eb4 <_fflush_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	690b      	ldr	r3, [r1, #16]
 8004eb8:	4605      	mov	r5, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b913      	cbnz	r3, 8004ec4 <_fflush_r+0x10>
 8004ebe:	2500      	movs	r5, #0
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	b118      	cbz	r0, 8004ece <_fflush_r+0x1a>
 8004ec6:	6a03      	ldr	r3, [r0, #32]
 8004ec8:	b90b      	cbnz	r3, 8004ece <_fflush_r+0x1a>
 8004eca:	f7ff f9ad 	bl	8004228 <__sinit>
 8004ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f3      	beq.n	8004ebe <_fflush_r+0xa>
 8004ed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ed8:	07d0      	lsls	r0, r2, #31
 8004eda:	d404      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004edc:	0599      	lsls	r1, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee2:	f7ff fb98 	bl	8004616 <__retarget_lock_acquire_recursive>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f7ff ff5f 	bl	8004dac <__sflush_r>
 8004eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ef0:	07da      	lsls	r2, r3, #31
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	d4e4      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	059b      	lsls	r3, r3, #22
 8004efa:	d4e1      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efe:	f7ff fb8b 	bl	8004618 <__retarget_lock_release_recursive>
 8004f02:	e7dd      	b.n	8004ec0 <_fflush_r+0xc>

08004f04 <__swhatbuf_r>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	460c      	mov	r4, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	b096      	sub	sp, #88	@ 0x58
 8004f10:	4615      	mov	r5, r2
 8004f12:	461e      	mov	r6, r3
 8004f14:	da0d      	bge.n	8004f32 <__swhatbuf_r+0x2e>
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f1c:	f04f 0100 	mov.w	r1, #0
 8004f20:	bf14      	ite	ne
 8004f22:	2340      	movne	r3, #64	@ 0x40
 8004f24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f28:	2000      	movs	r0, #0
 8004f2a:	6031      	str	r1, [r6, #0]
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	b016      	add	sp, #88	@ 0x58
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	466a      	mov	r2, sp
 8004f34:	f000 f848 	bl	8004fc8 <_fstat_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	dbec      	blt.n	8004f16 <__swhatbuf_r+0x12>
 8004f3c:	9901      	ldr	r1, [sp, #4]
 8004f3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f46:	4259      	negs	r1, r3
 8004f48:	4159      	adcs	r1, r3
 8004f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f4e:	e7eb      	b.n	8004f28 <__swhatbuf_r+0x24>

08004f50 <__smakebuf_r>:
 8004f50:	898b      	ldrh	r3, [r1, #12]
 8004f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f54:	079d      	lsls	r5, r3, #30
 8004f56:	4606      	mov	r6, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	d507      	bpl.n	8004f6c <__smakebuf_r+0x1c>
 8004f5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	2301      	movs	r3, #1
 8004f66:	6163      	str	r3, [r4, #20]
 8004f68:	b003      	add	sp, #12
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6c:	ab01      	add	r3, sp, #4
 8004f6e:	466a      	mov	r2, sp
 8004f70:	f7ff ffc8 	bl	8004f04 <__swhatbuf_r>
 8004f74:	9f00      	ldr	r7, [sp, #0]
 8004f76:	4605      	mov	r5, r0
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7ff fbba 	bl	80046f4 <_malloc_r>
 8004f80:	b948      	cbnz	r0, 8004f96 <__smakebuf_r+0x46>
 8004f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f86:	059a      	lsls	r2, r3, #22
 8004f88:	d4ee      	bmi.n	8004f68 <__smakebuf_r+0x18>
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	f043 0302 	orr.w	r3, r3, #2
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	e7e2      	b.n	8004f5c <__smakebuf_r+0xc>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	6020      	str	r0, [r4, #0]
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f9e:	81a3      	strh	r3, [r4, #12]
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fa6:	b15b      	cbz	r3, 8004fc0 <__smakebuf_r+0x70>
 8004fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f81d 	bl	8004fec <_isatty_r>
 8004fb2:	b128      	cbz	r0, 8004fc0 <__smakebuf_r+0x70>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	431d      	orrs	r5, r3
 8004fc4:	81a5      	strh	r5, [r4, #12]
 8004fc6:	e7cf      	b.n	8004f68 <__smakebuf_r+0x18>

08004fc8 <_fstat_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d07      	ldr	r5, [pc, #28]	@ (8004fe8 <_fstat_r+0x20>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	f7fb ff40 	bl	8000e5a <_fstat>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d102      	bne.n	8004fe4 <_fstat_r+0x1c>
 8004fde:	682b      	ldr	r3, [r5, #0]
 8004fe0:	b103      	cbz	r3, 8004fe4 <_fstat_r+0x1c>
 8004fe2:	6023      	str	r3, [r4, #0]
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000418 	.word	0x20000418

08004fec <_isatty_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	4d06      	ldr	r5, [pc, #24]	@ (8005008 <_isatty_r+0x1c>)
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	4608      	mov	r0, r1
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	f7fb ff3f 	bl	8000e7a <_isatty>
 8004ffc:	1c43      	adds	r3, r0, #1
 8004ffe:	d102      	bne.n	8005006 <_isatty_r+0x1a>
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	b103      	cbz	r3, 8005006 <_isatty_r+0x1a>
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	bd38      	pop	{r3, r4, r5, pc}
 8005008:	20000418 	.word	0x20000418

0800500c <_sbrk_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d06      	ldr	r5, [pc, #24]	@ (8005028 <_sbrk_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fb ff48 	bl	8000eac <_sbrk>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_sbrk_r+0x1a>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_sbrk_r+0x1a>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000418 	.word	0x20000418

0800502c <_init>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr

08005038 <_fini>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr
